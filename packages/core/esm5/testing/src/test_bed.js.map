{"version":3,"file":"test_bed.js","sourceRoot":"","sources":["../../../../../../packages/core/testing/src/test_bed.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ApplicationInitStatus, CompilerOptions, Component, Directive, Injector, NgModule, NgModuleFactory, NgModuleRef, NgZone, Optional, Pipe, PlatformRef, Provider, SchemaMetadata, SkipSelf, StaticProvider, Type, ɵAPP_ROOT as APP_ROOT, ɵDepFlags as DepFlags, ɵInjectableDef as InjectableDef, ɵNodeFlags as NodeFlags, ɵclearOverrides as clearOverrides, ɵgetComponentViewDefinitionFactory as getComponentViewDefinitionFactory, ɵgetInjectableDef as getInjectableDef, ɵivyEnabled as ivyEnabled, ɵoverrideComponentView as overrideComponentView, ɵoverrideProvider as overrideProvider, ɵstringify as stringify} from '@angular/core';\n\nimport {AsyncTestCompleter} from './async_test_completer';\nimport {ComponentFixture} from './component_fixture';\nimport {MetadataOverride} from './metadata_override';\nimport {TestBedRender3, _getTestBedRender3} from './r3_test_bed';\nimport {ComponentFixtureAutoDetect, ComponentFixtureNoNgZone, TestBedStatic, TestComponentRenderer, TestModuleMetadata} from './test_bed_common';\nimport {TestingCompiler, TestingCompilerFactory} from './test_compiler';\n\nconst UNDEFINED = new Object();\n\n\nlet _nextRootElementId = 0;\n\n/**\n * @publicApi\n */\nexport interface TestBed {\n  platform: PlatformRef;\n\n  ngModule: Type<any>|Type<any>[];\n\n  /**\n   * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n   * angular module. These are common to every test in the suite.\n   *\n   * This may only be called once, to set up the common providers for the current test\n   * suite on the current platform. If you absolutely need to change the providers,\n   * first use `resetTestEnvironment`.\n   *\n   * Test modules and platforms for individual platforms are available from\n   * '@angular/<platform_name>/testing'.\n   */\n  initTestEnvironment(\n      ngModule: Type<any>|Type<any>[], platform: PlatformRef, aotSummaries?: () => any[]): void;\n\n  /**\n   * Reset the providers for the test injector.\n   */\n  resetTestEnvironment(): void;\n\n  resetTestingModule(): void;\n\n  configureCompiler(config: {providers?: any[], useJit?: boolean}): void;\n\n  configureTestingModule(moduleDef: TestModuleMetadata): void;\n\n  compileComponents(): Promise<any>;\n\n  get(token: any, notFoundValue?: any): any;\n\n  execute(tokens: any[], fn: Function, context?: any): any;\n\n  overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): void;\n\n  overrideComponent(component: Type<any>, override: MetadataOverride<Component>): void;\n\n  overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>): void;\n\n  overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): void;\n\n  /**\n   * Overwrites all providers for the given token with the given provider definition.\n   */\n  overrideProvider(token: any, provider: {\n    useFactory: Function,\n    deps: any[],\n  }): void;\n  overrideProvider(token: any, provider: {useValue: any;}): void;\n  overrideProvider(token: any, provider: {useFactory?: Function, useValue?: any, deps?: any[]}):\n      void;\n\n  /**\n   * Overwrites all providers for the given token with the given provider definition.\n   *\n   * @deprecated as it makes all NgModules lazy. Introduced only for migrating off of it.\n   */\n  deprecatedOverrideProvider(token: any, provider: {\n    useFactory: Function,\n    deps: any[],\n  }): void;\n  deprecatedOverrideProvider(token: any, provider: {useValue: any;}): void;\n  deprecatedOverrideProvider(\n      token: any, provider: {useFactory?: Function, useValue?: any, deps?: any[]}): void;\n\n\n  overrideTemplateUsingTestingModule(component: Type<any>, template: string): void;\n\n  createComponent<T>(component: Type<T>): ComponentFixture<T>;\n}\n\n/**\n * @description\n * Configures and initializes environment for unit testing and provides methods for\n * creating components and services in unit tests.\n *\n * `TestBed` is the primary api for writing unit tests for Angular applications and libraries.\n *\n * Note: Use `TestBed` in tests. It will be set to either `TestBedViewEngine` or `TestBedRender3`\n * according to the compiler used.\n */\nexport class TestBedViewEngine implements Injector, TestBed {\n  /**\n   * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n   * angular module. These are common to every test in the suite.\n   *\n   * This may only be called once, to set up the common providers for the current test\n   * suite on the current platform. If you absolutely need to change the providers,\n   * first use `resetTestEnvironment`.\n   *\n   * Test modules and platforms for individual platforms are available from\n   * '@angular/<platform_name>/testing'.\n   */\n  static initTestEnvironment(\n      ngModule: Type<any>|Type<any>[], platform: PlatformRef,\n      aotSummaries?: () => any[]): TestBedViewEngine {\n    const testBed = _getTestBedViewEngine();\n    testBed.initTestEnvironment(ngModule, platform, aotSummaries);\n    return testBed;\n  }\n\n  /**\n   * Reset the providers for the test injector.\n   */\n  static resetTestEnvironment(): void { _getTestBedViewEngine().resetTestEnvironment(); }\n\n  static resetTestingModule(): TestBedStatic {\n    _getTestBedViewEngine().resetTestingModule();\n    return TestBedViewEngine as any as TestBedStatic;\n  }\n\n  /**\n   * Allows overriding default compiler providers and settings\n   * which are defined in test_injector.js\n   */\n  static configureCompiler(config: {providers?: any[]; useJit?: boolean;}): TestBedStatic {\n    _getTestBedViewEngine().configureCompiler(config);\n    return TestBedViewEngine as any as TestBedStatic;\n  }\n\n  /**\n   * Allows overriding default providers, directives, pipes, modules of the test injector,\n   * which are defined in test_injector.js\n   */\n  static configureTestingModule(moduleDef: TestModuleMetadata): TestBedStatic {\n    _getTestBedViewEngine().configureTestingModule(moduleDef);\n    return TestBedViewEngine as any as TestBedStatic;\n  }\n\n  /**\n   * Compile components with a `templateUrl` for the test's NgModule.\n   * It is necessary to call this function\n   * as fetching urls is asynchronous.\n   */\n  static compileComponents(): Promise<any> { return getTestBed().compileComponents(); }\n\n  static overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): TestBedStatic {\n    _getTestBedViewEngine().overrideModule(ngModule, override);\n    return TestBedViewEngine as any as TestBedStatic;\n  }\n\n  static overrideComponent(component: Type<any>, override: MetadataOverride<Component>):\n      TestBedStatic {\n    _getTestBedViewEngine().overrideComponent(component, override);\n    return TestBedViewEngine as any as TestBedStatic;\n  }\n\n  static overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>):\n      TestBedStatic {\n    _getTestBedViewEngine().overrideDirective(directive, override);\n    return TestBedViewEngine as any as TestBedStatic;\n  }\n\n  static overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): TestBedStatic {\n    _getTestBedViewEngine().overridePipe(pipe, override);\n    return TestBedViewEngine as any as TestBedStatic;\n  }\n\n  static overrideTemplate(component: Type<any>, template: string): TestBedStatic {\n    _getTestBedViewEngine().overrideComponent(component, {set: {template, templateUrl: null !}});\n    return TestBedViewEngine as any as TestBedStatic;\n  }\n\n  /**\n   * Overrides the template of the given component, compiling the template\n   * in the context of the TestingModule.\n   *\n   * Note: This works for JIT and AOTed components as well.\n   */\n  static overrideTemplateUsingTestingModule(component: Type<any>, template: string): TestBedStatic {\n    _getTestBedViewEngine().overrideTemplateUsingTestingModule(component, template);\n    return TestBedViewEngine as any as TestBedStatic;\n  }\n\n  /**\n   * Overwrites all providers for the given token with the given provider definition.\n   *\n   * Note: This works for JIT and AOTed components as well.\n   */\n  static overrideProvider(token: any, provider: {\n    useFactory: Function,\n    deps: any[],\n  }): TestBedStatic;\n  static overrideProvider(token: any, provider: {useValue: any;}): TestBedStatic;\n  static overrideProvider(token: any, provider: {\n    useFactory?: Function,\n    useValue?: any,\n    deps?: any[],\n  }): TestBedStatic {\n    _getTestBedViewEngine().overrideProvider(token, provider as any);\n    return TestBedViewEngine as any as TestBedStatic;\n  }\n\n  /**\n   * Overwrites all providers for the given token with the given provider definition.\n   *\n   * @deprecated as it makes all NgModules lazy. Introduced only for migrating off of it.\n   */\n  static deprecatedOverrideProvider(token: any, provider: {\n    useFactory: Function,\n    deps: any[],\n  }): void;\n  static deprecatedOverrideProvider(token: any, provider: {useValue: any;}): void;\n  static deprecatedOverrideProvider(token: any, provider: {\n    useFactory?: Function,\n    useValue?: any,\n    deps?: any[],\n  }): TestBedStatic {\n    _getTestBedViewEngine().deprecatedOverrideProvider(token, provider as any);\n    return TestBedViewEngine as any as TestBedStatic;\n  }\n\n  static get(token: any, notFoundValue: any = Injector.THROW_IF_NOT_FOUND) {\n    return _getTestBedViewEngine().get(token, notFoundValue);\n  }\n\n  static createComponent<T>(component: Type<T>): ComponentFixture<T> {\n    return _getTestBedViewEngine().createComponent(component);\n  }\n\n  private _instantiated: boolean = false;\n\n  private _compiler: TestingCompiler = null !;\n  private _moduleRef: NgModuleRef<any> = null !;\n  private _moduleFactory: NgModuleFactory<any> = null !;\n\n  private _compilerOptions: CompilerOptions[] = [];\n\n  private _moduleOverrides: [Type<any>, MetadataOverride<NgModule>][] = [];\n  private _componentOverrides: [Type<any>, MetadataOverride<Component>][] = [];\n  private _directiveOverrides: [Type<any>, MetadataOverride<Directive>][] = [];\n  private _pipeOverrides: [Type<any>, MetadataOverride<Pipe>][] = [];\n\n  private _providers: Provider[] = [];\n  private _declarations: Array<Type<any>|any[]|any> = [];\n  private _imports: Array<Type<any>|any[]|any> = [];\n  private _schemas: Array<SchemaMetadata|any[]> = [];\n  private _activeFixtures: ComponentFixture<any>[] = [];\n\n  private _testEnvAotSummaries: () => any[] = () => [];\n  private _aotSummaries: Array<() => any[]> = [];\n  private _templateOverrides: Array<{component: Type<any>, templateOf: Type<any>}> = [];\n\n  private _isRoot: boolean = true;\n  private _rootProviderOverrides: Provider[] = [];\n\n  platform: PlatformRef = null !;\n\n  ngModule: Type<any>|Type<any>[] = null !;\n\n  /**\n   * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n   * angular module. These are common to every test in the suite.\n   *\n   * This may only be called once, to set up the common providers for the current test\n   * suite on the current platform. If you absolutely need to change the providers,\n   * first use `resetTestEnvironment`.\n   *\n   * Test modules and platforms for individual platforms are available from\n   * '@angular/<platform_name>/testing'.\n   */\n  initTestEnvironment(\n      ngModule: Type<any>|Type<any>[], platform: PlatformRef, aotSummaries?: () => any[]): void {\n    if (this.platform || this.ngModule) {\n      throw new Error('Cannot set base providers because it has already been called');\n    }\n    this.platform = platform;\n    this.ngModule = ngModule;\n    if (aotSummaries) {\n      this._testEnvAotSummaries = aotSummaries;\n    }\n  }\n\n  /**\n   * Reset the providers for the test injector.\n   */\n  resetTestEnvironment(): void {\n    this.resetTestingModule();\n    this.platform = null !;\n    this.ngModule = null !;\n    this._testEnvAotSummaries = () => [];\n  }\n\n  resetTestingModule(): void {\n    clearOverrides();\n    this._aotSummaries = [];\n    this._templateOverrides = [];\n    this._compiler = null !;\n    this._moduleOverrides = [];\n    this._componentOverrides = [];\n    this._directiveOverrides = [];\n    this._pipeOverrides = [];\n\n    this._isRoot = true;\n    this._rootProviderOverrides = [];\n\n    this._moduleRef = null !;\n    this._moduleFactory = null !;\n    this._compilerOptions = [];\n    this._providers = [];\n    this._declarations = [];\n    this._imports = [];\n    this._schemas = [];\n    this._instantiated = false;\n    this._activeFixtures.forEach((fixture) => {\n      try {\n        fixture.destroy();\n      } catch (e) {\n        console.error('Error during cleanup of component', {\n          component: fixture.componentInstance,\n          stacktrace: e,\n        });\n      }\n    });\n    this._activeFixtures = [];\n  }\n\n  configureCompiler(config: {providers?: any[], useJit?: boolean}): void {\n    this._assertNotInstantiated('TestBed.configureCompiler', 'configure the compiler');\n    this._compilerOptions.push(config);\n  }\n\n  configureTestingModule(moduleDef: TestModuleMetadata): void {\n    this._assertNotInstantiated('TestBed.configureTestingModule', 'configure the test module');\n    if (moduleDef.providers) {\n      this._providers.push(...moduleDef.providers);\n    }\n    if (moduleDef.declarations) {\n      this._declarations.push(...moduleDef.declarations);\n    }\n    if (moduleDef.imports) {\n      this._imports.push(...moduleDef.imports);\n    }\n    if (moduleDef.schemas) {\n      this._schemas.push(...moduleDef.schemas);\n    }\n    if (moduleDef.aotSummaries) {\n      this._aotSummaries.push(moduleDef.aotSummaries);\n    }\n  }\n\n  compileComponents(): Promise<any> {\n    if (this._moduleFactory || this._instantiated) {\n      return Promise.resolve(null);\n    }\n\n    const moduleType = this._createCompilerAndModule();\n    return this._compiler.compileModuleAndAllComponentsAsync(moduleType)\n        .then((moduleAndComponentFactories) => {\n          this._moduleFactory = moduleAndComponentFactories.ngModuleFactory;\n        });\n  }\n\n  private _initIfNeeded(): void {\n    if (this._instantiated) {\n      return;\n    }\n    if (!this._moduleFactory) {\n      try {\n        const moduleType = this._createCompilerAndModule();\n        this._moduleFactory =\n            this._compiler.compileModuleAndAllComponentsSync(moduleType).ngModuleFactory;\n      } catch (e) {\n        const errorCompType = this._compiler.getComponentFromError(e);\n        if (errorCompType) {\n          throw new Error(\n              `This test module uses the component ${stringify(errorCompType)} which is using a \"templateUrl\" or \"styleUrls\", but they were never compiled. ` +\n              `Please call \"TestBed.compileComponents\" before your test.`);\n        } else {\n          throw e;\n        }\n      }\n    }\n    for (const {component, templateOf} of this._templateOverrides) {\n      const compFactory = this._compiler.getComponentFactory(templateOf);\n      overrideComponentView(component, compFactory);\n    }\n\n    const ngZone = new NgZone({enableLongStackTrace: true});\n    const providers: StaticProvider[] = [{provide: NgZone, useValue: ngZone}];\n    const ngZoneInjector = Injector.create({\n      providers: providers,\n      parent: this.platform.injector,\n      name: this._moduleFactory.moduleType.name\n    });\n    this._moduleRef = this._moduleFactory.create(ngZoneInjector);\n    // ApplicationInitStatus.runInitializers() is marked @internal to core. So casting to any\n    // before accessing it.\n    (this._moduleRef.injector.get(ApplicationInitStatus) as any).runInitializers();\n    this._instantiated = true;\n  }\n\n  private _createCompilerAndModule(): Type<any> {\n    const providers = this._providers.concat([{provide: TestBed, useValue: this}]);\n    const declarations =\n        [...this._declarations, ...this._templateOverrides.map(entry => entry.templateOf)];\n\n    const rootScopeImports = [];\n    const rootProviderOverrides = this._rootProviderOverrides;\n    if (this._isRoot) {\n      @NgModule({\n        providers: [\n          ...rootProviderOverrides,\n        ],\n        jit: true,\n      })\n      class RootScopeModule {\n      }\n      rootScopeImports.push(RootScopeModule);\n    }\n    providers.push({provide: APP_ROOT, useValue: this._isRoot});\n\n    const imports = [rootScopeImports, this.ngModule, this._imports];\n    const schemas = this._schemas;\n\n    @NgModule({providers, declarations, imports, schemas, jit: true})\n    class DynamicTestModule {\n    }\n\n    const compilerFactory: TestingCompilerFactory =\n        this.platform.injector.get(TestingCompilerFactory);\n    this._compiler = compilerFactory.createTestingCompiler(this._compilerOptions);\n    for (const summary of [this._testEnvAotSummaries, ...this._aotSummaries]) {\n      this._compiler.loadAotSummaries(summary);\n    }\n    this._moduleOverrides.forEach((entry) => this._compiler.overrideModule(entry[0], entry[1]));\n    this._componentOverrides.forEach(\n        (entry) => this._compiler.overrideComponent(entry[0], entry[1]));\n    this._directiveOverrides.forEach(\n        (entry) => this._compiler.overrideDirective(entry[0], entry[1]));\n    this._pipeOverrides.forEach((entry) => this._compiler.overridePipe(entry[0], entry[1]));\n    return DynamicTestModule;\n  }\n\n  private _assertNotInstantiated(methodName: string, methodDescription: string) {\n    if (this._instantiated) {\n      throw new Error(\n          `Cannot ${methodDescription} when the test module has already been instantiated. ` +\n          `Make sure you are not using \\`inject\\` before \\`${methodName}\\`.`);\n    }\n  }\n\n  get(token: any, notFoundValue: any = Injector.THROW_IF_NOT_FOUND): any {\n    this._initIfNeeded();\n    if (token === TestBed) {\n      return this;\n    }\n    // Tests can inject things from the ng module and from the compiler,\n    // but the ng module can't inject things from the compiler and vice versa.\n    const result = this._moduleRef.injector.get(token, UNDEFINED);\n    return result === UNDEFINED ? this._compiler.injector.get(token, notFoundValue) : result;\n  }\n\n  execute(tokens: any[], fn: Function, context?: any): any {\n    this._initIfNeeded();\n    const params = tokens.map(t => this.get(t));\n    return fn.apply(context, params);\n  }\n\n  overrideModule(ngModule: Type<any>, override: MetadataOverride<NgModule>): void {\n    this._assertNotInstantiated('overrideModule', 'override module metadata');\n    this._moduleOverrides.push([ngModule, override]);\n  }\n\n  overrideComponent(component: Type<any>, override: MetadataOverride<Component>): void {\n    this._assertNotInstantiated('overrideComponent', 'override component metadata');\n    this._componentOverrides.push([component, override]);\n  }\n\n  overrideDirective(directive: Type<any>, override: MetadataOverride<Directive>): void {\n    this._assertNotInstantiated('overrideDirective', 'override directive metadata');\n    this._directiveOverrides.push([directive, override]);\n  }\n\n  overridePipe(pipe: Type<any>, override: MetadataOverride<Pipe>): void {\n    this._assertNotInstantiated('overridePipe', 'override pipe metadata');\n    this._pipeOverrides.push([pipe, override]);\n  }\n\n  /**\n   * Overwrites all providers for the given token with the given provider definition.\n   */\n  overrideProvider(token: any, provider: {\n    useFactory: Function,\n    deps: any[],\n  }): void;\n  overrideProvider(token: any, provider: {useValue: any;}): void;\n  overrideProvider(token: any, provider: {useFactory?: Function, useValue?: any, deps?: any[]}):\n      void {\n    this.overrideProviderImpl(token, provider);\n  }\n\n  /**\n   * Overwrites all providers for the given token with the given provider definition.\n   *\n   * @deprecated as it makes all NgModules lazy. Introduced only for migrating off of it.\n   */\n  deprecatedOverrideProvider(token: any, provider: {\n    useFactory: Function,\n    deps: any[],\n  }): void;\n  deprecatedOverrideProvider(token: any, provider: {useValue: any;}): void;\n  deprecatedOverrideProvider(\n      token: any, provider: {useFactory?: Function, useValue?: any, deps?: any[]}): void {\n    this.overrideProviderImpl(token, provider, /* deprecated */ true);\n  }\n\n  private overrideProviderImpl(\n      token: any, provider: {\n        useFactory?: Function,\n        useValue?: any,\n        deps?: any[],\n      },\n      deprecated = false): void {\n    let def: InjectableDef<any>|null = null;\n    if (typeof token !== 'string' && (def = getInjectableDef(token)) && def.providedIn === 'root') {\n      if (provider.useFactory) {\n        this._rootProviderOverrides.push(\n            {provide: token, useFactory: provider.useFactory, deps: provider.deps || []});\n      } else {\n        this._rootProviderOverrides.push({provide: token, useValue: provider.useValue});\n      }\n    }\n    let flags: NodeFlags = 0;\n    let value: any;\n    if (provider.useFactory) {\n      flags |= NodeFlags.TypeFactoryProvider;\n      value = provider.useFactory;\n    } else {\n      flags |= NodeFlags.TypeValueProvider;\n      value = provider.useValue;\n    }\n    const deps = (provider.deps || []).map((dep) => {\n      let depFlags: DepFlags = DepFlags.None;\n      let depToken: any;\n      if (Array.isArray(dep)) {\n        dep.forEach((entry: any) => {\n          if (entry instanceof Optional) {\n            depFlags |= DepFlags.Optional;\n          } else if (entry instanceof SkipSelf) {\n            depFlags |= DepFlags.SkipSelf;\n          } else {\n            depToken = entry;\n          }\n        });\n      } else {\n        depToken = dep;\n      }\n      return [depFlags, depToken];\n    });\n    overrideProvider({token, flags, deps, value, deprecatedBehavior: deprecated});\n  }\n\n  overrideTemplateUsingTestingModule(component: Type<any>, template: string) {\n    this._assertNotInstantiated('overrideTemplateUsingTestingModule', 'override template');\n\n    @Component({selector: 'empty', template, jit: true})\n    class OverrideComponent {\n    }\n\n    this._templateOverrides.push({component, templateOf: OverrideComponent});\n  }\n\n  createComponent<T>(component: Type<T>): ComponentFixture<T> {\n    this._initIfNeeded();\n    const componentFactory = this._compiler.getComponentFactory(component);\n\n    if (!componentFactory) {\n      throw new Error(\n          `Cannot create the component ${stringify(component)} as it was not imported into the testing module!`);\n    }\n\n    const noNgZone = this.get(ComponentFixtureNoNgZone, false);\n    const autoDetect: boolean = this.get(ComponentFixtureAutoDetect, false);\n    const ngZone: NgZone = noNgZone ? null : this.get(NgZone, null);\n    const testComponentRenderer: TestComponentRenderer = this.get(TestComponentRenderer);\n    const rootElId = `root${_nextRootElementId++}`;\n    testComponentRenderer.insertRootElement(rootElId);\n\n    const initComponent = () => {\n      const componentRef =\n          componentFactory.create(Injector.NULL, [], `#${rootElId}`, this._moduleRef);\n      return new ComponentFixture<T>(componentRef, ngZone, autoDetect);\n    };\n\n    const fixture = !ngZone ? initComponent() : ngZone.run(initComponent);\n    this._activeFixtures.push(fixture);\n    return fixture;\n  }\n}\n\n/**\n * @description\n * Configures and initializes environment for unit testing and provides methods for\n * creating components and services in unit tests.\n *\n * `TestBed` is the primary api for writing unit tests for Angular applications and libraries.\n *\n * Note: Use `TestBed` in tests. It will be set to either `TestBedViewEngine` or `TestBedRender3`\n * according to the compiler used.\n *\n * @publicApi\n */\nexport const TestBed: TestBedStatic =\n    ivyEnabled ? TestBedRender3 as any as TestBedStatic : TestBedViewEngine as any as TestBedStatic;\n\n/**\n * Returns a singleton of the applicable `TestBed`.\n *\n * It will be either an instance of `TestBedViewEngine` or `TestBedRender3`.\n *\n * @publicApi\n */\nexport const getTestBed: () => TestBed = ivyEnabled ? _getTestBedRender3 : _getTestBedViewEngine;\n\nlet testBed: TestBedViewEngine;\n\nfunction _getTestBedViewEngine(): TestBedViewEngine {\n  return testBed = testBed || new TestBedViewEngine();\n}\n\n/**\n * Allows injecting dependencies in `beforeEach()` and `it()`.\n *\n * Example:\n *\n * ```\n * beforeEach(inject([Dependency, AClass], (dep, object) => {\n *   // some code that uses `dep` and `object`\n *   // ...\n * }));\n *\n * it('...', inject([AClass], (object) => {\n *   object.doSomething();\n *   expect(...);\n * })\n * ```\n *\n * Notes:\n * - inject is currently a function because of some Traceur limitation the syntax should\n * eventually\n *   becomes `it('...', @Inject (object: AClass, async: AsyncTestCompleter) => { ... });`\n *\n * @publicApi\n */\nexport function inject(tokens: any[], fn: Function): () => any {\n  const testBed = getTestBed();\n  if (tokens.indexOf(AsyncTestCompleter) >= 0) {\n    // Not using an arrow function to preserve context passed from call site\n    return function() {\n      // Return an async test method that returns a Promise if AsyncTestCompleter is one of\n      // the injected tokens.\n      return testBed.compileComponents().then(() => {\n        const completer: AsyncTestCompleter = testBed.get(AsyncTestCompleter);\n        testBed.execute(tokens, fn, this);\n        return completer.promise;\n      });\n    };\n  } else {\n    // Not using an arrow function to preserve context passed from call site\n    return function() { return testBed.execute(tokens, fn, this); };\n  }\n}\n\n/**\n * @publicApi\n */\nexport class InjectSetupWrapper {\n  constructor(private _moduleDef: () => TestModuleMetadata) {}\n\n  private _addModule() {\n    const moduleDef = this._moduleDef();\n    if (moduleDef) {\n      getTestBed().configureTestingModule(moduleDef);\n    }\n  }\n\n  inject(tokens: any[], fn: Function): () => any {\n    const self = this;\n    // Not using an arrow function to preserve context passed from call site\n    return function() {\n      self._addModule();\n      return inject(tokens, fn).call(this);\n    };\n  }\n}\n\n/**\n * @publicApi\n */\nexport function withModule(moduleDef: TestModuleMetadata): InjectSetupWrapper;\nexport function withModule(moduleDef: TestModuleMetadata, fn: Function): () => any;\nexport function withModule(moduleDef: TestModuleMetadata, fn?: Function | null): (() => any)|\n    InjectSetupWrapper {\n  if (fn) {\n    // Not using an arrow function to preserve context passed from call site\n    return function() {\n      const testBed = getTestBed();\n      if (moduleDef) {\n        testBed.configureTestingModule(moduleDef);\n      }\n      return fn.apply(this);\n    };\n  }\n  return new InjectSetupWrapper(() => moduleDef);\n}"]}