{"version":3,"file":"event_emitter.js","sourceRoot":"","sources":["../../../../../packages/core/src/event_emitter.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Subject, Subscription} from 'rxjs';\n\n/**\n * Use in directives and components to emit custom events synchronously\n * or asynchronously, and register handlers for those events by subscribing\n * to an instance.\n *\n * @usageNotes\n *\n * In the following example, a component defines two output properties\n * that create event emitters. When the title is clicked, the emitter\n * emits an open or close event to toggle the current visibility state.\n *\n * ```\n * @Component({\n *   selector: 'zippy',\n *   template: `\n *   <div class=\"zippy\">\n *     <div (click)=\"toggle()\">Toggle</div>\n *     <div [hidden]=\"!visible\">\n *       <ng-content></ng-content>\n *     </div>\n *  </div>`})\n * export class Zippy {\n *   visible: boolean = true;\n *   @Output() open: EventEmitter<any> = new EventEmitter();\n *   @Output() close: EventEmitter<any> = new EventEmitter();\n *\n *   toggle() {\n *     this.visible = !this.visible;\n *     if (this.visible) {\n *       this.open.emit(null);\n *     } else {\n *       this.close.emit(null);\n *     }\n *   }\n * }\n * ```\n *\n * Access the event object with the `$event` argument passed to the output event\n * handler:\n *\n * ```\n * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n * ```\n *\n * ### Notes\n *\n * Uses Rx.Observable but provides an adapter to make it work as specified here:\n * https://github.com/jhusain/observable-spec\n *\n * Once a reference implementation of the spec is available, switch to it.\n *\n * @publicApi\n */\nexport class EventEmitter<T> extends Subject<T> {\n  // TODO: mark this as internal once all the facades are gone\n  // we can't mark it as internal now because EventEmitter exported via @angular/core would not\n  // contain this property making it incompatible with all the code that uses EventEmitter via\n  // facades, which are local to the code and do not have this property stripped.\n  /**\n   * Internal\n   */\n  __isAsync: boolean;  // tslint:disable-line\n\n  /**\n   * Creates an instance of this class that can\n   * deliver events synchronously or asynchronously.\n   *\n   * @param isAsync When true, deliver events asynchronously.\n   *\n   */\n  constructor(isAsync: boolean = false) {\n    super();\n    this.__isAsync = isAsync;\n  }\n\n  /**\n   * Emits an event containing a given value.\n   * @param value The value to emit.\n   */\n  emit(value?: T) { super.next(value); }\n\n  /**\n   * Registers handlers for events emitted by this instance.\n   * @param generatorOrNext When supplied, a custom handler for emitted events.\n   * @param error When supplied, a custom handler for an error notification\n   * from this emitter.\n   * @param complete When supplied, a custom handler for a completion\n   * notification from this emitter.\n   */\n  subscribe(generatorOrNext?: any, error?: any, complete?: any): any {\n    let schedulerFn: (t: any) => any;\n    let errorFn = (err: any): any => null;\n    let completeFn = (): any => null;\n\n    if (generatorOrNext && typeof generatorOrNext === 'object') {\n      schedulerFn = this.__isAsync ? (value: any) => {\n        setTimeout(() => generatorOrNext.next(value));\n      } : (value: any) => { generatorOrNext.next(value); };\n\n      if (generatorOrNext.error) {\n        errorFn = this.__isAsync ? (err) => { setTimeout(() => generatorOrNext.error(err)); } :\n                                   (err) => { generatorOrNext.error(err); };\n      }\n\n      if (generatorOrNext.complete) {\n        completeFn = this.__isAsync ? () => { setTimeout(() => generatorOrNext.complete()); } :\n                                      () => { generatorOrNext.complete(); };\n      }\n    } else {\n      schedulerFn = this.__isAsync ? (value: any) => { setTimeout(() => generatorOrNext(value)); } :\n                                     (value: any) => { generatorOrNext(value); };\n\n      if (error) {\n        errorFn =\n            this.__isAsync ? (err) => { setTimeout(() => error(err)); } : (err) => { error(err); };\n      }\n\n      if (complete) {\n        completeFn =\n            this.__isAsync ? () => { setTimeout(() => complete()); } : () => { complete(); };\n      }\n    }\n\n    const sink = super.subscribe(schedulerFn, errorFn, completeFn);\n\n    if (generatorOrNext instanceof Subscription) {\n      generatorOrNext.add(sink);\n    }\n\n    return sink;\n  }\n}\n"]}