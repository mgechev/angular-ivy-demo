{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../../../../packages/core/src/di/util.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAAC,sBAAsB,EAAC,MAAM,uCAAuC,CAAC;AAE7E,OAAO,EAAC,sBAAsB,EAAC,MAAM,kBAAkB,CAAC;AAExD,OAAO,EAAC,MAAM,EAAE,UAAU,EAAC,MAAM,0BAA0B,CAAC;SAIU,sBAAsB;;AAD5F,IAAM,SAAS,GACX,sBAAsB,CAAgB,EAAC,OAAO,EAAE,MAAM,EAAE,QAAQ,IAAwB,EAAC,CAAC,CAAC;;AAC/F,IAAM,WAAW,GAAU,EAAE,CAAC;;;;;;AAE9B,MAAM,UAAU,kCAAkC,CAC9C,IAAe,EAAE,QACoD;IACvE,IAAI,CAAC,QAAQ,EAAE;;QACb,IAAM,sBAAsB,GAAG,IAAI,sBAAsB,EAAE,CAAC;;QAC5D,IAAM,MAAI,GAAG,sBAAsB,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;;QAErD,OAAO,cAAM,YAAI,IAAI,YAAJ,IAAI,kBAAI,UAAU,mBAAC,MAAa,EAAC,OAArC,CAAsC,CAAC;KACrD;IAED,IAAI,SAAS,IAAI,QAAQ,EAAE;;QACzB,IAAM,eAAa,GAAG,mBAAC,QAA6B,EAAC,CAAC;QACtD,OAAO,cAAM,OAAA,eAAa,CAAC,QAAQ,EAAtB,CAAsB,CAAC;KACrC;SAAM,IAAI,mBAAC,QAAgC,EAAC,CAAC,WAAW,EAAE;;QACzD,IAAM,kBAAgB,GAAG,mBAAC,QAAgC,EAAC,CAAC;QAC5D,OAAO,cAAM,OAAA,MAAM,CAAC,kBAAgB,CAAC,WAAW,CAAC,EAApC,CAAoC,CAAC;KACnD;SAAM,IAAI,mBAAC,QAA+B,EAAC,CAAC,UAAU,EAAE;;QACvD,IAAM,iBAAe,GAAG,mBAAC,QAA+B,EAAC,CAAC;QAC1D,OAAO,cAAM,OAAA,iBAAe,CAAC,UAAU,OAA1B,iBAAe,EAAe,UAAU,CAAC,iBAAe,CAAC,IAAI,IAAI,WAAW,CAAC,GAA7E,CAA8E,CAAC;KAC7F;SAAM,IAAI,mBAAC,QAAuD,EAAC,CAAC,QAAQ,EAAE;;QAC7E,IAAM,eAAa,GAAG,mBAAC,QAAuD,EAAC,CAAC;;QAChF,IAAI,MAAI,GAAG,mBAAC,QAAmC,EAAC,CAAC,IAAI,CAAC;QACtD,IAAI,CAAC,MAAI,EAAE;;YACT,IAAM,sBAAsB,GAAG,IAAI,sBAAsB,EAAE,CAAC;YAC5D,MAAI,GAAG,sBAAsB,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;SAChD;QACD,OAAO;;YAAM,YAAI,CAAA,KAAA,eAAa,CAAC,QAAQ,CAAA,gCAAI,UAAU,CAAC,MAAI,CAAC;QAA9C,CAA+C,CAAC;KAC9D;SAAM;;QACL,IAAI,MAAI,GAAG,mBAAC,QAAmC,EAAC,CAAC,IAAI,CAAC;QACtD,IAAI,CAAC,MAAI,EAAE;;YACT,IAAM,sBAAsB,GAAG,IAAI,sBAAsB,EAAE,CAAC;YAC5D,MAAI,GAAG,sBAAsB,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;SAChD;QACD,OAAO,cAAM,YAAI,IAAI,YAAJ,IAAI,kBAAI,UAAU,oBAAC,MAAI,GAAG,OAA9B,CAA+B,CAAC;KAC9C;CACF","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ReflectionCapabilities} from '../reflection/reflection_capabilities';\nimport {Type} from '../type';\nimport {getClosureSafeProperty} from '../util/property';\n\nimport {inject, injectArgs} from './injector_compatibility';\nimport {ClassSansProvider, ConstructorSansProvider, ExistingSansProvider, FactorySansProvider, StaticClassSansProvider, ValueProvider, ValueSansProvider} from './provider';\n\nconst USE_VALUE =\n    getClosureSafeProperty<ValueProvider>({provide: String, useValue: getClosureSafeProperty});\nconst EMPTY_ARRAY: any[] = [];\n\nexport function convertInjectableProviderToFactory(\n    type: Type<any>, provider?: ValueSansProvider | ExistingSansProvider | StaticClassSansProvider |\n        ConstructorSansProvider | FactorySansProvider | ClassSansProvider): () => any {\n  if (!provider) {\n    const reflectionCapabilities = new ReflectionCapabilities();\n    const deps = reflectionCapabilities.parameters(type);\n    // TODO - convert to flags.\n    return () => new type(...injectArgs(deps as any[]));\n  }\n\n  if (USE_VALUE in provider) {\n    const valueProvider = (provider as ValueSansProvider);\n    return () => valueProvider.useValue;\n  } else if ((provider as ExistingSansProvider).useExisting) {\n    const existingProvider = (provider as ExistingSansProvider);\n    return () => inject(existingProvider.useExisting);\n  } else if ((provider as FactorySansProvider).useFactory) {\n    const factoryProvider = (provider as FactorySansProvider);\n    return () => factoryProvider.useFactory(...injectArgs(factoryProvider.deps || EMPTY_ARRAY));\n  } else if ((provider as StaticClassSansProvider | ClassSansProvider).useClass) {\n    const classProvider = (provider as StaticClassSansProvider | ClassSansProvider);\n    let deps = (provider as StaticClassSansProvider).deps;\n    if (!deps) {\n      const reflectionCapabilities = new ReflectionCapabilities();\n      deps = reflectionCapabilities.parameters(type);\n    }\n    return () => new classProvider.useClass(...injectArgs(deps));\n  } else {\n    let deps = (provider as ConstructorSansProvider).deps;\n    if (!deps) {\n      const reflectionCapabilities = new ReflectionCapabilities();\n      deps = reflectionCapabilities.parameters(type);\n    }\n    return () => new type(...injectArgs(deps !));\n  }\n}\n"]}