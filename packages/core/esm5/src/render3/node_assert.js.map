{"version":3,"file":"node_assert.js","sourceRoot":"","sources":["../../../../../../packages/core/src/render3/node_assert.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAAC,aAAa,EAAE,WAAW,EAAC,MAAM,UAAU,CAAC;;;;;;AAGpD,MAAM,UAAU,cAAc,CAAC,KAAY,EAAE,IAAe;IAC1D,aAAa,CAAC,KAAK,EAAE,+BAA+B,CAAC,CAAC;IACtD,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,EAAE,iBAAe,QAAQ,CAAC,IAAI,CAAG,CAAC,CAAC;CAChE;;;;;;AAED,MAAM,UAAU,yBAAyB,CAAC,KAAY;IAAE,eAAqB;SAArB,UAAqB,EAArB,qBAAqB,EAArB,IAAqB;QAArB,8BAAqB;;IAC3E,aAAa,CAAC,KAAK,EAAE,+BAA+B,CAAC,CAAC;;IACtD,IAAM,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,KAAK,CAAC,IAAI,KAAK,IAAI,EAAnB,CAAmB,CAAC,CAAC;IACtD,WAAW,CACP,KAAK,EAAE,IAAI,EACX,sBAAoB,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAY,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAG,CAAC,CAAC;CAC3F;;;;;AAED,SAAS,QAAQ,CAAC,IAAe;IAC/B,IAAI,IAAI,sBAAwB;QAAE,OAAO,YAAY,CAAC;IACtD,IAAI,IAAI,qBAAuB;QAAE,OAAO,WAAW,CAAC;IACpD,IAAI,IAAI,gBAAkB;QAAE,OAAO,MAAM,CAAC;IAC1C,IAAI,IAAI,mBAAqB;QAAE,OAAO,SAAS,CAAC;IAChD,IAAI,IAAI,4BAA8B;QAAE,OAAO,kBAAkB,CAAC;IAClE,OAAO,WAAW,CAAC;CACpB","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertDefined, assertEqual} from './assert';\nimport {TNode, TNodeType} from './interfaces/node';\n\nexport function assertNodeType(tNode: TNode, type: TNodeType) {\n  assertDefined(tNode, 'should be called with a TNode');\n  assertEqual(tNode.type, type, `should be a ${typeName(type)}`);\n}\n\nexport function assertNodeOfPossibleTypes(tNode: TNode, ...types: TNodeType[]) {\n  assertDefined(tNode, 'should be called with a TNode');\n  const found = types.some(type => tNode.type === type);\n  assertEqual(\n      found, true,\n      `Should be one of ${types.map(typeName).join(', ')} but got ${typeName(tNode.type)}`);\n}\n\nfunction typeName(type: TNodeType): string {\n  if (type == TNodeType.Projection) return 'Projection';\n  if (type == TNodeType.Container) return 'Container';\n  if (type == TNodeType.View) return 'View';\n  if (type == TNodeType.Element) return 'Element';\n  if (type == TNodeType.ElementContainer) return 'ElementContainer';\n  return '<unknown>';\n}\n"]}