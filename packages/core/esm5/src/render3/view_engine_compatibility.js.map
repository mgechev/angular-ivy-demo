{"version":3,"file":"view_engine_compatibility.js","sourceRoot":"","sources":["../../../../../../packages/core/src/render3/view_engine_compatibility.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectorRef as ViewEngine_ChangeDetectorRef} from '../change_detection/change_detector_ref';\nimport {Injector, NullInjector} from '../di/injector';\nimport {InjectFlags} from '../di/injector_compatibility';\nimport {ComponentFactory as viewEngine_ComponentFactory, ComponentRef as viewEngine_ComponentRef} from '../linker/component_factory';\nimport {ElementRef as ViewEngine_ElementRef} from '../linker/element_ref';\nimport {NgModuleRef as viewEngine_NgModuleRef} from '../linker/ng_module_factory';\nimport {TemplateRef as ViewEngine_TemplateRef} from '../linker/template_ref';\nimport {ViewContainerRef as ViewEngine_ViewContainerRef} from '../linker/view_container_ref';\nimport {EmbeddedViewRef as viewEngine_EmbeddedViewRef, ViewRef as viewEngine_ViewRef} from '../linker/view_ref';\nimport {Renderer2} from '../render/api';\n\nimport {assertDefined, assertGreaterThan, assertLessThan} from './assert';\nimport {getOrCreateInjectable, getParentInjectorLocation} from './di';\nimport {addToViewTree, createEmbeddedViewAndNode, createLContainer, renderEmbeddedTemplate} from './instructions';\nimport {ACTIVE_INDEX, LContainer, NATIVE, VIEWS} from './interfaces/container';\nimport {RenderFlags} from './interfaces/definition';\nimport {TContainerNode, TElementContainerNode, TElementNode, TNode, TNodeFlags, TNodeType, TViewNode} from './interfaces/node';\nimport {LQueries} from './interfaces/query';\nimport {RComment, RElement, Renderer3, isProceduralRenderer} from './interfaces/renderer';\nimport {CONTEXT, HOST_NODE, LView, QUERIES, RENDERER, TView} from './interfaces/view';\nimport {assertNodeOfPossibleTypes, assertNodeType} from './node_assert';\nimport {addRemoveViewFromContainer, appendChild, detachView, findComponentView, getBeforeNodeForView, insertView, nativeInsertBefore, nativeNextSibling, nativeParentNode, removeView} from './node_manipulation';\nimport {getLView, getPreviousOrParentTNode} from './state';\nimport {getComponentViewByIndex, getNativeByTNode, getParentInjectorTNode, getParentInjectorView, hasParentInjector, isComponent, isLContainer, isRootView} from './util';\nimport {ViewRef} from './view_ref';\n\n\n\n/**\n * Creates an ElementRef from the most recent node.\n *\n * @returns The ElementRef instance to use\n */\nexport function injectElementRef(ElementRefToken: typeof ViewEngine_ElementRef):\n    ViewEngine_ElementRef {\n  return createElementRef(ElementRefToken, getPreviousOrParentTNode(), getLView());\n}\n\nlet R3ElementRef: {new (native: RElement | RComment): ViewEngine_ElementRef};\n\n/**\n * Creates an ElementRef given a node.\n *\n * @param ElementRefToken The ElementRef type\n * @param tNode The node for which you'd like an ElementRef\n * @param view The view to which the node belongs\n * @returns The ElementRef instance to use\n */\nexport function createElementRef(\n    ElementRefToken: typeof ViewEngine_ElementRef, tNode: TNode,\n    view: LView): ViewEngine_ElementRef {\n  if (!R3ElementRef) {\n    // TODO: Fix class name, should be ElementRef, but there appears to be a rollup bug\n    R3ElementRef = class ElementRef_ extends ElementRefToken {};\n  }\n  return new R3ElementRef(getNativeByTNode(tNode, view));\n}\n\nlet R3TemplateRef: {\n  new (\n      _declarationParentView: LView, elementRef: ViewEngine_ElementRef, _tView: TView,\n      _renderer: Renderer3, _queries: LQueries | null, _injectorIndex: number):\n      ViewEngine_TemplateRef<any>\n};\n\n/**\n * Creates a TemplateRef given a node.\n *\n * @returns The TemplateRef instance to use\n */\nexport function injectTemplateRef<T>(\n    TemplateRefToken: typeof ViewEngine_TemplateRef,\n    ElementRefToken: typeof ViewEngine_ElementRef): ViewEngine_TemplateRef<T>|null {\n  return createTemplateRef<T>(\n      TemplateRefToken, ElementRefToken, getPreviousOrParentTNode(), getLView());\n}\n\n/**\n * Creates a TemplateRef and stores it on the injector.\n *\n * @param TemplateRefToken The TemplateRef type\n * @param ElementRefToken The ElementRef type\n * @param hostTNode The node that is requesting a TemplateRef\n * @param hostView The view to which the node belongs\n * @returns The TemplateRef instance to use\n */\nexport function createTemplateRef<T>(\n    TemplateRefToken: typeof ViewEngine_TemplateRef, ElementRefToken: typeof ViewEngine_ElementRef,\n    hostTNode: TNode, hostView: LView): ViewEngine_TemplateRef<T>|null {\n  if (!R3TemplateRef) {\n    // TODO: Fix class name, should be TemplateRef, but there appears to be a rollup bug\n    R3TemplateRef = class TemplateRef_<T> extends TemplateRefToken<T> {\n      constructor(\n          private _declarationParentView: LView, readonly elementRef: ViewEngine_ElementRef,\n          private _tView: TView, private _renderer: Renderer3, private _queries: LQueries|null,\n          private _injectorIndex: number) {\n        super();\n      }\n\n      createEmbeddedView(\n          context: T, container?: LContainer,\n          hostTNode?: TElementNode|TContainerNode|TElementContainerNode, hostView?: LView,\n          index?: number): viewEngine_EmbeddedViewRef<T> {\n        const lView = createEmbeddedViewAndNode(\n            this._tView, context, this._declarationParentView, this._renderer, this._queries,\n            this._injectorIndex);\n        if (container) {\n          insertView(lView, container, hostView !, index !, hostTNode !.index);\n        }\n        renderEmbeddedTemplate(lView, this._tView, context, RenderFlags.Create);\n        const viewRef = new ViewRef(lView, context, -1);\n        viewRef._tViewNode = lView[HOST_NODE] as TViewNode;\n        return viewRef;\n      }\n    };\n  }\n\n  if (hostTNode.type === TNodeType.Container) {\n    const hostContainer: LContainer = hostView[hostTNode.index];\n    ngDevMode && assertDefined(hostTNode.tViews, 'TView must be allocated');\n    return new R3TemplateRef(\n        hostView, createElementRef(ElementRefToken, hostTNode, hostView), hostTNode.tViews as TView,\n        getLView()[RENDERER], hostContainer[QUERIES], hostTNode.injectorIndex);\n  } else {\n    return null;\n  }\n}\n\nlet R3ViewContainerRef: {\n  new (\n      lContainer: LContainer, hostTNode: TElementNode | TContainerNode | TElementContainerNode,\n      hostView: LView): ViewEngine_ViewContainerRef\n};\n\n/**\n * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef\n * already exists, retrieves the existing ViewContainerRef.\n *\n * @returns The ViewContainerRef instance to use\n */\nexport function injectViewContainerRef(\n    ViewContainerRefToken: typeof ViewEngine_ViewContainerRef,\n    ElementRefToken: typeof ViewEngine_ElementRef): ViewEngine_ViewContainerRef {\n  const previousTNode =\n      getPreviousOrParentTNode() as TElementNode | TElementContainerNode | TContainerNode;\n  return createContainerRef(ViewContainerRefToken, ElementRefToken, previousTNode, getLView());\n}\n\nexport class NodeInjector implements Injector {\n  constructor(\n      private _tNode: TElementNode|TContainerNode|TElementContainerNode, private _hostView: LView) {\n  }\n\n  get(token: any, notFoundValue?: any): any {\n    return getOrCreateInjectable(\n        this._tNode, this._hostView, token, InjectFlags.Default, notFoundValue);\n  }\n}\n\n/**\n * Creates a ViewContainerRef and stores it on the injector.\n *\n * @param ViewContainerRefToken The ViewContainerRef type\n * @param ElementRefToken The ElementRef type\n * @param hostTNode The node that is requesting a ViewContainerRef\n * @param hostView The view to which the node belongs\n * @returns The ViewContainerRef instance to use\n */\nexport function createContainerRef(\n    ViewContainerRefToken: typeof ViewEngine_ViewContainerRef,\n    ElementRefToken: typeof ViewEngine_ElementRef,\n    hostTNode: TElementNode|TContainerNode|TElementContainerNode,\n    hostView: LView): ViewEngine_ViewContainerRef {\n  if (!R3ViewContainerRef) {\n    // TODO: Fix class name, should be ViewContainerRef, but there appears to be a rollup bug\n    R3ViewContainerRef = class ViewContainerRef_ extends ViewContainerRefToken {\n      private _viewRefs: viewEngine_ViewRef[] = [];\n\n      constructor(\n          private _lContainer: LContainer,\n          private _hostTNode: TElementNode|TContainerNode|TElementContainerNode,\n          private _hostView: LView) {\n        super();\n      }\n\n      get element(): ViewEngine_ElementRef {\n        return createElementRef(ElementRefToken, this._hostTNode, this._hostView);\n      }\n\n      get injector(): Injector { return new NodeInjector(this._hostTNode, this._hostView); }\n\n      /** @deprecated No replacement */\n      get parentInjector(): Injector {\n        const parentLocation = getParentInjectorLocation(this._hostTNode, this._hostView);\n        const parentView = getParentInjectorView(parentLocation, this._hostView);\n        const parentTNode = getParentInjectorTNode(parentLocation, this._hostView, this._hostTNode);\n\n        return !hasParentInjector(parentLocation) || parentTNode == null ?\n            new NullInjector() :\n            new NodeInjector(parentTNode, parentView);\n      }\n\n      clear(): void {\n        while (this._lContainer[VIEWS].length) {\n          this.remove(0);\n        }\n      }\n\n      get(index: number): viewEngine_ViewRef|null { return this._viewRefs[index] || null; }\n\n      get length(): number { return this._lContainer[VIEWS].length; }\n\n      createEmbeddedView<C>(templateRef: ViewEngine_TemplateRef<C>, context?: C, index?: number):\n          viewEngine_EmbeddedViewRef<C> {\n        const adjustedIdx = this._adjustIndex(index);\n        const viewRef = (templateRef as any)\n                            .createEmbeddedView(\n                                context || <any>{}, this._lContainer, this._hostTNode,\n                                this._hostView, adjustedIdx);\n        (viewRef as ViewRef<any>).attachToViewContainerRef(this);\n        this._viewRefs.splice(adjustedIdx, 0, viewRef);\n        return viewRef;\n      }\n\n      createComponent<C>(\n          componentFactory: viewEngine_ComponentFactory<C>, index?: number|undefined,\n          injector?: Injector|undefined, projectableNodes?: any[][]|undefined,\n          ngModuleRef?: viewEngine_NgModuleRef<any>|undefined): viewEngine_ComponentRef<C> {\n        const contextInjector = injector || this.parentInjector;\n        if (!ngModuleRef && contextInjector) {\n          ngModuleRef = contextInjector.get(viewEngine_NgModuleRef, null);\n        }\n\n        const componentRef =\n            componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);\n        this.insert(componentRef.hostView, index);\n        return componentRef;\n      }\n\n      insert(viewRef: viewEngine_ViewRef, index?: number): viewEngine_ViewRef {\n        if (viewRef.destroyed) {\n          throw new Error('Cannot insert a destroyed View in a ViewContainer!');\n        }\n        const lView = (viewRef as ViewRef<any>)._lView !;\n        const adjustedIdx = this._adjustIndex(index);\n\n        insertView(lView, this._lContainer, this._hostView, adjustedIdx, this._hostTNode.index);\n\n        const beforeNode =\n            getBeforeNodeForView(adjustedIdx, this._lContainer[VIEWS], this._lContainer[NATIVE]);\n        addRemoveViewFromContainer(lView, true, beforeNode);\n\n        (viewRef as ViewRef<any>).attachToViewContainerRef(this);\n        this._viewRefs.splice(adjustedIdx, 0, viewRef);\n\n        return viewRef;\n      }\n\n      move(viewRef: viewEngine_ViewRef, newIndex: number): viewEngine_ViewRef {\n        if (viewRef.destroyed) {\n          throw new Error('Cannot move a destroyed View in a ViewContainer!');\n        }\n        const index = this.indexOf(viewRef);\n        this.detach(index);\n        this.insert(viewRef, this._adjustIndex(newIndex));\n        return viewRef;\n      }\n\n      indexOf(viewRef: viewEngine_ViewRef): number { return this._viewRefs.indexOf(viewRef); }\n\n      remove(index?: number): void {\n        const adjustedIdx = this._adjustIndex(index, -1);\n        removeView(this._lContainer, this._hostTNode, adjustedIdx);\n        this._viewRefs.splice(adjustedIdx, 1);\n      }\n\n      detach(index?: number): viewEngine_ViewRef|null {\n        const adjustedIdx = this._adjustIndex(index, -1);\n        detachView(this._lContainer, adjustedIdx, !!this._hostTNode.detached);\n        return this._viewRefs.splice(adjustedIdx, 1)[0] || null;\n      }\n\n      private _adjustIndex(index?: number, shift: number = 0) {\n        if (index == null) {\n          return this._lContainer[VIEWS].length + shift;\n        }\n        if (ngDevMode) {\n          assertGreaterThan(index, -1, 'index must be positive');\n          // +1 because it's legal to insert at the end.\n          assertLessThan(index, this._lContainer[VIEWS].length + 1 + shift, 'index');\n        }\n        return index;\n      }\n    };\n  }\n\n  ngDevMode && assertNodeOfPossibleTypes(\n                   hostTNode, TNodeType.Container, TNodeType.Element, TNodeType.ElementContainer);\n\n  let lContainer: LContainer;\n  const slotValue = hostView[hostTNode.index];\n  if (isLContainer(slotValue)) {\n    // If the host is a container, we don't need to create a new LContainer\n    lContainer = slotValue;\n    lContainer[ACTIVE_INDEX] = -1;\n  } else {\n    const commentNode = hostView[RENDERER].createComment(ngDevMode ? 'container' : '');\n    ngDevMode && ngDevMode.rendererCreateComment++;\n\n    // A container can be created on the root (topmost / bootstrapped) component and in this case we\n    // can't use LTree to insert container's marker node (both parent of a comment node and the\n    // commend node itself is located outside of elements hold by LTree). In this specific case we\n    // use low-level DOM manipulation to insert container's marker (comment) node.\n    if (isRootView(hostView)) {\n      const renderer = hostView[RENDERER];\n      const hostNative = getNativeByTNode(hostTNode, hostView) !;\n      const parentOfHostNative = nativeParentNode(renderer, hostNative);\n      nativeInsertBefore(\n          renderer, parentOfHostNative !, commentNode, nativeNextSibling(renderer, hostNative));\n    } else {\n      appendChild(commentNode, hostTNode, hostView);\n    }\n\n    hostView[hostTNode.index] = lContainer =\n        createLContainer(slotValue, hostTNode, hostView, commentNode, true);\n\n    addToViewTree(hostView, hostTNode.index as number, lContainer);\n  }\n\n  return new R3ViewContainerRef(lContainer, hostTNode, hostView);\n}\n\n\n/** Returns a ChangeDetectorRef (a.k.a. a ViewRef) */\nexport function injectChangeDetectorRef(): ViewEngine_ChangeDetectorRef {\n  return createViewRef(getPreviousOrParentTNode(), getLView(), null);\n}\n\n/**\n * Creates a ViewRef and stores it on the injector as ChangeDetectorRef (public alias).\n *\n * @param hostTNode The node that is requesting a ChangeDetectorRef\n * @param hostView The view to which the node belongs\n * @param context The context for this change detector ref\n * @returns The ChangeDetectorRef to use\n */\nexport function createViewRef(\n    hostTNode: TNode, hostView: LView, context: any): ViewEngine_ChangeDetectorRef {\n  if (isComponent(hostTNode)) {\n    const componentIndex = hostTNode.flags >> TNodeFlags.DirectiveStartingIndexShift;\n    const componentView = getComponentViewByIndex(hostTNode.index, hostView);\n    return new ViewRef(componentView, context, componentIndex);\n  } else if (hostTNode.type === TNodeType.Element) {\n    const hostComponentView = findComponentView(hostView);\n    return new ViewRef(hostComponentView, hostComponentView[CONTEXT], -1);\n  }\n  return null !;\n}\n\nfunction getOrCreateRenderer2(view: LView): Renderer2 {\n  const renderer = view[RENDERER];\n  if (isProceduralRenderer(renderer)) {\n    return renderer as Renderer2;\n  } else {\n    throw new Error('Cannot inject Renderer2 when the application uses Renderer3!');\n  }\n}\n\n/** Returns a Renderer2 (or throws when application was bootstrapped with Renderer3) */\nexport function injectRenderer2(): Renderer2 {\n  return getOrCreateRenderer2(getLView());\n}\n"]}