{"version":3,"file":"injectable.js","sourceRoot":"","sources":["../../../../../../../packages/core/src/render3/jit/injectable.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '../../di/injectable';\nimport {ClassSansProvider, ExistingSansProvider, FactorySansProvider, ValueProvider, ValueSansProvider} from '../../di/provider';\nimport {Type} from '../../type';\nimport {getClosureSafeProperty} from '../../util/property';\nimport {NG_INJECTABLE_DEF} from '../fields';\n\nimport {R3InjectableMetadataFacade, getCompilerFacade} from './compiler_facade';\nimport {angularCoreEnv} from './environment';\nimport {convertDependencies, reflectDependencies} from './util';\n\n\n\n/**\n * Compile an Angular injectable according to its `Injectable` metadata, and patch the resulting\n * `ngInjectableDef` onto the injectable type.\n */\nexport function compileInjectable(type: Type<any>, srcMeta?: Injectable): void {\n  // Allow the compilation of a class with a `@Injectable()` decorator without parameters\n  const meta: Injectable = srcMeta || {providedIn: null};\n\n  let def: any = null;\n\n  // if NG_INJECTABLE_DEF is already defined on this class then don't overwrite it\n  if (type.hasOwnProperty(NG_INJECTABLE_DEF)) return;\n\n  Object.defineProperty(type, NG_INJECTABLE_DEF, {\n    get: () => {\n      if (def === null) {\n        const meta: Injectable = srcMeta || {providedIn: null};\n        const hasAProvider = isUseClassProvider(meta) || isUseFactoryProvider(meta) ||\n            isUseValueProvider(meta) || isUseExistingProvider(meta);\n\n\n        const compilerMeta: R3InjectableMetadataFacade = {\n          name: type.name,\n          type: type,\n          providedIn: meta.providedIn,\n          ctorDeps: reflectDependencies(type),\n          userDeps: undefined\n        };\n        if ((isUseClassProvider(meta) || isUseFactoryProvider(meta)) && meta.deps !== undefined) {\n          compilerMeta.userDeps = convertDependencies(meta.deps);\n        }\n        if (!hasAProvider) {\n          // In the case the user specifies a type provider, treat it as {provide: X, useClass: X}.\n          // The deps will have been reflected above, causing the factory to create the class by\n          // calling\n          // its constructor with injected deps.\n          compilerMeta.useClass = type;\n        } else if (isUseClassProvider(meta)) {\n          // The user explicitly specified useClass, and may or may not have provided deps.\n          compilerMeta.useClass = meta.useClass;\n        } else if (isUseValueProvider(meta)) {\n          // The user explicitly specified useValue.\n          compilerMeta.useValue = meta.useValue;\n        } else if (isUseFactoryProvider(meta)) {\n          // The user explicitly specified useFactory.\n          compilerMeta.useFactory = meta.useFactory;\n        } else if (isUseExistingProvider(meta)) {\n          // The user explicitly specified useExisting.\n          compilerMeta.useExisting = meta.useExisting;\n        } else {\n          // Can't happen - either hasAProvider will be false, or one of the providers will be set.\n          throw new Error(`Unreachable state.`);\n        }\n        def = getCompilerFacade().compileInjectable(\n            angularCoreEnv, `ng://${type.name}/ngInjectableDef.js`, compilerMeta);\n      }\n      return def;\n    },\n  });\n}\n\ntype UseClassProvider = Injectable & ClassSansProvider & {deps?: any[]};\n\nconst USE_VALUE =\n    getClosureSafeProperty<ValueProvider>({provide: String, useValue: getClosureSafeProperty});\n\nfunction isUseClassProvider(meta: Injectable): meta is UseClassProvider {\n  return (meta as UseClassProvider).useClass !== undefined;\n}\n\nfunction isUseValueProvider(meta: Injectable): meta is Injectable&ValueSansProvider {\n  return USE_VALUE in meta;\n}\n\nfunction isUseFactoryProvider(meta: Injectable): meta is Injectable&FactorySansProvider {\n  return (meta as FactorySansProvider).useFactory !== undefined;\n}\n\nfunction isUseExistingProvider(meta: Injectable): meta is Injectable&ExistingSansProvider {\n  return (meta as ExistingSansProvider).useExisting !== undefined;\n}\n"]}