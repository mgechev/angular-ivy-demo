{"version":3,"file":"i18n.js","sourceRoot":"","sources":["../../../../../../packages/core/src/render3/i18n.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {SRCSET_ATTRS, URI_ATTRS, VALID_ATTRS, VALID_ELEMENTS, getTemplateContent} from '../sanitization/html_sanitizer';\nimport {InertBodyHelper} from '../sanitization/inert_body';\nimport {_sanitizeUrl, sanitizeSrcset} from '../sanitization/url_sanitizer';\n\nimport {assertDefined, assertEqual, assertGreaterThan} from './assert';\nimport {allocExpando, createNodeAtIndex, elementAttribute, load, textBinding} from './instructions';\nimport {LContainer, NATIVE, RENDER_PARENT} from './interfaces/container';\nimport {COMMENT_MARKER, ELEMENT_MARKER, I18nMutateOpCode, I18nMutateOpCodes, I18nUpdateOpCode, I18nUpdateOpCodes, IcuType, TI18n, TIcu} from './interfaces/i18n';\nimport {TElementNode, TIcuContainerNode, TNode, TNodeType} from './interfaces/node';\nimport {RComment, RElement} from './interfaces/renderer';\nimport {SanitizerFn} from './interfaces/sanitization';\nimport {StylingContext} from './interfaces/styling';\nimport {BINDING_INDEX, HEADER_OFFSET, HOST_NODE, LView, RENDERER, TVIEW, TView} from './interfaces/view';\nimport {appendChild, createTextNode, removeChild} from './node_manipulation';\nimport {getIsParent, getLView, getPreviousOrParentTNode, setIsParent, setPreviousOrParentTNode} from './state';\nimport {NO_CHANGE} from './tokens';\nimport {addAllToArray, getNativeByIndex, getNativeByTNode, getTNode, isLContainer, stringify} from './util';\n\nconst MARKER = `�`;\nconst ICU_BLOCK_REGEX = /^\\s*(�\\d+�)\\s*,\\s*(select|plural)\\s*,/;\nconst SUBTEMPLATE_REGEXP = /�\\/?\\*(\\d+:\\d+)�/gi;\nconst PH_REGEXP = /�(\\/?[#*]\\d+):?\\d*�/gi;\nconst BINDING_REGEXP = /�(\\d+):?\\d*�/gi;\nconst ICU_REGEXP = /({\\s*�\\d+�\\s*,\\s*\\S{6}\\s*,[\\s\\S]*})/gi;\n\n// i18nPostproocess regexps\nconst PP_PLACEHOLDERS = /\\[(�.+?�?)\\]/g;\nconst PP_ICU_VARS = /({\\s*)(VAR_(PLURAL|SELECT)(_\\d+)?)(\\s*,)/g;\nconst PP_ICUS = /�I18N_EXP_(ICU(_\\d+)?)�/g;\n\ninterface IcuExpression {\n  type: IcuType;\n  mainBinding: number;\n  cases: string[];\n  values: (string|IcuExpression)[][];\n}\n\ninterface IcuCase {\n  /**\n   * Number of slots to allocate in expando for this case.\n   *\n   * This is the max number of DOM elements which will be created by this i18n + ICU blocks. When\n   * the DOM elements are being created they are stored in the EXPANDO, so that update OpCodes can\n   * write into them.\n   */\n  vars: number;\n\n  /**\n   * An optional array of child/sub ICUs.\n   */\n  childIcus: number[];\n\n  /**\n   * A set of OpCodes to apply in order to build up the DOM render tree for the ICU\n   */\n  create: I18nMutateOpCodes;\n\n  /**\n   * A set of OpCodes to apply in order to destroy the DOM render tree for the ICU.\n   */\n  remove: I18nMutateOpCodes;\n\n  /**\n   * A set of OpCodes to apply in order to update the DOM render tree for the ICU bindings.\n   */\n  update: I18nUpdateOpCodes;\n}\n\n/**\n * Breaks pattern into strings and top level {...} blocks.\n * Can be used to break a message into text and ICU expressions, or to break an ICU expression into\n * keys and cases.\n * Original code from closure library, modified for Angular.\n *\n * @param pattern (sub)Pattern to be broken.\n *\n */\nfunction extractParts(pattern: string): (string | IcuExpression)[] {\n  if (!pattern) {\n    return [];\n  }\n\n  let prevPos = 0;\n  const braceStack = [];\n  const results: (string | IcuExpression)[] = [];\n  const braces = /[{}]/g;\n  // lastIndex doesn't get set to 0 so we have to.\n  braces.lastIndex = 0;\n\n  let match;\n  while (match = braces.exec(pattern)) {\n    const pos = match.index;\n    if (match[0] == '}') {\n      braceStack.pop();\n\n      if (braceStack.length == 0) {\n        // End of the block.\n        const block = pattern.substring(prevPos, pos);\n        if (ICU_BLOCK_REGEX.test(block)) {\n          results.push(parseICUBlock(block));\n        } else if (block) {  // Don't push empty strings\n          results.push(block);\n        }\n\n        prevPos = pos + 1;\n      }\n    } else {\n      if (braceStack.length == 0) {\n        const substring = pattern.substring(prevPos, pos);\n        results.push(substring);\n        prevPos = pos + 1;\n      }\n      braceStack.push('{');\n    }\n  }\n\n  const substring = pattern.substring(prevPos);\n  if (substring != '') {\n    results.push(substring);\n  }\n\n  return results;\n}\n\n/**\n * Parses text containing an ICU expression and produces a JSON object for it.\n * Original code from closure library, modified for Angular.\n *\n * @param pattern Text containing an ICU expression that needs to be parsed.\n *\n */\nfunction parseICUBlock(pattern: string): IcuExpression {\n  const cases = [];\n  const values: (string | IcuExpression)[][] = [];\n  let icuType = IcuType.plural;\n  let mainBinding = 0;\n  pattern = pattern.replace(ICU_BLOCK_REGEX, function(str: string, binding: string, type: string) {\n    if (type === 'select') {\n      icuType = IcuType.select;\n    } else {\n      icuType = IcuType.plural;\n    }\n    mainBinding = parseInt(binding.substr(1), 10);\n    return '';\n  });\n\n  const parts = extractParts(pattern) as string[];\n  // Looking for (key block)+ sequence. One of the keys has to be \"other\".\n  for (let pos = 0; pos < parts.length;) {\n    let key = parts[pos++].trim();\n    if (icuType === IcuType.plural) {\n      // Key can be \"=x\", we just want \"x\"\n      key = key.replace(/\\s*(?:=)?(\\w+)\\s*/, '$1');\n    }\n    if (key.length) {\n      cases.push(key);\n    }\n\n    const blocks = extractParts(parts[pos++]) as string[];\n    if (blocks.length) {\n      values.push(blocks);\n    }\n  }\n\n  assertGreaterThan(cases.indexOf('other'), -1, 'Missing key \"other\" in ICU statement.');\n  // TODO(ocombe): support ICU expressions in attributes, see #21615\n  return {type: icuType, mainBinding: mainBinding, cases, values};\n}\n\n/**\n * Removes everything inside the sub-templates of a message.\n */\nfunction removeInnerTemplateTranslation(message: string): string {\n  let match;\n  let res = '';\n  let index = 0;\n  let inTemplate = false;\n  let tagMatched;\n\n  while ((match = SUBTEMPLATE_REGEXP.exec(message)) !== null) {\n    if (!inTemplate) {\n      res += message.substring(index, match.index + match[0].length);\n      tagMatched = match[1];\n      inTemplate = true;\n    } else {\n      if (match[0] === `${MARKER}/*${tagMatched}${MARKER}`) {\n        index = match.index;\n        inTemplate = false;\n      }\n    }\n  }\n\n  ngDevMode &&\n      assertEqual(\n          inTemplate, false,\n          `Tag mismatch: unable to find the end of the sub-template in the translation \"${message}\"`);\n\n  res += message.substr(index);\n  return res;\n}\n\n/**\n * Extracts a part of a message and removes the rest.\n *\n * This method is used for extracting a part of the message associated with a template. A translated\n * message can span multiple templates.\n *\n * Example:\n * ```\n * <div i18n>Translate <span *ngIf>me</span>!</div>\n * ```\n *\n * @param message The message to crop\n * @param subTemplateIndex Index of the sub-template to extract. If undefined it returns the\n * external template and removes all sub-templates.\n */\nexport function getTranslationForTemplate(message: string, subTemplateIndex?: number) {\n  if (typeof subTemplateIndex !== 'number') {\n    // We want the root template message, ignore all sub-templates\n    return removeInnerTemplateTranslation(message);\n  } else {\n    // We want a specific sub-template\n    const start =\n        message.indexOf(`:${subTemplateIndex}${MARKER}`) + 2 + subTemplateIndex.toString().length;\n    const end = message.search(new RegExp(`${MARKER}\\\\/\\\\*\\\\d+:${subTemplateIndex}${MARKER}`));\n    return removeInnerTemplateTranslation(message.substring(start, end));\n  }\n}\n\n/**\n * Generate the OpCodes to update the bindings of a string.\n *\n * @param str The string containing the bindings.\n * @param destinationNode Index of the destination node which will receive the binding.\n * @param attrName Name of the attribute, if the string belongs to an attribute.\n * @param sanitizeFn Sanitization function used to sanitize the string after update, if necessary.\n */\nfunction generateBindingUpdateOpCodes(\n    str: string, destinationNode: number, attrName?: string,\n    sanitizeFn: SanitizerFn | null = null): I18nUpdateOpCodes {\n  const updateOpCodes: I18nUpdateOpCodes = [null, null];  // Alloc space for mask and size\n  const textParts = str.split(BINDING_REGEXP);\n  let mask = 0;\n\n  for (let j = 0; j < textParts.length; j++) {\n    const textValue = textParts[j];\n\n    if (j & 1) {\n      // Odd indexes are bindings\n      const bindingIndex = parseInt(textValue, 10);\n      updateOpCodes.push(-1 - bindingIndex);\n      mask = mask | toMaskBit(bindingIndex);\n    } else if (textValue !== '') {\n      // Even indexes are text\n      updateOpCodes.push(textValue);\n    }\n  }\n\n  updateOpCodes.push(\n      destinationNode << I18nUpdateOpCode.SHIFT_REF |\n      (attrName ? I18nUpdateOpCode.Attr : I18nUpdateOpCode.Text));\n  if (attrName) {\n    updateOpCodes.push(attrName, sanitizeFn);\n  }\n  updateOpCodes[0] = mask;\n  updateOpCodes[1] = updateOpCodes.length - 2;\n  return updateOpCodes;\n}\n\nfunction getBindingMask(icuExpression: IcuExpression, mask = 0): number {\n  mask = mask | toMaskBit(icuExpression.mainBinding);\n  let match;\n  for (let i = 0; i < icuExpression.values.length; i++) {\n    const valueArr = icuExpression.values[i];\n    for (let j = 0; j < valueArr.length; j++) {\n      const value = valueArr[j];\n      if (typeof value === 'string') {\n        while (match = BINDING_REGEXP.exec(value)) {\n          mask = mask | toMaskBit(parseInt(match[1], 10));\n        }\n      } else {\n        mask = getBindingMask(value as IcuExpression, mask);\n      }\n    }\n  }\n  return mask;\n}\n\nconst i18nIndexStack: number[] = [];\nlet i18nIndexStackPointer = -1;\n\n/**\n * Convert binding index to mask bit.\n *\n * Each index represents a single bit on the bit-mask. Because bit-mask only has 32 bits, we make\n * the 32nd bit share all masks for all bindings higher than 32. Since it is extremely rare to have\n * more than 32 bindings this will be hit very rarely. The downside of hitting this corner case is\n * that we will execute binding code more often than necessary. (penalty of performance)\n */\nfunction toMaskBit(bindingIndex: number): number {\n  return 1 << Math.min(bindingIndex, 31);\n}\n\nconst parentIndexStack: number[] = [];\n\n/**\n * Marks a block of text as translatable.\n *\n * The instructions `i18nStart` and `i18nEnd` mark the translation block in the template.\n * The translation `message` is the value which is locale specific. The translation string may\n * contain placeholders which associate inner elements and sub-templates within the translation.\n *\n * The translation `message` placeholders are:\n * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\n *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n *   `block` that matches the sub-template in which it was declared.\n * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\n *   and end of DOM element that were embedded in the original translation block. The placeholder\n *   `index` points to the element index in the template instructions set. An optional `block` that\n *   matches the sub-template in which it was declared.\n * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\n *   split up and translated separately in each angular template function. The `index` points to the\n *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n *\n * @param index A unique index of the translation in the static block.\n * @param message The translation message.\n * @param subTemplateIndex Optional sub-template index in the `message`.\n */\nexport function i18nStart(index: number, message: string, subTemplateIndex?: number): void {\n  const tView = getLView()[TVIEW];\n  ngDevMode && assertDefined(tView, `tView should be defined`);\n  ngDevMode &&\n      assertEqual(\n          tView.firstTemplatePass, true, `You should only call i18nEnd on first template pass`);\n  if (tView.firstTemplatePass && tView.data[index + HEADER_OFFSET] === null) {\n    i18nStartFirstPass(tView, index, message, subTemplateIndex);\n  }\n}\n\n/**\n * See `i18nStart` above.\n */\nfunction i18nStartFirstPass(\n    tView: TView, index: number, message: string, subTemplateIndex?: number) {\n  i18nIndexStack[++i18nIndexStackPointer] = index;\n  const viewData = getLView();\n  const expandoStartIndex = tView.blueprint.length - HEADER_OFFSET;\n  const previousOrParentTNode = getPreviousOrParentTNode();\n  const parentTNode = getIsParent() ? getPreviousOrParentTNode() :\n                                      previousOrParentTNode && previousOrParentTNode.parent;\n  let parentIndex = parentTNode && parentTNode !== viewData[HOST_NODE] ?\n      parentTNode.index - HEADER_OFFSET :\n      index;\n  let parentIndexPointer = 0;\n  parentIndexStack[parentIndexPointer] = parentIndex;\n  const createOpCodes: I18nMutateOpCodes = [];\n  // If the previous node wasn't the direct parent then we have a translation without top level\n  // element and we need to keep a reference of the previous element if there is one\n  if (index > 0 && previousOrParentTNode !== parentTNode) {\n    // Create an OpCode to select the previous TNode\n    createOpCodes.push(\n        previousOrParentTNode.index << I18nMutateOpCode.SHIFT_REF | I18nMutateOpCode.Select);\n  }\n  const updateOpCodes: I18nUpdateOpCodes = [];\n  const icuExpressions: TIcu[] = [];\n\n  const templateTranslation = getTranslationForTemplate(message, subTemplateIndex);\n  const msgParts = templateTranslation.split(PH_REGEXP);\n  for (let i = 0; i < msgParts.length; i++) {\n    let value = msgParts[i];\n    if (i & 1) {\n      // Odd indexes are placeholders (elements and sub-templates)\n      if (value.charAt(0) === '/') {\n        // It is a closing tag\n        if (value.charAt(1) === '#') {\n          const phIndex = parseInt(value.substr(2), 10);\n          parentIndex = parentIndexStack[--parentIndexPointer];\n          createOpCodes.push(phIndex << I18nMutateOpCode.SHIFT_REF | I18nMutateOpCode.ElementEnd);\n        }\n      } else {\n        const phIndex = parseInt(value.substr(1), 10);\n        // The value represents a placeholder that we move to the designated index\n        createOpCodes.push(\n            phIndex << I18nMutateOpCode.SHIFT_REF | I18nMutateOpCode.Select,\n            parentIndex << I18nMutateOpCode.SHIFT_PARENT | I18nMutateOpCode.AppendChild);\n\n        if (value.charAt(0) === '#') {\n          parentIndexStack[++parentIndexPointer] = parentIndex = phIndex;\n        }\n      }\n    } else {\n      // Even indexes are text (including bindings & ICU expressions)\n      const parts = value.split(ICU_REGEXP);\n      for (let j = 0; j < parts.length; j++) {\n        value = parts[j];\n\n        if (j & 1) {\n          // Odd indexes are ICU expressions\n          // Create the comment node that will anchor the ICU expression\n          allocExpando(viewData);\n          const icuNodeIndex = tView.blueprint.length - 1 - HEADER_OFFSET;\n          createOpCodes.push(\n              COMMENT_MARKER, ngDevMode ? `ICU ${icuNodeIndex}` : '',\n              parentIndex << I18nMutateOpCode.SHIFT_PARENT | I18nMutateOpCode.AppendChild);\n\n          // Update codes for the ICU expression\n          const icuExpression = parseICUBlock(value.substr(1, value.length - 2));\n          const mask = getBindingMask(icuExpression);\n          icuStart(icuExpressions, icuExpression, icuNodeIndex, icuNodeIndex);\n          // Since this is recursive, the last TIcu that was pushed is the one we want\n          const tIcuIndex = icuExpressions.length - 1;\n          updateOpCodes.push(\n              toMaskBit(icuExpression.mainBinding),  // mask of the main binding\n              3,                                     // skip 3 opCodes if not changed\n              -1 - icuExpression.mainBinding,\n              icuNodeIndex << I18nUpdateOpCode.SHIFT_REF | I18nUpdateOpCode.IcuSwitch, tIcuIndex,\n              mask,  // mask of all the bindings of this ICU expression\n              2,     // skip 2 opCodes if not changed\n              icuNodeIndex << I18nUpdateOpCode.SHIFT_REF | I18nUpdateOpCode.IcuUpdate, tIcuIndex);\n        } else if (value !== '') {\n          // Even indexes are text (including bindings)\n          const hasBinding = value.match(BINDING_REGEXP);\n          // Create text nodes\n          allocExpando(viewData);\n          createOpCodes.push(\n              // If there is a binding, the value will be set during update\n              hasBinding ? '' : value,\n              parentIndex << I18nMutateOpCode.SHIFT_PARENT | I18nMutateOpCode.AppendChild);\n\n          if (hasBinding) {\n            addAllToArray(\n                generateBindingUpdateOpCodes(value, tView.blueprint.length - 1 - HEADER_OFFSET),\n                updateOpCodes);\n          }\n        }\n      }\n    }\n  }\n\n  // NOTE: local var needed to properly assert the type of `TI18n`.\n  const tI18n: TI18n = {\n    vars: tView.blueprint.length - HEADER_OFFSET - expandoStartIndex,\n    expandoStartIndex,\n    create: createOpCodes,\n    update: updateOpCodes,\n    icus: icuExpressions.length ? icuExpressions : null,\n  };\n  tView.data[index + HEADER_OFFSET] = tI18n;\n}\n\nfunction appendI18nNode(tNode: TNode, parentTNode: TNode, previousTNode: TNode | null): TNode {\n  ngDevMode && ngDevMode.rendererMoveNode++;\n  const viewData = getLView();\n  if (!previousTNode) {\n    previousTNode = parentTNode;\n  }\n  // re-organize node tree to put this node in the correct position.\n  if (previousTNode === parentTNode && tNode !== parentTNode.child) {\n    tNode.next = parentTNode.child;\n    parentTNode.child = tNode;\n  } else if (previousTNode !== parentTNode && tNode !== previousTNode.next) {\n    tNode.next = previousTNode.next;\n    previousTNode.next = tNode;\n  } else {\n    tNode.next = null;\n  }\n\n  if (parentTNode !== viewData[HOST_NODE]) {\n    tNode.parent = parentTNode as TElementNode;\n  }\n\n  appendChild(getNativeByTNode(tNode, viewData), tNode, viewData);\n\n  const slotValue = viewData[tNode.index];\n  if (tNode.type !== TNodeType.Container && isLContainer(slotValue)) {\n    // Nodes that inject ViewContainerRef also have a comment node that should be moved\n    appendChild(slotValue[NATIVE], tNode, viewData);\n  }\n\n  return tNode;\n}\n\n/**\n * Handles message string post-processing for internationalization.\n *\n * Handles message string post-processing by transforming it from intermediate\n * format (that might contain some markers that we need to replace) to the final\n * form, consumable by i18nStart instruction. Post processing steps include:\n *\n * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])\n * 2. Replace all ICU vars (like \"VAR_PLURAL\")\n * 3. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)\n *    in case multiple ICUs have the same placeholder name\n *\n * @param message Raw translation string for post processing\n * @param replacements Set of replacements that should be applied\n *\n * @returns Transformed string that can be consumed by i18nStart instruction\n *\n * @publicAPI\n */\nexport function i18nPostprocess(\n    message: string, replacements: {[key: string]: (string | string[])}): string {\n  //\n  // Step 1: resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])\n  //\n  const matches: {[key: string]: string[]} = {};\n  let result = message.replace(PP_PLACEHOLDERS, (_match, content: string): string => {\n    if (!matches[content]) {\n      matches[content] = content.split('|');\n    }\n    if (!matches[content].length) {\n      throw new Error(`i18n postprocess: unmatched placeholder - ${content}`);\n    }\n    return matches[content].shift() !;\n  });\n\n  // verify that we injected all values\n  const hasUnmatchedValues = Object.keys(matches).some(key => !!matches[key].length);\n  if (hasUnmatchedValues) {\n    throw new Error(`i18n postprocess: unmatched values - ${JSON.stringify(matches)}`);\n  }\n\n  // return current result if no replacements specified\n  if (!Object.keys(replacements).length) {\n    return result;\n  }\n\n  //\n  // Step 2: replace all ICU vars (like \"VAR_PLURAL\")\n  //\n  result = result.replace(PP_ICU_VARS, (match, start, key, _type, _idx, end): string => {\n    return replacements.hasOwnProperty(key) ? `${start}${replacements[key]}${end}` : match;\n  });\n\n  //\n  // Step 3: replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)\n  // in case multiple ICUs have the same placeholder name\n  //\n  result = result.replace(PP_ICUS, (match, key): string => {\n    if (replacements.hasOwnProperty(key)) {\n      const list = replacements[key] as string[];\n      if (!list.length) {\n        throw new Error(`i18n postprocess: unmatched ICU - ${match} with key: ${key}`);\n      }\n      return list.shift() !;\n    }\n    return match;\n  });\n\n  return result;\n}\n\n/**\n * Translates a translation block marked by `i18nStart` and `i18nEnd`. It inserts the text/ICU nodes\n * into the render tree, moves the placeholder nodes and removes the deleted nodes.\n */\nexport function i18nEnd(): void {\n  const tView = getLView()[TVIEW];\n  ngDevMode && assertDefined(tView, `tView should be defined`);\n  ngDevMode &&\n      assertEqual(\n          tView.firstTemplatePass, true, `You should only call i18nEnd on first template pass`);\n  if (tView.firstTemplatePass) {\n    i18nEndFirstPass(tView);\n  }\n}\n\n/**\n * See `i18nEnd` above.\n */\nfunction i18nEndFirstPass(tView: TView) {\n  const viewData = getLView();\n  ngDevMode && assertEqual(\n                   viewData[BINDING_INDEX], viewData[TVIEW].bindingStartIndex,\n                   'i18nEnd should be called before any binding');\n\n  const rootIndex = i18nIndexStack[i18nIndexStackPointer--];\n  const tI18n = tView.data[rootIndex + HEADER_OFFSET] as TI18n;\n  ngDevMode && assertDefined(tI18n, `You should call i18nStart before i18nEnd`);\n\n  // The last placeholder that was added before `i18nEnd`\n  const previousOrParentTNode = getPreviousOrParentTNode();\n  const visitedPlaceholders =\n      readCreateOpCodes(rootIndex, tI18n.create, tI18n.expandoStartIndex, viewData);\n\n  // Remove deleted placeholders\n  // The last placeholder that was added before `i18nEnd` is `previousOrParentTNode`\n  for (let i = rootIndex + 1; i <= previousOrParentTNode.index - HEADER_OFFSET; i++) {\n    if (visitedPlaceholders.indexOf(i) === -1) {\n      removeNode(i, viewData);\n    }\n  }\n}\n\nfunction readCreateOpCodes(\n    index: number, createOpCodes: I18nMutateOpCodes, expandoStartIndex: number,\n    viewData: LView): number[] {\n  const renderer = getLView()[RENDERER];\n  let currentTNode: TNode|null = null;\n  let previousTNode: TNode|null = null;\n  const visitedPlaceholders: number[] = [];\n  for (let i = 0; i < createOpCodes.length; i++) {\n    const opCode = createOpCodes[i];\n    if (typeof opCode == 'string') {\n      const textRNode = createTextNode(opCode, renderer);\n      ngDevMode && ngDevMode.rendererCreateTextNode++;\n      previousTNode = currentTNode;\n      currentTNode =\n          createNodeAtIndex(expandoStartIndex++, TNodeType.Element, textRNode, null, null);\n      setIsParent(false);\n    } else if (typeof opCode == 'number') {\n      switch (opCode & I18nMutateOpCode.MASK_OPCODE) {\n        case I18nMutateOpCode.AppendChild:\n          const destinationNodeIndex = opCode >>> I18nMutateOpCode.SHIFT_PARENT;\n          let destinationTNode: TNode;\n          if (destinationNodeIndex === index) {\n            // If the destination node is `i18nStart`, we don't have a\n            // top-level node and we should use the host node instead\n            destinationTNode = viewData[HOST_NODE] !;\n          } else {\n            destinationTNode = getTNode(destinationNodeIndex, viewData);\n          }\n          ngDevMode &&\n              assertDefined(\n                  currentTNode !,\n                  `You need to create or select a node before you can insert it into the DOM`);\n          previousTNode = appendI18nNode(currentTNode !, destinationTNode, previousTNode);\n          destinationTNode.next = null;\n          break;\n        case I18nMutateOpCode.Select:\n          const nodeIndex = opCode >>> I18nMutateOpCode.SHIFT_REF;\n          visitedPlaceholders.push(nodeIndex);\n          previousTNode = currentTNode;\n          currentTNode = getTNode(nodeIndex, viewData);\n          if (currentTNode) {\n            setPreviousOrParentTNode(currentTNode);\n            if (currentTNode.type === TNodeType.Element) {\n              setIsParent(true);\n            }\n          }\n          break;\n        case I18nMutateOpCode.ElementEnd:\n          const elementIndex = opCode >>> I18nMutateOpCode.SHIFT_REF;\n          previousTNode = currentTNode = getTNode(elementIndex, viewData);\n          setPreviousOrParentTNode(currentTNode);\n          setIsParent(false);\n          break;\n        case I18nMutateOpCode.Attr:\n          const elementNodeIndex = opCode >>> I18nMutateOpCode.SHIFT_REF;\n          const attrName = createOpCodes[++i] as string;\n          const attrValue = createOpCodes[++i] as string;\n          elementAttribute(elementNodeIndex, attrName, attrValue);\n          break;\n        default:\n          throw new Error(`Unable to determine the type of mutate operation for \"${opCode}\"`);\n      }\n    } else {\n      switch (opCode) {\n        case COMMENT_MARKER:\n          const commentValue = createOpCodes[++i] as string;\n          ngDevMode && assertEqual(\n                           typeof commentValue, 'string',\n                           `Expected \"${commentValue}\" to be a comment node value`);\n          const commentRNode = renderer.createComment(commentValue);\n          ngDevMode && ngDevMode.rendererCreateComment++;\n          previousTNode = currentTNode;\n          currentTNode = createNodeAtIndex(\n              expandoStartIndex++, TNodeType.IcuContainer, commentRNode, null, null);\n          (currentTNode as TIcuContainerNode).activeCaseIndex = null;\n          // We will add the case nodes later, during the update phase\n          setIsParent(false);\n          break;\n        case ELEMENT_MARKER:\n          const tagNameValue = createOpCodes[++i] as string;\n          ngDevMode && assertEqual(\n                           typeof tagNameValue, 'string',\n                           `Expected \"${tagNameValue}\" to be an element node tag name`);\n          const elementRNode = renderer.createElement(tagNameValue);\n          ngDevMode && ngDevMode.rendererCreateElement++;\n          previousTNode = currentTNode;\n          currentTNode = createNodeAtIndex(\n              expandoStartIndex++, TNodeType.Element, elementRNode, tagNameValue, null);\n          break;\n        default:\n          throw new Error(`Unable to determine the type of mutate operation for \"${opCode}\"`);\n      }\n    }\n  }\n\n  setIsParent(false);\n\n  return visitedPlaceholders;\n}\n\nfunction readUpdateOpCodes(\n    updateOpCodes: I18nUpdateOpCodes, icus: TIcu[] | null, bindingsStartIndex: number,\n    changeMask: number, viewData: LView, bypassCheckBit = false) {\n  let caseCreated = false;\n  for (let i = 0; i < updateOpCodes.length; i++) {\n    // bit code to check if we should apply the next update\n    const checkBit = updateOpCodes[i] as number;\n    // Number of opCodes to skip until next set of update codes\n    const skipCodes = updateOpCodes[++i] as number;\n    if (bypassCheckBit || (checkBit & changeMask)) {\n      // The value has been updated since last checked\n      let value = '';\n      for (let j = i + 1; j <= (i + skipCodes); j++) {\n        const opCode = updateOpCodes[j];\n        if (typeof opCode == 'string') {\n          value += opCode;\n        } else if (typeof opCode == 'number') {\n          if (opCode < 0) {\n            // It's a binding index whose value is negative\n            value += stringify(viewData[bindingsStartIndex - opCode]);\n          } else {\n            const nodeIndex = opCode >>> I18nUpdateOpCode.SHIFT_REF;\n            switch (opCode & I18nUpdateOpCode.MASK_OPCODE) {\n              case I18nUpdateOpCode.Attr:\n                const attrName = updateOpCodes[++j] as string;\n                const sanitizeFn = updateOpCodes[++j] as SanitizerFn | null;\n                elementAttribute(nodeIndex, attrName, value, sanitizeFn);\n                break;\n              case I18nUpdateOpCode.Text:\n                textBinding(nodeIndex, value);\n                break;\n              case I18nUpdateOpCode.IcuSwitch:\n                let tIcuIndex = updateOpCodes[++j] as number;\n                let tIcu = icus ![tIcuIndex];\n                let icuTNode = getTNode(nodeIndex, viewData) as TIcuContainerNode;\n                // If there is an active case, delete the old nodes\n                if (icuTNode.activeCaseIndex !== null) {\n                  const removeCodes = tIcu.remove[icuTNode.activeCaseIndex];\n                  for (let k = 0; k < removeCodes.length; k++) {\n                    const removeOpCode = removeCodes[k] as number;\n                    switch (removeOpCode & I18nMutateOpCode.MASK_OPCODE) {\n                      case I18nMutateOpCode.Remove:\n                        const nodeIndex = removeOpCode >>> I18nMutateOpCode.SHIFT_REF;\n                        removeNode(nodeIndex, viewData);\n                        break;\n                      case I18nMutateOpCode.RemoveNestedIcu:\n                        const nestedIcuNodeIndex =\n                            removeCodes[k + 1] as number >>> I18nMutateOpCode.SHIFT_REF;\n                        const nestedIcuTNode =\n                            getTNode(nestedIcuNodeIndex, viewData) as TIcuContainerNode;\n                        const activeIndex = nestedIcuTNode.activeCaseIndex;\n                        if (activeIndex !== null) {\n                          const nestedIcuTIndex = removeOpCode >>> I18nMutateOpCode.SHIFT_REF;\n                          const nestedTIcu = icus ![nestedIcuTIndex];\n                          addAllToArray(nestedTIcu.remove[activeIndex], removeCodes);\n                        }\n                        break;\n                    }\n                  }\n                }\n\n                // Update the active caseIndex\n                const caseIndex = getCaseIndex(tIcu, value);\n                icuTNode.activeCaseIndex = caseIndex !== -1 ? caseIndex : null;\n\n                // Add the nodes for the new case\n                readCreateOpCodes(-1, tIcu.create[caseIndex], tIcu.expandoStartIndex, viewData);\n                caseCreated = true;\n                break;\n              case I18nUpdateOpCode.IcuUpdate:\n                tIcuIndex = updateOpCodes[++j] as number;\n                tIcu = icus ![tIcuIndex];\n                icuTNode = getTNode(nodeIndex, viewData) as TIcuContainerNode;\n                readUpdateOpCodes(\n                    tIcu.update[icuTNode.activeCaseIndex !], icus, bindingsStartIndex, changeMask,\n                    viewData, caseCreated);\n                break;\n            }\n          }\n        }\n      }\n    }\n    i += skipCodes;\n  }\n}\n\nfunction removeNode(index: number, viewData: LView) {\n  const removedPhTNode = getTNode(index, viewData);\n  const removedPhRNode = getNativeByIndex(index, viewData);\n  removeChild(removedPhTNode, removedPhRNode || null, viewData);\n  removedPhTNode.detached = true;\n  ngDevMode && ngDevMode.rendererRemoveNode++;\n\n  const slotValue = load(index) as RElement | RComment | LContainer | StylingContext;\n  if (isLContainer(slotValue)) {\n    const lContainer = slotValue as LContainer;\n    if (removedPhTNode.type !== TNodeType.Container) {\n      removeChild(removedPhTNode, lContainer[NATIVE] || null, viewData);\n    }\n    lContainer[RENDER_PARENT] = null;\n  }\n}\n\n/**\n *\n * Use this instruction to create a translation block that doesn't contain any placeholder.\n * It calls both {@link i18nStart} and {@link i18nEnd} in one instruction.\n *\n * The translation `message` is the value which is locale specific. The translation string may\n * contain placeholders which associate inner elements and sub-templates within the translation.\n *\n * The translation `message` placeholders are:\n * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be\n *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n *   `block` that matches the sub-template in which it was declared.\n * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning\n *   and end of DOM element that were embedded in the original translation block. The placeholder\n *   `index` points to the element index in the template instructions set. An optional `block` that\n *   matches the sub-template in which it was declared.\n * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be\n *   split up and translated separately in each angular template function. The `index` points to the\n *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n *\n * @param index A unique index of the translation in the static block.\n * @param message The translation message.\n * @param subTemplateIndex Optional sub-template index in the `message`.\n */\nexport function i18n(index: number, message: string, subTemplateIndex?: number): void {\n  i18nStart(index, message, subTemplateIndex);\n  i18nEnd();\n}\n\n/**\n * Marks a list of attributes as translatable.\n *\n * @param index A unique index in the static block\n * @param values\n */\nexport function i18nAttributes(index: number, values: string[]): void {\n  const tView = getLView()[TVIEW];\n  ngDevMode && assertDefined(tView, `tView should be defined`);\n  ngDevMode &&\n      assertEqual(\n          tView.firstTemplatePass, true, `You should only call i18nEnd on first template pass`);\n  if (tView.firstTemplatePass && tView.data[index + HEADER_OFFSET] === null) {\n    i18nAttributesFirstPass(tView, index, values);\n  }\n}\n\n/**\n * See `i18nAttributes` above.\n */\nfunction i18nAttributesFirstPass(tView: TView, index: number, values: string[]) {\n  const previousElement = getPreviousOrParentTNode();\n  const previousElementIndex = previousElement.index - HEADER_OFFSET;\n  const updateOpCodes: I18nUpdateOpCodes = [];\n  for (let i = 0; i < values.length; i += 2) {\n    const attrName = values[i];\n    const message = values[i + 1];\n    const parts = message.split(ICU_REGEXP);\n    for (let j = 0; j < parts.length; j++) {\n      const value = parts[j];\n\n      if (j & 1) {\n        // Odd indexes are ICU expressions\n        // TODO(ocombe): support ICU expressions in attributes\n      } else if (value !== '') {\n        // Even indexes are text (including bindings)\n        const hasBinding = !!value.match(BINDING_REGEXP);\n        if (hasBinding) {\n          addAllToArray(\n              generateBindingUpdateOpCodes(value, previousElementIndex, attrName), updateOpCodes);\n        } else {\n          elementAttribute(previousElementIndex, attrName, value);\n        }\n      }\n    }\n  }\n\n  tView.data[index + HEADER_OFFSET] = updateOpCodes;\n}\n\nlet changeMask = 0b0;\nlet shiftsCounter = 0;\n\n/**\n * Stores the values of the bindings during each update cycle in order to determine if we need to\n * update the translated nodes.\n *\n * @param expression The binding's new value or NO_CHANGE\n */\nexport function i18nExp<T>(expression: T | NO_CHANGE): void {\n  if (expression !== NO_CHANGE) {\n    changeMask = changeMask | (1 << shiftsCounter);\n  }\n  shiftsCounter++;\n}\n\n/**\n * Updates a translation block or an i18n attribute when the bindings have changed.\n *\n * @param index Index of either {@link i18nStart} (translation block) or {@link i18nAttributes}\n * (i18n attribute) on which it should update the content.\n */\nexport function i18nApply(index: number) {\n  if (shiftsCounter) {\n    const lView = getLView();\n    const tView = lView[TVIEW];\n    ngDevMode && assertDefined(tView, `tView should be defined`);\n    const tI18n = tView.data[index + HEADER_OFFSET];\n    let updateOpCodes: I18nUpdateOpCodes;\n    let icus: TIcu[]|null = null;\n    if (Array.isArray(tI18n)) {\n      updateOpCodes = tI18n as I18nUpdateOpCodes;\n    } else {\n      updateOpCodes = (tI18n as TI18n).update;\n      icus = (tI18n as TI18n).icus;\n    }\n    const bindingsStartIndex = lView[BINDING_INDEX] - shiftsCounter - 1;\n    readUpdateOpCodes(updateOpCodes, icus, bindingsStartIndex, changeMask, lView);\n\n    // Reset changeMask & maskBit to default for the next update cycle\n    changeMask = 0b0;\n    shiftsCounter = 0;\n  }\n}\n\nenum Plural {\n  Zero = 0,\n  One = 1,\n  Two = 2,\n  Few = 3,\n  Many = 4,\n  Other = 5,\n}\n\n/**\n * Returns the plural case based on the locale.\n * This is a copy of the deprecated function that we used in Angular v4.\n * // TODO(ocombe): remove this once we can the real getPluralCase function\n *\n * @deprecated from v5 the plural case function is in locale data files common/locales/*.ts\n */\nfunction getPluralCase(locale: string, nLike: number | string): Plural {\n  if (typeof nLike === 'string') {\n    nLike = parseInt(<string>nLike, 10);\n  }\n  const n: number = nLike as number;\n  const nDecimal = n.toString().replace(/^[^.]*\\.?/, '');\n  const i = Math.floor(Math.abs(n));\n  const v = nDecimal.length;\n  const f = parseInt(nDecimal, 10);\n  const t = parseInt(n.toString().replace(/^[^.]*\\.?|0+$/g, ''), 10) || 0;\n\n  const lang = locale.split('-')[0].toLowerCase();\n\n  switch (lang) {\n    case 'af':\n    case 'asa':\n    case 'az':\n    case 'bem':\n    case 'bez':\n    case 'bg':\n    case 'brx':\n    case 'ce':\n    case 'cgg':\n    case 'chr':\n    case 'ckb':\n    case 'ee':\n    case 'el':\n    case 'eo':\n    case 'es':\n    case 'eu':\n    case 'fo':\n    case 'fur':\n    case 'gsw':\n    case 'ha':\n    case 'haw':\n    case 'hu':\n    case 'jgo':\n    case 'jmc':\n    case 'ka':\n    case 'kk':\n    case 'kkj':\n    case 'kl':\n    case 'ks':\n    case 'ksb':\n    case 'ky':\n    case 'lb':\n    case 'lg':\n    case 'mas':\n    case 'mgo':\n    case 'ml':\n    case 'mn':\n    case 'nb':\n    case 'nd':\n    case 'ne':\n    case 'nn':\n    case 'nnh':\n    case 'nyn':\n    case 'om':\n    case 'or':\n    case 'os':\n    case 'ps':\n    case 'rm':\n    case 'rof':\n    case 'rwk':\n    case 'saq':\n    case 'seh':\n    case 'sn':\n    case 'so':\n    case 'sq':\n    case 'ta':\n    case 'te':\n    case 'teo':\n    case 'tk':\n    case 'tr':\n    case 'ug':\n    case 'uz':\n    case 'vo':\n    case 'vun':\n    case 'wae':\n    case 'xog':\n      if (n === 1) return Plural.One;\n      return Plural.Other;\n    case 'ak':\n    case 'ln':\n    case 'mg':\n    case 'pa':\n    case 'ti':\n      if (n === Math.floor(n) && n >= 0 && n <= 1) return Plural.One;\n      return Plural.Other;\n    case 'am':\n    case 'as':\n    case 'bn':\n    case 'fa':\n    case 'gu':\n    case 'hi':\n    case 'kn':\n    case 'mr':\n    case 'zu':\n      if (i === 0 || n === 1) return Plural.One;\n      return Plural.Other;\n    case 'ar':\n      if (n === 0) return Plural.Zero;\n      if (n === 1) return Plural.One;\n      if (n === 2) return Plural.Two;\n      if (n % 100 === Math.floor(n % 100) && n % 100 >= 3 && n % 100 <= 10) return Plural.Few;\n      if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 99) return Plural.Many;\n      return Plural.Other;\n    case 'ast':\n    case 'ca':\n    case 'de':\n    case 'en':\n    case 'et':\n    case 'fi':\n    case 'fy':\n    case 'gl':\n    case 'it':\n    case 'nl':\n    case 'sv':\n    case 'sw':\n    case 'ur':\n    case 'yi':\n      if (i === 1 && v === 0) return Plural.One;\n      return Plural.Other;\n    case 'be':\n      if (n % 10 === 1 && !(n % 100 === 11)) return Plural.One;\n      if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 4 &&\n          !(n % 100 >= 12 && n % 100 <= 14))\n        return Plural.Few;\n      if (n % 10 === 0 || n % 10 === Math.floor(n % 10) && n % 10 >= 5 && n % 10 <= 9 ||\n          n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 14)\n        return Plural.Many;\n      return Plural.Other;\n    case 'br':\n      if (n % 10 === 1 && !(n % 100 === 11 || n % 100 === 71 || n % 100 === 91)) return Plural.One;\n      if (n % 10 === 2 && !(n % 100 === 12 || n % 100 === 72 || n % 100 === 92)) return Plural.Two;\n      if (n % 10 === Math.floor(n % 10) && (n % 10 >= 3 && n % 10 <= 4 || n % 10 === 9) &&\n          !(n % 100 >= 10 && n % 100 <= 19 || n % 100 >= 70 && n % 100 <= 79 ||\n            n % 100 >= 90 && n % 100 <= 99))\n        return Plural.Few;\n      if (!(n === 0) && n % 1e6 === 0) return Plural.Many;\n      return Plural.Other;\n    case 'bs':\n    case 'hr':\n    case 'sr':\n      if (v === 0 && i % 10 === 1 && !(i % 100 === 11) || f % 10 === 1 && !(f % 100 === 11))\n        return Plural.One;\n      if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n              !(i % 100 >= 12 && i % 100 <= 14) ||\n          f % 10 === Math.floor(f % 10) && f % 10 >= 2 && f % 10 <= 4 &&\n              !(f % 100 >= 12 && f % 100 <= 14))\n        return Plural.Few;\n      return Plural.Other;\n    case 'cs':\n    case 'sk':\n      if (i === 1 && v === 0) return Plural.One;\n      if (i === Math.floor(i) && i >= 2 && i <= 4 && v === 0) return Plural.Few;\n      if (!(v === 0)) return Plural.Many;\n      return Plural.Other;\n    case 'cy':\n      if (n === 0) return Plural.Zero;\n      if (n === 1) return Plural.One;\n      if (n === 2) return Plural.Two;\n      if (n === 3) return Plural.Few;\n      if (n === 6) return Plural.Many;\n      return Plural.Other;\n    case 'da':\n      if (n === 1 || !(t === 0) && (i === 0 || i === 1)) return Plural.One;\n      return Plural.Other;\n    case 'dsb':\n    case 'hsb':\n      if (v === 0 && i % 100 === 1 || f % 100 === 1) return Plural.One;\n      if (v === 0 && i % 100 === 2 || f % 100 === 2) return Plural.Two;\n      if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 ||\n          f % 100 === Math.floor(f % 100) && f % 100 >= 3 && f % 100 <= 4)\n        return Plural.Few;\n      return Plural.Other;\n    case 'ff':\n    case 'fr':\n    case 'hy':\n    case 'kab':\n      if (i === 0 || i === 1) return Plural.One;\n      return Plural.Other;\n    case 'fil':\n      if (v === 0 && (i === 1 || i === 2 || i === 3) ||\n          v === 0 && !(i % 10 === 4 || i % 10 === 6 || i % 10 === 9) ||\n          !(v === 0) && !(f % 10 === 4 || f % 10 === 6 || f % 10 === 9))\n        return Plural.One;\n      return Plural.Other;\n    case 'ga':\n      if (n === 1) return Plural.One;\n      if (n === 2) return Plural.Two;\n      if (n === Math.floor(n) && n >= 3 && n <= 6) return Plural.Few;\n      if (n === Math.floor(n) && n >= 7 && n <= 10) return Plural.Many;\n      return Plural.Other;\n    case 'gd':\n      if (n === 1 || n === 11) return Plural.One;\n      if (n === 2 || n === 12) return Plural.Two;\n      if (n === Math.floor(n) && (n >= 3 && n <= 10 || n >= 13 && n <= 19)) return Plural.Few;\n      return Plural.Other;\n    case 'gv':\n      if (v === 0 && i % 10 === 1) return Plural.One;\n      if (v === 0 && i % 10 === 2) return Plural.Two;\n      if (v === 0 &&\n          (i % 100 === 0 || i % 100 === 20 || i % 100 === 40 || i % 100 === 60 || i % 100 === 80))\n        return Plural.Few;\n      if (!(v === 0)) return Plural.Many;\n      return Plural.Other;\n    case 'he':\n      if (i === 1 && v === 0) return Plural.One;\n      if (i === 2 && v === 0) return Plural.Two;\n      if (v === 0 && !(n >= 0 && n <= 10) && n % 10 === 0) return Plural.Many;\n      return Plural.Other;\n    case 'is':\n      if (t === 0 && i % 10 === 1 && !(i % 100 === 11) || !(t === 0)) return Plural.One;\n      return Plural.Other;\n    case 'ksh':\n      if (n === 0) return Plural.Zero;\n      if (n === 1) return Plural.One;\n      return Plural.Other;\n    case 'kw':\n    case 'naq':\n    case 'se':\n    case 'smn':\n      if (n === 1) return Plural.One;\n      if (n === 2) return Plural.Two;\n      return Plural.Other;\n    case 'lag':\n      if (n === 0) return Plural.Zero;\n      if ((i === 0 || i === 1) && !(n === 0)) return Plural.One;\n      return Plural.Other;\n    case 'lt':\n      if (n % 10 === 1 && !(n % 100 >= 11 && n % 100 <= 19)) return Plural.One;\n      if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 9 &&\n          !(n % 100 >= 11 && n % 100 <= 19))\n        return Plural.Few;\n      if (!(f === 0)) return Plural.Many;\n      return Plural.Other;\n    case 'lv':\n    case 'prg':\n      if (n % 10 === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 ||\n          v === 2 && f % 100 === Math.floor(f % 100) && f % 100 >= 11 && f % 100 <= 19)\n        return Plural.Zero;\n      if (n % 10 === 1 && !(n % 100 === 11) || v === 2 && f % 10 === 1 && !(f % 100 === 11) ||\n          !(v === 2) && f % 10 === 1)\n        return Plural.One;\n      return Plural.Other;\n    case 'mk':\n      if (v === 0 && i % 10 === 1 || f % 10 === 1) return Plural.One;\n      return Plural.Other;\n    case 'mt':\n      if (n === 1) return Plural.One;\n      if (n === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 2 && n % 100 <= 10)\n        return Plural.Few;\n      if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19) return Plural.Many;\n      return Plural.Other;\n    case 'pl':\n      if (i === 1 && v === 0) return Plural.One;\n      if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n          !(i % 100 >= 12 && i % 100 <= 14))\n        return Plural.Few;\n      if (v === 0 && !(i === 1) && i % 10 === Math.floor(i % 10) && i % 10 >= 0 && i % 10 <= 1 ||\n          v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||\n          v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 12 && i % 100 <= 14)\n        return Plural.Many;\n      return Plural.Other;\n    case 'pt':\n      if (n === Math.floor(n) && n >= 0 && n <= 2 && !(n === 2)) return Plural.One;\n      return Plural.Other;\n    case 'ro':\n      if (i === 1 && v === 0) return Plural.One;\n      if (!(v === 0) || n === 0 ||\n          !(n === 1) && n % 100 === Math.floor(n % 100) && n % 100 >= 1 && n % 100 <= 19)\n        return Plural.Few;\n      return Plural.Other;\n    case 'ru':\n    case 'uk':\n      if (v === 0 && i % 10 === 1 && !(i % 100 === 11)) return Plural.One;\n      if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n          !(i % 100 >= 12 && i % 100 <= 14))\n        return Plural.Few;\n      if (v === 0 && i % 10 === 0 ||\n          v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||\n          v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 11 && i % 100 <= 14)\n        return Plural.Many;\n      return Plural.Other;\n    case 'shi':\n      if (i === 0 || n === 1) return Plural.One;\n      if (n === Math.floor(n) && n >= 2 && n <= 10) return Plural.Few;\n      return Plural.Other;\n    case 'si':\n      if (n === 0 || n === 1 || i === 0 && f === 1) return Plural.One;\n      return Plural.Other;\n    case 'sl':\n      if (v === 0 && i % 100 === 1) return Plural.One;\n      if (v === 0 && i % 100 === 2) return Plural.Two;\n      if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || !(v === 0))\n        return Plural.Few;\n      return Plural.Other;\n    case 'tzm':\n      if (n === Math.floor(n) && n >= 0 && n <= 1 || n === Math.floor(n) && n >= 11 && n <= 99)\n        return Plural.One;\n      return Plural.Other;\n    // When there is no specification, the default is always \"other\"\n    // Spec: http://cldr.unicode.org/index/cldr-spec/plural-rules\n    // > other (required—general plural form — also used if the language only has a single form)\n    default:\n      return Plural.Other;\n  }\n}\n\nfunction getPluralCategory(value: any, locale: string): string {\n  const plural = getPluralCase(locale, value);\n\n  switch (plural) {\n    case Plural.Zero:\n      return 'zero';\n    case Plural.One:\n      return 'one';\n    case Plural.Two:\n      return 'two';\n    case Plural.Few:\n      return 'few';\n    case Plural.Many:\n      return 'many';\n    default:\n      return 'other';\n  }\n}\n\n/**\n * Returns the index of the current case of an ICU expression depending on the main binding value\n *\n * @param icuExpression\n * @param bindingValue The value of the main binding used by this ICU expression\n */\nfunction getCaseIndex(icuExpression: TIcu, bindingValue: string): number {\n  let index = icuExpression.cases.indexOf(bindingValue);\n  if (index === -1) {\n    switch (icuExpression.type) {\n      case IcuType.plural: {\n        // TODO(ocombe): replace this hard-coded value by the real LOCALE_ID value\n        const locale = 'en-US';\n        const resolvedCase = getPluralCategory(bindingValue, locale);\n        index = icuExpression.cases.indexOf(resolvedCase);\n        if (index === -1 && resolvedCase !== 'other') {\n          index = icuExpression.cases.indexOf('other');\n        }\n        break;\n      }\n      case IcuType.select: {\n        index = icuExpression.cases.indexOf('other');\n        break;\n      }\n    }\n  }\n  return index;\n}\n\n/**\n * Generate the OpCodes for ICU expressions.\n *\n * @param tIcus\n * @param icuExpression\n * @param startIndex\n * @param expandoStartIndex\n */\nfunction icuStart(\n    tIcus: TIcu[], icuExpression: IcuExpression, startIndex: number,\n    expandoStartIndex: number): void {\n  const createCodes = [];\n  const removeCodes = [];\n  const updateCodes = [];\n  const vars = [];\n  const childIcus: number[][] = [];\n  for (let i = 0; i < icuExpression.values.length; i++) {\n    // Each value is an array of strings & other ICU expressions\n    const valueArr = icuExpression.values[i];\n    const nestedIcus: IcuExpression[] = [];\n    for (let j = 0; j < valueArr.length; j++) {\n      const value = valueArr[j];\n      if (typeof value !== 'string') {\n        // It is an nested ICU expression\n        const icuIndex = nestedIcus.push(value as IcuExpression) - 1;\n        // Replace nested ICU expression by a comment node\n        valueArr[j] = `<!--�${icuIndex}�-->`;\n      }\n    }\n    const icuCase: IcuCase =\n        parseIcuCase(valueArr.join(''), startIndex, nestedIcus, tIcus, expandoStartIndex);\n    createCodes.push(icuCase.create);\n    removeCodes.push(icuCase.remove);\n    updateCodes.push(icuCase.update);\n    vars.push(icuCase.vars);\n    childIcus.push(icuCase.childIcus);\n  }\n  const tIcu: TIcu = {\n    type: icuExpression.type,\n    vars,\n    expandoStartIndex: expandoStartIndex + 1, childIcus,\n    cases: icuExpression.cases,\n    create: createCodes,\n    remove: removeCodes,\n    update: updateCodes\n  };\n  tIcus.push(tIcu);\n  const lView = getLView();\n  const worstCaseSize = Math.max(...vars);\n  for (let i = 0; i < worstCaseSize; i++) {\n    allocExpando(lView);\n  }\n}\n\n/**\n * Transforms a string template into an HTML template and a list of instructions used to update\n * attributes or nodes that contain bindings.\n *\n * @param unsafeHtml The string to parse\n * @param parentIndex\n * @param nestedIcus\n * @param tIcus\n * @param expandoStartIndex\n */\nfunction parseIcuCase(\n    unsafeHtml: string, parentIndex: number, nestedIcus: IcuExpression[], tIcus: TIcu[],\n    expandoStartIndex: number): IcuCase {\n  const inertBodyHelper = new InertBodyHelper(document);\n  const inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n  if (!inertBodyElement) {\n    throw new Error('Unable to generate inert body element');\n  }\n  const wrapper = getTemplateContent(inertBodyElement !) as Element || inertBodyElement;\n  const opCodes: IcuCase = {vars: 0, childIcus: [], create: [], remove: [], update: []};\n  parseNodes(wrapper.firstChild, opCodes, parentIndex, nestedIcus, tIcus, expandoStartIndex);\n  return opCodes;\n}\n\nconst NESTED_ICU = /�(\\d+)�/;\n\n/**\n * Parses a node, its children and its siblings, and generates the mutate & update OpCodes.\n *\n * @param currentNode The first node to parse\n * @param icuCase The data for the ICU expression case that contains those nodes\n * @param parentIndex Index of the current node's parent\n * @param nestedIcus Data for the nested ICU expressions that this case contains\n * @param tIcus Data for all ICU expressions of the current message\n * @param expandoStartIndex Expando start index for the current ICU expression\n */\nfunction parseNodes(\n    currentNode: Node | null, icuCase: IcuCase, parentIndex: number, nestedIcus: IcuExpression[],\n    tIcus: TIcu[], expandoStartIndex: number) {\n  if (currentNode) {\n    const nestedIcusToCreate: [IcuExpression, number][] = [];\n    while (currentNode) {\n      const nextNode: Node|null = currentNode.nextSibling;\n      const newIndex = expandoStartIndex + ++icuCase.vars;\n      switch (currentNode.nodeType) {\n        case Node.ELEMENT_NODE:\n          const element = currentNode as Element;\n          const tagName = element.tagName.toLowerCase();\n          if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n            // This isn't a valid element, we won't create an element for it\n            icuCase.vars--;\n          } else {\n            icuCase.create.push(\n                ELEMENT_MARKER, tagName,\n                parentIndex << I18nMutateOpCode.SHIFT_PARENT | I18nMutateOpCode.AppendChild);\n            const elAttrs = element.attributes;\n            for (let i = 0; i < elAttrs.length; i++) {\n              const attr = elAttrs.item(i) !;\n              const lowerAttrName = attr.name.toLowerCase();\n              const hasBinding = !!attr.value.match(BINDING_REGEXP);\n              // we assume the input string is safe, unless it's using a binding\n              if (hasBinding) {\n                if (VALID_ATTRS.hasOwnProperty(lowerAttrName)) {\n                  if (URI_ATTRS[lowerAttrName]) {\n                    addAllToArray(\n                        generateBindingUpdateOpCodes(attr.value, newIndex, attr.name, _sanitizeUrl),\n                        icuCase.update);\n                  } else if (SRCSET_ATTRS[lowerAttrName]) {\n                    addAllToArray(\n                        generateBindingUpdateOpCodes(\n                            attr.value, newIndex, attr.name, sanitizeSrcset),\n                        icuCase.update);\n                  } else {\n                    addAllToArray(\n                        generateBindingUpdateOpCodes(attr.value, newIndex, attr.name),\n                        icuCase.update);\n                  }\n                } else {\n                  ngDevMode &&\n                      console.warn(\n                          `WARNING: ignoring unsafe attribute value ${lowerAttrName} on element ${tagName} (see http://g.co/ng/security#xss)`);\n                }\n              } else {\n                icuCase.create.push(\n                    newIndex << I18nMutateOpCode.SHIFT_REF | I18nMutateOpCode.Attr, attr.name,\n                    attr.value);\n              }\n            }\n            // Parse the children of this node (if any)\n            parseNodes(\n                currentNode.firstChild, icuCase, newIndex, nestedIcus, tIcus, expandoStartIndex);\n            // Remove the parent node after the children\n            icuCase.remove.push(newIndex << I18nMutateOpCode.SHIFT_REF | I18nMutateOpCode.Remove);\n          }\n          break;\n        case Node.TEXT_NODE:\n          const value = currentNode.textContent || '';\n          const hasBinding = value.match(BINDING_REGEXP);\n          icuCase.create.push(\n              hasBinding ? '' : value,\n              parentIndex << I18nMutateOpCode.SHIFT_PARENT | I18nMutateOpCode.AppendChild);\n          icuCase.remove.push(newIndex << I18nMutateOpCode.SHIFT_REF | I18nMutateOpCode.Remove);\n          if (hasBinding) {\n            addAllToArray(generateBindingUpdateOpCodes(value, newIndex), icuCase.update);\n          }\n          break;\n        case Node.COMMENT_NODE:\n          // Check if the comment node is a placeholder for a nested ICU\n          const match = NESTED_ICU.exec(currentNode.textContent || '');\n          if (match) {\n            const nestedIcuIndex = parseInt(match[1], 10);\n            const newLocal = ngDevMode ? `nested ICU ${nestedIcuIndex}` : '';\n            // Create the comment node that will anchor the ICU expression\n            icuCase.create.push(\n                COMMENT_MARKER, newLocal,\n                parentIndex << I18nMutateOpCode.SHIFT_PARENT | I18nMutateOpCode.AppendChild);\n            const nestedIcu = nestedIcus[nestedIcuIndex];\n            nestedIcusToCreate.push([nestedIcu, newIndex]);\n          } else {\n            // We do not handle any other type of comment\n            icuCase.vars--;\n          }\n          break;\n        default:\n          // We do not handle any other type of element\n          icuCase.vars--;\n      }\n      currentNode = nextNode !;\n    }\n\n    for (let i = 0; i < nestedIcusToCreate.length; i++) {\n      const nestedIcu = nestedIcusToCreate[i][0];\n      const nestedIcuNodeIndex = nestedIcusToCreate[i][1];\n      icuStart(tIcus, nestedIcu, nestedIcuNodeIndex, expandoStartIndex + icuCase.vars);\n      // Since this is recursive, the last TIcu that was pushed is the one we want\n      const nestTIcuIndex = tIcus.length - 1;\n      icuCase.vars += Math.max(...tIcus[nestTIcuIndex].vars);\n      icuCase.childIcus.push(nestTIcuIndex);\n      const mask = getBindingMask(nestedIcu);\n      icuCase.update.push(\n          toMaskBit(nestedIcu.mainBinding),  // mask of the main binding\n          3,                                 // skip 3 opCodes if not changed\n          -1 - nestedIcu.mainBinding,\n          nestedIcuNodeIndex << I18nUpdateOpCode.SHIFT_REF | I18nUpdateOpCode.IcuSwitch,\n          nestTIcuIndex,\n          mask,  // mask of all the bindings of this ICU expression\n          2,     // skip 2 opCodes if not changed\n          nestedIcuNodeIndex << I18nUpdateOpCode.SHIFT_REF | I18nUpdateOpCode.IcuUpdate,\n          nestTIcuIndex);\n      icuCase.remove.push(\n          nestTIcuIndex << I18nMutateOpCode.SHIFT_REF | I18nMutateOpCode.RemoveNestedIcu,\n          nestedIcuNodeIndex << I18nMutateOpCode.SHIFT_REF | I18nMutateOpCode.Remove);\n    }\n  }\n}"]}