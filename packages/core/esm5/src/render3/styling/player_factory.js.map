{"version":3,"file":"player_factory.js","sourceRoot":"","sources":["../../../../../../../packages/core/src/render3/styling/player_factory.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAyBA,MAAM,UAAU,iBAAiB,CAAI,SAA+B,EAAE,KAAQ;IAC5E,yBAAO,IAAI,kBAAkB,CAAC,SAAS,EAAE,KAAK,CAAQ,EAAC;CACxD;;;;AAED;;;AAAA;IAEE,4BAAmB,EAAwB,EAAS,KAAQ;QAAzC,OAAE,GAAF,EAAE,CAAsB;QAAS,UAAK,GAAL,KAAK,CAAG;KAAI;6BA/BlE;IAgCC,CAAA;;;;AAHD,8BAGC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlayerFactory, PlayerFactoryBuildFn} from '../interfaces/player';\n\n/**\n * Combines the binding value and a factory for an animation player.\n *\n * Used to bind a player to an element template binding (currently only\n * `[style]`, `[style.prop]`, `[class]` and `[class.name]` bindings\n * supported). The provided `factoryFn` function will be run once all\n * the associated bindings have been evaluated on the element and is\n * designed to return a player which will then be placed on the element.\n *\n * @param factoryFn The function that is used to create a player\n *   once all the rendering-related (styling values) have been\n *   processed for the element binding.\n * @param value The raw value that will be exposed to the binding\n *   so that the binding can update its internal values when\n *   any changes are evaluated.\n */\nexport function bindPlayerFactory<T>(factoryFn: PlayerFactoryBuildFn, value: T): PlayerFactory {\n  return new BoundPlayerFactory(factoryFn, value) as any;\n}\n\nexport class BoundPlayerFactory<T> {\n  '__brand__': 'Brand for PlayerFactory that nothing will match';\n  constructor(public fn: PlayerFactoryBuildFn, public value: T) {}\n}\n"]}