{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../../../../packages/core/src/render3/util.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAAC,MAAM,EAAC,MAAM,SAAS,CAAC;AAE/B,OAAO,EAAC,iBAAiB,EAAE,aAAa,EAAC,MAAM,UAAU,CAAC;AAC1D,OAAO,EAAC,YAAY,EAAa,MAAM,wBAAwB,CAAC;AAChE,OAAO,EAAW,qBAAqB,EAAC,MAAM,sBAAsB,CAAC;AAErE,OAAO,EAAC,kBAAkB,EAA0D,MAAM,uBAAuB,CAAC;AAIlH,OAAO,EAAC,OAAO,EAAE,gBAAgB,EAAE,KAAK,EAAE,aAAa,EAAE,IAAI,EAAE,SAAS,EAAqB,MAAM,EAAsB,KAAK,EAAQ,MAAM,mBAAmB,CAAC;;;;;;;;;AAShK,MAAM,UAAU,WAAW,CAAC,CAAM,EAAE,CAAM;;;IAGxC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;CACzC;;;;;AAED,MAAM,UAAU,SAAS,CAAC,KAAU;IAClC,IAAI,OAAO,KAAK,IAAI,UAAU;QAAE,OAAO,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC;IAC3D,IAAI,OAAO,KAAK,IAAI,QAAQ;QAAE,OAAO,KAAK,CAAC;IAC3C,IAAI,KAAK,IAAI,IAAI;QAAE,OAAO,EAAE,CAAC;IAC7B,OAAO,EAAE,GAAG,KAAK,CAAC;CACnB;;;;;;AAKD,MAAM,UAAU,OAAO,CAAC,IAAW;;IACjC,IAAM,MAAM,GAAU,EAAE,CAAC;;IACzB,IAAI,CAAC,GAAG,CAAC,CAAC;IAEV,OAAO,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE;;QACtB,IAAM,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QACrB,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACvB,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;gBACnB,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACtC,CAAC,GAAG,CAAC,CAAC;aACP;iBAAM;gBACL,CAAC,EAAE,CAAC;aACL;SACF;aAAM;YACL,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAClB,CAAC,EAAE,CAAC;SACL;KACF;IAED,OAAO,MAAM,CAAC;CACf;;;;;;;;AAGD,MAAM,UAAU,YAAY,CAAI,IAAmB,EAAE,KAAa;IAChE,SAAS,IAAI,iBAAiB,CAAC,IAAI,EAAE,KAAK,GAAG,aAAa,CAAC,CAAC;IAC5D,OAAO,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC,CAAC;CACpC;;;;;;;;;;;;;AAaD,MAAM,UAAU,gBAAgB,CAAC,KAAqD;IACpF,OAAO,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;QAC3B,KAAK,qBAAG,KAAK,CAAC,IAAI,CAAQ,CAAA,CAAC;KAC5B;IACD,OAAO,KAAK,CAAC;CACd;;;;;;;;AAMD,MAAM,UAAU,gBAAgB,CAAC,KAAa,EAAE,KAAY;IAC1D,OAAO,gBAAgB,CAAC,KAAK,CAAC,KAAK,GAAG,aAAa,CAAC,CAAC,CAAC;CACvD;;;;;;AAED,MAAM,UAAU,gBAAgB,CAAC,KAAY,EAAE,QAAe;IAC5D,OAAO,gBAAgB,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;CAChD;;;;;;AAED,MAAM,UAAU,QAAQ,CAAC,KAAa,EAAE,IAAW;IACjD,yBAAO,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,aAAa,CAAU,EAAC;CACzD;;;;;;AAED,MAAM,UAAU,uBAAuB,CAAC,SAAiB,EAAE,QAAe;;IAExE,IAAM,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC;IACtC,OAAO,SAAS,CAAC,MAAM,IAAI,aAAa,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;CACxE;;;;;AAED,MAAM,UAAU,kBAAkB,CAAC,KAAY;IAC7C,OAAO,CAAC,KAAK,CAAC,KAAK,8BAA6B,CAAC,KAAK,CAAC,CAAC;CACzD;;;;;AAED,MAAM,UAAU,WAAW,CAAC,KAAY;IACtC,OAAO,CAAC,KAAK,CAAC,KAAK,yBAAyB,CAAC,2BAA2B,CAAC;CAC1E;;;;;;AAED,MAAM,UAAU,cAAc,CAAI,GAAoB;IACpD,OAAO,mBAAC,GAAsB,EAAC,CAAC,QAAQ,KAAK,IAAI,CAAC;CACnD;;;;;AAED,MAAM,UAAU,YAAY,CAAC,KAAwD;;IAEnF,OAAO,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,OAAO,KAAK,CAAC,YAAY,CAAC,KAAK,QAAQ,CAAC;CACxE;;;;;AAED,MAAM,UAAU,UAAU,CAAC,MAAa;IACtC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,kBAAoB,CAAC,KAAK,CAAC,CAAC;CAClD;;;;;;;;AAQD,MAAM,UAAU,WAAW,CAAC,MAAkB;IAC5C,SAAS,IAAI,aAAa,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;;IAChD,IAAI,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,mBAAC,MAAe,EAAC,CAAC,CAAC,oBAAC,gBAAgB,CAAC,MAAM,CAAC,EAAE,CAAC;IACnF,OAAO,KAAK,IAAI,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,kBAAoB,CAAC,EAAE;QACnD,KAAK,sBAAG,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC;KACzB;IACD,OAAO,KAAK,CAAC;CACd;;;;;AAED,MAAM,UAAU,cAAc,CAAC,eAA2B;;IACxD,IAAM,QAAQ,GAAG,WAAW,CAAC,eAAe,CAAC,CAAC;IAC9C,SAAS;QACL,aAAa,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,sDAAsD,CAAC,CAAC;IAC7F,yBAAO,QAAQ,CAAC,OAAO,CAAgB,EAAC;CACzC;;;;;;;AAMD,MAAM,UAAU,eAAe,CAAC,MAAW;IACzC,OAAO,MAAM,CAAC,qBAAqB,CAAC,CAAC;CACtC;;;;;AAED,MAAM,UAAU,gBAAgB,CAAC,MAAW;;IAC1C,IAAM,KAAK,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC;IACtC,IAAI,KAAK,EAAE;QACT,OAAO,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,mBAAC,KAAiB,EAAC,CAAC,KAAK,CAAC;KACjE;IACD,OAAO,IAAI,CAAC;CACb;;;;;AAED,MAAM,UAAU,iBAAiB,CAAC,cAAwC;IACxE,OAAO,cAAc,KAAK,kBAAkB,CAAC;CAC9C;;;;;AAED,MAAM,UAAU,sBAAsB,CAAC,cAAwC;IAC7E,OAAO,oBAAC,cAAqB,GAAW,gCAAkD,CAAC;CAC5F;;;;;AAED,MAAM,UAAU,2BAA2B,CAAC,cAAwC;IAClF,OAAO,oBAAC,cAAqB,GAAW,4BAAiD,CAAC;CAC3F;;;;;;;;;;AAWD,MAAM,UAAU,qBAAqB,CAAC,QAAkC,EAAE,SAAgB;;IACxF,IAAI,UAAU,GAAG,2BAA2B,CAAC,QAAQ,CAAC,CAAC;;IACvD,IAAI,UAAU,GAAG,SAAS,CAAC;;;;;IAK3B,OAAO,UAAU,GAAG,CAAC,EAAE;QACrB,UAAU,sBAAG,UAAU,CAAC,gBAAgB,CAAC,EAAE,CAAC;QAC5C,UAAU,EAAE,CAAC;KACd;IACD,OAAO,UAAU,CAAC;CACnB;;;;;;;;;;AAWD,MAAM,UAAU,sBAAsB,CAClC,QAAkC,EAAE,SAAgB,EAAE,UAAiB;IAEzE,IAAI,UAAU,CAAC,MAAM,IAAI,UAAU,CAAC,MAAM,CAAC,aAAa,KAAK,CAAC,CAAC,EAAE;;QAE/D,IAAM,aAAa,GAAG,UAAU,CAAC,MAAM,CAAC,aAAa,CAAC;;QACtD,IAAI,aAAW,GAAG,UAAU,CAAC,MAAM,CAAC;QACpC,OAAO,aAAW,CAAC,MAAM,IAAI,IAAI,IAAI,aAAa,IAAI,aAAW,CAAC,aAAa,EAAE;YAC/E,aAAW,GAAG,aAAW,CAAC,MAAM,CAAC;SAClC;QACD,OAAO,aAAW,CAAC;KACpB;;IAED,IAAI,UAAU,GAAG,2BAA2B,CAAC,QAAQ,CAAC,CAAC;;IAEvD,IAAI,UAAU,GAAG,SAAS,CAAC;;IAC3B,IAAI,WAAW,qBAAG,SAAS,CAAC,SAAS,CAAiB,EAAC;;IAGvD,OAAO,UAAU,GAAG,CAAC,EAAE;QACrB,UAAU,sBAAG,UAAU,CAAC,gBAAgB,CAAC,EAAE,CAAC;QAC5C,WAAW,qBAAG,UAAU,CAAC,SAAS,CAAiB,CAAA,CAAC;QACpD,UAAU,EAAE,CAAC;KACd;IACD,OAAO,WAAW,CAAC;CACpB;;AAED,WAAa,gBAAgB,GACzB,CAAC,OAAO,qBAAqB,KAAK,WAAW,IAAI,qBAAqB,IAAK,eAAe;IACzF,UAAU;CACT,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;;;;;;;;AAQpB,MAAM,UAAU,aAAa,CAAC,KAAY,EAAE,GAAU;IACpD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACrC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;KACpB;CACF","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {global} from '../util';\n\nimport {assertDataInRange, assertDefined} from './assert';\nimport {ACTIVE_INDEX, LContainer} from './interfaces/container';\nimport {LContext, MONKEY_PATCH_KEY_NAME} from './interfaces/context';\nimport {ComponentDef, DirectiveDef} from './interfaces/definition';\nimport {NO_PARENT_INJECTOR, RelativeInjectorLocation, RelativeInjectorLocationFlags} from './interfaces/injector';\nimport {TContainerNode, TElementNode, TNode, TNodeFlags} from './interfaces/node';\nimport {RComment, RElement, RText} from './interfaces/renderer';\nimport {StylingContext} from './interfaces/styling';\nimport {CONTEXT, DECLARATION_VIEW, FLAGS, HEADER_OFFSET, HOST, HOST_NODE, LView, LViewFlags, PARENT, RootContext, TData, TVIEW, TView} from './interfaces/view';\n\n\n\n/**\n * Returns whether the values are different from a change detection stand point.\n *\n * Constraints are relaxed in checkNoChanges mode. See `devModeEqual` for details.\n */\nexport function isDifferent(a: any, b: any): boolean {\n  // NaN is the only value that is not equal to itself so the first\n  // test checks if both a and b are not NaN\n  return !(a !== a && b !== b) && a !== b;\n}\n\nexport function stringify(value: any): string {\n  if (typeof value == 'function') return value.name || value;\n  if (typeof value == 'string') return value;\n  if (value == null) return '';\n  return '' + value;\n}\n\n/**\n * Flattens an array in non-recursive way. Input arrays are not modified.\n */\nexport function flatten(list: any[]): any[] {\n  const result: any[] = [];\n  let i = 0;\n\n  while (i < list.length) {\n    const item = list[i];\n    if (Array.isArray(item)) {\n      if (item.length > 0) {\n        list = item.concat(list.slice(i + 1));\n        i = 0;\n      } else {\n        i++;\n      }\n    } else {\n      result.push(item);\n      i++;\n    }\n  }\n\n  return result;\n}\n\n/** Retrieves a value from any `LView` or `TData`. */\nexport function loadInternal<T>(view: LView | TData, index: number): T {\n  ngDevMode && assertDataInRange(view, index + HEADER_OFFSET);\n  return view[index + HEADER_OFFSET];\n}\n\n/**\n * Takes the value of a slot in `LView` and returns the element node.\n *\n * Normally, element nodes are stored flat, but if the node has styles/classes on it,\n * it might be wrapped in a styling context. Or if that node has a directive that injects\n * ViewContainerRef, it may be wrapped in an LContainer. Or if that node is a component,\n * it will be wrapped in LView. It could even have all three, so we keep looping\n * until we find something that isn't an array.\n *\n * @param value The initial value in `LView`\n */\nexport function readElementValue(value: RElement | StylingContext | LContainer | LView): RElement {\n  while (Array.isArray(value)) {\n    value = value[HOST] as any;\n  }\n  return value;\n}\n\n/**\n * Retrieves an element value from the provided `viewData`, by unwrapping\n * from any containers, component views, or style contexts.\n */\nexport function getNativeByIndex(index: number, lView: LView): RElement {\n  return readElementValue(lView[index + HEADER_OFFSET]);\n}\n\nexport function getNativeByTNode(tNode: TNode, hostView: LView): RElement|RText|RComment {\n  return readElementValue(hostView[tNode.index]);\n}\n\nexport function getTNode(index: number, view: LView): TNode {\n  return view[TVIEW].data[index + HEADER_OFFSET] as TNode;\n}\n\nexport function getComponentViewByIndex(nodeIndex: number, hostView: LView): LView {\n  // Could be an LView or an LContainer. If LContainer, unwrap to find LView.\n  const slotValue = hostView[nodeIndex];\n  return slotValue.length >= HEADER_OFFSET ? slotValue : slotValue[HOST];\n}\n\nexport function isContentQueryHost(tNode: TNode): boolean {\n  return (tNode.flags & TNodeFlags.hasContentQuery) !== 0;\n}\n\nexport function isComponent(tNode: TNode): boolean {\n  return (tNode.flags & TNodeFlags.isComponent) === TNodeFlags.isComponent;\n}\n\nexport function isComponentDef<T>(def: DirectiveDef<T>): def is ComponentDef<T> {\n  return (def as ComponentDef<T>).template !== null;\n}\n\nexport function isLContainer(value: RElement | RComment | LContainer | StylingContext): boolean {\n  // Styling contexts are also arrays, but their first index contains an element node\n  return Array.isArray(value) && typeof value[ACTIVE_INDEX] === 'number';\n}\n\nexport function isRootView(target: LView): boolean {\n  return (target[FLAGS] & LViewFlags.IsRoot) !== 0;\n}\n\n/**\n * Retrieve the root view from any component by walking the parent `LView` until\n * reaching the root `LView`.\n *\n * @param component any component\n */\nexport function getRootView(target: LView | {}): LView {\n  ngDevMode && assertDefined(target, 'component');\n  let lView = Array.isArray(target) ? (target as LView) : readPatchedLView(target) !;\n  while (lView && !(lView[FLAGS] & LViewFlags.IsRoot)) {\n    lView = lView[PARENT] !;\n  }\n  return lView;\n}\n\nexport function getRootContext(viewOrComponent: LView | {}): RootContext {\n  const rootView = getRootView(viewOrComponent);\n  ngDevMode &&\n      assertDefined(rootView[CONTEXT], 'RootView has no context. Perhaps it is disconnected?');\n  return rootView[CONTEXT] as RootContext;\n}\n\n/**\n * Returns the monkey-patch value data present on the target (which could be\n * a component, directive or a DOM node).\n */\nexport function readPatchedData(target: any): LView|LContext|null {\n  return target[MONKEY_PATCH_KEY_NAME];\n}\n\nexport function readPatchedLView(target: any): LView|null {\n  const value = readPatchedData(target);\n  if (value) {\n    return Array.isArray(value) ? value : (value as LContext).lView;\n  }\n  return null;\n}\n\nexport function hasParentInjector(parentLocation: RelativeInjectorLocation): boolean {\n  return parentLocation !== NO_PARENT_INJECTOR;\n}\n\nexport function getParentInjectorIndex(parentLocation: RelativeInjectorLocation): number {\n  return (parentLocation as any as number) & RelativeInjectorLocationFlags.InjectorIndexMask;\n}\n\nexport function getParentInjectorViewOffset(parentLocation: RelativeInjectorLocation): number {\n  return (parentLocation as any as number) >> RelativeInjectorLocationFlags.ViewOffsetShift;\n}\n\n/**\n * Unwraps a parent injector location number to find the view offset from the current injector,\n * then walks up the declaration view tree until the view is found that contains the parent\n * injector.\n *\n * @param location The location of the parent injector, which contains the view offset\n * @param startView The LView instance from which to start walking up the view tree\n * @returns The LView instance that contains the parent injector\n */\nexport function getParentInjectorView(location: RelativeInjectorLocation, startView: LView): LView {\n  let viewOffset = getParentInjectorViewOffset(location);\n  let parentView = startView;\n  // For most cases, the parent injector can be found on the host node (e.g. for component\n  // or container), but we must keep the loop here to support the rarer case of deeply nested\n  // <ng-template> tags or inline views, where the parent injector might live many views\n  // above the child injector.\n  while (viewOffset > 0) {\n    parentView = parentView[DECLARATION_VIEW] !;\n    viewOffset--;\n  }\n  return parentView;\n}\n\n/**\n * Unwraps a parent injector location number to find the view offset from the current injector,\n * then walks up the declaration view tree until the TNode of the parent injector is found.\n *\n * @param location The location of the parent injector, which contains the view offset\n * @param startView The LView instance from which to start walking up the view tree\n * @param startTNode The TNode instance of the starting element\n * @returns The TNode of the parent injector\n */\nexport function getParentInjectorTNode(\n    location: RelativeInjectorLocation, startView: LView, startTNode: TNode): TElementNode|\n    TContainerNode|null {\n  if (startTNode.parent && startTNode.parent.injectorIndex !== -1) {\n    // view offset is 0\n    const injectorIndex = startTNode.parent.injectorIndex;\n    let parentTNode = startTNode.parent;\n    while (parentTNode.parent != null && injectorIndex == parentTNode.injectorIndex) {\n      parentTNode = parentTNode.parent;\n    }\n    return parentTNode;\n  }\n\n  let viewOffset = getParentInjectorViewOffset(location);\n  // view offset is 1\n  let parentView = startView;\n  let parentTNode = startView[HOST_NODE] as TElementNode;\n\n  // view offset is superior to 1\n  while (viewOffset > 1) {\n    parentView = parentView[DECLARATION_VIEW] !;\n    parentTNode = parentView[HOST_NODE] as TElementNode;\n    viewOffset--;\n  }\n  return parentTNode;\n}\n\nexport const defaultScheduler =\n    (typeof requestAnimationFrame !== 'undefined' && requestAnimationFrame ||  // browser only\n     setTimeout                                                                // everything else\n     ).bind(global);\n\n/**\n * Equivalent to ES6 spread, add each item to an array.\n *\n * @param items The items to add\n * @param arr The array to which you want to add the items\n */\nexport function addAllToArray(items: any[], arr: any[]) {\n  for (let i = 0; i < items.length; i++) {\n    arr.push(items[i]);\n  }\n}\n"]}