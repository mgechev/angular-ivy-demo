{"version":3,"file":"entrypoint.js","sourceRoot":"","sources":["../../../../../../packages/core/src/view/entrypoint.ts"],"names":[],"mappings":";;;;;;;;;;;;AAQA,OAAO,EAAC,QAAQ,EAAC,MAAM,gBAAgB,CAAC;AAExC,OAAO,EAAC,eAAe,EAAc,MAAM,6BAA6B,CAAC;AAGzE,OAAO,EAAC,oBAAoB,EAAC,MAAM,YAAY,CAAC;AAChD,OAAO,EAAuF,QAAQ,EAAiB,MAAM,SAAS,CAAC;AACvI,OAAO,EAAC,iBAAiB,EAAC,MAAM,QAAQ,CAAC;;;;;AAEzC,MAAM,UAAU,gBAAgB,CAAC,QAA0B;IACzD,oBAAoB,EAAE,CAAC;IACvB,OAAO,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;CAC5C;;;;;;AAED,MAAM,UAAU,qBAAqB,CAAC,IAAe,EAAE,gBAAuC;IAC5F,oBAAoB,EAAE,CAAC;IACvB,OAAO,QAAQ,CAAC,qBAAqB,CAAC,IAAI,EAAE,gBAAgB,CAAC,CAAC;CAC/D;;;;AAED,MAAM,UAAU,cAAc;IAC5B,oBAAoB,EAAE,CAAC;IACvB,OAAO,QAAQ,CAAC,cAAc,EAAE,CAAC;CAClC;;;;;;;AAID,MAAM,UAAU,qBAAqB,CACjC,YAAuB,EAAE,mBAAgC,EACzD,UAAqC;IACvC,OAAO,IAAI,gBAAgB,CAAC,YAAY,EAAE,mBAAmB,EAAE,UAAU,CAAC,CAAC;CAC5E;;;;;AAED,SAAS,uBAAuB,CAAC,GAAuB;;IACtD,IAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;;IAC5C,IAAM,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;;IACxC,IAAM,cAAc,GAA8C,EAAE,CAAC;IACrE,KAAK,IAAM,GAAG,IAAI,GAAG,CAAC,cAAc,EAAE;QACpC,cAAc,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;KAC/C;IAED,OAAO;QACL,OAAO,EAAE,GAAG,CAAC,OAAO;QACpB,MAAM,EAAE,GAAG,CAAC,MAAM,EAAE,SAAS,WAAA,EAAE,OAAO,SAAA,EAAE,cAAc,gBAAA;KACvD,CAAC;CACH;AAED,IAAA;IAA+B,4CAAoB;IACjD,0BACoB,YAA+B,oBAAiC,EACxE;QAFZ;QAGE,wDAAwD;QACxD,+DAA+D;QAC/D,iBAAO,SACR;QALmB,gBAAU,GAAV,UAAU;QAAqB,0BAAoB,GAApB,oBAAoB,CAAa;QACxE,yBAAmB,GAAnB,mBAAmB;;KAI9B;;;;;IAED,iCAAM;;;;IAAN,UAAO,cAA6B;QAClC,oBAAoB,EAAE,CAAC;;QAIvB,IAAM,GAAG,GAAG,uBAAuB,CAAC,iBAAiB,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC;QACjF,OAAO,QAAQ,CAAC,iBAAiB,CAC7B,IAAI,CAAC,UAAU,EAAE,cAAc,IAAI,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,oBAAoB,EAAE,GAAG,CAAC,CAAC;KACvF;2BAvEH;EAsD+B,eAAe,EAkB7C,CAAA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '../di/injector';\nimport {ComponentFactory} from '../linker/component_factory';\nimport {NgModuleFactory, NgModuleRef} from '../linker/ng_module_factory';\nimport {Type} from '../type';\n\nimport {initServicesIfNeeded} from './services';\nimport {NgModuleDefinition, NgModuleDefinitionFactory, NgModuleProviderDef, ProviderOverride, Services, ViewDefinition} from './types';\nimport {resolveDefinition} from './util';\n\nexport function overrideProvider(override: ProviderOverride) {\n  initServicesIfNeeded();\n  return Services.overrideProvider(override);\n}\n\nexport function overrideComponentView(comp: Type<any>, componentFactory: ComponentFactory<any>) {\n  initServicesIfNeeded();\n  return Services.overrideComponentView(comp, componentFactory);\n}\n\nexport function clearOverrides() {\n  initServicesIfNeeded();\n  return Services.clearOverrides();\n}\n\n// Attention: this function is called as top level function.\n// Putting any logic in here will destroy closure tree shaking!\nexport function createNgModuleFactory(\n    ngModuleType: Type<any>, bootstrapComponents: Type<any>[],\n    defFactory: NgModuleDefinitionFactory): NgModuleFactory<any> {\n  return new NgModuleFactory_(ngModuleType, bootstrapComponents, defFactory);\n}\n\nfunction cloneNgModuleDefinition(def: NgModuleDefinition): NgModuleDefinition {\n  const providers = Array.from(def.providers);\n  const modules = Array.from(def.modules);\n  const providersByKey: {[tokenKey: string]: NgModuleProviderDef} = {};\n  for (const key in def.providersByKey) {\n    providersByKey[key] = def.providersByKey[key];\n  }\n\n  return {\n    factory: def.factory,\n    isRoot: def.isRoot, providers, modules, providersByKey,\n  };\n}\n\nclass NgModuleFactory_ extends NgModuleFactory<any> {\n  constructor(\n      public readonly moduleType: Type<any>, private _bootstrapComponents: Type<any>[],\n      private _ngModuleDefFactory: NgModuleDefinitionFactory) {\n    // Attention: this ctor is called as top level function.\n    // Putting any logic in here will destroy closure tree shaking!\n    super();\n  }\n\n  create(parentInjector: Injector|null): NgModuleRef<any> {\n    initServicesIfNeeded();\n    // Clone the NgModuleDefinition so that any tree shakeable provider definition\n    // added to this instance of the NgModuleRef doesn't affect the cached copy.\n    // See https://github.com/angular/angular/issues/25018.\n    const def = cloneNgModuleDefinition(resolveDefinition(this._ngModuleDefFactory));\n    return Services.createNgModuleRef(\n        this.moduleType, parentInjector || Injector.NULL, this._bootstrapComponents, def);\n  }\n}\n"]}