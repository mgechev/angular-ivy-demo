{"version":3,"file":"security.js","sourceRoot":"","sources":["../../../../../../packages/core/src/sanitization/security.ts"],"names":[],"mappings":";;;;;;;;;;;;;IAkBE,OAAQ;IACR,OAAQ;IACR,QAAS;IACT,SAAU;IACV,MAAO;IACP,eAAgB;;;gCALhB,IAAI;gCACJ,IAAI;gCACJ,KAAK;gCACL,MAAM;gCACN,GAAG;gCACH,YAAY;;;;;;;AAQd;;;;;;AAAA;;;oBA/BA;IAiCC,CAAA;;;;;;;AAFD,qBAEC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property\n * like `innerHTML` that could cause Cross Site Scripting (XSS) security bugs when improperly\n * handled.\n *\n * See DomSanitizer for more details on security in Angular applications.\n *\n * @publicApi\n */\nexport enum SecurityContext {\n  NONE = 0,\n  HTML = 1,\n  STYLE = 2,\n  SCRIPT = 3,\n  URL = 4,\n  RESOURCE_URL = 5,\n}\n\n/**\n * Sanitizer is used by the views to sanitize potentially dangerous values.\n *\n * @publicApi\n */\nexport abstract class Sanitizer {\n  abstract sanitize(context: SecurityContext, value: {}|string|null): string|null;\n}\n"]}