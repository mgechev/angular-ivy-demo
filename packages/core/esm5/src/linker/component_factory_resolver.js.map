{"version":3,"file":"component_factory_resolver.js","sourceRoot":"","sources":["../../../../../../packages/core/src/linker/component_factory_resolver.ts"],"names":[],"mappings":";;;;;;;;;;;;AAUA,OAAO,EAAC,SAAS,EAAC,MAAM,SAAS,CAAC;AAElC,OAAO,EAAC,gBAAgB,EAAe,MAAM,qBAAqB,CAAC;;;;;AAGnE,MAAM,UAAU,uBAAuB,CAAC,SAAmB;;IACzD,IAAM,KAAK,GAAG,KAAK,CACf,oCAAkC,SAAS,CAAC,SAAS,CAAC,mDAAgD,CAAC,CAAC;IAC5G,mBAAC,KAAY,EAAC,CAAC,eAAe,CAAC,GAAG,SAAS,CAAC;IAC5C,OAAO,KAAK,CAAC;CACd;;AAED,IAAM,eAAe,GAAG,aAAa,CAAC;;;;;AAEtC,MAAM,UAAU,YAAY,CAAC,KAAY;IACvC,OAAO,mBAAC,KAAY,EAAC,CAAC,eAAe,CAAC,CAAC;CACxC;AAGD,IAAA;;;;;;;;IACE,+DAAuB;;;;;IAAvB,UAA2B,SAAoC;QAC7D,MAAM,uBAAuB,CAAC,SAAS,CAAC,CAAC;KAC1C;wCAhCH;IAiCC,CAAA;;;;;;;;IAMC,gCAAwC,IAAI,6BAA6B,EAAE,CAAC;mCAvC9E;;SAsCsB,wBAAwB;;;;;;;;;;;;AAK9C,IAAA;IAGE,yCACI,SAAkC,EAAU,OAAiC,EACrE;QADoC,YAAO,GAAP,OAAO,CAA0B;QACrE,cAAS,GAAT,SAAS;0BAJA,IAAI,GAAG,EAA8B;QAKxD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;;YACzC,IAAM,OAAO,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;YAC7B,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;SACrD;KACF;;;;;;IAED,iEAAuB;;;;;IAAvB,UAA2B,SAAoC;;QAC7D,IAAI,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QAC7C,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,EAAE;YAC5B,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,uBAAuB,CAAC,SAAS,CAAC,CAAC;SAC3D;QACD,IAAI,CAAC,OAAO,EAAE;YACZ,MAAM,uBAAuB,CAAC,SAAS,CAAC,CAAC;SAC1C;QACD,OAAO,IAAI,6BAA6B,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;KACnE;0CAhEH;IAiEC,CAAA;AAtBD,2CAsBC;;;;;;;;;;;;AAED;;;AAAA;IAAsD,yDAAmB;IAOvE,uCAAoB,OAA4B,EAAU,QAA0B;QAApF,YACE,iBAAO,SAMR;QAPmB,aAAO,GAAP,OAAO,CAAqB;QAAU,cAAQ,GAAR,QAAQ,CAAkB;QAElF,KAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;QACjC,KAAI,CAAC,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC;QAC3C,KAAI,CAAC,kBAAkB,GAAG,OAAO,CAAC,kBAAkB,CAAC;QACrD,KAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;QAC7B,KAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;;KAChC;;;;;;;;IAED,8CAAM;;;;;;;IAAN,UACI,QAAkB,EAAE,gBAA0B,EAAE,kBAA+B,EAC/E,QAA2B;QAC7B,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CACtB,QAAQ,EAAE,gBAAgB,EAAE,kBAAkB,EAAE,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC;KAChF;wCAxFH;EAmEsD,gBAAgB,EAsBrE,CAAA;;;;AAtBD,yCAsBC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '../di/injector';\nimport {Type} from '../type';\nimport {stringify} from '../util';\n\nimport {ComponentFactory, ComponentRef} from './component_factory';\nimport {NgModuleRef} from './ng_module_factory';\n\nexport function noComponentFactoryError(component: Function) {\n  const error = Error(\n      `No component factory found for ${stringify(component)}. Did you add it to @NgModule.entryComponents?`);\n  (error as any)[ERROR_COMPONENT] = component;\n  return error;\n}\n\nconst ERROR_COMPONENT = 'ngComponent';\n\nexport function getComponent(error: Error): Type<any> {\n  return (error as any)[ERROR_COMPONENT];\n}\n\n\nclass _NullComponentFactoryResolver implements ComponentFactoryResolver {\n  resolveComponentFactory<T>(component: {new (...args: any[]): T}): ComponentFactory<T> {\n    throw noComponentFactoryError(component);\n  }\n}\n\n/**\n * @publicApi\n */\nexport abstract class ComponentFactoryResolver {\n  static NULL: ComponentFactoryResolver = new _NullComponentFactoryResolver();\n  abstract resolveComponentFactory<T>(component: Type<T>): ComponentFactory<T>;\n}\n\nexport class CodegenComponentFactoryResolver implements ComponentFactoryResolver {\n  private _factories = new Map<any, ComponentFactory<any>>();\n\n  constructor(\n      factories: ComponentFactory<any>[], private _parent: ComponentFactoryResolver,\n      private _ngModule: NgModuleRef<any>) {\n    for (let i = 0; i < factories.length; i++) {\n      const factory = factories[i];\n      this._factories.set(factory.componentType, factory);\n    }\n  }\n\n  resolveComponentFactory<T>(component: {new (...args: any[]): T}): ComponentFactory<T> {\n    let factory = this._factories.get(component);\n    if (!factory && this._parent) {\n      factory = this._parent.resolveComponentFactory(component);\n    }\n    if (!factory) {\n      throw noComponentFactoryError(component);\n    }\n    return new ComponentFactoryBoundToModule(factory, this._ngModule);\n  }\n}\n\nexport class ComponentFactoryBoundToModule<C> extends ComponentFactory<C> {\n  readonly selector: string;\n  readonly componentType: Type<any>;\n  readonly ngContentSelectors: string[];\n  readonly inputs: {propName: string, templateName: string}[];\n  readonly outputs: {propName: string, templateName: string}[];\n\n  constructor(private factory: ComponentFactory<C>, private ngModule: NgModuleRef<any>) {\n    super();\n    this.selector = factory.selector;\n    this.componentType = factory.componentType;\n    this.ngContentSelectors = factory.ngContentSelectors;\n    this.inputs = factory.inputs;\n    this.outputs = factory.outputs;\n  }\n\n  create(\n      injector: Injector, projectableNodes?: any[][], rootSelectorOrNode?: string|any,\n      ngModule?: NgModuleRef<any>): ComponentRef<C> {\n    return this.factory.create(\n        injector, projectableNodes, rootSelectorOrNode, ngModule || this.ngModule);\n  }\n}\n"]}