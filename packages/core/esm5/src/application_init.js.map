{"version":3,"file":"application_init.js","sourceRoot":"","sources":["../../../../../packages/core/src/application_init.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAAC,SAAS,EAAC,MAAM,kBAAkB,CAAC;AAE3C,OAAO,EAAC,MAAM,EAAE,UAAU,EAAE,cAAc,EAAE,QAAQ,EAAC,MAAM,MAAM,CAAC;;;;;;AAQlE,WAAa,eAAe,GAAG,IAAI,cAAc,CAAoB,yBAAyB,CAAC,CAAC;;;;;;;IAiB9F,+BAAyD,QAAuB;QAAhF,iBAKC;QALwD,aAAQ,GAAR,QAAQ,CAAe;2BAJ1D,KAAK;oBAEJ,KAAK;QAG1B,IAAI,CAAC,WAAW,GAAG,IAAI,OAAO,CAAC,UAAC,GAAG,EAAE,GAAG;YACtC,KAAI,CAAC,OAAO,GAAG,GAAG,CAAC;YACnB,KAAI,CAAC,MAAM,GAAG,GAAG,CAAC;SACnB,CAAC,CAAC;KACJ;IAED,gBAAgB;;;;;IAChB,+CAAe;;;;IAAf;QAAA,iBA2BC;QA1BC,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,OAAO;SACR;;QAED,IAAM,iBAAiB,GAAmB,EAAE,CAAC;;QAE7C,IAAM,QAAQ,GAAG;YACf,mBAAC,KAAsB,EAAC,CAAC,IAAI,GAAG,IAAI,CAAC;YACrC,KAAI,CAAC,OAAO,EAAE,CAAC;SAChB,CAAC;QAEF,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;;gBAC7C,IAAM,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC;gBACtC,IAAI,SAAS,CAAC,UAAU,CAAC,EAAE;oBACzB,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;iBACpC;aACF;SACF;QAED,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,cAAQ,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,UAAA,CAAC,IAAM,KAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QAE3F,IAAI,iBAAiB,CAAC,MAAM,KAAK,CAAC,EAAE;YAClC,QAAQ,EAAE,CAAC;SACZ;QACD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;KACzB;;gBA7CF,UAAU;;;;4CAUI,MAAM,SAAC,eAAe,cAAG,QAAQ;;gCAnChD;;SA0Ba,qBAAqB","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isPromise} from '../src/util/lang';\n\nimport {Inject, Injectable, InjectionToken, Optional} from './di';\n\n\n/**\n * A function that will be executed when an application is initialized.\n *\n * @publicApi\n */\nexport const APP_INITIALIZER = new InjectionToken<Array<() => void>>('Application Initializer');\n\n/**\n * A class that reflects the state of running {@link APP_INITIALIZER}s.\n *\n * @publicApi\n */\n@Injectable()\nexport class ApplicationInitStatus {\n  // TODO(issue/24571): remove '!'.\n  private resolve !: Function;\n  // TODO(issue/24571): remove '!'.\n  private reject !: Function;\n  private initialized = false;\n  public readonly donePromise: Promise<any>;\n  public readonly done = false;\n\n  constructor(@Inject(APP_INITIALIZER) @Optional() private appInits: (() => any)[]) {\n    this.donePromise = new Promise((res, rej) => {\n      this.resolve = res;\n      this.reject = rej;\n    });\n  }\n\n  /** @internal */\n  runInitializers() {\n    if (this.initialized) {\n      return;\n    }\n\n    const asyncInitPromises: Promise<any>[] = [];\n\n    const complete = () => {\n      (this as{done: boolean}).done = true;\n      this.resolve();\n    };\n\n    if (this.appInits) {\n      for (let i = 0; i < this.appInits.length; i++) {\n        const initResult = this.appInits[i]();\n        if (isPromise(initResult)) {\n          asyncInitPromises.push(initResult);\n        }\n      }\n    }\n\n    Promise.all(asyncInitPromises).then(() => { complete(); }).catch(e => { this.reject(e); });\n\n    if (asyncInitPromises.length === 0) {\n      complete();\n    }\n    this.initialized = true;\n  }\n}\n"]}