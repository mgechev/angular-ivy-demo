{"version":3,"file":"system_js_ng_module_factory_loader.js","sourceRoot":"","sources":["../../../../../packages/core/src/linker/system_js_ng_module_factory_loader.ts"],"names":[],"mappings":";;;;;;;;;;;AASA,OAAO,EAAC,UAAU,EAAE,QAAQ,EAAC,MAAM,OAAO,CAAC;AAE3C,OAAO,EAAC,QAAQ,EAAC,MAAM,YAAY,CAAC;;AAIpC,MAAM,UAAU,GAAG,GAAG,CAAC;;AAEvB,MAAM,oBAAoB,GAAG,WAAW,CAAC;;;;;;;;AASzC,MAAM,OAAgB,4BAA4B;CAYjD;;;;;;;;;;;;;;AAED,MAAM,cAAc,GAAiC;IACnD,iBAAiB,EAAE,EAAE;IACrB,iBAAiB,EAAE,YAAY;CAChC,CAAC;;;;;AAOF,MAAM,OAAO,sBAAsB;;;;;IAGjC,YAAoB,SAAmB,EAAc,MAAqC;QAAtE,cAAS,GAAT,SAAS,CAAU;QACrC,IAAI,CAAC,OAAO,GAAG,MAAM,IAAI,cAAc,CAAC;KACzC;;;;;IAED,IAAI,CAAC,IAAY;;QACf,MAAM,WAAW,GAAG,IAAI,CAAC,SAAS,YAAY,QAAQ,CAAC;QACvD,OAAO,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;KACzE;;;;;IAEO,cAAc,CAAC,IAAY;QACjC,IAAI,CAAC,MAAM,EAAE,UAAU,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QAClD,IAAI,UAAU,KAAK,SAAS,EAAE;YAC5B,UAAU,GAAG,SAAS,CAAC;SACxB;QAED,OAAO,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC;aACvB,IAAI,CAAC,CAAC,MAAW,EAAE,EAAE,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;aACzC,IAAI,CAAC,CAAC,IAAS,EAAE,EAAE,CAAC,aAAa,CAAC,IAAI,EAAE,MAAM,EAAE,UAAU,CAAC,CAAC;aAC5D,IAAI,CAAC,CAAC,IAAS,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC;;;;;;IAG5D,WAAW,CAAC,IAAY;QAC9B,IAAI,CAAC,MAAM,EAAE,UAAU,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;;QAClD,IAAI,kBAAkB,GAAG,oBAAoB,CAAC;QAC9C,IAAI,UAAU,KAAK,SAAS,EAAE;YAC5B,UAAU,GAAG,SAAS,CAAC;YACvB,kBAAkB,GAAG,EAAE,CAAC;SACzB;QAED,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,iBAAiB,GAAG,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC;aACzF,IAAI,CAAC,CAAC,MAAW,EAAE,EAAE,CAAC,MAAM,CAAC,UAAU,GAAG,kBAAkB,CAAC,CAAC;aAC9D,IAAI,CAAC,CAAC,OAAY,EAAE,EAAE,CAAC,aAAa,CAAC,OAAO,EAAE,MAAM,EAAE,UAAU,CAAC,CAAC,CAAC;;;;YAnC3E,UAAU;;;;YAtCH,QAAQ;YA0CgD,4BAA4B,uBAAhD,QAAQ;;;;;;;;;;;;;;AAmCpD,SAAS,aAAa,CAAC,KAAU,EAAE,UAAkB,EAAE,UAAkB;IACvE,IAAI,CAAC,KAAK,EAAE;QACV,MAAM,IAAI,KAAK,CAAC,gBAAgB,UAAU,SAAS,UAAU,GAAG,CAAC,CAAC;KACnE;IACD,OAAO,KAAK,CAAC;CACd","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, Optional} from '../di';\n\nimport {Compiler} from './compiler';\nimport {NgModuleFactory} from './ng_module_factory';\nimport {NgModuleFactoryLoader} from './ng_module_factory_loader';\n\nconst _SEPARATOR = '#';\n\nconst FACTORY_CLASS_SUFFIX = 'NgFactory';\ndeclare var System: any;\n\n/**\n * Configuration for SystemJsNgModuleLoader.\n * token.\n *\n * @publicApi\n */\nexport abstract class SystemJsNgModuleLoaderConfig {\n  /**\n   * Prefix to add when computing the name of the factory module for a given module name.\n   */\n  // TODO(issue/24571): remove '!'.\n  factoryPathPrefix !: string;\n\n  /**\n   * Suffix to add when computing the name of the factory module for a given module name.\n   */\n  // TODO(issue/24571): remove '!'.\n  factoryPathSuffix !: string;\n}\n\nconst DEFAULT_CONFIG: SystemJsNgModuleLoaderConfig = {\n  factoryPathPrefix: '',\n  factoryPathSuffix: '.ngfactory',\n};\n\n/**\n * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory\n * @publicApi\n */\n@Injectable()\nexport class SystemJsNgModuleLoader implements NgModuleFactoryLoader {\n  private _config: SystemJsNgModuleLoaderConfig;\n\n  constructor(private _compiler: Compiler, @Optional() config?: SystemJsNgModuleLoaderConfig) {\n    this._config = config || DEFAULT_CONFIG;\n  }\n\n  load(path: string): Promise<NgModuleFactory<any>> {\n    const offlineMode = this._compiler instanceof Compiler;\n    return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);\n  }\n\n  private loadAndCompile(path: string): Promise<NgModuleFactory<any>> {\n    let [module, exportName] = path.split(_SEPARATOR);\n    if (exportName === undefined) {\n      exportName = 'default';\n    }\n\n    return System.import(module)\n        .then((module: any) => module[exportName])\n        .then((type: any) => checkNotEmpty(type, module, exportName))\n        .then((type: any) => this._compiler.compileModuleAsync(type));\n  }\n\n  private loadFactory(path: string): Promise<NgModuleFactory<any>> {\n    let [module, exportName] = path.split(_SEPARATOR);\n    let factoryClassSuffix = FACTORY_CLASS_SUFFIX;\n    if (exportName === undefined) {\n      exportName = 'default';\n      factoryClassSuffix = '';\n    }\n\n    return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix)\n        .then((module: any) => module[exportName + factoryClassSuffix])\n        .then((factory: any) => checkNotEmpty(factory, module, exportName));\n  }\n}\n\nfunction checkNotEmpty(value: any, modulePath: string, exportName: string): any {\n  if (!value) {\n    throw new Error(`Cannot find '${exportName}' in '${modulePath}'`);\n  }\n  return value;\n}\n"]}