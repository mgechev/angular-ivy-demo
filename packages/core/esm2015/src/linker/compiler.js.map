{"version":3,"file":"compiler.js","sourceRoot":"","sources":["../../../../../packages/core/src/linker/compiler.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAAC,UAAU,EAAC,MAAM,kBAAkB,CAAC;AAC5C,OAAO,EAAC,cAAc,EAAC,MAAM,uBAAuB,CAAC;AAIrD,OAAO,EAAC,eAAe,IAAI,iBAAiB,EAAC,MAAM,0BAA0B,CAAC;;;;;;;AAa9E,MAAM,OAAO,4BAA4B;;;;;IACvC,YACW,iBACA;QADA,oBAAe,GAAf,eAAe;QACf,uBAAkB,GAAlB,kBAAkB;KAA6B;CAC3D;;;;;;;;;;AAGD,SAAS,WAAW;IAClB,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;CACnD;;AAED,MAAM,oCAAoC,qBACtC,WAAkB,EAAC;;AACvB,aAAa,qCAAqC,GACzB,UAAY,UAAmB;IACtD,OAAO,IAAI,iBAAiB,CAAC,UAAU,CAAC,CAAC;CAC1C,CAAC;;AACF,MAAM,0BAA0B,GAAG,oCAAoC,CAAC;;AAExE,MAAM,qCAAqC,qBACT,WAAkB,EAAC;;AACrD,aAAa,sCAAsC,GACjB,UAAY,UAAmB;IAC/D,OAAO,OAAO,CAAC,OAAO,CAAC,qCAAqC,CAAC,UAAU,CAAC,CAAC,CAAC;CAC3E,CAAC;;AACF,MAAM,2BAA2B,GAAG,qCAAqC,CAAC;;AAE1E,MAAM,oDAAoD,qBACpB,WAAkB,EAAC;;AACzD,aAAa,qDAAqD,GAC5B,UAAY,UAAmB;IAEnE,OAAO,IAAI,4BAA4B,CAAC,qCAAqC,CAAC,UAAU,CAAC,EAAE,EAAE,CAAC,CAAC;CAChG,CAAC;;AACF,MAAM,0CAA0C,GAC5C,oDAAoD,CAAC;;AAEzD,MAAM,qDAAqD,qBACZ,WAAkB,EAAC;;AAClE,aAAa,sDAAsD,GACpB,UAAY,UAAmB;IAE5E,OAAO,OAAO,CAAC,OAAO,CAAC,qDAAqD,CAAC,UAAU,CAAC,CAAC,CAAC;CAC3F,CAAC;;AACF,MAAM,2CAA2C,GAC7C,qDAAqD,CAAC;;;;;;;;;;;;AAc1D,MAAM,OAAO,QAAQ;;;;;;QAKnB,yBAAoE,0BAA0B,CAAC;;;;QAK/F,0BAC8D,2BAA2B,CAAC;;;;QAK1F,yCACI,0CAA0C,CAAC;;;;QAK/C,0CAC+C,2CAA2C,CAAC;;;;;;IAK3F,UAAU,MAAW;;;;;;IAKrB,aAAa,CAAC,IAAe,KAAI;;;;;;IAKjC,WAAW,CAAC,UAAqB,IAAsB,OAAO,SAAS,CAAC,EAAE;;;YAvC3E,UAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DX,aAAa,gBAAgB,GAAG,IAAI,cAAc,CAAoB,iBAAiB,CAAC,CAAC;;;;;;;AAOzF,MAAM,OAAgB,eAAe;CAEpC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '../di/injectable';\nimport {InjectionToken} from '../di/injection_token';\nimport {StaticProvider} from '../di/provider';\nimport {MissingTranslationStrategy} from '../i18n/tokens';\nimport {ViewEncapsulation} from '../metadata';\nimport {NgModuleFactory as NgModuleFactoryR3} from '../render3/ng_module_ref';\nimport {Type} from '../type';\n\nimport {ComponentFactory} from './component_factory';\nimport {NgModuleFactory} from './ng_module_factory';\n\n\n\n/**\n * Combination of NgModuleFactory and ComponentFactorys.\n *\n * @publicApi\n */\nexport class ModuleWithComponentFactories<T> {\n  constructor(\n      public ngModuleFactory: NgModuleFactory<T>,\n      public componentFactories: ComponentFactory<any>[]) {}\n}\n\n\nfunction _throwError() {\n  throw new Error(`Runtime compiler is not loaded`);\n}\n\nconst Compiler_compileModuleSync__PRE_R3__: <T>(moduleType: Type<T>) => NgModuleFactory<T> =\n    _throwError as any;\nexport const Compiler_compileModuleSync__POST_R3__: <T>(moduleType: Type<T>) =>\n    NgModuleFactory<T> = function<T>(moduleType: Type<T>): NgModuleFactory<T> {\n  return new NgModuleFactoryR3(moduleType);\n};\nconst Compiler_compileModuleSync = Compiler_compileModuleSync__PRE_R3__;\n\nconst Compiler_compileModuleAsync__PRE_R3__: <T>(moduleType: Type<T>) =>\n    Promise<NgModuleFactory<T>> = _throwError as any;\nexport const Compiler_compileModuleAsync__POST_R3__: <T>(moduleType: Type<T>) =>\n    Promise<NgModuleFactory<T>> = function<T>(moduleType: Type<T>): Promise<NgModuleFactory<T>> {\n  return Promise.resolve(Compiler_compileModuleSync__POST_R3__(moduleType));\n};\nconst Compiler_compileModuleAsync = Compiler_compileModuleAsync__PRE_R3__;\n\nconst Compiler_compileModuleAndAllComponentsSync__PRE_R3__: <T>(moduleType: Type<T>) =>\n    ModuleWithComponentFactories<T> = _throwError as any;\nexport const Compiler_compileModuleAndAllComponentsSync__POST_R3__: <T>(moduleType: Type<T>) =>\n    ModuleWithComponentFactories<T> = function<T>(moduleType: Type<T>):\n        ModuleWithComponentFactories<T> {\n  return new ModuleWithComponentFactories(Compiler_compileModuleSync__POST_R3__(moduleType), []);\n};\nconst Compiler_compileModuleAndAllComponentsSync =\n    Compiler_compileModuleAndAllComponentsSync__PRE_R3__;\n\nconst Compiler_compileModuleAndAllComponentsAsync__PRE_R3__: <T>(moduleType: Type<T>) =>\n    Promise<ModuleWithComponentFactories<T>> = _throwError as any;\nexport const Compiler_compileModuleAndAllComponentsAsync__POST_R3__: <T>(moduleType: Type<T>) =>\n    Promise<ModuleWithComponentFactories<T>> = function<T>(moduleType: Type<T>):\n        Promise<ModuleWithComponentFactories<T>> {\n  return Promise.resolve(Compiler_compileModuleAndAllComponentsSync__POST_R3__(moduleType));\n};\nconst Compiler_compileModuleAndAllComponentsAsync =\n    Compiler_compileModuleAndAllComponentsAsync__PRE_R3__;\n\n/**\n * Low-level service for running the angular compiler during runtime\n * to create {@link ComponentFactory}s, which\n * can later be used to create and render a Component instance.\n *\n * Each `@NgModule` provides an own `Compiler` to its injector,\n * that will use the directives/pipes of the ng module for compilation\n * of components.\n *\n * @publicApi\n */\n@Injectable()\nexport class Compiler {\n  /**\n   * Compiles the given NgModule and all of its components. All templates of the components listed\n   * in `entryComponents` have to be inlined.\n   */\n  compileModuleSync: <T>(moduleType: Type<T>) => NgModuleFactory<T> = Compiler_compileModuleSync;\n\n  /**\n   * Compiles the given NgModule and all of its components\n   */\n  compileModuleAsync:\n      <T>(moduleType: Type<T>) => Promise<NgModuleFactory<T>> = Compiler_compileModuleAsync;\n\n  /**\n   * Same as {@link #compileModuleSync} but also creates ComponentFactories for all components.\n   */\n  compileModuleAndAllComponentsSync: <T>(moduleType: Type<T>) => ModuleWithComponentFactories<T> =\n      Compiler_compileModuleAndAllComponentsSync;\n\n  /**\n   * Same as {@link #compileModuleAsync} but also creates ComponentFactories for all components.\n   */\n  compileModuleAndAllComponentsAsync: <T>(moduleType: Type<T>) =>\n      Promise<ModuleWithComponentFactories<T>> = Compiler_compileModuleAndAllComponentsAsync;\n\n  /**\n   * Clears all caches.\n   */\n  clearCache(): void {}\n\n  /**\n   * Clears the cache for the given component/ngModule.\n   */\n  clearCacheFor(type: Type<any>) {}\n\n  /**\n   * Returns the id for a given NgModule, if one is defined and known to the compiler.\n   */\n  getModuleId(moduleType: Type<any>): string|undefined { return undefined; }\n}\n\n/**\n * Options for creating a compiler\n *\n * @publicApi\n */\nexport type CompilerOptions = {\n  useJit?: boolean,\n  defaultEncapsulation?: ViewEncapsulation,\n  providers?: StaticProvider[],\n  missingTranslation?: MissingTranslationStrategy,\n  preserveWhitespaces?: boolean,\n};\n\n/**\n * Token to provide CompilerOptions in the platform injector.\n *\n * @publicApi\n */\nexport const COMPILER_OPTIONS = new InjectionToken<CompilerOptions[]>('compilerOptions');\n\n/**\n * A factory for creating a Compiler\n *\n * @publicApi\n */\nexport abstract class CompilerFactory {\n  abstract createCompiler(options?: CompilerOptions[]): Compiler;\n}\n"]}