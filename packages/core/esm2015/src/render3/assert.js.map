{"version":3,"file":"assert.js","sourceRoot":"","sources":["../../../../../packages/core/src/render3/assert.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {getComponentDef, getNgModuleDef} from './definition';\nimport {TNode} from './interfaces/node';\nimport {LView} from './interfaces/view';\n\n// The functions in this file verify that the assumptions we are making\n// about state in an instruction are correct before implementing any logic.\n// They are meant only to be called in dev mode as sanity checks.\n\nexport function assertNumber(actual: any, msg: string) {\n  if (typeof actual != 'number') {\n    throwError(msg);\n  }\n}\n\nexport function assertEqual<T>(actual: T, expected: T, msg: string) {\n  if (actual != expected) {\n    throwError(msg);\n  }\n}\n\nexport function assertNotEqual<T>(actual: T, expected: T, msg: string) {\n  if (actual == expected) {\n    throwError(msg);\n  }\n}\n\nexport function assertSame<T>(actual: T, expected: T, msg: string) {\n  if (actual !== expected) {\n    throwError(msg);\n  }\n}\n\nexport function assertLessThan<T>(actual: T, expected: T, msg: string) {\n  if (actual >= expected) {\n    throwError(msg);\n  }\n}\n\nexport function assertGreaterThan<T>(actual: T, expected: T, msg: string) {\n  if (actual <= expected) {\n    throwError(msg);\n  }\n}\n\nexport function assertNotDefined<T>(actual: T, msg: string) {\n  if (actual != null) {\n    throwError(msg);\n  }\n}\n\nexport function assertDefined<T>(actual: T, msg: string) {\n  if (actual == null) {\n    throwError(msg);\n  }\n}\n\nexport function assertComponentType(\n    actual: any,\n    msg: string =\n        'Type passed in is not ComponentType, it does not have \\'ngComponentDef\\' property.') {\n  if (!getComponentDef(actual)) {\n    throwError(msg);\n  }\n}\n\nexport function assertNgModuleType(\n    actual: any,\n    msg: string =\n        'Type passed in is not NgModuleType, it does not have \\'ngModuleDef\\' property.') {\n  if (!getNgModuleDef(actual)) {\n    throwError(msg);\n  }\n}\n\nfunction throwError(msg: string): never {\n  // tslint:disable-next-line\n  debugger;  // Left intentionally for better debugger experience.\n  throw new Error(`ASSERTION ERROR: ${msg}`);\n}\n\nexport function assertDomNode(node: any) {\n  assertEqual(node instanceof Node, true, 'The provided value must be an instance of a DOM Node');\n}\n\n\nexport function assertPreviousIsParent(isParent: boolean) {\n  assertEqual(isParent, true, 'previousOrParentTNode should be a parent');\n}\n\nexport function assertHasParent(tNode: TNode) {\n  assertDefined(tNode.parent, 'previousOrParentTNode should have a parent');\n}\n\nexport function assertDataNext(lView: LView, index: number, arr?: any[]) {\n  if (arr == null) arr = lView;\n  assertEqual(\n      arr.length, index, `index ${index} expected to be at the end of arr (length ${arr.length})`);\n}\n\nexport function assertDataInRange(arr: any[], index: number) {\n  assertLessThan(index, arr ? arr.length : 0, 'index expected to be a valid data index');\n}\n"]}