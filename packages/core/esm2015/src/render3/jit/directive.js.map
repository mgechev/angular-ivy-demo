{"version":3,"file":"directive.js","sourceRoot":"","sources":["../../../../../../packages/core/src/render3/jit/directive.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Query} from '../../metadata/di';\nimport {Component, Directive} from '../../metadata/directives';\nimport {componentNeedsResolution, maybeQueueResolutionOfComponentResources} from '../../metadata/resource_loading';\nimport {ViewEncapsulation} from '../../metadata/view';\nimport {Type} from '../../type';\nimport {stringify} from '../../util';\nimport {EMPTY_ARRAY} from '../definition';\nimport {NG_COMPONENT_DEF, NG_DIRECTIVE_DEF} from '../fields';\n\nimport {R3DirectiveMetadataFacade, getCompilerFacade} from './compiler_facade';\nimport {R3ComponentMetadataFacade, R3QueryMetadataFacade} from './compiler_facade_interface';\nimport {angularCoreEnv} from './environment';\nimport {patchComponentDefWithScope, transitiveScopesFor} from './module';\nimport {getReflect, reflectDependencies} from './util';\n\n\n\n/**\n * Compile an Angular component according to its decorator metadata, and patch the resulting\n * ngComponentDef onto the component type.\n *\n * Compilation may be asynchronous (due to the need to resolve URLs for the component template or\n * other resources, for example). In the event that compilation is not immediate, `compileComponent`\n * will enqueue resource resolution into a global queue and will fail to return the `ngComponentDef`\n * until the global queue has been resolved with a call to `resolveComponentResources`.\n */\nexport function compileComponent(type: Type<any>, metadata: Component): void {\n  let ngComponentDef: any = null;\n  // Metadata may have resources which need to be resolved.\n  maybeQueueResolutionOfComponentResources(metadata);\n  Object.defineProperty(type, NG_COMPONENT_DEF, {\n    get: () => {\n      const compiler = getCompilerFacade();\n      if (ngComponentDef === null) {\n        if (componentNeedsResolution(metadata)) {\n          const error = [`Component '${stringify(type)}' is not resolved:`];\n          if (metadata.templateUrl) {\n            error.push(` - templateUrl: ${stringify(metadata.templateUrl)}`);\n          }\n          if (metadata.styleUrls && metadata.styleUrls.length) {\n            error.push(` - styleUrls: ${JSON.stringify(metadata.styleUrls)}`);\n          }\n          error.push(`Did you run and wait for 'resolveComponentResources()'?`);\n          throw new Error(error.join('\\n'));\n        }\n        const meta: R3ComponentMetadataFacade = {\n          ...directiveMetadata(type, metadata),\n          template: metadata.template || '',\n          preserveWhitespaces: metadata.preserveWhitespaces || false,\n          styles: metadata.styles || EMPTY_ARRAY,\n          animations: metadata.animations,\n          viewQueries: extractQueriesMetadata(getReflect().propMetadata(type), isViewQuery),\n          directives: [],\n          pipes: new Map(),\n          encapsulation: metadata.encapsulation || ViewEncapsulation.Emulated,\n          viewProviders: metadata.viewProviders || null,\n        };\n        ngComponentDef = compiler.compileComponent(\n            angularCoreEnv, `ng://${stringify(type)}/template.html`, meta);\n\n        // If component compilation is async, then the @NgModule annotation which declares the\n        // component may execute and set an ngSelectorScope property on the component type. This\n        // allows the component to patch itself with directiveDefs from the module after it\n        // finishes compiling.\n        if (hasSelectorScope(type)) {\n          const scopes = transitiveScopesFor(type.ngSelectorScope);\n          patchComponentDefWithScope(type, scopes);\n        } else {\n          patchComponentDefWithScope(type, {\n            compilation: {\n              directives: new Set<any>(),\n              pipes: new Set<any>(),\n            },\n            exported: {\n              directives: new Set<any>(),\n              pipes: new Set<any>(),\n            },\n          });\n        }\n      }\n      return ngComponentDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode,\n  });\n}\n\nfunction hasSelectorScope<T>(component: Type<T>): component is Type<T>&\n    {ngSelectorScope: Type<any>} {\n  return (component as{ngSelectorScope?: any}).ngSelectorScope !== undefined;\n}\n\n/**\n * Compile an Angular directive according to its decorator metadata, and patch the resulting\n * ngDirectiveDef onto the component type.\n *\n * In the event that compilation is not immediate, `compileDirective` will return a `Promise` which\n * will resolve when compilation completes and the directive becomes usable.\n */\nexport function compileDirective(type: Type<any>, directive: Directive): void {\n  let ngDirectiveDef: any = null;\n  Object.defineProperty(type, NG_DIRECTIVE_DEF, {\n    get: () => {\n      if (ngDirectiveDef === null) {\n        const facade = directiveMetadata(type, directive);\n        ngDirectiveDef = getCompilerFacade().compileDirective(\n            angularCoreEnv, `ng://${type && type.name}/ngDirectiveDef.js`, facade);\n      }\n      return ngDirectiveDef;\n    },\n    // Make the property configurable in dev mode to allow overriding in tests\n    configurable: !!ngDevMode,\n  });\n}\n\nexport function extendsDirectlyFromObject(type: Type<any>): boolean {\n  return Object.getPrototypeOf(type.prototype) === Object.prototype;\n}\n\n/**\n * Extract the `R3DirectiveMetadata` for a particular directive (either a `Directive` or a\n * `Component`).\n */\nfunction directiveMetadata(type: Type<any>, metadata: Directive): R3DirectiveMetadataFacade {\n  // Reflect inputs and outputs.\n  const propMetadata = getReflect().propMetadata(type);\n\n  return {\n    name: type.name,\n    type: type,\n    typeArgumentCount: 0,\n    selector: metadata.selector !,\n    deps: reflectDependencies(type),\n    host: metadata.host || EMPTY_OBJ,\n    propMetadata: propMetadata,\n    inputs: metadata.inputs || EMPTY_ARRAY,\n    outputs: metadata.outputs || EMPTY_ARRAY,\n    queries: extractQueriesMetadata(propMetadata, isContentQuery),\n    lifecycle: {\n      usesOnChanges: type.prototype.ngOnChanges !== undefined,\n    },\n    typeSourceSpan: null !,\n    usesInheritance: !extendsDirectlyFromObject(type),\n    exportAs: metadata.exportAs || null,\n    providers: metadata.providers || null,\n  };\n}\n\nconst EMPTY_OBJ = {};\n\nfunction convertToR3QueryPredicate(selector: any): any|string[] {\n  return typeof selector === 'string' ? splitByComma(selector) : selector;\n}\n\nexport function convertToR3QueryMetadata(propertyName: string, ann: Query): R3QueryMetadataFacade {\n  return {\n    propertyName: propertyName,\n    predicate: convertToR3QueryPredicate(ann.selector),\n    descendants: ann.descendants,\n    first: ann.first,\n    read: ann.read ? ann.read : null\n  };\n}\nfunction extractQueriesMetadata(\n    propMetadata: {[key: string]: any[]},\n    isQueryAnn: (ann: any) => ann is Query): R3QueryMetadataFacade[] {\n  const queriesMeta: R3QueryMetadataFacade[] = [];\n  for (const field in propMetadata) {\n    if (propMetadata.hasOwnProperty(field)) {\n      propMetadata[field].forEach(ann => {\n        if (isQueryAnn(ann)) {\n          queriesMeta.push(convertToR3QueryMetadata(field, ann));\n        }\n      });\n    }\n  }\n  return queriesMeta;\n}\n\nfunction isContentQuery(value: any): value is Query {\n  const name = value.ngMetadataName;\n  return name === 'ContentChild' || name === 'ContentChildren';\n}\n\nfunction isViewQuery(value: any): value is Query {\n  const name = value.ngMetadataName;\n  return name === 'ViewChild' || name === 'ViewChildren';\n}\n\nfunction splitByComma(value: string): string[] {\n  return value.split(',').map(piece => piece.trim());\n}\n"]}