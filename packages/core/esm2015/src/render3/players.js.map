{"version":3,"file":"players.js","sourceRoot":"","sources":["../../../../../packages/core/src/render3/players.ts"],"names":[],"mappings":";;;;AAOA,OAAO,eAAe,CAAC;AAEvB,OAAO,EAAC,UAAU,EAAC,MAAM,qBAAqB,CAAC;AAC/C,OAAO,EAAC,cAAc,EAAC,MAAM,mBAAmB,CAAC;AACjD,OAAO,EAAC,YAAY,EAAC,MAAM,gBAAgB,CAAC;AAE5C,OAAO,EAAC,aAAa,EAAmB,MAAM,mBAAmB,CAAC;AAClE,OAAO,EAAC,iBAAiB,EAAE,wBAAwB,EAAE,gBAAgB,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,oBAAoB,EAAC,MAAM,gBAAgB,CAAC;;;;;;;;;;;;;;;AAe1J,MAAM,UAAU,SAAS,CACrB,GAAwD,EAAE,MAAc;;IAC1E,MAAM,OAAO,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC;IAChC,IAAI,CAAC,OAAO,EAAE;QACZ,SAAS,IAAI,oBAAoB,EAAE,CAAC;QACpC,OAAO;KACR;;IAED,MAAM,OAAO,qBAAG,OAAO,CAAC,MAAqB,EAAC;;IAC9C,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;;IAC5B,MAAM,aAAa,sBAAG,wBAAwB,CAAC,OAAO,EAAE,OAAO,CAAC,GAAG;;IACnE,MAAM,WAAW,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC;IAC1C,iBAAiB,CAAC,aAAa,EAAE,WAAW,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;IACvE,YAAY,CAAC,WAAW,uBAAgC,CAAC;CAC1D;;;;;;;;;;;;;AAYD,MAAM,UAAU,UAAU,CAAC,GAAwD;;IACjF,MAAM,OAAO,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC;IAChC,IAAI,CAAC,OAAO,EAAE;QACZ,SAAS,IAAI,oBAAoB,EAAE,CAAC;QACpC,OAAO,EAAE,CAAC;KACX;;IAED,MAAM,cAAc,GAAG,iBAAiB,CAAC,OAAO,CAAC,SAAS,GAAG,aAAa,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;;IAC3F,MAAM,aAAa,GAAG,cAAc,CAAC,CAAC,CAAC,gBAAgB,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IAC/E,OAAO,aAAa,CAAC,CAAC,CAAC,kBAAkB,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;CAC/D","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport './ng_dev_mode';\n\nimport {getContext} from './context_discovery';\nimport {getRootContext} from './discovery_utils';\nimport {scheduleTick} from './instructions';\nimport {ComponentInstance, DirectiveInstance, Player} from './interfaces/player';\nimport {HEADER_OFFSET, RootContextFlags} from './interfaces/view';\nimport {addPlayerInternal, getOrCreatePlayerContext, getPlayerContext, getPlayersInternal, getStylingContext, throwInvalidRefError} from './styling/util';\n\n/**\n * Adds a player to an element, directive or component instance that will later be\n * animated once change detection has passed.\n *\n * When a player is added to a reference it will stay active until `player.destroy()`\n * is called. Once called then the player will be removed from the active players\n * present on the associated ref instance.\n *\n * To get a list of all the active players on an element see [getPlayers].\n *\n * @param ref The element, directive or component that the player will be placed on.\n * @param player The player that will be triggered to play once change detection has run.\n */\nexport function addPlayer(\n    ref: ComponentInstance | DirectiveInstance | HTMLElement, player: Player): void {\n  const context = getContext(ref);\n  if (!context) {\n    ngDevMode && throwInvalidRefError();\n    return;\n  }\n\n  const element = context.native as HTMLElement;\n  const lView = context.lView;\n  const playerContext = getOrCreatePlayerContext(element, context) !;\n  const rootContext = getRootContext(lView);\n  addPlayerInternal(playerContext, rootContext, element, player, 0, ref);\n  scheduleTick(rootContext, RootContextFlags.FlushPlayers);\n}\n\n/**\n * Returns a list of all the active players present on the provided ref instance (which can\n * be an instance of a directive, component or element).\n *\n * This function will only return players that have been added to the ref instance using\n * `addPlayer` or any players that are active through any template styling bindings\n * (`[style]`, `[style.prop]`, `[class]` and `[class.name]`).\n *\n * @publicApi\n */\nexport function getPlayers(ref: ComponentInstance | DirectiveInstance | HTMLElement): Player[] {\n  const context = getContext(ref);\n  if (!context) {\n    ngDevMode && throwInvalidRefError();\n    return [];\n  }\n\n  const stylingContext = getStylingContext(context.nodeIndex - HEADER_OFFSET, context.lView);\n  const playerContext = stylingContext ? getPlayerContext(stylingContext) : null;\n  return playerContext ? getPlayersInternal(playerContext) : [];\n}\n"]}