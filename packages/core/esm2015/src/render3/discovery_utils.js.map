{"version":3,"file":"discovery_utils.js","sourceRoot":"","sources":["../../../../../packages/core/src/render3/discovery_utils.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injector} from '../di/injector';\n\nimport {assertDefined} from './assert';\nimport {discoverLocalRefs, getComponentAtNodeIndex, getContext, getDirectivesAtNodeIndex} from './context_discovery';\nimport {LContext} from './interfaces/context';\nimport {TElementNode} from './interfaces/node';\nimport {CONTEXT, FLAGS, HOST, LView, LViewFlags, PARENT, RootContext, TVIEW} from './interfaces/view';\nimport {readPatchedLView, stringify} from './util';\nimport {NodeInjector} from './view_engine_compatibility';\n\n\n/**\n * Returns the component instance associated with a given DOM host element.\n * Elements which don't represent components return `null`.\n *\n * @param element Host DOM element from which the component should be retrieved for.\n *\n * ```\n * <my-app>\n *   #VIEW\n *     <div>\n *       <child-comp></child-comp>\n *     </div>\n * </mp-app>\n *\n * expect(getComponent(<child-comp>) instanceof ChildComponent).toBeTruthy();\n * expect(getComponent(<my-app>) instanceof MyApp).toBeTruthy();\n * ```\n *\n * @publicApi\n */\nexport function getComponent<T = {}>(element: Element): T|null {\n  if (!(element instanceof Node)) throw new Error('Expecting instance of DOM Node');\n\n  const context = loadContext(element) !;\n\n  if (context.component === undefined) {\n    context.component = getComponentAtNodeIndex(context.nodeIndex, context.lView);\n  }\n\n  return context.component as T;\n}\n\n/**\n * Returns the component instance associated with view which owns the DOM element (`null`\n * otherwise).\n *\n * @param element DOM element which is owned by an existing component's view.\n *\n * ```\n * <my-app>\n *   #VIEW\n *     <div>\n *       <child-comp></child-comp>\n *     </div>\n * </mp-app>\n *\n * expect(getViewComponent(<child-comp>) instanceof MyApp).toBeTruthy();\n * expect(getViewComponent(<my-app>)).toEqual(null);\n * ```\n *\n * @publicApi\n */\nexport function getViewComponent<T = {}>(element: Element | {}): T|null {\n  const context = loadContext(element) !;\n  let lView: LView = context.lView;\n  while (lView[PARENT] && lView[HOST] === null) {\n    // As long as lView[HOST] is null we know we are part of sub-template such as `*ngIf`\n    lView = lView[PARENT] !;\n  }\n\n  return lView[FLAGS] & LViewFlags.IsRoot ? null : lView[CONTEXT] as T;\n}\n\n\n\n/**\n * Returns the `RootContext` instance that is associated with\n * the application where the target is situated.\n *\n */\nexport function getRootContext(target: LView | {}): RootContext {\n  const lView = Array.isArray(target) ? target : loadContext(target) !.lView;\n  const rootLView = getRootView(lView);\n  return rootLView[CONTEXT] as RootContext;\n}\n\n/**\n * Retrieve all root components.\n *\n * Root components are those which have been bootstrapped by Angular.\n *\n * @param target A DOM element, component or directive instance.\n *\n * @publicApi\n */\nexport function getRootComponents(target: {}): any[] {\n  return [...getRootContext(target).components];\n}\n\n/**\n * Retrieves an `Injector` associated with the element, component or directive.\n *\n * @param target A DOM element, component or directive instance.\n *\n * @publicApi\n */\nexport function getInjector(target: {}): Injector {\n  const context = loadContext(target);\n  const tNode = context.lView[TVIEW].data[context.nodeIndex] as TElementNode;\n\n  return new NodeInjector(tNode, context.lView);\n}\n\n/**\n * Retrieves directives associated with a given DOM host element.\n *\n * @param target A DOM element, component or directive instance.\n *\n * @publicApi\n */\nexport function getDirectives(target: {}): Array<{}> {\n  const context = loadContext(target) !;\n\n  if (context.directives === undefined) {\n    context.directives = getDirectivesAtNodeIndex(context.nodeIndex, context.lView, false);\n  }\n\n  return context.directives || [];\n}\n\n/**\n * Returns LContext associated with a target passed as an argument.\n * Throws if a given target doesn't have associated LContext.\n *\n */\nexport function loadContext(target: {}): LContext;\nexport function loadContext(target: {}, throwOnNotFound: false): LContext|null;\nexport function loadContext(target: {}, throwOnNotFound: boolean = true): LContext|null {\n  const context = getContext(target);\n  if (!context && throwOnNotFound) {\n    throw new Error(\n        ngDevMode ? `Unable to find context associated with ${stringify(target)}` :\n                    'Invalid ng target');\n  }\n  return context;\n}\n\n/**\n * Retrieve the root view from any component by walking the parent `LView` until\n * reaching the root `LView`.\n *\n * @param componentOrView any component or view\n *\n */\nexport function getRootView(componentOrView: LView | {}): LView {\n  let lView: LView;\n  if (Array.isArray(componentOrView)) {\n    ngDevMode && assertDefined(componentOrView, 'lView');\n    lView = componentOrView as LView;\n  } else {\n    ngDevMode && assertDefined(componentOrView, 'component');\n    lView = readPatchedLView(componentOrView) !;\n  }\n  while (lView && !(lView[FLAGS] & LViewFlags.IsRoot)) {\n    lView = lView[PARENT] !;\n  }\n  return lView;\n}\n\n/**\n * Retrieve map of local references.\n *\n * The references are retrieved as a map of local reference name to element or directive instance.\n *\n * @param target A DOM element, component or directive instance.\n *\n * @publicApi\n */\nexport function getLocalRefs(target: {}): {[key: string]: any} {\n  const context = loadContext(target) !;\n\n  if (context.localRefs === undefined) {\n    context.localRefs = discoverLocalRefs(context.lView, context.nodeIndex);\n  }\n\n  return context.localRefs || {};\n}\n\n/**\n * Retrieve the host element of the component.\n *\n * Use this function to retrieve the host element of the component. The host\n * element is the element which the component is associated with.\n *\n * @param directive Component or Directive for which the host element should be retrieved.\n *\n * @publicApi\n */\nexport function getHostElement<T>(directive: T): Element {\n  return getContext(directive) !.native as never as Element;\n}\n\n/**\n * Retrieves the rendered text for a given component.\n *\n * This function retrieves the host element of a component and\n * and then returns the `textContent` for that element. This implies\n * that the text returned will include re-projected content of\n * the component as well.\n *\n * @param component The component to return the content text for.\n */\nexport function getRenderedText(component: any): string {\n  const hostElement = getHostElement(component);\n  return hostElement.textContent || '';\n}"]}