{"version":3,"file":"component_ref.js","sourceRoot":"","sources":["../../../../../packages/core/src/render3/component_ref.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectorRef as ViewEngine_ChangeDetectorRef} from '../change_detection/change_detector_ref';\nimport {InjectionToken} from '../di/injection_token';\nimport {Injector} from '../di/injector';\nimport {inject} from '../di/injector_compatibility';\nimport {ComponentFactory as viewEngine_ComponentFactory, ComponentRef as viewEngine_ComponentRef} from '../linker/component_factory';\nimport {ComponentFactoryResolver as viewEngine_ComponentFactoryResolver} from '../linker/component_factory_resolver';\nimport {ElementRef as viewEngine_ElementRef} from '../linker/element_ref';\nimport {NgModuleRef as viewEngine_NgModuleRef} from '../linker/ng_module_factory';\nimport {RendererFactory2} from '../render/api';\nimport {Sanitizer} from '../sanitization/security';\nimport {Type} from '../type';\nimport {VERSION} from '../version';\nimport {assertComponentType, assertDefined} from './assert';\nimport {LifecycleHooksFeature, createRootComponent, createRootComponentView, createRootContext} from './component';\nimport {getComponentDef} from './definition';\nimport {NodeInjector} from './di';\nimport {createLView, createNodeAtIndex, createTView, createViewNode, elementCreate, locateHostElement, refreshDescendantViews} from './instructions';\nimport {ComponentDef, RenderFlags} from './interfaces/definition';\nimport {TContainerNode, TElementContainerNode, TElementNode, TNode, TNodeType} from './interfaces/node';\nimport {RElement, RendererFactory3, domRendererFactory3, isProceduralRenderer} from './interfaces/renderer';\nimport {SanitizerFn} from './interfaces/sanitization';\nimport {HEADER_OFFSET, LView, LViewFlags, RootContext, TVIEW} from './interfaces/view';\nimport {enterView, leaveView} from './state';\nimport {defaultScheduler, getTNode} from './util';\nimport {createElementRef} from './view_engine_compatibility';\nimport {RootViewRef, ViewRef} from './view_ref';\n\nexport class ComponentFactoryResolver extends viewEngine_ComponentFactoryResolver {\n  resolveComponentFactory<T>(component: Type<T>): viewEngine_ComponentFactory<T> {\n    ngDevMode && assertComponentType(component);\n    const componentDef = getComponentDef(component) !;\n    return new ComponentFactory(componentDef);\n  }\n}\n\nfunction toRefArray(map: {[key: string]: string}): {propName: string; templateName: string;}[] {\n  const array: {propName: string; templateName: string;}[] = [];\n  for (let nonMinified in map) {\n    if (map.hasOwnProperty(nonMinified)) {\n      const minified = map[nonMinified];\n      array.push({propName: minified, templateName: nonMinified});\n    }\n  }\n  return array;\n}\n\n/**\n * Default {@link RootContext} for all components rendered with {@link renderComponent}.\n */\nexport const ROOT_CONTEXT = new InjectionToken<RootContext>(\n    'ROOT_CONTEXT_TOKEN',\n    {providedIn: 'root', factory: () => createRootContext(inject(SCHEDULER))});\n\n/**\n * A change detection scheduler token for {@link RootContext}. This token is the default value used\n * for the default `RootContext` found in the {@link ROOT_CONTEXT} token.\n */\nexport const SCHEDULER = new InjectionToken<((fn: () => void) => void)>('SCHEDULER_TOKEN', {\n  providedIn: 'root',\n  factory: () => defaultScheduler,\n});\n\nconst NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};\n\nfunction createChainedInjector(rootViewInjector: Injector, moduleInjector: Injector): Injector {\n  return {\n    get: <T>(token: Type<T>| InjectionToken<T>, notFoundValue?: T): T => {\n      const value = rootViewInjector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR);\n\n      if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n        // Return the value from the root element injector when\n        // - it provides it\n        //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n        return value;\n      }\n\n      return moduleInjector.get(token, notFoundValue);\n    }\n  };\n}\n\n/**\n * Render3 implementation of {@link viewEngine_ComponentFactory}.\n */\nexport class ComponentFactory<T> extends viewEngine_ComponentFactory<T> {\n  selector: string;\n  componentType: Type<any>;\n  ngContentSelectors: string[];\n\n  get inputs(): {propName: string; templateName: string;}[] {\n    return toRefArray(this.componentDef.inputs);\n  }\n\n  get outputs(): {propName: string; templateName: string;}[] {\n    return toRefArray(this.componentDef.outputs);\n  }\n\n  constructor(private componentDef: ComponentDef<any>) {\n    super();\n    this.componentType = componentDef.type;\n    this.selector = componentDef.selectors[0][0] as string;\n    this.ngContentSelectors = [];\n  }\n\n  create(\n      injector: Injector, projectableNodes?: any[][]|undefined, rootSelectorOrNode?: any,\n      ngModule?: viewEngine_NgModuleRef<any>|undefined): viewEngine_ComponentRef<T> {\n    const isInternalRootView = rootSelectorOrNode === undefined;\n\n    let rendererFactory: RendererFactory3;\n    let sanitizer: Sanitizer|null = null;\n\n    if (ngModule) {\n      rendererFactory = ngModule.injector.get(RendererFactory2) as RendererFactory3;\n      sanitizer = ngModule.injector.get(Sanitizer, null);\n    } else {\n      rendererFactory = domRendererFactory3;\n    }\n\n    const hostRNode = isInternalRootView ?\n        elementCreate(this.selector, rendererFactory.createRenderer(null, this.componentDef)) :\n        locateHostElement(rendererFactory, rootSelectorOrNode);\n\n    const rootFlags = this.componentDef.onPush ? LViewFlags.Dirty | LViewFlags.IsRoot :\n                                                 LViewFlags.CheckAlways | LViewFlags.IsRoot;\n    const rootContext: RootContext =\n        ngModule && !isInternalRootView ? ngModule.injector.get(ROOT_CONTEXT) : createRootContext();\n\n    const renderer = rendererFactory.createRenderer(hostRNode, this.componentDef);\n    const rootViewInjector =\n        ngModule ? createChainedInjector(injector, ngModule.injector) : injector;\n\n    if (rootSelectorOrNode && hostRNode) {\n      ngDevMode && ngDevMode.rendererSetAttribute++;\n      isProceduralRenderer(renderer) ?\n          renderer.setAttribute(hostRNode, 'ng-version', VERSION.full) :\n          hostRNode.setAttribute('ng-version', VERSION.full);\n    }\n\n    // Create the root view. Uses empty TView and ContentTemplate.\n    const rootLView = createLView(\n        null, createTView(-1, null, 1, 0, null, null, null), rootContext, rootFlags,\n        rendererFactory, renderer, sanitizer, rootViewInjector);\n\n    // rootView is the parent when bootstrapping\n    const oldLView = enterView(rootLView, null);\n\n    let component: T;\n    let tElementNode: TElementNode;\n    try {\n      if (rendererFactory.begin) rendererFactory.begin();\n\n      const componentView = createRootComponentView(\n          hostRNode, this.componentDef, rootLView, rendererFactory, renderer);\n      tElementNode = getTNode(0, rootLView) as TElementNode;\n\n      // Transform the arrays of native nodes into a structure that can be consumed by the\n      // projection instruction. This is needed to support the reprojection of these nodes.\n      if (projectableNodes) {\n        let index = 0;\n        const tView = rootLView[TVIEW];\n        const projection: TNode[] = tElementNode.projection = [];\n        for (let i = 0; i < projectableNodes.length; i++) {\n          const nodeList = projectableNodes[i];\n          let firstTNode: TNode|null = null;\n          let previousTNode: TNode|null = null;\n          for (let j = 0; j < nodeList.length; j++) {\n            if (tView.firstTemplatePass) {\n              // For dynamically created components such as ComponentRef, we create a new TView for\n              // each insert. This is not ideal since we should be sharing the TViews.\n              // Also the logic here should be shared with `component.ts`'s `renderComponent`\n              // method.\n              tView.expandoStartIndex++;\n              tView.blueprint.splice(++index + HEADER_OFFSET, 0, null);\n              tView.data.splice(index + HEADER_OFFSET, 0, null);\n              rootLView.splice(index + HEADER_OFFSET, 0, null);\n            }\n            const tNode =\n                createNodeAtIndex(index, TNodeType.Element, nodeList[j] as RElement, null, null);\n            previousTNode ? (previousTNode.next = tNode) : (firstTNode = tNode);\n            previousTNode = tNode;\n          }\n          projection.push(firstTNode !);\n        }\n      }\n\n      // TODO: should LifecycleHooksFeature and other host features be generated by the compiler and\n      // executed here?\n      // Angular 5 reference: https://stackblitz.com/edit/lifecycle-hooks-vcref\n      component = createRootComponent(\n          componentView, this.componentDef, rootLView, rootContext, [LifecycleHooksFeature]);\n\n      refreshDescendantViews(rootLView, RenderFlags.Create);\n    } finally {\n      leaveView(oldLView, true);\n      if (rendererFactory.end) rendererFactory.end();\n    }\n\n    const componentRef = new ComponentRef(\n        this.componentType, component,\n        createElementRef(viewEngine_ElementRef, tElementNode, rootLView), rootLView, tElementNode);\n\n    if (isInternalRootView) {\n      // The host element of the internal root view is attached to the component's host view node\n      componentRef.hostView._tViewNode !.child = tElementNode;\n    }\n    return componentRef;\n  }\n}\n\nconst componentFactoryResolver: ComponentFactoryResolver = new ComponentFactoryResolver();\n\n/**\n * Creates a ComponentFactoryResolver and stores it on the injector. Or, if the\n * ComponentFactoryResolver\n * already exists, retrieves the existing ComponentFactoryResolver.\n *\n * @returns The ComponentFactoryResolver instance to use\n */\nexport function injectComponentFactoryResolver(): viewEngine_ComponentFactoryResolver {\n  return componentFactoryResolver;\n}\n\n/**\n * Represents an instance of a Component created via a {@link ComponentFactory}.\n *\n * `ComponentRef` provides access to the Component Instance as well other objects related to this\n * Component Instance and allows you to destroy the Component Instance via the {@link #destroy}\n * method.\n *\n */\nexport class ComponentRef<T> extends viewEngine_ComponentRef<T> {\n  destroyCbs: (() => void)[]|null = [];\n  instance: T;\n  hostView: ViewRef<T>;\n  changeDetectorRef: ViewEngine_ChangeDetectorRef;\n  componentType: Type<T>;\n\n  constructor(\n      componentType: Type<T>, instance: T, public location: viewEngine_ElementRef,\n      private _rootLView: LView,\n      private _tNode: TElementNode|TContainerNode|TElementContainerNode) {\n    super();\n    this.instance = instance;\n    this.hostView = this.changeDetectorRef = new RootViewRef<T>(_rootLView);\n    this.hostView._tViewNode = createViewNode(-1, _rootLView);\n    this.componentType = componentType;\n  }\n\n  get injector(): Injector { return new NodeInjector(this._tNode, this._rootLView); }\n\n  destroy(): void {\n    ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n    this.destroyCbs !.forEach(fn => fn());\n    this.destroyCbs = null;\n    this.hostView.destroy();\n  }\n  onDestroy(callback: () => void): void {\n    ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n    this.destroyCbs !.push(callback);\n  }\n}\n"]}