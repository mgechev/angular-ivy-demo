{"version":3,"file":"sanitization.js","sourceRoot":"","sources":["../../../../../packages/core/src/sanitization/sanitization.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {SANITIZER} from '../render3/interfaces/view';\nimport {getLView} from '../render3/state';\nimport {stringify} from '../render3/util';\n\nimport {BypassType, allowSanitizationBypass} from './bypass';\nimport {_sanitizeHtml as _sanitizeHtml} from './html_sanitizer';\nimport {SecurityContext} from './security';\nimport {StyleSanitizeFn, _sanitizeStyle as _sanitizeStyle} from './style_sanitizer';\nimport {_sanitizeUrl as _sanitizeUrl} from './url_sanitizer';\n\n\n\n/**\n * An `html` sanitizer which converts untrusted `html` **string** into trusted string by removing\n * dangerous content.\n *\n * This method parses the `html` and locates potentially dangerous content (such as urls and\n * javascript) and removes it.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustHtml}.\n *\n * @param unsafeHtml untrusted `html`, typically from the user.\n * @returns `html` string which is safe to display to user, because all of the dangerous javascript\n * and urls have been removed.\n */\nexport function sanitizeHtml(unsafeHtml: any): string {\n  const sanitizer = getLView()[SANITIZER];\n  if (sanitizer) {\n    return sanitizer.sanitize(SecurityContext.HTML, unsafeHtml) || '';\n  }\n  if (allowSanitizationBypass(unsafeHtml, BypassType.Html)) {\n    return unsafeHtml.toString();\n  }\n  return _sanitizeHtml(document, stringify(unsafeHtml));\n}\n\n/**\n * A `style` sanitizer which converts untrusted `style` **string** into trusted string by removing\n * dangerous content.\n *\n * This method parses the `style` and locates potentially dangerous content (such as urls and\n * javascript) and removes it.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustStyle}.\n *\n * @param unsafeStyle untrusted `style`, typically from the user.\n * @returns `style` string which is safe to bind to the `style` properties, because all of the\n * dangerous javascript and urls have been removed.\n */\nexport function sanitizeStyle(unsafeStyle: any): string {\n  const sanitizer = getLView()[SANITIZER];\n  if (sanitizer) {\n    return sanitizer.sanitize(SecurityContext.STYLE, unsafeStyle) || '';\n  }\n  if (allowSanitizationBypass(unsafeStyle, BypassType.Style)) {\n    return unsafeStyle.toString();\n  }\n  return _sanitizeStyle(stringify(unsafeStyle));\n}\n\n/**\n * A `url` sanitizer which converts untrusted `url` **string** into trusted string by removing\n * dangerous\n * content.\n *\n * This method parses the `url` and locates potentially dangerous content (such as javascript) and\n * removes it.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustUrl}.\n *\n * @param unsafeUrl untrusted `url`, typically from the user.\n * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * all of the dangerous javascript has been removed.\n */\nexport function sanitizeUrl(unsafeUrl: any): string {\n  const sanitizer = getLView()[SANITIZER];\n  if (sanitizer) {\n    return sanitizer.sanitize(SecurityContext.URL, unsafeUrl) || '';\n  }\n  if (allowSanitizationBypass(unsafeUrl, BypassType.Url)) {\n    return unsafeUrl.toString();\n  }\n  return _sanitizeUrl(stringify(unsafeUrl));\n}\n\n/**\n * A `url` sanitizer which only lets trusted `url`s through.\n *\n * This passes only `url`s marked trusted by calling {@link bypassSanitizationTrustResourceUrl}.\n *\n * @param unsafeResourceUrl untrusted `url`, typically from the user.\n * @returns `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * only trusted `url`s have been allowed to pass.\n */\nexport function sanitizeResourceUrl(unsafeResourceUrl: any): string {\n  const sanitizer = getLView()[SANITIZER];\n  if (sanitizer) {\n    return sanitizer.sanitize(SecurityContext.RESOURCE_URL, unsafeResourceUrl) || '';\n  }\n  if (allowSanitizationBypass(unsafeResourceUrl, BypassType.ResourceUrl)) {\n    return unsafeResourceUrl.toString();\n  }\n  throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');\n}\n\n/**\n * A `script` sanitizer which only lets trusted javascript through.\n *\n * This passes only `script`s marked trusted by calling {@link\n * bypassSanitizationTrustScript}.\n *\n * @param unsafeScript untrusted `script`, typically from the user.\n * @returns `url` string which is safe to bind to the `<script>` element such as `<img src>`,\n * because only trusted `scripts` have been allowed to pass.\n */\nexport function sanitizeScript(unsafeScript: any): string {\n  const sanitizer = getLView()[SANITIZER];\n  if (sanitizer) {\n    return sanitizer.sanitize(SecurityContext.SCRIPT, unsafeScript) || '';\n  }\n  if (allowSanitizationBypass(unsafeScript, BypassType.Script)) {\n    return unsafeScript.toString();\n  }\n  throw new Error('unsafe value used in a script context');\n}\n\n/**\n * The default style sanitizer will handle sanitization for style properties by\n * sanitizing any CSS property that can include a `url` value (usually image-based properties)\n */\nexport const defaultStyleSanitizer = (function(prop: string, value?: string): string | boolean {\n  if (value === undefined) {\n    return prop === 'background-image' || prop === 'background' || prop === 'border-image' ||\n        prop === 'filter' || prop === 'filter' || prop === 'list-style' ||\n        prop === 'list-style-image';\n  }\n\n  return sanitizeStyle(value);\n} as StyleSanitizeFn);\n"]}