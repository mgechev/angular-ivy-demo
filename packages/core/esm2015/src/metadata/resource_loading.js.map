{"version":3,"file":"resource_loading.js","sourceRoot":"","sources":["../../../../../packages/core/src/metadata/resource_loading.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA,MAAM,UAAU,yBAAyB,CACrC,gBAA8E;;IAEhF,MAAM,UAAU,GAAsB,EAAE,CAAC;;IAGzC,MAAM,MAAM,GAAG,IAAI,GAAG,EAA2B,CAAC;;;;;IAClD,SAAS,qBAAqB,CAAC,GAAW;;QACxC,IAAI,OAAO,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC9B,IAAI,CAAC,OAAO,EAAE;;YACZ,MAAM,IAAI,GAAG,gBAAgB,CAAC,GAAG,CAAC,CAAC;YACnC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;YACrD,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAC1B;QACD,OAAO,OAAO,CAAC;KAChB;IAED,gCAAgC,CAAC,OAAO,CAAC,CAAC,SAAoB,EAAE,EAAE;QAChE,IAAI,SAAS,CAAC,WAAW,EAAE;YACzB,qBAAqB,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE;gBAC7D,SAAS,CAAC,QAAQ,GAAG,QAAQ,CAAC;gBAC9B,SAAS,CAAC,WAAW,GAAG,SAAS,CAAC;aACnC,CAAC,CAAC;SACJ;;QACD,MAAM,SAAS,GAAG,SAAS,CAAC,SAAS,CAAC;;QACtC,MAAM,MAAM,GAAG,SAAS,CAAC,MAAM,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,EAAE,CAAC,CAAC;;QAC3D,MAAM,WAAW,GAAG,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC;QAC5C,SAAS,IAAI,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,KAAK,EAAE,EAAE;YACjD,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAChB,qBAAqB,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;gBAC7C,MAAM,CAAC,WAAW,GAAG,KAAK,CAAC,GAAG,KAAK,CAAC;gBACpC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;gBACjD,IAAI,SAAS,CAAC,MAAM,IAAI,CAAC,EAAE;oBACzB,SAAS,CAAC,SAAS,GAAG,SAAS,CAAC;iBACjC;aACF,CAAC,CAAC;SACJ,CAAC,CAAC;KACJ,CAAC,CAAC;IACH,gCAAgC,CAAC,KAAK,EAAE,CAAC;IACzC,OAAO,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC;CACjD;;AAED,MAAM,gCAAgC,GAAmB,IAAI,GAAG,EAAE,CAAC;;;;;AAEnE,MAAM,UAAU,wCAAwC,CAAC,QAAmB;IAC1E,IAAI,wBAAwB,CAAC,QAAQ,CAAC,EAAE;QACtC,gCAAgC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;KAChD;CACF;;;;;AAED,MAAM,UAAU,wBAAwB,CAAC,SAAoB;IAC3D,OAAO,SAAS,CAAC,WAAW,IAAI,SAAS,CAAC,SAAS,IAAI,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC;CACnF;;;;AACD,MAAM,UAAU,wCAAwC;IACtD,gCAAgC,CAAC,KAAK,EAAE,CAAC;CAC1C;;;;;AAED,SAAS,cAAc,CAAC,QAA4C;IAClE,OAAO,OAAO,QAAQ,IAAI,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;CACjE","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component} from './directives';\n\n\n/**\n * Used to resolve resource URLs on `@Component` when used with JIT compilation.\n *\n * Example:\n * ```\n * @Component({\n *   selector: 'my-comp',\n *   templateUrl: 'my-comp.html', // This requires asynchronous resolution\n * })\n * class MyComponnent{\n * }\n *\n * // Calling `renderComponent` will fail because `MyComponent`'s `@Compenent.templateUrl`\n * // needs to be resolved because `renderComponent` is synchronous process.\n * // renderComponent(MyComponent);\n *\n * // Calling `resolveComponentResources` will resolve `@Compenent.templateUrl` into\n * // `@Compenent.template`, which would allow `renderComponent` to proceed in synchronous manner.\n * // Use browser's `fetch` function as the default resource resolution strategy.\n * resolveComponentResources(fetch).then(() => {\n *   // After resolution all URLs have been converted into strings.\n *   renderComponent(MyComponent);\n * });\n *\n * ```\n *\n * NOTE: In AOT the resolution happens during compilation, and so there should be no need\n * to call this method outside JIT mode.\n *\n * @param resourceResolver a function which is responsible to returning a `Promise` of the resolved\n * URL. Browser's `fetch` method is a good default implementation.\n */\nexport function resolveComponentResources(\n    resourceResolver: (url: string) => (Promise<string|{text(): Promise<string>}>)): Promise<null> {\n  // Store all promises which are fetching the resources.\n  const urlFetches: Promise<string>[] = [];\n\n  // Cache so that we don't fetch the same resource more than once.\n  const urlMap = new Map<string, Promise<string>>();\n  function cachedResourceResolve(url: string): Promise<string> {\n    let promise = urlMap.get(url);\n    if (!promise) {\n      const resp = resourceResolver(url);\n      urlMap.set(url, promise = resp.then(unwrapResponse));\n      urlFetches.push(promise);\n    }\n    return promise;\n  }\n\n  componentResourceResolutionQueue.forEach((component: Component) => {\n    if (component.templateUrl) {\n      cachedResourceResolve(component.templateUrl).then((template) => {\n        component.template = template;\n        component.templateUrl = undefined;\n      });\n    }\n    const styleUrls = component.styleUrls;\n    const styles = component.styles || (component.styles = []);\n    const styleOffset = component.styles.length;\n    styleUrls && styleUrls.forEach((styleUrl, index) => {\n      styles.push('');  // pre-allocate array.\n      cachedResourceResolve(styleUrl).then((style) => {\n        styles[styleOffset + index] = style;\n        styleUrls.splice(styleUrls.indexOf(styleUrl), 1);\n        if (styleUrls.length == 0) {\n          component.styleUrls = undefined;\n        }\n      });\n    });\n  });\n  componentResourceResolutionQueue.clear();\n  return Promise.all(urlFetches).then(() => null);\n}\n\nconst componentResourceResolutionQueue: Set<Component> = new Set();\n\nexport function maybeQueueResolutionOfComponentResources(metadata: Component) {\n  if (componentNeedsResolution(metadata)) {\n    componentResourceResolutionQueue.add(metadata);\n  }\n}\n\nexport function componentNeedsResolution(component: Component) {\n  return component.templateUrl || component.styleUrls && component.styleUrls.length;\n}\nexport function clearResolutionOfComponentResourcesQueue() {\n  componentResourceResolutionQueue.clear();\n}\n\nfunction unwrapResponse(response: string | {text(): Promise<string>}): string|Promise<string> {\n  return typeof response == 'string' ? response : response.text();\n}"]}