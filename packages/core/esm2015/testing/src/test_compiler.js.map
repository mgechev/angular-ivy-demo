{"version":3,"file":"test_compiler.js","sourceRoot":"","sources":["../../../../../packages/core/testing/src/test_compiler.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAAC,QAAQ,EAA2D,UAAU,EAAiC,MAAM,eAAe,CAAC;;;;AAI5I,SAAS,aAAa;IACpB,MAAM,KAAK,CAAC,eAAe,CAAC,CAAC;CAC9B;;;;;;AAQD,MAAM,OAAO,eAAgB,SAAQ,QAAQ;;;;IAC3C,IAAI,QAAQ,KAAe,MAAM,aAAa,EAAE,CAAC,EAAE;;;;;;IACnD,cAAc,CAAC,MAAiB,EAAE,SAAqC;QACrE,MAAM,aAAa,EAAE,CAAC;KACvB;;;;;;IACD,iBAAiB,CAAC,SAAoB,EAAE,SAAsC;QAC5E,MAAM,aAAa,EAAE,CAAC;KACvB;;;;;;IACD,iBAAiB,CAAC,SAAoB,EAAE,SAAsC;QAC5E,MAAM,aAAa,EAAE,CAAC;KACvB;;;;;;IACD,YAAY,CAAC,SAAoB,EAAE,SAAiC;QAClE,MAAM,aAAa,EAAE,CAAC;KACvB;;;;;;;IAKD,gBAAgB,CAAC,SAAsB,IAAI,MAAM,aAAa,EAAE,CAAC,EAAE;;;;;;;;;IAOnE,mBAAmB,CAAI,SAAkB,IAAyB,MAAM,aAAa,EAAE,CAAC,EAAE;;;;;;;IAM1F,qBAAqB,CAAC,KAAY,IAAoB,MAAM,aAAa,EAAE,CAAC,EAAE;;;YAhC/E,UAAU;;;;;;;;AAwCX,MAAM,OAAgB,sBAAsB;CAE3C","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Compiler, CompilerOptions, Component, ComponentFactory, Directive, Injectable, Injector, NgModule, Pipe, Type} from '@angular/core';\n\nimport {MetadataOverride} from './metadata_override';\n\nfunction unimplemented(): any {\n  throw Error('unimplemented');\n}\n\n/**\n * Special interface to the compiler only used by testing\n *\n * @publicApi\n */\n@Injectable()\nexport class TestingCompiler extends Compiler {\n  get injector(): Injector { throw unimplemented(); }\n  overrideModule(module: Type<any>, overrides: MetadataOverride<NgModule>): void {\n    throw unimplemented();\n  }\n  overrideDirective(directive: Type<any>, overrides: MetadataOverride<Directive>): void {\n    throw unimplemented();\n  }\n  overrideComponent(component: Type<any>, overrides: MetadataOverride<Component>): void {\n    throw unimplemented();\n  }\n  overridePipe(directive: Type<any>, overrides: MetadataOverride<Pipe>): void {\n    throw unimplemented();\n  }\n  /**\n   * Allows to pass the compile summary from AOT compilation to the JIT compiler,\n   * so that it can use the code generated by AOT.\n   */\n  loadAotSummaries(summaries: () => any[]) { throw unimplemented(); }\n\n  /**\n   * Gets the component factory for the given component.\n   * This assumes that the component has been compiled before calling this call using\n   * `compileModuleAndAllComponents*`.\n   */\n  getComponentFactory<T>(component: Type<T>): ComponentFactory<T> { throw unimplemented(); }\n\n  /**\n   * Returns the component type that is stored in the given error.\n   * This can be used for errors created by compileModule...\n   */\n  getComponentFromError(error: Error): Type<any>|null { throw unimplemented(); }\n}\n\n/**\n * A factory for creating a Compiler\n *\n * @publicApi\n */\nexport abstract class TestingCompilerFactory {\n  abstract createTestingCompiler(options?: CompilerOptions[]): TestingCompiler;\n}\n"]}