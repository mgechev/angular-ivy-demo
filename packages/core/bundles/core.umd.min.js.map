{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","../../../packages/core/esm5/src/util/property.js","../../../packages/core/esm5/src/di/injection_token.js","../../../packages/core/esm5/src/util/decorators.js","../../../packages/core/esm5/src/change_detection/constants.js","../../../packages/core/esm5/src/metadata/resource_loading.js","../../../packages/core/esm5/src/metadata/view.js","../../../packages/core/esm5/src/util.js","../../../packages/core/esm5/src/render3/ng_dev_mode.js","../../../packages/core/esm5/src/render3/definition.js","../../../packages/core/esm5/src/render3/jit/compiler_facade.js","../../../packages/core/esm5/src/di/injector_compatibility.js","../../../packages/core/esm5/src/render3/assert.js","../../../packages/core/esm5/src/render3/interfaces/injector.js","../../../packages/core/esm5/src/render3/node_assert.js","../../../packages/core/esm5/src/render3/hooks.js","../../../packages/core/esm5/src/render3/util.js","../../../packages/core/esm5/src/render3/state.js","../../../packages/core/esm5/src/render3/di.js","../../../packages/core/esm5/src/render3/context_discovery.js","../../../packages/core/esm5/src/util/noop.js","../../../packages/core/esm5/src/di/forward_ref.js","../../../packages/core/esm5/src/di/injector.js","../../../packages/core/esm5/src/util/ng_reflect.js","../../../packages/core/esm5/src/change_detection/change_detection_util.js","../../../packages/core/esm5/src/render3/bindings.js","../../../packages/core/esm5/src/render3/errors.js","../../../packages/core/esm5/src/render3/interfaces/renderer.js","../../../packages/core/esm5/src/render3/node_manipulation.js","../../../packages/core/esm5/src/render3/node_selector_matcher.js","../../../packages/core/esm5/src/render3/styling/player_factory.js","../../../packages/core/esm5/src/render3/styling/core_player_handler.js","../../../packages/core/esm5/src/render3/styling/util.js","../../../packages/core/esm5/src/render3/styling/class_and_style_bindings.js","../../../packages/core/esm5/src/render3/instructions.js","../../../packages/core/esm5/src/render3/view_ref.js","../../../packages/core/esm5/src/render3/view_engine_compatibility.js","../../../packages/core/esm5/src/render3/discovery_utils.js","../../../packages/core/esm5/src/render3/players.js","../../../packages/core/esm5/src/render3/global_utils.js","../../../packages/core/esm5/src/render3/component.js","../../../packages/core/esm5/src/render3/features/inherit_definition_feature.js","../../../packages/core/esm5/src/render3/features/ng_onchanges_feature.js","../../../packages/core/esm5/src/di/r3_injector.js","../../../packages/core/esm5/src/render3/di_setup.js","../../../packages/core/esm5/src/render3/features/providers_feature.js","../../../packages/core/esm5/src/linker/component_factory_resolver.js","../../../packages/core/esm5/src/linker/element_ref.js","../../../packages/core/esm5/src/render/api.js","../../../packages/core/esm5/src/sanitization/security.js","../../../packages/core/esm5/src/version.js","../../../packages/core/esm5/src/render3/component_ref.js","../../../packages/core/esm5/src/sanitization/inert_body.js","../../../packages/core/esm5/src/sanitization/url_sanitizer.js","../../../packages/core/esm5/src/sanitization/html_sanitizer.js","../../../packages/core/esm5/src/render3/i18n.js","../../../packages/core/esm5/src/render3/ng_module_ref.js","../../../packages/core/esm5/src/render3/pure_function.js","../../../packages/core/esm5/src/render3/pipe.js","../../../packages/core/esm5/src/event_emitter.js","../../../packages/core/esm5/src/linker/template_ref.js","../../../packages/core/esm5/src/render3/query.js","../../../packages/core/esm5/src/sanitization/bypass.js","../../../packages/core/esm5/src/sanitization/style_sanitizer.js","../../../packages/core/esm5/src/sanitization/sanitization.js","../../../packages/core/esm5/src/render3/jit/environment.js","../../../packages/core/esm5/src/type.js","../../../packages/core/esm5/src/reflection/reflection_capabilities.js","../../../packages/core/esm5/src/render3/jit/util.js","../../../packages/core/esm5/src/render3/jit/module.js","../../../packages/core/esm5/src/render3/jit/directive.js","../../../packages/core/esm5/src/render3/jit/pipe.js","../../../packages/core/esm5/src/metadata/directives.js","../../../packages/core/esm5/src/di/util.js","../../../packages/core/esm5/src/metadata/ng_module.js","../../../packages/core/esm5/src/render3/jit/injectable.js","../../../packages/core/esm5/src/di/injectable.js","../../../packages/core/esm5/src/errors.js","../../../packages/core/esm5/src/error_handler.js","../../../packages/core/esm5/src/di/reflective_errors.js","../../../packages/core/esm5/src/di/reflective_key.js","../../../packages/core/esm5/src/reflection/reflector.js","../../../packages/core/esm5/src/di/reflective_provider.js","../../../packages/core/esm5/src/di/reflective_injector.js","../../../packages/core/esm5/src/application_init.js","../../../packages/core/esm5/src/application_tokens.js","../../../packages/core/esm5/src/console.js","../../../packages/core/esm5/src/linker/compiler.js","../../../packages/core/esm5/src/profile/wtf_impl.js","../../../packages/core/esm5/src/zone/ng_zone.js","../../../packages/core/esm5/src/testability/testability.js","../../../packages/core/esm5/src/application_ref.js","../../../packages/core/esm5/src/linker/ng_module_factory_loader.js","../../../packages/core/esm5/src/linker/query_list.js","../../../packages/core/esm5/src/linker/system_js_ng_module_factory_loader.js","../../../packages/core/esm5/src/linker/view_container_ref.js","../../../packages/core/esm5/src/change_detection/change_detector_ref.js","../../../packages/core/esm5/src/linker/view_ref.js","../../../packages/core/esm5/src/debug/debug_node.js","../../../packages/core/esm5/src/change_detection/differs/default_iterable_differ.js","../../../packages/core/esm5/src/change_detection/differs/default_keyvalue_differ.js","../../../packages/core/esm5/src/change_detection/differs/iterable_differs.js","../../../packages/core/esm5/src/change_detection/differs/keyvalue_differs.js","../../../packages/core/esm5/src/i18n/tokens.js","../../../packages/core/esm5/src/application_module.js","../../../packages/core/esm5/src/view/types.js","../../../packages/core/esm5/src/view/errors.js","../../../packages/core/esm5/src/view/util.js","../../../packages/core/esm5/src/view/element.js","../../../packages/core/esm5/src/view/ng_module.js","../../../packages/core/esm5/src/view/view_attach.js","../../../packages/core/esm5/src/view/refs.js","../../../packages/core/esm5/src/view/provider.js","../../../packages/core/esm5/src/view/query.js","../../../packages/core/esm5/src/view/ng_content.js","../../../packages/core/esm5/src/view/pure_expression.js","../../../packages/core/esm5/src/view/text.js","../../../packages/core/esm5/src/view/view.js","../../../packages/core/esm5/src/view/services.js","../../../packages/core/esm5/src/view/entrypoint.js","../../../packages/core/esm5/src/render3/metadata.js"],"names":["exports","module","factory","require","extendStatics","d","b","__proto__","Array","p","hasOwnProperty","__","this","constructor","Object","create","prototype","assign","t","s","i","n","arguments","length","call","getClosureSafeProperty","objWithPropertyToExtract","key","fillProperties","target","source","InjectionToken","_desc","options","ngMetadataName","ngInjectableDef","undefined","defineInjectable","providedIn","toString","metaCtor","makeMetadataCtor","props","DecoratorFactory","args","_i","apply","concat","annotationInstance","_a","bind","cls","typeFn","ANNOTATIONS","defineProperty","value","push","additionalProcessing","parentClass","values","propName","ParamDecoratorFactory","parameters","PARAMETERS","index","PropDecoratorFactory","name","meta","PROP_METADATA","unshift","decoratorInstance","OnPush","Default","ChangeDetectorStatus","CheckOnce","Checked","CheckAlways","Errored","Destroyed","componentResourceResolutionQueue","Set","ShadowDom","newCounters","__window","window","__self","self","WorkerGlobalScope","_symbolIterator","Symbol_1","iterator","getOwnPropertyNames","Map","keys","scheduleMicroTask","fn","Zone","promise","then","stringify","token","map","join","overriddenName","res","firstTemplatePass","tNode","tView","rendererCreateTextNode","rendererSetText","rendererCreateElement","rendererAddEventListener","rendererSetAttribute","rendererRemoveAttribute","rendererSetProperty","rendererSetClassName","rendererAddClass","rendererRemoveClass","rendererSetStyle","rendererRemoveStyle","rendererDestroy","rendererRemoveNode","EMPTY","ngDevMode","typePrototype","type","declaredInputs","def","providersResolver","consts","componentDefinition","vars","template","hostBindings","contentQueriesRefresh","inputs","outputs","exportAs","onInit","ngOnInit","doCheck","ngDoCheck","afterContentInit","ngAfterContentInit","afterContentChecked","ngAfterContentChecked","afterViewChecked","ngAfterViewChecked","onPush","changeDetection","ChangeDetectionStrategy","directiveDefs","pipeDefs","viewQuery","features","data","encapsulation","ViewEncapsulation","Emulated","styles","EMPTY_ARRAY","directiveTypes","feature","pipeTypes","id","_renderCompCount","invertObject","forEach","extractDirectiveDef","getComponentDef","getDirectiveDef","extractPipeDef","getPipeDef","defineNgModule","bootstrap","declarations","imports","obj","secondary","minifiedKey","publicName","declaredName","isArray","newLookup","defineBase","baseDefinition","definePipe","pipeDef","_global","globalNg","ÉµcompilerFacade","Error","Self","SkipSelf","Optional","_currentInjector","setCurrentInjector","injector","setInjectImplementation","impl","injectInjectorOnly","flags","InjectFlags","injectRootLimpMode","notFoundValue","injectableDef","getInjectableDef","injectArgs","types","arg","j","Inject","inject","assertComponentType","actual","msg","resolving","injectImpl","injectImplementation","FactoryPrototype","NodeInjectorFactory","assertNodeOfPossibleTypes","typeName","queueInitHooks","assertEqual","initHooks","queueLifecycleHooks","start","end","queueContentHooks","contentHooks","queueViewHooks","afterViewInit","viewHooks","executeInitHooks","currentView","creationMode","executeHooks","allHooks","checkHooks","stringify$1","readElementValue","getRootView","assertDefined","lView","readPatchedLView","getRootContext$1","viewOrComponent","readPatchedData","parentView","startView","viewOffset","bindingsEnabled","contextLView","checkNoChangesMode","mode","bindingRootIndex","enterView","newView","hostTNode","oldView","TVIEW","FLAGS","bindingStartIndex","nestingLevel","DECLARATION_VIEW","creationOnly","viewCheckHooks","includeViewProviders","setIncludeViewProviders","v","getOrCreateNodeInjectorForNode","hostView","existingInjectorIndex","getInjectorIndex","injectorIndex","insertBloom","parentLView","getParentInjectorView","parentLoc","hasParentInjector","parentData","parentIndex","parent","PARENT_INJECTOR","getParentInjectorLocation","view","HOST_NODE","NG_ELEMENT_ID","charCodeAt","nextNgElementId","b6","bloomBit","b7","b5","tData","mask","injectAttributeImpl","attrNameToInject","attrs","attrName","bloomHash","bloomHashBitOrFactory","saveLView","getLView","setTNodeAndViewData","savePreviousOrParentTNode","NO_PARENT_INJECTOR","shouldSearchParent","parentLocation","instance","searchTokensOnInjector","previousTView","NOT_FOUND","bloomHasToken","Host","moduleInjector","INJECTOR","get","currentTView","node","canAccessViewProviders","injectableIdx","locateDirectiveOrProvider","injectorView","getNodeInjectable","nodeFlags","startInjectables","nodeProviderIndexes","startDirectives","directiveCount","providerTokenOrDef","tInjectables","lData","previousIncludeViewProviders","canSeeViewProviders","previousInjectImplementation","getPreviousOrParentTNode","previousTNode","_tNode","_lView","getOrCreateInjectable","getFactoryOf","typeAny","getInjectorDef","getInheritedFactory","getPrototypeOf","nodeIndex","component","findViaComponent","isDirectiveInstance","directiveInstance","firstChild","getDirectiveStartIndex","directiveIndexEnd","getDirectiveEndIndex","directiveIndexStart","findViaDirective","getDirectivesAtNodeIndex","native","context","existingCtx","createLContext","attachPatchData","directives","mpValue","assertDomNode","rElement","parent_1","parentNode","parentContext","findViaNativeElement","getComponentViewByInstance","componentInstance","getComponentViewByIndex","HOST","getNativeByTNode","traverseNextElement","child","next","componentIndices","elementComponentIndex","CONTEXT","includeComponents","directiveStartIndex","resolveForwardRef","__forward_ref__","forwardRef","NullInjector","_THROW_IF_NOT_FOUND","StaticInjector","THROW_IF_NOT_FOUND","NULL","INJECTOR$1","Injector","__NG_ELEMENT_ID__","SWITCH_INJECTOR_FACTORY","noop","EMPTY$1","slice","NULL_INJECTOR$1","records","provider","provide","deps","providerDeps","annotations","annotation","useExisting","USE_VALUE","useNew","useValue","useFactory","useClass","resolveProvider","multi","multiProvider","multiProviderMixError","set","MULTI_PROVIDER_FN","record","resolvedProvider","tryResolveToken","_records","e","tokenPath","NG_TEMP_TOKEN_PATH","SOURCE","message","formatError","tokens","NO_NEW_LINE","depRecords","depRecord","childRecord","resolveToken","CIRCULAR","text","charAt","substr","parts","JSON","replace","CAMEL_CASE_REGEXP","m","normalizeDebugBindingValue","devModeEqual","a","isListLikeIterableA","isListLikeIterable","isListLikeIterableB","comparator","iterator1","getSymbolIterator","iterator2","item1","item2","done","WrappedValue","wrap","isWrapped","SimpleChange","isFirstChange","getBinding","bindingIndex","assertNotEqual","NO_CHANGE","getCheckNoChangesMode","oldValue","currValue","throwErrorIfNoChangesMode","getCreationMode","RendererStyleFlags3","getHostNative","getFirstParentNative","getLContainer","embeddedView","containerHostIndex","CONTAINER_INDEX","PARENT","projectionNodeIndex","viewToWalk","rootTNode","nextTNode","action","renderer","renderParent","beforeNode","nodeOrContainer","isLContainer","executeNodeAction","NATIVE","lContainer","VIEWS","head","componentView","projectionNodeStack$1","NEXT","findComponentView","insertBefore","isProceduralRenderer","removeChild","getContainerRenderParent","assertNodeType","insertView","containerIndex","views","splice","QUERIES","detachView","removeIndex","detached","viewToDetach","addRemoveViewFromContainer","removeView","containerHost","destroyLView","destroyNode","walkTNodeTree","rootView","childIndex","viewOrContainer","HEADER_OFFSET","getLViewChild","container","cleanUpView","getParentState","state","cleanup","removeEventListener","listener","cleanupFn","CLEANUP","RENDERER","getRenderParent","nativeParentNode","tNodeParent","getHighestElementContainer","canInsertNativeNode","currentNode","nativeInsertBefore","childEl","parentEl","getParentNative","childTNode","parentTNode","indexOf","RENDER_PARENT","getBeforeNodeForView","appendChild","ngContainer","containerNative","viewTNode","parentNative","projectedTNode","projectionView","ngContainerChildTNode","appendProjectedNode","tProjectionNode","isNodeMatchingSelector","selector","nodeClassesLen","matchEndIdx","nodeAttrs","selectOnlyMarkerIdx","current","tagName","isPositive","skipToNextSelector","attrIndexInNode","findAttrIndexInNode","selectorAttrValue","nodeAttrValue","maybeAttrName","matchIndex","cssClassToMatch","selectOnlyMode","isNodeMatchingSelectorList","ngProjectAsAttrIdx","NG_PROJECT_AS_ATTR_NAME","getProjectAsAttrValue","selectors","ngProjectAsAttrVal","textSelectors","BoundPlayerFactory","_players","player","CorePlayerHandler","queuePlayer","initialStylingValues","storageIndex","slotValue","viewData","wrapper","element","stylingTemplate","getTNode","addPlayerInternal","playerContext","rootContext","playerContextIndex","ref","nonFactoryPlayerIndex","destroy","playerHandler","isClassBased_5","currFlag","ClassAndStylePlayerBuilder","currPlayerIndex","getPlayerBuilderIndex","singleIndex","playerBuildersAreDirty","hasPlayerBuilderChanged","playerBuilder","newIndex","setValue","value_1","indexForMulti","getMultiOrSingleIndex","valueForMulti","getValue","multiDirty","singleDirty","valueExists","setDirty","setContextDirty","renderStyleAndClassBindings","rootOrView","isFirstRender","classesStore","stylesStore","totalPlayersQueued","multiStartIndex","getMultiStartIndex","styleSanitizer","getStyleSanitizer","limitToSingleClasses","valueToApply","isClassBased_6","readInitialValue","getInitialValue","flag","setClass","prop","setStyle","getPlayerContext","playersStartIndex","builder","playerInsertionIndex","buildPlayer","oldPlayer","setContextPlayersDirty","sanitizer","store","DashCase","setProperty","className","add","addClass","isDirtyYes","adjustedIndex","setPlayerBuilder","insertionIndex","allocPlayerContext","getPlayerBuilder","startIndex","flagA","tmpFlag","flagB","getPointers","indexB","singleIndexA","getInitialIndex","_flag","singleIndexB","setFlag","pointers","indexA","setProp","getProp","setPlayerBuilderIndex","insertNewMultiProperty","classBased","playerIndex","doShift","indexStartPosition","isDirty","isClassBased","isSanitizable","prepareInitialFlag","_element","_type","_dirty","_factory","currentPlayer","_values","refreshDescendantViews","rf","ACTIVE_INDEX","container_1","dynamicViewData","contentQueries","directiveDefIdx","refreshContentQueries","contentCheckHooks","expandoInstructions","BINDING_INDEX","expandoStartIndex","setBindingRoot","currentDirectiveIndex","instruction","currentElementIndex","components","createLView","rendererFactory","blueprint","RENDERER_FACTORY","previousOrParentTNode","getIsParent","isParent","createViewNode","createTNode","setIsParent","allocExpando","renderEmbeddedTemplate","viewToRender","_previousOrParentTNode","setFirstTemplatePass","leaveView","renderComponentOrTemplate","componentOrContext","templateFn","begin","namespaceHTML","getRenderFlags","_currentNamespace","rendererCreateComment","createComment","assertDataInRange","setPreviousOrParentTNode","currentQueries","elementStart","localRefs","elementCreate","createNodeAtIndex","elementDepthCount","overriddenRenderer","rendererToUse","createElement","createDirectivesAndLocals","localRefExtractor","getFirstTemplatePass","baseResolveDirective","saveNameToExportMap","exportsMap","resolveDirectives","registry","matches","isComponentDef","throwMultipleComponentError","findDirectiveMatches","addComponentLogic","expando","directive","previousExpandoLength","localIndex","localNames","createTView","viewIndex","pipes","initialViewLength","fill","createViewBlueprint","destroyHooks","pipeDestroyHooks","isProc","namespaceURI","attrVal","setAttributeNS","attrName_1","setAttribute","locateHostElement","elementOrSelector","createRenderer","rNode","defaultRenderer","selectRootElement","querySelector","createError","eventName","listenerFn","useCapture","storeCleanupFn","listen","wrappedListener","preventDefault","wrapListenerWithPreventDefault","addEventListener","cleanupInstances","getCleanup","getTViewCleanup","generatePropertyAliases","storeCleanupWithContext","elementEnd","elementAttribute","element_1","getNativeByIndex","removeAttribute","strValue","dataValue","inputData","initializeTNodeInputs","isComponent","markDirtyIfOnPush","normalizeDebugBindingName","setNgReflectProperties","tViews","tParent","providerIndexes","initialInputs","setInputsForProperty","count","tNodeFlags","propStore","isInput","direction","defs","directiveDef","propertyAliasMap","internalName","elementClassProp","classIndex","updateElementClassProp","hostStylingHack","classDeclarations","removeClass","hackImplementationOfElementClassProp","elementStyling","styleDeclarations","hasClassInput","stylesLookup","classesLookup","hasPassedDeclarations","initialStyleDeclarations","totalStyleDeclarations","initialClassDeclarations","initialStaticClasses","totalProps","styleProps","classNames","maxLength","multiStart","indexForSingle","initialFlag","indexForInitial","initialValue","onlyProcessSingleClasses","createStylingContextTemplate","initialClasses","getStylingContext","elementStylingApply","getRootContext","elementStyleProp","styleIndex","suffix","stylingContext","delegateToClassInput","classes","classesInput","stylesInput","classesPlayerBuilder","stylesPlayerBuilder","classesValue","stylesValue","ignoreAllClassUpdates","ignoreAllStyleUpdates","applyAllClasses","split","isClassBased_2","propIndex","classesStartIndex","newValue","newProp","playerBuilderIndex","classesPlayerBuilderIndex","stylesPlayerBuilderIndex","ctxIndex","hasValueChanged","indexOfEntry","findEntryPositionByProp","flagToCompare","valueToCompare","newFlag","dirty","isClassBased_3","propLimit","isClassBased_4","textNative","createTextNode","element_2","generateExpandoInstructionBlock","elementIndex","postProcessDirective","postProcessBaseDirective","directiveIndex","initialInputData","minifiedInputName","attrValue","inputsToStore","generateInitialInputs","setInputsFromAttrs","queueComponentIndexForCheck","initNodeFlags","numberOfDirectives","directiveFactory","getOrCreateTView","addToViewTree","createLContainer","hostNative","isForViewContainerRef","containerInternal","comment","loadInternal","containerRefreshEnd","nextIndex","containerTNode","tContainerNode","startIdx","viewBlockId","viewAtPositionId","scanForView","containerTViews","getOrCreateEmbeddedTView","createView","embeddedViewEnd","viewHost","componentRefresh","adjustedElementIndex","projectionDef","componentNode","projection","noOfNodeBuckets","pData","tails","componentChild","bucketIndex","matchingSelectorIndex","nextNode","selectorIndex","nodeToProject","currentComponentView","projectedView","firstProjectedNode","projectionNodeStack","adjustedHostIndex","TAIL","markViewDirty","nothingScheduled","clean","_CLEAN_PROMISE","Promise","r","res_1","scheduler","tickRootContext","flushPlayers","hostTView","renderFlags","viewFlags","updateViewQuery","totalHostVars","assertLessThan","different","bindingUpdated","content","interpolation1","prefix","v0","interpolation2","i0","v1","interpolation3","i1","v2","interpolation4","i2","v3","bindingUpdated4","v4","bindingUpdated2","v5","bindingUpdated3","v6","v7","loadQueryList","queryListIdx","savedContentQueriesLength","CONTENT_QUERIES","queryList","tViewContentQueries","CLEAN_PROMISE","_appRef","_viewContainerRef","ViewRef","collectNativeNodes","result","tNodeChild","_context","_lookUpContext","configurable","viewAttached","detectChanges","checkNoChanges","_super","_this","RootViewRef","detectChangesInRootView","checkNoChangesInRootView","_view","ElementRefToken","ElementRef_","__extends","TemplateRefToken","TemplateRef_","_declarationParentView","elementRef","_tView","_renderer","_queries","_injectorIndex","container$$1","declarationView","queries","viewRef","_tViewNode","hostContainer","R3TemplateRef","createElementRef","NodeInjector$$1","createViewRef","componentIndex","getComponent","Node","loadContext","getViewComponent","getRootContext$2","componentOrView","getInjector","NodeInjector","getDirectives","throwOnNotFound","getContext","getLocalRefs","localRefName","getPlayers","nonFactoryPlayersStart","players","_published","publishDefaultGlobalUtils","publishGlobalUtil","getHostElement","getRootComponents","w","GLOBAL_PUBLISH_EXPANDO_KEY","createRootComponentView","createRootComponent","componentDef","hostFeatures","setCurrentDirectiveDef","createRootContext","defaultScheduler","LifecycleHooksFeature","rootTView","InheritDefinitionFeature","definition","isComponentDef$1","superType","ngComponentDef","ngDirectiveDef","baseDef","ngBaseDef","superDef","writeableDef","maybeUnwrapEmpty","prevHostBindings_1","ctx","superHostBindings_1","prevViewQuery_1","superViewQuery_1","prevContentQueries_1","dirIndex","superContentQueries_1","prevContentQueriesRefresh_1","queryIndex","superContentQueriesRefresh_1","onDestroy","features_1","ngInherit","superPrototype","NgOnChangesFeature","privateMinKey_1","PRIVATE_PREFIX","originalProperty","checkProto","proto","getter","setter_1","simpleChanges","writable","currentChange","currentValue","_loop_1","delegateHook","ngOnChanges","NULL_INJECTOR$2","NULL_INJECTOR","getNullInjector","createInjector","defType","additionalProviders","R3Injector","destroyed","dedupStack","deepForEach","processProvider","makeRecord","assertNotDestroyed","service","ngOnDestroy","injectableDefInScope","injectableDefFactory","NOT_YET","hydrate","ngModule","defName","parents","providers","EMPTY_ARRAY$1","isDuplicate","imported","processInjectorType","pop","isTypeProvider","providerToFactory","isValueProvider","existing","multiRecord_1","CIRCULAR$1","isRootInjector","isFactoryProvider","classRef_1","hasDeps","resolveProvider$1","lInjectablesBlueprint","isComponent$$1","isViewProvider","beginIndex","endIndex","cptViewProvidersCount","providerFactory","directiveInject","existingFactoryIndex","existingProvidersFactoryIndex","existingViewProvidersFactoryIndex","doesProvidersFactoryExist","doesViewProvidersFactoryExist","factoryFn","f","multiFactory","multiViewProvidersFactoryResolver","multiProvidersFactoryResolver","multiFactoryAdd","isComponentProvider","item","arr","_","factories","multiResolve","multiProviders","componentCount","ProvidersFeature","viewProviders","noComponentFactoryError","error","_NullComponentFactoryResolver","resolveComponentFactory","ComponentFactoryResolver$1","ComponentFactoryResolver","_parent","_ngModule","_factories","CodegenComponentFactoryResolver","ComponentFactoryBoundToModule","componentType","nativeElement","ElementRef","templateUrl","slotCount","animations","Important","Renderer2","SecurityContext","NONE","HTML","STYLE","SCRIPT","URL","RESOURCE_URL","full","major","ComponentFactoryResolver$$1","nonMinified","minified","array","ROOT_CONTEXT","SCHEDULER","ComponentFactory$$1","ComponentFactory","toRefArray","isInternalRootView","rootSelectorOrNode","RendererFactory2","domRendererFactory3","hostRNode","rootFlags","rootViewInjector","NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR","createChainedInjector","VERSION","tElementNode","oldLView","rootLView","projection$$1","nodeList","projectableNodes","firstTNode","ComponentRef","componentRef","ComponentRef$$1","viewEngine_ComponentFactory","location","_rootLView","destroyCbs","viewEngine_ComponentRef","defaultDoc","inertDocument","implementation","createHTMLDocument","inertBodyElement","body","inertHtml","innerHTML","DOMParser","getInertBodyElement","getInertBodyElement_DOMParser","getInertBodyElement_XHR","html","xhr","XMLHttpRequest","responseType","open","send","parseFromString","templateEl","elAttrs","el","childNode","nodeType","ELEMENT_NODE","stripCustomNsAttrs","DATA_URL_PATTERN","_sanitizeUrl","url","String","match","SAFE_URL_PATTERN","tagSet","tags","sets","sets_1","OPTIONAL_END_TAG_INLINE_ELEMENTS","BLOCK_ELEMENTS","merge$1","OPTIONAL_END_TAG_BLOCK_ELEMENTS","URI_ATTRS","SRCSET_ATTRS","VALID_ATTRS","HTML_ATTRS","startElement","TEXT_NODE","chars","sanitizedSomething","endElement","checkClobberedElement","nodeName","toLowerCase","VALID_ELEMENTS","buf","attributes","elAttr","lower","sanitizeSrcset","VOID_ELEMENTS","SanitizingHtmlSerializer","compareDocumentPosition","DOCUMENT_POSITION_CONTAINED_BY","outerHTML","SURROGATE_PAIR_REGEXP","NON_ALPHANUMERIC_REGEXP","inertBodyHelper","InertBodyHelper","unsafeHtml","unsafeHtmlInput","parsedHtml","mXSSAttempts","safeHtml","sanitizeChildren","getTemplateContent","isDevMode","extractParts","pattern","braces","lastIndex","exec","ICU_BLOCK_REGEX","test","block","results","parseICUBlock","braceStack","substring_1","substring","prevPos","pos","str","binding","icuType","trim","cases","blocks","SUBTEMPLATE_REGEXP","inTemplate","MARKER","tagMatched","generateBindingUpdateOpCodes","destinationNode","sanitizeFn","updateOpCodes","textParts","BINDING_REGEXP","textValue","toMaskBit","getBindingMask","icuExpression","mainBinding","valueArr","parseInt","i18nStart","subTemplateIndex","parentIndexStack","parentIndexPointer","createOpCodes","icuExpressions","getTranslationForTemplate","msgParts","phIndex","icuNodeIndex","COMMENT_MARKER","tIcuIndex","hasBinding","addAllToArray","tI18n","appendI18nNode","rendererMoveNode","i18nPostprocess","replacements","PP_PLACEHOLDERS","_match","shift","some","PP_ICUS","list","i18nEnd","rootIndex","i18nIndexStack","i18nIndexStackPointer","readCreateOpCodes","currentTNode","opCode","textRNode","destinationTNode","destinationNodeIndex","commentValue","commentRNode","ELEMENT_MARKER","tagNameValue","elementRNode","removeNode","removedPhTNode","load","i18nAttributes","previousElementIndex","i18nExp","expression","i18nApply","shiftsCounter","icus","update","bypassCheckBit","caseCreated","checkBit","changeMask","skipCodes","bindingsStartIndex","icuTNode","activeCaseIndex","tIcu","remove","removeCodes","k","removeOpCode","activeIndex","caseIndex","getCaseIndex","readUpdateOpCodes","Plural","Zero","One","Two","Few","Many","Other","locale","nLike","nDecimal","Math","floor","getPluralCase","bindingValue","resolvedCase","getPluralCategory","updateCodes","childIcus","icuIndex","icuCase","parseIcuCase","nestedIcus","tIcus","createCodes","document","opCodes","nestedIcusToCreate","element$$1","lowerAttrName","attr","console","warn","parseNodes","textContent","COMMENT_NODE","NESTED_ICU","newLocal","nestedIcuIndex","nestedIcu","nestedIcuNodeIndex","nestTIcuIndex","max","NgModuleRef","_bootstrapComponents","ngModuleDef","getNgModuleDef","ngModuleType","viewEngine_NgModuleRef","COMPONENT_FACTORY_RESOLVER","NgModuleFactory","NgModuleRef$$1","callback","NgModuleFactory$$1","pureFunction0","slotOffset","pureFn","thisArg","getBindingRoot","pureFunction1","exp","pureFunction2","exp1","exp2","pureFunction3","exp3","pureFunction4","exp4","exp5","exp6","exp7","exp8","exps","getPipeDef$1","pipeName","pipeRegistry","pipeBind1","pipeBind2","pipeBind3","pipeBind4","pipeBindV","EventEmitter","isAsync","emit","schedulerFn","err","completeFn","generatorOrNext","__isAsync","setTimeout","complete","Subscription","sink","subscribe","errorFn","rxjs","Subject","TemplateRef","predicate","descend","read","deep","createQuery","shallowResults","deepResults","LQueries_","addNode","shallow","isContentQueryHost","copyQueriesToContainer","query","containerValues","copyQueriesToView","insertView$1","removeView$1","viewValuesIdx","removed","queryByReadToken","matchingIdx","queryByTemplateRef","templateRefToken","templateRefResult","queryRead","ViewEngine_TemplateRef","addMatch","getIdxOfMatchingSelector","previous","changes","QueryList_","reset","unsubscribe","memoryIndex","assertPreviousIsParent","QueryList","QueryType","track","queryRefresh","queryListImpl","_valuesTree","bypassSanitizationTrustString","trustedString","_sanitizeStyle","urlMatch","URL_RE","SAFE_STYLE_VALUE","outsideSingle","c","outsideDouble","hasBalancedQuotes","sanitizeHtml","SANITIZER","sanitize","sanitizeStyle","unsafeStyle","sanitizeUrl","unsafeUrl","sanitizeResourceUrl","unsafeResourceUrl","angularCoreEnv","ÉµdefineBase","ÉµdefineComponent","r3.definePipe","ÉµdefineDirective","r3.directiveInject","r3.getFactoryOf","defineInjector","ÉµdefineNgModule","ÉµdefinePipe","ÉµdirectiveInject","ÉµgetFactoryOf","ÉµgetInheritedFactory","r3.ProvidersFeature","ÉµinjectAttribute","injectAttribute","ÉµtemplateRefExtractor","templateRefExtractor","ÉµNgOnChangesFeature","ÉµProvidersFeature","r3.nextContext","ÉµInheritDefinitionFeature","r3.containerRefreshStart","ÉµelementAttribute","Éµbind","Éµcontainer","ÉµnextContext","nextContext","ÉµcontainerRefreshStart","r3.namespaceSVG","ÉµcontainerRefreshEnd","r3.enableBindings","ÉµloadQueryList","ÉµnamespaceHTML","r3.allocHostVars","ÉµnamespaceMathML","r3.elementStart","ÉµnamespaceSVG","r3.elementEnd","ÉµenableBindings","enableBindings","ÉµdisableBindings","disableBindings","ÉµallocHostVars","allocHostVars","ÉµelementStart","ÉµelementEnd","Éµelement","ÉµelementContainerStart","r3.pureFunction3","ÉµelementContainerEnd","r3.pureFunction4","ÉµpureFunction0","r3.pureFunction5","ÉµpureFunction1","r3.pureFunction6","ÉµpureFunction2","r3.pureFunction7","ÉµpureFunction3","r3.pureFunction8","ÉµpureFunction4","r3.pureFunctionV","ÉµpureFunction5","pureFunction5","ÉµpureFunction6","r3.restoreView","ÉµpureFunction7","pureFunction7","ÉµpureFunction8","pureFunction8","ÉµpureFunctionV","pureFunctionV","ÉµgetCurrentView","r3.interpolation4","ÉµrestoreView","restoreView","Éµinterpolation1","r3.interpolation6","Éµinterpolation2","r3.interpolation7","Éµinterpolation3","r3.interpolation8","Éµinterpolation4","r3.interpolationV","Éµinterpolation5","interpolation5","Éµinterpolation6","r3.listener","Éµinterpolation7","interpolation7","Éµinterpolation8","r3.projection","ÉµinterpolationV","interpolationV","ÉµelementClassProp","r3.pipeBind1","Éµlistener","Éµload","Éµprojection","r3.pipeBind4","ÉµelementProperty","r3.pipeBindV","ÉµpipeBind1","ÉµpipeBind2","ÉµpipeBind3","r3.query","ÉµpipeBind4","ÉµpipeBindV","ÉµprojectionDef","r3.reference","Éµpipe","pipe","Éµquery","ÉµqueryRefresh","ÉµregisterContentQuery","r3.elementStylingApply","Éµreference","r3.template","ÉµelementStyling","ÉµelementStylingMap","r3.textBinding","ÉµelementStyleProp","ÉµelementStylingApply","r3.embeddedViewEnd","Éµtemplate","Éµtext","ÉµtextBinding","r3.i18nExp","ÉµembeddedViewStart","r3.i18nStart","ÉµembeddedViewEnd","Éµi18n","i18n","Éµi18nAttributes","Éµi18nExp","Éµi18nStart","Éµi18nEnd","Éµi18nApply","Éµi18nPostprocess","sanitization.sanitizeScript","ÉµsanitizeHtml","sanitization.sanitizeUrl","ÉµsanitizeStyle","unsafeScript","Type","Function","DELEGATE_CTOR","_reflect","reflect","ReflectionCapabilities","paramTypes","paramAnnotations","_ownParameters","typeStr","INHERITED_CLASS","INHERITED_CLASS_WITH_CTOR","parentCtor","tsickleCtorParams","ctorParameters","paramTypes_1","ctorParam","convertTsickleDecoratorIntoMetadata","decorators","_zipTypesAndAnnotations","paramAnnotations_1","getParentCtor","_ownAnnotations","typeOrFunc","_ownPropMetadata","propMetadata","propDecorators","propDecorators_1","propMetadata_1","parentPropMetadata_1","ownPropMetadata","hasLifecycleHook","setter","resolveEnum","decoratorInvocations","annotationCls","decoratorInvocation","parentProto","ctor","compiler","dep","host","setTokenAndResolvedType","resolved","R3ResolvedDependencyType","Token","param","optional","skipSelf","Attribute","attributeName","moduleType","transitiveScopesFor","declaration","NG_COMPONENT_DEF","patchComponentDefWithScope","transitiveScopes","NG_DIRECTIVE_DEF","NG_PIPE_DEF","flatten$1","EMPTY_ARRAY$2","NG_MODULE_DEF","flatten","compileNgModule","expandModuleWithProviders","emitInline","ngInjectorDef","NG_INJECTOR_DEF","reflectDependencies","getCompilerFacade","compileInjector","getReflect","filter","Component","from","compilation","dir","isNgModule","transitiveCompileScopes","scopes","exported","declared","importedTyped","importedScope","entry","exportedTyped","exportedScope","out","compileComponent","metadata","styleUrls","ngSelectorScope","compileDirective","facade","directiveMetadata","typeArgumentCount","EMPTY_OBJ","extractQueriesMetadata","isContentQuery","lifecycle","usesOnChanges","typeSourceSpan","isQueryAnn","field","ann","queriesMeta","propertyName","convertToR3QueryMetadata","ngPipeDef","compilePipe","inheritedBaseDef","initializeBaseDef","convertInjectableProviderToFactory","reflectionCapabilities","valueProvider_1","existingProvider_1","factoryProvider_1","classProvider_1","deps_2","deps_3","USE_VALUE$2","meta_1","srcMeta","hasAProvider","isUseClassProvider","isUseFactoryProvider","isUseValueProvider","isUseExistingProvider","compilerMeta","ctorDeps","userDeps","compileInjectable","injectableType","render3CompileInjectable","defaultErrorLogger","ErrorHandler","originalError","_findOriginalError","_findContext","errorLogger","getErrorLogger","_console","getOriginalError","constructResolvingPath","findFirstClosedCycle","reverse","errMsg","constructResolvingMessage","wrappedError","addKey","noAnnotationError","params","ii","parameter","signature","ReflectiveKey","_globalKeyRegistry","numberOfKeys","enumerable","_allKeys","has","newKey","KeyRegistry","size","caps","Reflector","method","importUri","fromKey","ReflectiveDependency","resolvedFactories","ResolvedReflectiveFactory","dependencies","resolveReflectiveFactory","resolvedDeps","reflector","_dependenciesFor","aliasInstance","constructDependencies","normalizedProvidersMap","ResolvedReflectiveProvider_","_normalizeProviders","_extractToken","_createDependency","paramMetadata","visibility","ReflectiveInjector_","_providers","_constructionCounter","len","keyIds","objs","resolveAndInstantiate","instantiateResolved","getProviderAtIndex","_new","_instantiateProvider","_instantiate","ResolvedReflectiveFactory$$1","originalException","_getByReflectiveDependency","injectionError","INJECTOR_KEY","_getByKeySelf","_getObjByKeyId","keyId","UNDEFINED","inj","inj_","_mapProviders","displayName","ApplicationInitStatus","appInits","initialized","runInitializers","asyncInitPromises","resolve","initResult","isPromise","all","catch","reject","Injectable","APP_ID","PLATFORM_INITIALIZER","APP_BOOTSTRAP_LISTENER","ModuleWithComponentFactories","ngModuleFactory","componentFactories","Compiler","compileModuleAndAllComponentsSync","Compiler_compileModuleAndAllComponentsSync","clearCacheFor","getModuleId","detectWTF","trace","wtf","events","hasPendingMicrotasks","onStable","assertZonePatched","zone","_nesting","_outer","_inner","fork","isAngularZone","delegate","task","applyThis","applyArgs","onEnter","invokeTask","onLeave","invoke","hasTaskState","hasTask","change","microTask","checkStable","hasPendingMacrotasks","macroTask","onHandleError","handleError","scheduleEventTask","EMPTY_PAYLOAD","noop$1","runTask","isStable","onMicrotaskEmpty","runOutsideAngular","NoopNgZone","_didWork","taskTrackingZone","_watchAngularEvents","_ngZone","onUnstable","_isZoneStable","NgZone","assertNotInAngularZone","_runCallbacksIfReady","Testability","increasePendingRequestCount","decreasePendingRequestCount","_pendingCount","_callbacks","cb","clearTimeout","timeoutId","doneCb","getPendingTasks","updateCb","pending_1","macroTasks","timeout","getPendingRequestCount","using","exactMatch","TestabilityRegistry","unregisterApplication","getTestability","elem","findInAncestors","NgProbeToken","createPlatform","_platform","ALLOW_MULTIPLE_PLATFORMS","PlatformRef","createPlatformFactory","parentPlatformFactory","marker","desc","extraProviders","getPlatform","injectedProviders","assertPlatform","requiredToken","platform","_injector","moduleFactory","ngZone","ngZoneOption","getNgZone","ngZoneInjector","moduleRef","exceptionHandler","_modules","onError","errorHandler","initStatus","donePromise","_moduleDoBootstrap","compilerOptions","appRef","ApplicationRef","ngDoBootstrap","_destroyed","optionsReducer","dst","reduce","_zone","_exceptionHandler","_componentFactoryResolver","_initStatus","_stable","componentTypes","run","tick","Observable","observer","assertInAngularZone","merge","unstableSub","componentFactory","ComponentFactory$1","componentOrFactory","selectorOrNode","compRef","_unloadComponent","testability","registerApplication","_loadComponent","_runningTick","_tickScope","_views","attachView","wtfCreateScope","Console","_results","flatten$2","flat","first","loadAndCompile","path","exportName","loadFactory","factoryClassSuffix","System","import","_config","factoryPathPrefix","factoryPathSuffix","SystemJsNgModuleLoader","checkNotEmpty","modulePath","ViewContainerRef","ViewContainerRefToken","ViewContainerRef_","_lContainer","_hostTNode","_hostView","startTNode","parentTNode_1","global","getParentInjectorTNode","clear","_viewRefs","templateRef","adjustedIdx","_adjustIndex","ngModuleRef","contextInjector","parentInjector","insert","move","assertGreaterThan","parentOfHostNative","commentNode","nativeNextSibling","createContainerRef","ChangeDetectorRef","ViewRef$1","EmbeddedViewRef","EventListener","DebugNode__PRE_R3__","nativeNode","_debugContext","listeners","DebugElement__PRE_R3__","references","providerTokens","tslib_1.__extends","properties","addChild","childNodes","insertChildrenAfter","newChildren","siblingIndex","refChild","newChild","refIndex","triggerEventHandler","eventObj","notImplemented","DebugElement__POST_R3__","DebugNode__POST_R3__","children","getDebugNode__POST_R3__","event","createEvent","elementsOnly","_queryNodeChildrenR3","_nativeNodeToDebugNode","DefaultIterableDifferFactory","DefaultIterableDiffer","trackByFn","_linkedRecords","_unlinkedRecords","_previousItHead","_itHead","_itTail","_additionsHead","_additionsTail","_movesHead","_movesTail","_removalsHead","nextRemove","addRemoveOffset","adjPreviousIndex","getPreviousIndex","moveOffsets","currentIndex","_nextRemoved","previousIndex","localCurrentIndex","localMovePreviousIndex","offset","diff","collection","check","index_1","_trackByFn","looseIdentical","trackById","itemTrackBy","mayBeDirty","_verifyReinsertion","_addIdentityChange","_next","nextRecord","_nextPrevious","_nextAdded","_removalsTail","previousRecord","_prev","_moveAfter","_reinsertAfter","reinsertRecord","_addToRemovals","_unlink","_nextMoved","prevRecord","prev","_prevRemoved","_insertAfter","_DuplicateMap","_remove","toIndex","_identityChangesTail","_identityChangesHead","_nextIdentityChange","_head","_tail","_nextDup","_DuplicateItemRecordList","atOrAfterIndex","_prevDup","duplicates","delete","moveOffset","isJsObject","DefaultKeyValueDifferFactory","DefaultKeyValueDiffer","_mapHead","_appendAfter","_previousMapHead","_changesHead","_changesTail","_reset","_forEach","_getOrCreateRecordForKey","_insertBeforeOrAppend","previousValue","before","record_1","_maybeAddToChanges","KeyValueChangeRecord_","_nextChanged","_addToAdditions","_addToChanges","IterableDiffers","iterable","find","supports","KeyValueDiffers","kv","TRANSLATIONS_FORMAT","MissingTranslationStrategy","Warning","defaultIterableDiffers","APP_INITIALIZER","_iterableDiffersFactory","_keyValueDiffersFactory","NgModule","APPLICATION_MODULE_PROVIDERS","shiftInitState","priorInitState","newInitState","initState","shouldCallLifecycleInitHook","initIndex","Services","setCurrentNode","createRootView","createEmbeddedView","createComponentView","createNgModuleRef","overrideProvider","overrideComponentView","clearOverrides","checkAndUpdateView","checkNoChangesView","destroyView","resolveDep","createDebugContext","isFirstCheck","_tokenKeyCache","tokenKey","EMPTY_RENDERER_TYPE_ID","_renderCompCount$1","checkBinding","bindingIdx","oldValues","checkAndUpdateBinding","checkBindingNoChanges","currView","markParentViewsForCheckProjectedViews","endView","dispatchEvent","markParentViewsForCheck","nodes","asElementData","handleEvent","declaredViewContainer","viewParentEl","matchedQueries","valueType","queryId","matchedQueryIds","filterQueryId","splitDepsDsl","sourceName","renderHost","componentRendererType","Native","renderElement","resolveDefinition","DEFINITION_CACHE","NOOP","visitRootRenderNodes","nextSibling","nodeDef","visitRenderNode","visitProjectedRenderNodes","ngContentIndex","compView","hostElDef","childCount","projectedNodes","root","renderNode","bindingFlags","execRenderNodeAction","rn","embeddedViews","_embeddedViews","NS_PREFIX_RE","splitNamespace","calcBindingFlags","bindings","elDef","getParentRenderElement","preserveContent","ns","name_2","listenToElementOutputs","handleEventClosure","renderEventHandlerClosure","elementEventFullName","output","listenTarget","listenerView","checkAndUpdateElementValue","elData","renderNode$$1","securityContext","renderValue","setElementAttribute","setElementClass","unit","resolveNgModuleDep","depDef","former","InjectorRefTokenKey","tokenKey_1","INJECTORRefTokenKey$1","providerDef","_def","providersByKey","_createProviderInstance","providerInstance","UNDEFINED_VALUE","_createProviderInstance$1","injectable","depValues","_createClass","_callFactory","attachEmbeddedView","elementData","viewContainerParent","addToArray","vcElementData","projectedViews","dvcElementData","_projectedViews","viewDef","parentNodeDef","attachProjectedView","detachEmbeddedView","removeFromArray","renderAttachEmbeddedView","prevView","prevRenderNode","getComponentViewDefinitionFactory","viewDefFactory","ComponentFactory_","_inputs","_outputs","ngContentSelectors","inputsArr","templateName","outputsArr","componentNodeIndex","EMPTY_CONTEXT","asProviderData","ComponentRef_","ViewRef_","_viewRef","_component","_elDef","changeDetectorRef","Injector_","createViewContainerData","_data","attachToViewContainerRef","viewRef_","oldViewIndex","newViewIndex","dirtyParentQueries","renderDetachView","createChangeDetectorRef","fs","disposables","detachFromAppRef","attachToAppRef","vcRef","createTemplateData","_parentView","createInjector$1","createRendererV1","RendererAdapter","namespaceAndName","hostElement","parentElement","createText","projectNodes","attachViewAfter","viewRootNodes","attributeValue","isAdd","styleName","styleValue","setText","animate","bootstrapComponents","NgModuleRef_","_moduleType","provDef","injectFlags","lifecycles","checkIndex","matchedQueriesDsl","splitMatchedQueriesDsl","depDefs","outputIndex","childFlags","directChildFlags","childMatchedQueries","createPipeInstance","createDirectiveInstance","outputObservable","subscription","eventHandlerClosure","createClass","allowPrivateServices","callFactory","tokenKey$$1","ChangeDetectorRefTokenKey","RendererV1TokenKey","findCompView","searchView","Renderer2TokenKey","ElementRefTokenKey","ViewContainerRefTokenKey","viewContainer","TemplateRefTokenKey","INJECTORRefTokenKey","allProviders","publicProviders","providerData","providerDef_1","isComponentView","unwrap","callLifecycleHooksChildrenFirst","callProviderLifecycles","callElementProvidersLifecycles","ngAfterViewInit","isEmbeddedView","tplDef","filterId","queryIds","asQueryList","checkAndUpdateQuery","newValues","elementDef","calcQueryValues","notify","boundValue","bindingType","queryDef","dvc","queryValueType","appendNgContent","_pureExpressionDef","propertyNames","nonMinifiedName","nodeCount","lastRenderRootNode","parentEnd","anchorDef$$1","compRenderer","rendererType","outputCount","createViewNodes","compViewDef","nodeData","createProviderInstance","initView","execEmbeddedViewsAction","ViewAction","CheckNoChanges","updateRenderer","markProjectedViewsForCheck","updateDirectives","CheckAndUpdate","execQueriesAction","callInit","checkAndUpdateNode","argStyle","v8","v9","bindLen","changed","checkAndUpdateElementInline","_addInterpolationPart","checkAndUpdateTextInline","updateProp","checkAndUpdateDirectiveInline","asPureExpressionData","transform","checkAndUpdateNodeInline","checkAndUpdateElementDynamic","checkAndUpdateTextDynamic","checkAndUpdateDirectiveDynamic","i_1","checkNoChangesNode","checkNoChangesQuery","Destroy","asTextData","renderText","destroyViewNodes","CreateViewNodes","CheckNoChangesProjectedViews","CheckAndUpdateProjectedViews","execComponentViewsAction","viewState","execProjectedViewsAction","queryFlags","staticDynamicQueryFlag","checkType","services","debugSetCurrentNode","debugCreateRootView","debugCreateEmbeddedView","debugCreateComponentView","debugCreateNgModuleRef","debugOverrideProvider","debugOverrideComponentView","debugClearOverrides","debugCheckAndUpdateView","debugCheckNoChangesView","debugDestroyView","DebugContext_","createProdRootView","prodCheckAndUpdateNode","Sanitizer","viewDef$$1","viewDefOverrides","hasOverrides","providerOverrides","hasDeprecatedOverrides","override","deprecatedBehavior","modules","comp","compFactory","applyProviderOverridesToView","elIndicesWithOverwrittenProviders","lastElementDef","elementIndicesWithOverwrittenProviders","elIndex","prodCheckNoChangesNode","callWithDebugContext","DebugAction","debugUpdateDirectives","debugCheckAndUpdateNode","debugCheckNoChangesNode","nextDirectiveWithBinding","debugUpdateRenderer","nextRenderNodeWithBinding","givenValues","bindingValues","elView","elOrCompView","childDef","collectReferences","findHostElement","logError","logViewDef","logNodeIndex","renderNodeIndex","getRenderNodeIndex","currRenderNodeIndex","oldAction","_currentAction","oldNodeIndex","_currentNodeIndex","_currentView","getCurrentDebugContext","DebugRendererFactory2","DebugRenderer2","renderData","whenRenderingDone","debugContextFactory","namespace","debugCtx","debugEl","getDebugNode","debugChildEl","debugRefEl","oldChild","style","NgModuleFactory_","_ngModuleDefFactory","initServicesIfNeeded","isRoot","urlMap","cachedResourceResolve","resp","resourceResolver","unwrapResponse","urlFetches","styleUrl","styleOffset","opts","componentTag","clazz","__assign","throwInvalidRefError","moduleFactories","templateFactory","componentProvider","UNDEFINED_RENDERER_TYPE_ID","outputDefs","fixedAttrs","_b","bindingDefs","_c","namespaceAndName_1","suffixOrSecurityContext","_d","ns_1","name_1","_e","None","isFilled","resolveRendererType2","valueCount","c0","a1","c1","a2","c2","a3","c3","a4","c4","a5","c5","a6","c6","a7","c7","a8","c8","a9","c9","_toStringWithNull","constAndInterp","APP_ROOT","propToIndex","nbKeys","staticText","globalBindingIdx","nodeIdx","currentElementHasPublicProviders","currentElementHasPrivateProviders","currentParent","viewBindingCount","currentRenderParent","viewMatchedQueries","nodeMatchedQueries","isPrivateService","newParent","isNgContainer","viewNodeFlags","rootNodeFlags","viewRootNodeFlags"],"mappings":"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","file":"/Users/mgechev/Projects/angular/dist/packages-dist/core/bundles/core.umd.min.js.map","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @template T\n * @param {?} objWithPropertyToExtract\n * @return {?}\n */\nexport function getClosureSafeProperty(objWithPropertyToExtract) {\n    for (var key in objWithPropertyToExtract) {\n        if (objWithPropertyToExtract[key] === /** @type {?} */ (getClosureSafeProperty)) {\n            return key;\n        }\n    }\n    throw Error('Could not find renamed property on target object.');\n}\n/**\n * Sets properties on a target object from a source object, but only if\n * the property doesn't already exist on the target object.\n * @param {?} target The target to set properties on\n * @param {?} source The source of the property keys and values to set\n * @return {?}\n */\nexport function fillProperties(target, source) {\n    for (var key in source) {\n        if (source.hasOwnProperty(key) && !target.hasOwnProperty(key)) {\n            target[key] = source[key];\n        }\n    }\n}\n//# sourceMappingURL=property.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { defineInjectable } from './defs';\n/**\n * Creates a token that can be used in a DI Provider.\n *\n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n * runtime representation) such as when injecting an interface, callable type, array or\n * parametrized type.\n *\n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n * the `Injector`. This provides additional level of type safety.\n *\n * ```\n * interface MyInterface {...}\n * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n * // myInterface is inferred to be MyInterface.\n * ```\n *\n * When creating an `InjectionToken`, you can optionally specify a factory function which returns\n * (possibly by creating) a default value of the parameterized type `T`. This sets up the\n * `InjectionToken` using this factory as a provider as if it was defined explicitly in the\n * application's root injector. If the factory function, which takes zero arguments, needs to inject\n * dependencies, it can do so using the `inject` function. See below for an example.\n *\n * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which\n * overrides the above behavior and marks the token as belonging to a particular `\\@NgModule`. As\n * mentioned above, `'root'` is the default value for `providedIn`.\n *\n * \\@usageNotes\n * ### Basic Example\n *\n * ### Plain InjectionToken\n *\n * {\\@example core/di/ts/injector_spec.ts region='InjectionToken'}\n *\n * ### Tree-shakable InjectionToken\n *\n * {\\@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n *\n *\n * \\@publicApi\n * @template T\n */\nvar /**\n * Creates a token that can be used in a DI Provider.\n *\n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n * runtime representation) such as when injecting an interface, callable type, array or\n * parametrized type.\n *\n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n * the `Injector`. This provides additional level of type safety.\n *\n * ```\n * interface MyInterface {...}\n * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n * // myInterface is inferred to be MyInterface.\n * ```\n *\n * When creating an `InjectionToken`, you can optionally specify a factory function which returns\n * (possibly by creating) a default value of the parameterized type `T`. This sets up the\n * `InjectionToken` using this factory as a provider as if it was defined explicitly in the\n * application's root injector. If the factory function, which takes zero arguments, needs to inject\n * dependencies, it can do so using the `inject` function. See below for an example.\n *\n * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which\n * overrides the above behavior and marks the token as belonging to a particular `\\@NgModule`. As\n * mentioned above, `'root'` is the default value for `providedIn`.\n *\n * \\@usageNotes\n * ### Basic Example\n *\n * ### Plain InjectionToken\n *\n * {\\@example core/di/ts/injector_spec.ts region='InjectionToken'}\n *\n * ### Tree-shakable InjectionToken\n *\n * {\\@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n *\n *\n * \\@publicApi\n * @template T\n */\nInjectionToken = /** @class */ (function () {\n    function InjectionToken(_desc, options) {\n        this._desc = _desc;\n        /**\n         * \\@internal\n         */\n        this.ngMetadataName = 'InjectionToken';\n        if (options !== undefined) {\n            /** @nocollapse */ this.ngInjectableDef = defineInjectable({\n                providedIn: options.providedIn || 'root',\n                factory: options.factory,\n            });\n        }\n        else {\n            /** @nocollapse */ this.ngInjectableDef = undefined;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    InjectionToken.prototype.toString = /**\n     * @return {?}\n     */\n    function () { return \"InjectionToken \" + this._desc; };\n    return InjectionToken;\n}());\n/**\n * Creates a token that can be used in a DI Provider.\n *\n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n * runtime representation) such as when injecting an interface, callable type, array or\n * parametrized type.\n *\n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n * the `Injector`. This provides additional level of type safety.\n *\n * ```\n * interface MyInterface {...}\n * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n * // myInterface is inferred to be MyInterface.\n * ```\n *\n * When creating an `InjectionToken`, you can optionally specify a factory function which returns\n * (possibly by creating) a default value of the parameterized type `T`. This sets up the\n * `InjectionToken` using this factory as a provider as if it was defined explicitly in the\n * application's root injector. If the factory function, which takes zero arguments, needs to inject\n * dependencies, it can do so using the `inject` function. See below for an example.\n *\n * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which\n * overrides the above behavior and marks the token as belonging to a particular `\\@NgModule`. As\n * mentioned above, `'root'` is the default value for `providedIn`.\n *\n * \\@usageNotes\n * ### Basic Example\n *\n * ### Plain InjectionToken\n *\n * {\\@example core/di/ts/injector_spec.ts region='InjectionToken'}\n *\n * ### Tree-shakable InjectionToken\n *\n * {\\@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n *\n *\n * \\@publicApi\n * @template T\n */\nexport { InjectionToken };\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    InjectionToken.prototype.ngMetadataName;\n    /** @type {?} */\n    InjectionToken.prototype.ngInjectableDef;\n    /** @type {?} */\n    InjectionToken.prototype._desc;\n}\n/**\n * @record\n * @template T\n */\nexport function InjectableDefToken() { }\n/** @type {?} */\nInjectableDefToken.prototype.ngInjectableDef;\n//# sourceMappingURL=injection_token.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An interface implemented by all Angular type decorators, which allows them to be used as ES7\n * decorators as well as\n * Angular DSL syntax.\n *\n * ES7 syntax:\n *\n * ```\n * \\@ng.Component({...})\n * class MyClass {...}\n * ```\n *\n * \\@publicApi\n * @record\n */\nexport function TypeDecorator() { }\n/** @type {?} */\nexport var ANNOTATIONS = '__annotations__';\n/** @type {?} */\nexport var PARAMETERS = '__parameters__';\n/** @type {?} */\nexport var PROP_METADATA = '__prop__metadata__';\n/**\n * @suppress {globalThis}\n * @template T\n * @param {?} name\n * @param {?=} props\n * @param {?=} parentClass\n * @param {?=} additionalProcessing\n * @param {?=} typeFn\n * @return {?}\n */\nexport function makeDecorator(name, props, parentClass, additionalProcessing, typeFn) {\n    /** @type {?} */\n    var metaCtor = makeMetadataCtor(props);\n    /**\n     * @param {...?} args\n     * @return {?}\n     */\n    function DecoratorFactory() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var _a;\n        if (this instanceof DecoratorFactory) {\n            metaCtor.call.apply(metaCtor, [this].concat(args));\n            return this;\n        }\n        /** @type {?} */\n        var annotationInstance = new ((_a = (/** @type {?} */ (DecoratorFactory))).bind.apply(_a, [void 0].concat(args)))();\n        return function TypeDecorator(cls) {\n            if (typeFn)\n                typeFn.apply(void 0, [cls].concat(args));\n            /** @type {?} */\n            var annotations = cls.hasOwnProperty(ANNOTATIONS) ?\n                (/** @type {?} */ (cls))[ANNOTATIONS] :\n                Object.defineProperty(cls, ANNOTATIONS, { value: [] })[ANNOTATIONS];\n            annotations.push(annotationInstance);\n            if (additionalProcessing)\n                additionalProcessing(cls);\n            return cls;\n        };\n    }\n    if (parentClass) {\n        DecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    DecoratorFactory.prototype.ngMetadataName = name;\n    (/** @type {?} */ (DecoratorFactory)).annotationCls = DecoratorFactory;\n    return /** @type {?} */ (DecoratorFactory);\n}\n/**\n * @param {?=} props\n * @return {?}\n */\nfunction makeMetadataCtor(props) {\n    return function ctor() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (props) {\n            /** @type {?} */\n            var values = props.apply(void 0, args);\n            for (var propName in values) {\n                this[propName] = values[propName];\n            }\n        }\n    };\n}\n/**\n * @param {?} name\n * @param {?=} props\n * @param {?=} parentClass\n * @return {?}\n */\nexport function makeParamDecorator(name, props, parentClass) {\n    /** @type {?} */\n    var metaCtor = makeMetadataCtor(props);\n    /**\n     * @param {...?} args\n     * @return {?}\n     */\n    function ParamDecoratorFactory() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var _a;\n        if (this instanceof ParamDecoratorFactory) {\n            metaCtor.apply(this, args);\n            return this;\n        }\n        /** @type {?} */\n        var annotationInstance = new ((_a = (/** @type {?} */ (ParamDecoratorFactory))).bind.apply(_a, [void 0].concat(args)))();\n        (/** @type {?} */ (ParamDecorator)).annotation = annotationInstance;\n        return ParamDecorator;\n        /**\n         * @param {?} cls\n         * @param {?} unusedKey\n         * @param {?} index\n         * @return {?}\n         */\n        function ParamDecorator(cls, unusedKey, index) {\n            /** @type {?} */\n            var parameters = cls.hasOwnProperty(PARAMETERS) ?\n                (/** @type {?} */ (cls))[PARAMETERS] :\n                Object.defineProperty(cls, PARAMETERS, { value: [] })[PARAMETERS];\n            // there might be gaps if some in between parameters do not have annotations.\n            // we pad with nulls.\n            while (parameters.length <= index) {\n                parameters.push(null);\n            }\n            (parameters[index] = parameters[index] || []).push(annotationInstance);\n            return cls;\n        }\n    }\n    if (parentClass) {\n        ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    ParamDecoratorFactory.prototype.ngMetadataName = name;\n    (/** @type {?} */ (ParamDecoratorFactory)).annotationCls = ParamDecoratorFactory;\n    return ParamDecoratorFactory;\n}\n/**\n * @param {?} name\n * @param {?=} props\n * @param {?=} parentClass\n * @param {?=} additionalProcessing\n * @return {?}\n */\nexport function makePropDecorator(name, props, parentClass, additionalProcessing) {\n    /** @type {?} */\n    var metaCtor = makeMetadataCtor(props);\n    /**\n     * @param {...?} args\n     * @return {?}\n     */\n    function PropDecoratorFactory() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var _a;\n        if (this instanceof PropDecoratorFactory) {\n            metaCtor.apply(this, args);\n            return this;\n        }\n        /** @type {?} */\n        var decoratorInstance = new ((_a = (/** @type {?} */ (PropDecoratorFactory))).bind.apply(_a, [void 0].concat(args)))();\n        /**\n         * @param {?} target\n         * @param {?} name\n         * @return {?}\n         */\n        function PropDecorator(target, name) {\n            /** @type {?} */\n            var constructor = target.constructor;\n            /** @type {?} */\n            var meta = constructor.hasOwnProperty(PROP_METADATA) ?\n                (/** @type {?} */ (constructor))[PROP_METADATA] :\n                Object.defineProperty(constructor, PROP_METADATA, { value: {} })[PROP_METADATA];\n            meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\n            meta[name].unshift(decoratorInstance);\n            if (additionalProcessing)\n                additionalProcessing.apply(void 0, [target, name].concat(args));\n        }\n        return PropDecorator;\n    }\n    if (parentClass) {\n        PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    PropDecoratorFactory.prototype.ngMetadataName = name;\n    (/** @type {?} */ (PropDecoratorFactory)).annotationCls = PropDecoratorFactory;\n    return PropDecoratorFactory;\n}\n//# sourceMappingURL=decorators.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nvar ChangeDetectionStrategy = {\n    /**\n       * Use the `CheckOnce` strategy, meaning that automatic change detection is deactivated\n       * until reactivated by setting the strategy to `Default` (`CheckAlways`).\n       * Change detection can still be explictly invoked.\n       */\n    OnPush: 0,\n    /**\n       * Use the default `CheckAlways` strategy, in which change detection is automatic until\n       * explicitly deactivated.\n       */\n    Default: 1,\n};\nexport { ChangeDetectionStrategy };\nChangeDetectionStrategy[ChangeDetectionStrategy.OnPush] = 'OnPush';\nChangeDetectionStrategy[ChangeDetectionStrategy.Default] = 'Default';\n/** @enum {number} */\nvar ChangeDetectorStatus = {\n    /**\n       * A state in which, after calling `detectChanges()`, the change detector\n       * state becomes `Checked`, and must be explicitly invoked or reactivated.\n       */\n    CheckOnce: 0,\n    /**\n       * A state in which change detection is skipped until the change detector mode\n       * becomes `CheckOnce`.\n       */\n    Checked: 1,\n    /**\n       * A state in which change detection continues automatically until explictly\n       * deactivated.\n       */\n    CheckAlways: 2,\n    /**\n       * A state in which a change detector sub tree is not a part of the main tree and\n       * should be skipped.\n       */\n    Detached: 3,\n    /**\n       * Indicates that the change detector encountered an error checking a binding\n       * or calling a directive lifecycle method and is now in an inconsistent state. Change\n       * detectors in this state do not detect changes.\n       */\n    Errored: 4,\n    /**\n       * Indicates that the change detector has been destroyed.\n       */\n    Destroyed: 5,\n};\nexport { ChangeDetectorStatus };\nChangeDetectorStatus[ChangeDetectorStatus.CheckOnce] = 'CheckOnce';\nChangeDetectorStatus[ChangeDetectorStatus.Checked] = 'Checked';\nChangeDetectorStatus[ChangeDetectorStatus.CheckAlways] = 'CheckAlways';\nChangeDetectorStatus[ChangeDetectorStatus.Detached] = 'Detached';\nChangeDetectorStatus[ChangeDetectorStatus.Errored] = 'Errored';\nChangeDetectorStatus[ChangeDetectorStatus.Destroyed] = 'Destroyed';\n/**\n * Reports whether a given strategy is currently the default for change detection.\n * @see `ChangeDetectorStatus`\n * @see `ChangeDetectorRef`\n * @param {?} changeDetectionStrategy The strategy to check.\n * @return {?} True if the given strategy is the current default, false otherwise.\n */\nexport function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {\n    return changeDetectionStrategy == null ||\n        changeDetectionStrategy === ChangeDetectionStrategy.Default;\n}\n//# sourceMappingURL=constants.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used to resolve resource URLs on `\\@Component` when used with JIT compilation.\n *\n * Example:\n * ```\n * \\@Component({\n *   selector: 'my-comp',\n *   templateUrl: 'my-comp.html', // This requires asynchronous resolution\n * })\n * class MyComponnent{\n * }\n *\n * // Calling `renderComponent` will fail because `MyComponent`'s `\\@Compenent.templateUrl`\n * // needs to be resolved because `renderComponent` is synchronous process.\n * // renderComponent(MyComponent);\n *\n * // Calling `resolveComponentResources` will resolve `\\@Compenent.templateUrl` into\n * // `\\@Compenent.template`, which would allow `renderComponent` to proceed in synchronous manner.\n * // Use browser's `fetch` function as the default resource resolution strategy.\n * resolveComponentResources(fetch).then(() => {\n *   // After resolution all URLs have been converted into strings.\n *   renderComponent(MyComponent);\n * });\n *\n * ```\n *\n * NOTE: In AOT the resolution happens during compilation, and so there should be no need\n * to call this method outside JIT mode.\n *\n * @param {?} resourceResolver a function which is responsible to returning a `Promise` of the resolved\n * URL. Browser's `fetch` method is a good default implementation.\n * @return {?}\n */\nexport function resolveComponentResources(resourceResolver) {\n    /** @type {?} */\n    var urlFetches = [];\n    /** @type {?} */\n    var urlMap = new Map();\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    function cachedResourceResolve(url) {\n        /** @type {?} */\n        var promise = urlMap.get(url);\n        if (!promise) {\n            /** @type {?} */\n            var resp = resourceResolver(url);\n            urlMap.set(url, promise = resp.then(unwrapResponse));\n            urlFetches.push(promise);\n        }\n        return promise;\n    }\n    componentResourceResolutionQueue.forEach(function (component) {\n        if (component.templateUrl) {\n            cachedResourceResolve(component.templateUrl).then(function (template) {\n                component.template = template;\n                component.templateUrl = undefined;\n            });\n        }\n        /** @type {?} */\n        var styleUrls = component.styleUrls;\n        /** @type {?} */\n        var styles = component.styles || (component.styles = []);\n        /** @type {?} */\n        var styleOffset = component.styles.length;\n        styleUrls && styleUrls.forEach(function (styleUrl, index) {\n            styles.push(''); // pre-allocate array.\n            cachedResourceResolve(styleUrl).then(function (style) {\n                styles[styleOffset + index] = style;\n                styleUrls.splice(styleUrls.indexOf(styleUrl), 1);\n                if (styleUrls.length == 0) {\n                    component.styleUrls = undefined;\n                }\n            });\n        });\n    });\n    componentResourceResolutionQueue.clear();\n    return Promise.all(urlFetches).then(function () { return null; });\n}\n/** @type {?} */\nvar componentResourceResolutionQueue = new Set();\n/**\n * @param {?} metadata\n * @return {?}\n */\nexport function maybeQueueResolutionOfComponentResources(metadata) {\n    if (componentNeedsResolution(metadata)) {\n        componentResourceResolutionQueue.add(metadata);\n    }\n}\n/**\n * @param {?} component\n * @return {?}\n */\nexport function componentNeedsResolution(component) {\n    return component.templateUrl || component.styleUrls && component.styleUrls.length;\n}\n/**\n * @return {?}\n */\nexport function clearResolutionOfComponentResourcesQueue() {\n    componentResourceResolutionQueue.clear();\n}\n/**\n * @param {?} response\n * @return {?}\n */\nfunction unwrapResponse(response) {\n    return typeof response == 'string' ? response : response.text();\n}\n//# sourceMappingURL=resource_loading.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nvar ViewEncapsulation = {\n    /**\n       * Emulate `Native` scoping of styles by adding an attribute containing surrogate id to the Host\n       * Element and pre-processing the style rules provided via {@link Component#styles styles} or\n       * {@link Component#styleUrls styleUrls}, and adding the new Host Element attribute to all\n       * selectors.\n       *\n       * This is the default option.\n       */\n    Emulated: 0,\n    /**\n       * @deprecated v6.1.0 - use {ViewEncapsulation.ShadowDom} instead.\n       * Use the native encapsulation mechanism of the renderer.\n       *\n       * For the DOM this means using the deprecated [Shadow DOM\n       * v0](https://w3c.github.io/webcomponents/spec/shadow/) and\n       * creating a ShadowRoot for Component's Host Element.\n       */\n    Native: 1,\n    /**\n       * Don't provide any template or style encapsulation.\n       */\n    None: 2,\n    /**\n       * Use Shadow DOM to encapsulate styles.\n       *\n       * For the DOM this means using modern [Shadow\n       * DOM](https://w3c.github.io/webcomponents/spec/shadow/) and\n       * creating a ShadowRoot for Component's Host Element.\n       */\n    ShadowDom: 3,\n};\nexport { ViewEncapsulation };\nViewEncapsulation[ViewEncapsulation.Emulated] = 'Emulated';\nViewEncapsulation[ViewEncapsulation.Native] = 'Native';\nViewEncapsulation[ViewEncapsulation.None] = 'None';\nViewEncapsulation[ViewEncapsulation.ShadowDom] = 'ShadowDom';\n//# sourceMappingURL=view.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nvar __window = typeof window !== 'undefined' && window;\n/** @type {?} */\nvar __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\n/** @type {?} */\nvar __global = typeof global !== 'undefined' && global;\n/** @type {?} */\nvar _global = __global || __window || __self;\n/** @type {?} */\nvar promise = Promise.resolve(0);\nexport { _global as global };\n/** @type {?} */\nvar _symbolIterator = null;\n/**\n * @return {?}\n */\nexport function getSymbolIterator() {\n    if (!_symbolIterator) {\n        /** @type {?} */\n        var Symbol_1 = _global['Symbol'];\n        if (Symbol_1 && Symbol_1.iterator) {\n            _symbolIterator = Symbol_1.iterator;\n        }\n        else {\n            /** @type {?} */\n            var keys = Object.getOwnPropertyNames(Map.prototype);\n            for (var i = 0; i < keys.length; ++i) {\n                /** @type {?} */\n                var key = keys[i];\n                if (key !== 'entries' && key !== 'size' &&\n                    (/** @type {?} */ (Map)).prototype[key] === Map.prototype['entries']) {\n                    _symbolIterator = key;\n                }\n            }\n        }\n    }\n    return _symbolIterator;\n}\n/**\n * @param {?} fn\n * @return {?}\n */\nexport function scheduleMicroTask(fn) {\n    if (typeof Zone === 'undefined') {\n        // use promise to schedule microTask instead of use Zone\n        promise.then(function () { fn && fn.apply(null, null); });\n    }\n    else {\n        Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n    }\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nexport function looseIdentical(a, b) {\n    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);\n}\n/**\n * @param {?} token\n * @return {?}\n */\nexport function stringify(token) {\n    if (typeof token === 'string') {\n        return token;\n    }\n    if (token instanceof Array) {\n        return '[' + token.map(stringify).join(', ') + ']';\n    }\n    if (token == null) {\n        return '' + token;\n    }\n    if (token.overriddenName) {\n        return \"\" + token.overriddenName;\n    }\n    if (token.name) {\n        return \"\" + token.name;\n    }\n    /** @type {?} */\n    var res = token.toString();\n    if (res == null) {\n        return '' + res;\n    }\n    /** @type {?} */\n    var newLineIndex = res.indexOf('\\n');\n    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n}\n/**\n * Convince closure compiler that the wrapped function has no side-effects.\n *\n * Closure compiler always assumes that `toString` has no side-effects. We use this quirk to\n * allow us to execute a function but have closure compiler mark the call as no-side-effects.\n * It is important that the return value for the `noSideEffects` function be assigned\n * to something which is retained otherwise the call to `noSideEffects` will be removed by closure\n * compiler.\n * @param {?} fn\n * @return {?}\n */\nexport function noSideEffects(fn) {\n    return '' + { toString: fn };\n}\n//# sourceMappingURL=util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @return {?}\n */\nexport function ngDevModeResetPerfCounters() {\n    /** @type {?} */\n    var newCounters = {\n        firstTemplatePass: 0,\n        tNode: 0,\n        tView: 0,\n        rendererCreateTextNode: 0,\n        rendererSetText: 0,\n        rendererCreateElement: 0,\n        rendererAddEventListener: 0,\n        rendererSetAttribute: 0,\n        rendererRemoveAttribute: 0,\n        rendererSetProperty: 0,\n        rendererSetClassName: 0,\n        rendererAddClass: 0,\n        rendererRemoveClass: 0,\n        rendererSetStyle: 0,\n        rendererRemoveStyle: 0,\n        rendererDestroy: 0,\n        rendererDestroyNode: 0,\n        rendererMoveNode: 0,\n        rendererRemoveNode: 0,\n        rendererCreateComment: 0,\n    };\n    // NOTE: Under Ivy we may have both window & global defined in the Node\n    //    environment since ensureDocument() in render3.ts sets global.window.\n    if (typeof window != 'undefined') {\n        // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.\n        (/** @type {?} */ (window))['ngDevMode'] = newCounters;\n    }\n    if (typeof global != 'undefined') {\n        // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.\n        (/** @type {?} */ (global))['ngDevMode'] = newCounters;\n    }\n    if (typeof self != 'undefined') {\n        // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.\n        (/** @type {?} */ (self))['ngDevMode'] = newCounters;\n    }\n    return newCounters;\n}\n/**\n * This checks to see if the `ngDevMode` has been set. If yes,\n * than we honor it, otherwise we default to dev mode with additional checks.\n *\n * The idea is that unless we are doing production build where we explicitly\n * set `ngDevMode == false` we should be helping the developer by providing\n * as much early warning and errors as possible.\n */\nif (typeof ngDevMode === 'undefined' || ngDevMode) {\n    ngDevModeResetPerfCounters();\n}\n//# sourceMappingURL=ng_dev_mode.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport './ng_dev_mode';\nimport { ChangeDetectionStrategy } from '../change_detection/constants';\nimport { ViewEncapsulation } from '../metadata/view';\nimport { noSideEffects } from '../util';\nimport { NG_COMPONENT_DEF, NG_DIRECTIVE_DEF, NG_MODULE_DEF, NG_PIPE_DEF } from './fields';\n/** @type {?} */\nexport var EMPTY = {};\n/** @type {?} */\nexport var EMPTY_ARRAY = [];\nif (typeof ngDevMode !== 'undefined' && ngDevMode) {\n    Object.freeze(EMPTY);\n    Object.freeze(EMPTY_ARRAY);\n}\n/** @type {?} */\nvar _renderCompCount = 0;\n/**\n * Create a component definition object.\n *\n *\n * # Example\n * ```\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ngComponentDef = defineComponent({\n *     ...\n *   });\n * }\n * ```\n * @template T\n * @param {?} componentDefinition\n * @return {?}\n */\nexport function defineComponent(componentDefinition) {\n    /** @type {?} */\n    var type = componentDefinition.type;\n    /** @type {?} */\n    var typePrototype = type.prototype;\n    /** @type {?} */\n    var declaredInputs = /** @type {?} */ ({});\n    /** @type {?} */\n    var def = {\n        type: type,\n        providersResolver: null,\n        consts: componentDefinition.consts,\n        vars: componentDefinition.vars,\n        factory: componentDefinition.factory,\n        template: componentDefinition.template || /** @type {?} */ ((null)),\n        hostBindings: componentDefinition.hostBindings || null,\n        contentQueries: componentDefinition.contentQueries || null,\n        contentQueriesRefresh: componentDefinition.contentQueriesRefresh || null,\n        attributes: componentDefinition.attributes || null,\n        declaredInputs: declaredInputs,\n        inputs: /** @type {?} */ ((null)),\n        // assigned in noSideEffects\n        outputs: /** @type {?} */ ((null)),\n        // assigned in noSideEffects\n        exportAs: componentDefinition.exportAs || null,\n        onInit: typePrototype.ngOnInit || null,\n        doCheck: typePrototype.ngDoCheck || null,\n        afterContentInit: typePrototype.ngAfterContentInit || null,\n        afterContentChecked: typePrototype.ngAfterContentChecked || null,\n        afterViewInit: typePrototype.ngAfterViewInit || null,\n        afterViewChecked: typePrototype.ngAfterViewChecked || null,\n        onDestroy: typePrototype.ngOnDestroy || null,\n        onPush: componentDefinition.changeDetection === ChangeDetectionStrategy.OnPush,\n        directiveDefs: /** @type {?} */ ((null)),\n        // assigned in noSideEffects\n        pipeDefs: /** @type {?} */ ((null)),\n        // assigned in noSideEffects\n        selectors: componentDefinition.selectors,\n        viewQuery: componentDefinition.viewQuery || null,\n        features: componentDefinition.features || null,\n        data: componentDefinition.data || {},\n        // TODO(misko): convert ViewEncapsulation into const enum so that it can be used directly in the\n        // next line. Also `None` should be 0 not 2.\n        encapsulation: componentDefinition.encapsulation || ViewEncapsulation.Emulated,\n        id: 'c',\n        styles: componentDefinition.styles || EMPTY_ARRAY,\n        _: /** @type {?} */ (null),\n    };\n    def._ = /** @type {?} */ (noSideEffects(function () {\n        /** @type {?} */\n        var directiveTypes = /** @type {?} */ ((componentDefinition.directives));\n        /** @type {?} */\n        var feature = componentDefinition.features;\n        /** @type {?} */\n        var pipeTypes = /** @type {?} */ ((componentDefinition.pipes));\n        def.id += _renderCompCount++;\n        def.inputs = invertObject(componentDefinition.inputs, declaredInputs),\n            def.outputs = invertObject(componentDefinition.outputs),\n            feature && feature.forEach(function (fn) { return fn(def); });\n        def.directiveDefs = directiveTypes ?\n            function () { return (typeof directiveTypes === 'function' ? directiveTypes() : directiveTypes)\n                .map(extractDirectiveDef); } :\n            null;\n        def.pipeDefs = pipeTypes ?\n            function () { return (typeof pipeTypes === 'function' ? pipeTypes() : pipeTypes).map(extractPipeDef); } :\n            null;\n    }));\n    return /** @type {?} */ (def);\n}\n/**\n * @param {?} type\n * @return {?}\n */\nexport function extractDirectiveDef(type) {\n    /** @type {?} */\n    var def = getComponentDef(type) || getDirectiveDef(type);\n    if (ngDevMode && !def) {\n        throw new Error(\"'\" + type.name + \"' is neither 'ComponentType' or 'DirectiveType'.\");\n    }\n    return /** @type {?} */ ((def));\n}\n/**\n * @param {?} type\n * @return {?}\n */\nexport function extractPipeDef(type) {\n    /** @type {?} */\n    var def = getPipeDef(type);\n    if (ngDevMode && !def) {\n        throw new Error(\"'\" + type.name + \"' is not a 'PipeType'.\");\n    }\n    return /** @type {?} */ ((def));\n}\n/**\n * @template T\n * @param {?} def\n * @return {?}\n */\nexport function defineNgModule(def) {\n    /** @type {?} */\n    var res = {\n        type: def.type,\n        bootstrap: def.bootstrap || EMPTY_ARRAY,\n        declarations: def.declarations || EMPTY_ARRAY,\n        imports: def.imports || EMPTY_ARRAY,\n        exports: def.exports || EMPTY_ARRAY,\n        transitiveCompileScopes: null,\n    };\n    return /** @type {?} */ (res);\n}\n/**\n * Inverts an inputs or outputs lookup such that the keys, which were the\n * minified keys, are part of the values, and the values are parsed so that\n * the publicName of the property is the new key\n *\n * e.g. for\n *\n * ```\n * class Comp {\n * \\@Input()\n *   propName1: string;\n *\n * \\@Input('publicName')\n *   propName2: number;\n * }\n * ```\n *\n * will be serialized as\n *\n * ```\n * {\n *   a0: 'propName1',\n *   b1: ['publicName', 'propName2'],\n * }\n * ```\n *\n * becomes\n *\n * ```\n * {\n *  'propName1': 'a0',\n *  'publicName': 'b1'\n * }\n * ```\n *\n * Optionally the function can take `secondary` which will result in:\n *\n * ```\n * {\n *  'propName1': 'a0',\n *  'propName2': 'b1'\n * }\n * ```\n *\n * @param {?} obj\n * @param {?=} secondary\n * @return {?}\n */\nfunction invertObject(obj, secondary) {\n    if (obj == null)\n        return EMPTY;\n    /** @type {?} */\n    var newLookup = {};\n    for (var minifiedKey in obj) {\n        if (obj.hasOwnProperty(minifiedKey)) {\n            /** @type {?} */\n            var publicName = obj[minifiedKey];\n            /** @type {?} */\n            var declaredName = publicName;\n            if (Array.isArray(publicName)) {\n                declaredName = publicName[1];\n                publicName = publicName[0];\n            }\n            newLookup[publicName] = minifiedKey;\n            if (secondary) {\n                (secondary[declaredName] = minifiedKey);\n            }\n        }\n    }\n    return newLookup;\n}\n/**\n * Create a base definition\n *\n * # Example\n * ```\n * class ShouldBeInherited {\n *   static ngBaseDef = defineBase({\n *      ...\n *   })\n * }\n * @template T\n * @param {?} baseDefinition The base definition parameters\n * @return {?}\n */\nexport function defineBase(baseDefinition) {\n    /** @type {?} */\n    var declaredInputs = /** @type {?} */ ({});\n    return {\n        inputs: invertObject(baseDefinition.inputs, declaredInputs),\n        declaredInputs: declaredInputs,\n        outputs: invertObject(baseDefinition.outputs),\n    };\n}\n/** *\n * Create a directive definition object.\n *\n * # Example\n * ```\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ngDirectiveDef = defineDirective({\n *     ...\n *   });\n * }\n * ```\n  @type {?} */\nexport var defineDirective = /** @type {?} */ ((defineComponent));\n/**\n * Create a pipe definition object.\n *\n * # Example\n * ```\n * class MyPipe implements PipeTransform {\n *   // Generated by Angular Template Compiler\n *   static ngPipeDef = definePipe({\n *     ...\n *   });\n * }\n * ```\n * @template T\n * @param {?} pipeDef Pipe definition generated by the compiler\n * @return {?}\n */\nexport function definePipe(pipeDef) {\n    return /** @type {?} */ ((/** @type {?} */ ({\n        name: pipeDef.name,\n        factory: pipeDef.factory,\n        pure: pipeDef.pure !== false,\n        onDestroy: pipeDef.type.prototype.ngOnDestroy || null\n    })));\n}\n/**\n * The following getter methods retrieve the definition form the type. Currently the retrieval\n * honors inheritance, but in the future we may change the rule to require that definitions are\n * explicit. This would require some sort of migration strategy.\n * @template T\n * @param {?} type\n * @return {?}\n */\nexport function getComponentDef(type) {\n    return (/** @type {?} */ (type))[NG_COMPONENT_DEF] || null;\n}\n/**\n * @template T\n * @param {?} type\n * @return {?}\n */\nexport function getDirectiveDef(type) {\n    return (/** @type {?} */ (type))[NG_DIRECTIVE_DEF] || null;\n}\n/**\n * @template T\n * @param {?} type\n * @return {?}\n */\nexport function getPipeDef(type) {\n    return (/** @type {?} */ (type))[NG_PIPE_DEF] || null;\n}\n/**\n * @template T\n * @param {?} type\n * @return {?}\n */\nexport function getNgModuleDef(type) {\n    return (/** @type {?} */ (type))[NG_MODULE_DEF] || null;\n}\n//# sourceMappingURL=definition.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nimport { global } from '../../util';\nexport { R3ResolvedDependencyType } from './compiler_facade_interface';\n/**\n * @return {?}\n */\nexport function getCompilerFacade() {\n    /** @type {?} */\n    var globalNg = global[\"ng\"];\n    if (!globalNg || !globalNg.ÉµcompilerFacade) {\n        throw new Error(\"Angular JIT compilation failed: '@angular/compiler' not loaded!\\n\" +\n            \"  - JIT compilation is discouraged for production use-cases! Consider AOT mode instead.\\n\" +\n            \"  - Did you bootstrap using '@angular/platform-browser-dynamic' or '@angular/platform-server'?\\n\" +\n            \"  - Alternatively provide the compiler with 'import \\\"@angular/compiler\\\";' before bootstrapping.\");\n    }\n    return globalNg.ÉµcompilerFacade;\n}\n//# sourceMappingURL=compiler_facade.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { stringify } from '../util';\nimport { getInjectableDef } from './defs';\nimport { Inject, Optional, Self, SkipSelf } from './metadata';\n/** @enum {number} */\nvar InjectFlags = {\n    // TODO(alxhub): make this 'const' when ngc no longer writes exports of it into ngfactory files.\n    Default: 0,\n    /**\n       * Specifies that an injector should retrieve a dependency from any injector until reaching the\n       * host element of the current component. (Only used with Element Injector)\n       */\n    Host: 1,\n    /** Don't descend into ancestors of the node requesting injection. */\n    Self: 2,\n    /** Skip the node that is requesting injection. */\n    SkipSelf: 4,\n    /** Inject `defaultValue` instead if token not found. */\n    Optional: 8,\n};\nexport { InjectFlags };\nInjectFlags[InjectFlags.Default] = 'Default';\nInjectFlags[InjectFlags.Host] = 'Host';\nInjectFlags[InjectFlags.Self] = 'Self';\nInjectFlags[InjectFlags.SkipSelf] = 'SkipSelf';\nInjectFlags[InjectFlags.Optional] = 'Optional';\n/** *\n * Current injector value used by `inject`.\n * - `undefined`: it is an error to call `inject`\n * - `null`: `inject` can be called but there is no injector (limp-mode).\n * - Injector instance: Use the injector for resolution.\n  @type {?} */\nvar _currentInjector = undefined;\n/**\n * @param {?} injector\n * @return {?}\n */\nexport function setCurrentInjector(injector) {\n    /** @type {?} */\n    var former = _currentInjector;\n    _currentInjector = injector;\n    return former;\n}\n/** *\n * Current implementation of inject.\n *\n * By default, it is `injectInjectorOnly`, which makes it `Injector`-only aware. It can be changed\n * to `directiveInject`, which brings in the `NodeInjector` system of ivy. It is designed this\n * way for two reasons:\n *  1. `Injector` should not depend on ivy logic.\n *  2. To maintain tree shake-ability we don't want to bring in unnecessary code.\n  @type {?} */\nvar _injectImplementation;\n/**\n * Sets the current inject implementation.\n * @param {?} impl\n * @return {?}\n */\nexport function setInjectImplementation(impl) {\n    /** @type {?} */\n    var previous = _injectImplementation;\n    _injectImplementation = impl;\n    return previous;\n}\n/**\n * @template T\n * @param {?} token\n * @param {?=} flags\n * @return {?}\n */\nexport function injectInjectorOnly(token, flags) {\n    if (flags === void 0) { flags = InjectFlags.Default; }\n    if (_currentInjector === undefined) {\n        throw new Error(\"inject() must be called from an injection context\");\n    }\n    else if (_currentInjector === null) {\n        return injectRootLimpMode(token, undefined, flags);\n    }\n    else {\n        return _currentInjector.get(token, flags & InjectFlags.Optional ? null : undefined, flags);\n    }\n}\n/**\n * @template T\n * @param {?} token\n * @param {?=} flags\n * @return {?}\n */\nexport function inject(token, flags) {\n    if (flags === void 0) { flags = InjectFlags.Default; }\n    return (_injectImplementation || injectInjectorOnly)(token, flags);\n}\n/**\n * Injects `root` tokens in limp mode.\n *\n * If no injector exists, we can still inject tree-shakable providers which have `providedIn` set to\n * `\"root\"`. This is known as the limp mode injection. In such case the value is stored in the\n * `InjectableDef`.\n * @template T\n * @param {?} token\n * @param {?} notFoundValue\n * @param {?} flags\n * @return {?}\n */\nexport function injectRootLimpMode(token, notFoundValue, flags) {\n    /** @type {?} */\n    var injectableDef = getInjectableDef(token);\n    if (injectableDef && injectableDef.providedIn == 'root') {\n        return injectableDef.value === undefined ? injectableDef.value = injectableDef.factory() :\n            injectableDef.value;\n    }\n    if (flags & InjectFlags.Optional)\n        return null;\n    if (notFoundValue !== undefined)\n        return notFoundValue;\n    throw new Error(\"Injector: NOT_FOUND [\" + stringify(token) + \"]\");\n}\n/**\n * @param {?} types\n * @return {?}\n */\nexport function injectArgs(types) {\n    /** @type {?} */\n    var args = [];\n    for (var i = 0; i < types.length; i++) {\n        /** @type {?} */\n        var arg = types[i];\n        if (Array.isArray(arg)) {\n            if (arg.length === 0) {\n                throw new Error('Arguments array must have arguments.');\n            }\n            /** @type {?} */\n            var type = undefined;\n            /** @type {?} */\n            var flags = InjectFlags.Default;\n            for (var j = 0; j < arg.length; j++) {\n                /** @type {?} */\n                var meta = arg[j];\n                if (meta instanceof Optional || meta.ngMetadataName === 'Optional') {\n                    flags |= InjectFlags.Optional;\n                }\n                else if (meta instanceof SkipSelf || meta.ngMetadataName === 'SkipSelf') {\n                    flags |= InjectFlags.SkipSelf;\n                }\n                else if (meta instanceof Self || meta.ngMetadataName === 'Self') {\n                    flags |= InjectFlags.Self;\n                }\n                else if (meta instanceof Inject) {\n                    type = meta.token;\n                }\n                else {\n                    type = meta;\n                }\n            }\n            args.push(inject(/** @type {?} */ ((type)), flags));\n        }\n        else {\n            args.push(inject(arg));\n        }\n    }\n    return args;\n}\n//# sourceMappingURL=injector_compatibility.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getComponentDef, getNgModuleDef } from './definition';\n/**\n * @param {?} actual\n * @param {?} msg\n * @return {?}\n */\nexport function assertNumber(actual, msg) {\n    if (typeof actual != 'number') {\n        throwError(msg);\n    }\n}\n/**\n * @template T\n * @param {?} actual\n * @param {?} expected\n * @param {?} msg\n * @return {?}\n */\nexport function assertEqual(actual, expected, msg) {\n    if (actual != expected) {\n        throwError(msg);\n    }\n}\n/**\n * @template T\n * @param {?} actual\n * @param {?} expected\n * @param {?} msg\n * @return {?}\n */\nexport function assertNotEqual(actual, expected, msg) {\n    if (actual == expected) {\n        throwError(msg);\n    }\n}\n/**\n * @template T\n * @param {?} actual\n * @param {?} expected\n * @param {?} msg\n * @return {?}\n */\nexport function assertSame(actual, expected, msg) {\n    if (actual !== expected) {\n        throwError(msg);\n    }\n}\n/**\n * @template T\n * @param {?} actual\n * @param {?} expected\n * @param {?} msg\n * @return {?}\n */\nexport function assertLessThan(actual, expected, msg) {\n    if (actual >= expected) {\n        throwError(msg);\n    }\n}\n/**\n * @template T\n * @param {?} actual\n * @param {?} expected\n * @param {?} msg\n * @return {?}\n */\nexport function assertGreaterThan(actual, expected, msg) {\n    if (actual <= expected) {\n        throwError(msg);\n    }\n}\n/**\n * @template T\n * @param {?} actual\n * @param {?} msg\n * @return {?}\n */\nexport function assertNotDefined(actual, msg) {\n    if (actual != null) {\n        throwError(msg);\n    }\n}\n/**\n * @template T\n * @param {?} actual\n * @param {?} msg\n * @return {?}\n */\nexport function assertDefined(actual, msg) {\n    if (actual == null) {\n        throwError(msg);\n    }\n}\n/**\n * @param {?} actual\n * @param {?=} msg\n * @return {?}\n */\nexport function assertComponentType(actual, msg) {\n    if (msg === void 0) { msg = 'Type passed in is not ComponentType, it does not have \\'ngComponentDef\\' property.'; }\n    if (!getComponentDef(actual)) {\n        throwError(msg);\n    }\n}\n/**\n * @param {?} actual\n * @param {?=} msg\n * @return {?}\n */\nexport function assertNgModuleType(actual, msg) {\n    if (msg === void 0) { msg = 'Type passed in is not NgModuleType, it does not have \\'ngModuleDef\\' property.'; }\n    if (!getNgModuleDef(actual)) {\n        throwError(msg);\n    }\n}\n/**\n * @param {?} msg\n * @return {?}\n */\nfunction throwError(msg) {\n    // tslint:disable-next-line\n    debugger; // Left intentionally for better debugger experience.\n    throw new Error(\"ASSERTION ERROR: \" + msg);\n}\n/**\n * @param {?} node\n * @return {?}\n */\nexport function assertDomNode(node) {\n    assertEqual(node instanceof Node, true, 'The provided value must be an instance of a DOM Node');\n}\n/**\n * @param {?} isParent\n * @return {?}\n */\nexport function assertPreviousIsParent(isParent) {\n    assertEqual(isParent, true, 'previousOrParentTNode should be a parent');\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nexport function assertHasParent(tNode) {\n    assertDefined(tNode.parent, 'previousOrParentTNode should have a parent');\n}\n/**\n * @param {?} lView\n * @param {?} index\n * @param {?=} arr\n * @return {?}\n */\nexport function assertDataNext(lView, index, arr) {\n    if (arr == null)\n        arr = lView;\n    assertEqual(arr.length, index, \"index \" + index + \" expected to be at the end of arr (length \" + arr.length + \")\");\n}\n/**\n * @param {?} arr\n * @param {?} index\n * @return {?}\n */\nexport function assertDataInRange(arr, index) {\n    assertLessThan(index, arr ? arr.length : 0, 'index expected to be a valid data index');\n}\n//# sourceMappingURL=assert.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nexport var TNODE = 8;\n/** @type {?} */\nexport var PARENT_INJECTOR = 8;\n/** @type {?} */\nexport var INJECTOR_SIZE = 9;\n/**\n * Represents a relative location of parent injector.\n *\n * The interfaces encodes number of parents `LView`s to traverse and index in the `LView`\n * pointing to the parent injector.\n * @record\n */\nexport function RelativeInjectorLocation() { }\n/** @type {?} */\nRelativeInjectorLocation.prototype.__brand__;\n/** @enum {number} */\nvar RelativeInjectorLocationFlags = {\n    InjectorIndexMask: 32767,\n    AcrossHostBoundary: 32768,\n    ViewOffsetShift: 16,\n    NO_PARENT: -1,\n};\nexport { RelativeInjectorLocationFlags };\n/** @type {?} */\nexport var NO_PARENT_INJECTOR = /** @type {?} */ (-1);\n/**\n * Factory for creating instances of injectors in the NodeInjector.\n *\n * This factory is complicated by the fact that it can resolve `multi` factories as well.\n *\n * NOTE: Some of the fields are optional which means that this class has two hidden classes.\n * - One without `multi` support (most common)\n * - One with `multi` values, (rare).\n *\n * Since VMs can cache up to 4 inline hidden classes this is OK.\n *\n * - Single factory: Only `resolving` and `factory` is defined.\n * - `providers` factory: `componentProviders` is a number and `index = -1`.\n * - `viewProviders` factory: `componentProviders` is a number and `index` points to `providers`.\n */\nvar /**\n * Factory for creating instances of injectors in the NodeInjector.\n *\n * This factory is complicated by the fact that it can resolve `multi` factories as well.\n *\n * NOTE: Some of the fields are optional which means that this class has two hidden classes.\n * - One without `multi` support (most common)\n * - One with `multi` values, (rare).\n *\n * Since VMs can cache up to 4 inline hidden classes this is OK.\n *\n * - Single factory: Only `resolving` and `factory` is defined.\n * - `providers` factory: `componentProviders` is a number and `index = -1`.\n * - `viewProviders` factory: `componentProviders` is a number and `index` points to `providers`.\n */\nNodeInjectorFactory = /** @class */ (function () {\n    function NodeInjectorFactory(factory, /**\n           * Set to `true` if the token is declared in `viewProviders` (or if it is component).\n           */\n    isViewProvider, injectImplementation) {\n        this.factory = factory;\n        /**\n         * Marker set to true during factory invocation to see if we get into recursive loop.\n         * Recursive loop causes an error to be displayed.\n         */\n        this.resolving = false;\n        this.canSeeViewProviders = isViewProvider;\n        this.injectImpl = injectImplementation;\n    }\n    return NodeInjectorFactory;\n}());\n/**\n * Factory for creating instances of injectors in the NodeInjector.\n *\n * This factory is complicated by the fact that it can resolve `multi` factories as well.\n *\n * NOTE: Some of the fields are optional which means that this class has two hidden classes.\n * - One without `multi` support (most common)\n * - One with `multi` values, (rare).\n *\n * Since VMs can cache up to 4 inline hidden classes this is OK.\n *\n * - Single factory: Only `resolving` and `factory` is defined.\n * - `providers` factory: `componentProviders` is a number and `index = -1`.\n * - `viewProviders` factory: `componentProviders` is a number and `index` points to `providers`.\n */\nexport { NodeInjectorFactory };\nif (false) {\n    /**\n     * The inject implementation to be activated when using the factory.\n     * @type {?}\n     */\n    NodeInjectorFactory.prototype.injectImpl;\n    /**\n     * Marker set to true during factory invocation to see if we get into recursive loop.\n     * Recursive loop causes an error to be displayed.\n     * @type {?}\n     */\n    NodeInjectorFactory.prototype.resolving;\n    /**\n     * Marks that the token can see other Tokens declared in `viewProviders` on the same node.\n     * @type {?}\n     */\n    NodeInjectorFactory.prototype.canSeeViewProviders;\n    /**\n     * An array of factories to use in case of `multi` provider.\n     * @type {?}\n     */\n    NodeInjectorFactory.prototype.multi;\n    /**\n     * Number of `multi`-providers which belong to the component.\n     *\n     * This is needed because when multiple components and directives declare the `multi` provider\n     * they have to be concatenated in the correct order.\n     *\n     * Example:\n     *\n     * If we have a component and directive active an a single element as declared here\n     * ```\n     * component:\n     *   provides: [ {provide: String, useValue: 'component', multi: true} ],\n     *   viewProvides: [ {provide: String, useValue: 'componentView', multi: true} ],\n     *\n     * directive:\n     *   provides: [ {provide: String, useValue: 'directive', multi: true} ],\n     * ```\n     *\n     * Then the expected results are:\n     *\n     * ```\n     * providers: ['component', 'directive']\n     * viewProviders: ['component', 'componentView', 'directive']\n     * ```\n     *\n     * The way to think about it is that the `viewProviders` have been inserted after the component\n     * but before the directives, which is why we need to know how many `multi`s have been declared by\n     * the component.\n     * @type {?}\n     */\n    NodeInjectorFactory.prototype.componentProviders;\n    /**\n     * Current index of the Factory in the `data`. Needed for `viewProviders` and `providers` merging.\n     * See `providerFactory`.\n     * @type {?}\n     */\n    NodeInjectorFactory.prototype.index;\n    /**\n     * Because the same `multi` provider can be declared in `provides` and `viewProvides` it is\n     * possible for `viewProvides` to shadow the `provides`. For this reason we store the\n     * `provideFactory` of the `providers` so that `providers` can be extended with `viewProviders`.\n     *\n     * Example:\n     *\n     * Given:\n     * ```\n     * provides: [ {provide: String, useValue: 'all', multi: true} ],\n     * viewProvides: [ {provide: String, useValue: 'viewOnly', multi: true} ],\n     * ```\n     *\n     * We have to return `['all']` in case of content injection, but `['all', 'viewOnly']` in case\n     * of view injection. We further have to make sure that the shared instances (in our case\n     * `all`) are the exact same instance in both the content as well as the view injection. (We\n     * have to make sure that we don't double instantiate.) For this reason the `viewProvides`\n     * `Factory` has a pointer to the shadowed `provides` factory so that it can instantiate the\n     * `providers` (`['all']`) and then extend it with `viewProviders` (`['all'] + ['viewOnly'] =\n     * ['all', 'viewOnly']`).\n     * @type {?}\n     */\n    NodeInjectorFactory.prototype.providerFactory;\n    /**\n     * Factory to invoke in order to create a new instance.\n     * @type {?}\n     */\n    NodeInjectorFactory.prototype.factory;\n}\n/** @type {?} */\nvar FactoryPrototype = NodeInjectorFactory.prototype;\n/**\n * @param {?} obj\n * @return {?}\n */\nexport function isFactory(obj) {\n    // See: https://jsperf.com/instanceof-vs-getprototypeof\n    return obj != null && typeof obj == 'object' && Object.getPrototypeOf(obj) == FactoryPrototype;\n}\n/** @type {?} */\nexport var unusedValueExportToPlacateAjd = 1;\n//# sourceMappingURL=injector.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { assertDefined, assertEqual } from './assert';\n/**\n * @param {?} tNode\n * @param {?} type\n * @return {?}\n */\nexport function assertNodeType(tNode, type) {\n    assertDefined(tNode, 'should be called with a TNode');\n    assertEqual(tNode.type, type, \"should be a \" + typeName(type));\n}\n/**\n * @param {?} tNode\n * @param {...?} types\n * @return {?}\n */\nexport function assertNodeOfPossibleTypes(tNode) {\n    var types = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        types[_i - 1] = arguments[_i];\n    }\n    assertDefined(tNode, 'should be called with a TNode');\n    /** @type {?} */\n    var found = types.some(function (type) { return tNode.type === type; });\n    assertEqual(found, true, \"Should be one of \" + types.map(typeName).join(', ') + \" but got \" + typeName(tNode.type));\n}\n/**\n * @param {?} type\n * @return {?}\n */\nfunction typeName(type) {\n    if (type == 1 /* Projection */)\n        return 'Projection';\n    if (type == 0 /* Container */)\n        return 'Container';\n    if (type == 2 /* View */)\n        return 'View';\n    if (type == 3 /* Element */)\n        return 'Element';\n    if (type == 4 /* ElementContainer */)\n        return 'ElementContainer';\n    return '<unknown>';\n}\n//# sourceMappingURL=node_assert.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { assertEqual } from './assert';\nimport { FLAGS } from './interfaces/view';\n/**\n * If this is the first template pass, any ngOnInit or ngDoCheck hooks will be queued into\n * TView.initHooks during directiveCreate.\n *\n * The directive index and hook type are encoded into one number (1st bit: type, remaining bits:\n * directive index), then saved in the even indices of the initHooks array. The odd indices\n * hold the hook functions themselves.\n *\n * @param {?} index The index of the directive in LView\n * @param {?} onInit\n * @param {?} doCheck\n * @param {?} tView The current TView\n * @return {?}\n */\nexport function queueInitHooks(index, onInit, doCheck, tView) {\n    ngDevMode &&\n        assertEqual(tView.firstTemplatePass, true, 'Should only be called on first template pass');\n    if (onInit) {\n        (tView.initHooks || (tView.initHooks = [])).push(index, onInit);\n    }\n    if (doCheck) {\n        (tView.initHooks || (tView.initHooks = [])).push(index, doCheck);\n        (tView.checkHooks || (tView.checkHooks = [])).push(index, doCheck);\n    }\n}\n/**\n * Loops through the directives on a node and queues all their hooks except ngOnInit\n * and ngDoCheck, which are queued separately in directiveCreate.\n * @param {?} flags\n * @param {?} tView\n * @return {?}\n */\nexport function queueLifecycleHooks(flags, tView) {\n    if (tView.firstTemplatePass) {\n        /** @type {?} */\n        var start = flags >> 16 /* DirectiveStartingIndexShift */;\n        /** @type {?} */\n        var count = flags & 4095 /* DirectiveCountMask */;\n        /** @type {?} */\n        var end = start + count;\n        // It's necessary to loop through the directives at elementEnd() (rather than processing in\n        // directiveCreate) so we can preserve the current hook order. Content, view, and destroy\n        // hooks for projected components and directives must be called *before* their hosts.\n        for (var i = start; i < end; i++) {\n            /** @type {?} */\n            var def = /** @type {?} */ (tView.data[i]);\n            queueContentHooks(def, tView, i);\n            queueViewHooks(def, tView, i);\n            queueDestroyHooks(def, tView, i);\n        }\n    }\n}\n/**\n * Queues afterContentInit and afterContentChecked hooks on TView\n * @param {?} def\n * @param {?} tView\n * @param {?} i\n * @return {?}\n */\nfunction queueContentHooks(def, tView, i) {\n    if (def.afterContentInit) {\n        (tView.contentHooks || (tView.contentHooks = [])).push(i, def.afterContentInit);\n    }\n    if (def.afterContentChecked) {\n        (tView.contentHooks || (tView.contentHooks = [])).push(i, def.afterContentChecked);\n        (tView.contentCheckHooks || (tView.contentCheckHooks = [])).push(i, def.afterContentChecked);\n    }\n}\n/**\n * Queues afterViewInit and afterViewChecked hooks on TView\n * @param {?} def\n * @param {?} tView\n * @param {?} i\n * @return {?}\n */\nfunction queueViewHooks(def, tView, i) {\n    if (def.afterViewInit) {\n        (tView.viewHooks || (tView.viewHooks = [])).push(i, def.afterViewInit);\n    }\n    if (def.afterViewChecked) {\n        (tView.viewHooks || (tView.viewHooks = [])).push(i, def.afterViewChecked);\n        (tView.viewCheckHooks || (tView.viewCheckHooks = [])).push(i, def.afterViewChecked);\n    }\n}\n/**\n * Queues onDestroy hooks on TView\n * @param {?} def\n * @param {?} tView\n * @param {?} i\n * @return {?}\n */\nfunction queueDestroyHooks(def, tView, i) {\n    if (def.onDestroy != null) {\n        (tView.destroyHooks || (tView.destroyHooks = [])).push(i, def.onDestroy);\n    }\n}\n/**\n * Calls onInit and doCheck calls if they haven't already been called.\n *\n * @param {?} currentView The current view\n * @param {?} tView\n * @param {?} creationMode\n * @return {?}\n */\nexport function executeInitHooks(currentView, tView, creationMode) {\n    if (currentView[FLAGS] & 16 /* RunInit */) {\n        executeHooks(currentView, tView.initHooks, tView.checkHooks, creationMode);\n        currentView[FLAGS] &= ~16 /* RunInit */;\n    }\n}\n/**\n * Iterates over afterViewInit and afterViewChecked functions and calls them.\n *\n * @param {?} data\n * @param {?} allHooks\n * @param {?} checkHooks\n * @param {?} creationMode\n * @return {?}\n */\nexport function executeHooks(data, allHooks, checkHooks, creationMode) {\n    /** @type {?} */\n    var hooksToCall = creationMode ? allHooks : checkHooks;\n    if (hooksToCall) {\n        callHooks(data, hooksToCall);\n    }\n}\n/**\n * Calls lifecycle hooks with their contexts, skipping init hooks if it's not\n * creation mode.\n *\n * @param {?} currentView The current view\n * @param {?} arr The array in which the hooks are found\n * @return {?}\n */\nexport function callHooks(currentView, arr) {\n    for (var i = 0; i < arr.length; i += 2) {\n        (/** @type {?} */ (arr[i + 1])).call(currentView[/** @type {?} */ (arr[i])]);\n    }\n}\n//# sourceMappingURL=hooks.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { global } from '../util';\nimport { assertDataInRange, assertDefined } from './assert';\nimport { ACTIVE_INDEX } from './interfaces/container';\nimport { MONKEY_PATCH_KEY_NAME } from './interfaces/context';\nimport { NO_PARENT_INJECTOR } from './interfaces/injector';\nimport { CONTEXT, DECLARATION_VIEW, FLAGS, HEADER_OFFSET, HOST, HOST_NODE, PARENT, TVIEW } from './interfaces/view';\n/**\n * Returns whether the values are different from a change detection stand point.\n *\n * Constraints are relaxed in checkNoChanges mode. See `devModeEqual` for details.\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nexport function isDifferent(a, b) {\n    // NaN is the only value that is not equal to itself so the first\n    // test checks if both a and b are not NaN\n    return !(a !== a && b !== b) && a !== b;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nexport function stringify(value) {\n    if (typeof value == 'function')\n        return value.name || value;\n    if (typeof value == 'string')\n        return value;\n    if (value == null)\n        return '';\n    return '' + value;\n}\n/**\n * Flattens an array in non-recursive way. Input arrays are not modified.\n * @param {?} list\n * @return {?}\n */\nexport function flatten(list) {\n    /** @type {?} */\n    var result = [];\n    /** @type {?} */\n    var i = 0;\n    while (i < list.length) {\n        /** @type {?} */\n        var item = list[i];\n        if (Array.isArray(item)) {\n            if (item.length > 0) {\n                list = item.concat(list.slice(i + 1));\n                i = 0;\n            }\n            else {\n                i++;\n            }\n        }\n        else {\n            result.push(item);\n            i++;\n        }\n    }\n    return result;\n}\n/**\n * Retrieves a value from any `LView` or `TData`.\n * @template T\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nexport function loadInternal(view, index) {\n    ngDevMode && assertDataInRange(view, index + HEADER_OFFSET);\n    return view[index + HEADER_OFFSET];\n}\n/**\n * Takes the value of a slot in `LView` and returns the element node.\n *\n * Normally, element nodes are stored flat, but if the node has styles/classes on it,\n * it might be wrapped in a styling context. Or if that node has a directive that injects\n * ViewContainerRef, it may be wrapped in an LContainer. Or if that node is a component,\n * it will be wrapped in LView. It could even have all three, so we keep looping\n * until we find something that isn't an array.\n *\n * @param {?} value The initial value in `LView`\n * @return {?}\n */\nexport function readElementValue(value) {\n    while (Array.isArray(value)) {\n        value = /** @type {?} */ (value[HOST]);\n    }\n    return value;\n}\n/**\n * Retrieves an element value from the provided `viewData`, by unwrapping\n * from any containers, component views, or style contexts.\n * @param {?} index\n * @param {?} lView\n * @return {?}\n */\nexport function getNativeByIndex(index, lView) {\n    return readElementValue(lView[index + HEADER_OFFSET]);\n}\n/**\n * @param {?} tNode\n * @param {?} hostView\n * @return {?}\n */\nexport function getNativeByTNode(tNode, hostView) {\n    return readElementValue(hostView[tNode.index]);\n}\n/**\n * @param {?} index\n * @param {?} view\n * @return {?}\n */\nexport function getTNode(index, view) {\n    return /** @type {?} */ (view[TVIEW].data[index + HEADER_OFFSET]);\n}\n/**\n * @param {?} nodeIndex\n * @param {?} hostView\n * @return {?}\n */\nexport function getComponentViewByIndex(nodeIndex, hostView) {\n    /** @type {?} */\n    var slotValue = hostView[nodeIndex];\n    return slotValue.length >= HEADER_OFFSET ? slotValue : slotValue[HOST];\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nexport function isContentQueryHost(tNode) {\n    return (tNode.flags & 16384 /* hasContentQuery */) !== 0;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nexport function isComponent(tNode) {\n    return (tNode.flags & 4096 /* isComponent */) === 4096 /* isComponent */;\n}\n/**\n * @template T\n * @param {?} def\n * @return {?}\n */\nexport function isComponentDef(def) {\n    return (/** @type {?} */ (def)).template !== null;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nexport function isLContainer(value) {\n    // Styling contexts are also arrays, but their first index contains an element node\n    return Array.isArray(value) && typeof value[ACTIVE_INDEX] === 'number';\n}\n/**\n * @param {?} target\n * @return {?}\n */\nexport function isRootView(target) {\n    return (target[FLAGS] & 64 /* IsRoot */) !== 0;\n}\n/**\n * Retrieve the root view from any component by walking the parent `LView` until\n * reaching the root `LView`.\n *\n * @param {?} target\n * @return {?}\n */\nexport function getRootView(target) {\n    ngDevMode && assertDefined(target, 'component');\n    /** @type {?} */\n    var lView = Array.isArray(target) ? (/** @type {?} */ (target)) : /** @type {?} */ ((readPatchedLView(target)));\n    while (lView && !(lView[FLAGS] & 64 /* IsRoot */)) {\n        lView = /** @type {?} */ ((lView[PARENT]));\n    }\n    return lView;\n}\n/**\n * @param {?} viewOrComponent\n * @return {?}\n */\nexport function getRootContext(viewOrComponent) {\n    /** @type {?} */\n    var rootView = getRootView(viewOrComponent);\n    ngDevMode &&\n        assertDefined(rootView[CONTEXT], 'RootView has no context. Perhaps it is disconnected?');\n    return /** @type {?} */ (rootView[CONTEXT]);\n}\n/**\n * Returns the monkey-patch value data present on the target (which could be\n * a component, directive or a DOM node).\n * @param {?} target\n * @return {?}\n */\nexport function readPatchedData(target) {\n    return target[MONKEY_PATCH_KEY_NAME];\n}\n/**\n * @param {?} target\n * @return {?}\n */\nexport function readPatchedLView(target) {\n    /** @type {?} */\n    var value = readPatchedData(target);\n    if (value) {\n        return Array.isArray(value) ? value : (/** @type {?} */ (value)).lView;\n    }\n    return null;\n}\n/**\n * @param {?} parentLocation\n * @return {?}\n */\nexport function hasParentInjector(parentLocation) {\n    return parentLocation !== NO_PARENT_INJECTOR;\n}\n/**\n * @param {?} parentLocation\n * @return {?}\n */\nexport function getParentInjectorIndex(parentLocation) {\n    return (/** @type {?} */ ((parentLocation))) & 32767 /* InjectorIndexMask */;\n}\n/**\n * @param {?} parentLocation\n * @return {?}\n */\nexport function getParentInjectorViewOffset(parentLocation) {\n    return (/** @type {?} */ ((parentLocation))) >> 16 /* ViewOffsetShift */;\n}\n/**\n * Unwraps a parent injector location number to find the view offset from the current injector,\n * then walks up the declaration view tree until the view is found that contains the parent\n * injector.\n *\n * @param {?} location The location of the parent injector, which contains the view offset\n * @param {?} startView The LView instance from which to start walking up the view tree\n * @return {?} The LView instance that contains the parent injector\n */\nexport function getParentInjectorView(location, startView) {\n    /** @type {?} */\n    var viewOffset = getParentInjectorViewOffset(location);\n    /** @type {?} */\n    var parentView = startView;\n    // For most cases, the parent injector can be found on the host node (e.g. for component\n    // or container), but we must keep the loop here to support the rarer case of deeply nested\n    // <ng-template> tags or inline views, where the parent injector might live many views\n    // above the child injector.\n    while (viewOffset > 0) {\n        parentView = /** @type {?} */ ((parentView[DECLARATION_VIEW]));\n        viewOffset--;\n    }\n    return parentView;\n}\n/**\n * Unwraps a parent injector location number to find the view offset from the current injector,\n * then walks up the declaration view tree until the TNode of the parent injector is found.\n *\n * @param {?} location The location of the parent injector, which contains the view offset\n * @param {?} startView The LView instance from which to start walking up the view tree\n * @param {?} startTNode The TNode instance of the starting element\n * @return {?} The TNode of the parent injector\n */\nexport function getParentInjectorTNode(location, startView, startTNode) {\n    if (startTNode.parent && startTNode.parent.injectorIndex !== -1) {\n        /** @type {?} */\n        var injectorIndex = startTNode.parent.injectorIndex;\n        /** @type {?} */\n        var parentTNode_1 = startTNode.parent;\n        while (parentTNode_1.parent != null && injectorIndex == parentTNode_1.injectorIndex) {\n            parentTNode_1 = parentTNode_1.parent;\n        }\n        return parentTNode_1;\n    }\n    /** @type {?} */\n    var viewOffset = getParentInjectorViewOffset(location);\n    /** @type {?} */\n    var parentView = startView;\n    /** @type {?} */\n    var parentTNode = /** @type {?} */ (startView[HOST_NODE]);\n    // view offset is superior to 1\n    while (viewOffset > 1) {\n        parentView = /** @type {?} */ ((parentView[DECLARATION_VIEW]));\n        parentTNode = /** @type {?} */ (parentView[HOST_NODE]);\n        viewOffset--;\n    }\n    return parentTNode;\n}\n/** @type {?} */\nexport var defaultScheduler = (typeof requestAnimationFrame !== 'undefined' && requestAnimationFrame || // browser only\n    setTimeout // everything else\n).bind(global);\n/**\n * Equivalent to ES6 spread, add each item to an array.\n *\n * @param {?} items The items to add\n * @param {?} arr The array to which you want to add the items\n * @return {?}\n */\nexport function addAllToArray(items, arr) {\n    for (var i = 0; i < items.length; i++) {\n        arr.push(items[i]);\n    }\n}\n//# sourceMappingURL=util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { assertDefined } from './assert';\nimport { executeHooks } from './hooks';\nimport { BINDING_INDEX, CONTEXT, DECLARATION_VIEW, FLAGS, HOST_NODE, QUERIES, TVIEW } from './interfaces/view';\nimport { isContentQueryHost } from './util';\n/** *\n * Store the element depth count. This is used to identify the root elements of the template\n * so that we can than attach `LView` to only those elements.\n  @type {?} */\nvar elementDepthCount;\n/**\n * @return {?}\n */\nexport function getElementDepthCount() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return elementDepthCount;\n}\n/**\n * @return {?}\n */\nexport function increaseElementDepthCount() {\n    elementDepthCount++;\n}\n/**\n * @return {?}\n */\nexport function decreaseElementDepthCount() {\n    elementDepthCount--;\n}\n/** @type {?} */\nvar currentDirectiveDef = null;\n/**\n * @return {?}\n */\nexport function getCurrentDirectiveDef() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return currentDirectiveDef;\n}\n/**\n * @param {?} def\n * @return {?}\n */\nexport function setCurrentDirectiveDef(def) {\n    currentDirectiveDef = def;\n}\n/** *\n * Stores whether directives should be matched to elements.\n *\n * When template contains `ngNonBindable` than we need to prevent the runtime form matching\n * directives on children of that element.\n *\n * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n * </div>\n * ```\n  @type {?} */\nvar bindingsEnabled;\n/**\n * @return {?}\n */\nexport function getBindingsEnabled() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return bindingsEnabled;\n}\n/**\n * Enables directive matching on elements.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- disabledBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- enableBindings() -->\n * </div>\n * ```\n * @return {?}\n */\nexport function enableBindings() {\n    bindingsEnabled = true;\n}\n/**\n * Disables directive matching on element.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- disabledBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- enableBindings() -->\n * </div>\n * ```\n * @return {?}\n */\nexport function disableBindings() {\n    bindingsEnabled = false;\n}\n/**\n * @return {?}\n */\nexport function getLView() {\n    return lView;\n}\n/**\n * Restores `contextViewData` to the given OpaqueViewState instance.\n *\n * Used in conjunction with the getCurrentView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n *\n * @param {?} viewToRestore The OpaqueViewState instance to restore.\n * @return {?}\n */\nexport function restoreView(viewToRestore) {\n    contextLView = /** @type {?} */ ((viewToRestore));\n}\n/** *\n * Used to set the parent property when nodes are created and track query results.\n  @type {?} */\nvar previousOrParentTNode;\n/**\n * @return {?}\n */\nexport function getPreviousOrParentTNode() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return previousOrParentTNode;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nexport function setPreviousOrParentTNode(tNode) {\n    previousOrParentTNode = tNode;\n}\n/**\n * @param {?} tNode\n * @param {?} view\n * @return {?}\n */\nexport function setTNodeAndViewData(tNode, view) {\n    previousOrParentTNode = tNode;\n    lView = view;\n}\n/** *\n * If `isParent` is:\n *  - `true`: then `previousOrParentTNode` points to a parent node.\n *  - `false`: then `previousOrParentTNode` points to previous node (sibling).\n  @type {?} */\nvar isParent;\n/**\n * @return {?}\n */\nexport function getIsParent() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return isParent;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nexport function setIsParent(value) {\n    isParent = value;\n}\n/**\n * Query instructions can ask for \"current queries\" in 2 different cases:\n * - when creating view queries (at the root of a component view, before any node is created - in\n * this case currentQueries points to view queries)\n * - when creating content queries (i.e. this previousOrParentTNode points to a node on which we\n * create content queries).\n * @param {?} QueryType\n * @return {?}\n */\nexport function getOrCreateCurrentQueries(QueryType) {\n    /** @type {?} */\n    var lView = getLView();\n    /** @type {?} */\n    var currentQueries = lView[QUERIES];\n    // if this is the first content query on a node, any existing LQueries needs to be cloned\n    // in subsequent template passes, the cloning occurs before directive instantiation.\n    if (previousOrParentTNode && previousOrParentTNode !== lView[HOST_NODE] &&\n        !isContentQueryHost(previousOrParentTNode)) {\n        currentQueries && (currentQueries = lView[QUERIES] = currentQueries.clone());\n        previousOrParentTNode.flags |= 16384 /* hasContentQuery */;\n    }\n    return currentQueries || (lView[QUERIES] = new QueryType(null, null, null));\n}\n/** *\n * This property gets set before entering a template.\n  @type {?} */\nvar creationMode;\n/**\n * @return {?}\n */\nexport function getCreationMode() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return creationMode;\n}\n/** *\n * State of the current view being processed.\n *\n * An array of nodes (text, element, container, etc), pipes, their bindings, and\n * any local variables that need to be stored between invocations.\n  @type {?} */\nvar lView;\n/** *\n * The last viewData retrieved by nextContext().\n * Allows building nextContext() and reference() calls.\n *\n * e.g. const inner = x().$implicit; const outer = x().$implicit;\n  @type {?} */\nvar contextLView = /** @type {?} */ ((null));\n/**\n * @return {?}\n */\nexport function getContextLView() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return contextLView;\n}\n/** *\n * In this mode, any changes in bindings will throw an ExpressionChangedAfterChecked error.\n *\n * Necessary to support ChangeDetectorRef.checkNoChanges().\n  @type {?} */\nvar checkNoChangesMode = false;\n/**\n * @return {?}\n */\nexport function getCheckNoChangesMode() {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return checkNoChangesMode;\n}\n/**\n * @param {?} mode\n * @return {?}\n */\nexport function setCheckNoChangesMode(mode) {\n    checkNoChangesMode = mode;\n}\n/** *\n * Whether or not this is the first time the current view has been processed.\n  @type {?} */\nvar firstTemplatePass = true;\n/**\n * @return {?}\n */\nexport function getFirstTemplatePass() {\n    return firstTemplatePass;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nexport function setFirstTemplatePass(value) {\n    firstTemplatePass = value;\n}\n/** *\n * The root index from which pure function instructions should calculate their binding\n * indices. In component views, this is TView.bindingStartIndex. In a host binding\n * context, this is the TView.expandoStartIndex + any dirs/hostVars before the given dir.\n  @type {?} */\nvar bindingRootIndex = -1;\n/**\n * @return {?}\n */\nexport function getBindingRoot() {\n    return bindingRootIndex;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nexport function setBindingRoot(value) {\n    bindingRootIndex = value;\n}\n/**\n * Swap the current state with a new state.\n *\n * For performance reasons we store the state in the top level of the module.\n * This way we minimize the number of properties to read. Whenever a new view\n * is entered we have to store the state for later, and when the view is\n * exited the state has to be restored\n *\n * @param {?} newView New state to become active\n * @param {?} hostTNode\n * @return {?} the previous state;\n */\nexport function enterView(newView, hostTNode) {\n    /** @type {?} */\n    var oldView = lView;\n    if (newView) {\n        /** @type {?} */\n        var tView = newView[TVIEW];\n        creationMode = (newView[FLAGS] & 1 /* CreationMode */) === 1 /* CreationMode */;\n        firstTemplatePass = tView.firstTemplatePass;\n        bindingRootIndex = tView.bindingStartIndex;\n    }\n    previousOrParentTNode = /** @type {?} */ ((hostTNode));\n    isParent = true;\n    lView = contextLView = newView;\n    return oldView;\n}\n/**\n * @template T\n * @param {?=} level\n * @return {?}\n */\nexport function nextContextImpl(level) {\n    if (level === void 0) { level = 1; }\n    contextLView = walkUpViews(level, /** @type {?} */ ((contextLView)));\n    return /** @type {?} */ (contextLView[CONTEXT]);\n}\n/**\n * @param {?} nestingLevel\n * @param {?} currentView\n * @return {?}\n */\nfunction walkUpViews(nestingLevel, currentView) {\n    while (nestingLevel > 0) {\n        ngDevMode && assertDefined(currentView[DECLARATION_VIEW], 'Declaration view should be defined if nesting level is greater than 0.');\n        currentView = /** @type {?} */ ((currentView[DECLARATION_VIEW]));\n        nestingLevel--;\n    }\n    return currentView;\n}\n/**\n * Resets the application state.\n * @return {?}\n */\nexport function resetComponentState() {\n    isParent = false;\n    previousOrParentTNode = /** @type {?} */ ((null));\n    elementDepthCount = 0;\n    bindingsEnabled = true;\n}\n/**\n * Used in lieu of enterView to make it clear when we are exiting a child view. This makes\n * the direction of traversal (up or down the view tree) a bit clearer.\n *\n * @param {?} newView New state to become active\n * @param {?=} creationOnly An optional boolean to indicate that the view was processed in creation mode\n * only, i.e. the first update will be done later. Only possible for dynamically created views.\n * @return {?}\n */\nexport function leaveView(newView, creationOnly) {\n    /** @type {?} */\n    var tView = lView[TVIEW];\n    if (!creationOnly) {\n        if (!checkNoChangesMode) {\n            executeHooks(lView, tView.viewHooks, tView.viewCheckHooks, creationMode);\n        }\n        // Views are clean and in update mode after being checked, so these bits are cleared\n        lView[FLAGS] &= ~(1 /* CreationMode */ | 4 /* Dirty */);\n    }\n    lView[FLAGS] |= 16 /* RunInit */;\n    lView[BINDING_INDEX] = tView.bindingStartIndex;\n    enterView(newView, null);\n}\n//# sourceMappingURL=state.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getInjectableDef, getInjectorDef } from '../di/defs';\nimport { InjectFlags, injectRootLimpMode, setInjectImplementation } from '../di/injector_compatibility';\nimport { assertDefined, assertEqual } from './assert';\nimport { getComponentDef, getDirectiveDef, getPipeDef } from './definition';\nimport { NG_ELEMENT_ID } from './fields';\nimport { NO_PARENT_INJECTOR, PARENT_INJECTOR, TNODE, isFactory } from './interfaces/injector';\nimport { DECLARATION_VIEW, HOST_NODE, INJECTOR, TVIEW } from './interfaces/view';\nimport { assertNodeOfPossibleTypes } from './node_assert';\nimport { getLView, getPreviousOrParentTNode, setTNodeAndViewData } from './state';\nimport { getParentInjectorIndex, getParentInjectorView, hasParentInjector, isComponent, stringify } from './util';\n/** *\n * Defines if the call to `inject` should include `viewProviders` in its resolution.\n *\n * This is set to true when we try to instantiate a component. This value is reset in\n * `getNodeInjectable` to a value which matches the declaration location of the token about to be\n * instantiated. This is done so that if we are injecting a token which was declared outside of\n * `viewProviders` we don't accidentally pull `viewProviders` in.\n *\n * Example:\n *\n * ```\n * \\@Injectable()\n * class MyService {\n *   constructor(public value: String) {}\n * }\n *\n * \\@Component({\n *   providers: [\n *     MyService,\n *     {provide: String, value: 'providers' }\n *   ]\n *   viewProviders: [\n *     {provide: String, value: 'viewProviders'}\n *   ]\n * })\n * class MyComponent {\n *   constructor(myService: MyService, value: String) {\n *     // We expect that Component can see into `viewProviders`.\n *     expect(value).toEqual('viewProviders');\n *     // `MyService` was not declared in `viewProviders` hence it can't see it.\n *     expect(myService.value).toEqual('providers');\n *   }\n * }\n *\n * ```\n  @type {?} */\nvar includeViewProviders = false;\n/**\n * @param {?} v\n * @return {?}\n */\nfunction setIncludeViewProviders(v) {\n    /** @type {?} */\n    var oldValue = includeViewProviders;\n    includeViewProviders = v;\n    return oldValue;\n}\n/** *\n * The number of slots in each bloom filter (used by DI). The larger this number, the fewer\n * directives that will share slots, and thus, the fewer false positives when checking for\n * the existence of a directive.\n  @type {?} */\nvar BLOOM_SIZE = 256;\n/** @type {?} */\nvar BLOOM_MASK = BLOOM_SIZE - 1;\n/** *\n * Counter used to generate unique IDs for directives.\n  @type {?} */\nvar nextNgElementId = 0;\n/**\n * Registers this directive as present in its node's injector by flipping the directive's\n * corresponding bit in the injector's bloom filter.\n *\n * @param {?} injectorIndex The index of the node injector where this token should be registered\n * @param {?} tView The TView for the injector's bloom filters\n * @param {?} type The directive token to register\n * @return {?}\n */\nexport function bloomAdd(injectorIndex, tView, type) {\n    ngDevMode && assertEqual(tView.firstTemplatePass, true, 'expected firstTemplatePass to be true');\n    /** @type {?} */\n    var id = typeof type !== 'string' ? (/** @type {?} */ (type))[NG_ELEMENT_ID] : type.charCodeAt(0) || 0;\n    // Set a unique ID on the directive type, so if something tries to inject the directive,\n    // we can easily retrieve the ID and hash it into the bloom bit that should be checked.\n    if (id == null) {\n        id = (/** @type {?} */ (type))[NG_ELEMENT_ID] = nextNgElementId++;\n    }\n    /** @type {?} */\n    var bloomBit = id & BLOOM_MASK;\n    /** @type {?} */\n    var mask = 1 << bloomBit;\n    /** @type {?} */\n    var b7 = bloomBit & 0x80;\n    /** @type {?} */\n    var b6 = bloomBit & 0x40;\n    /** @type {?} */\n    var b5 = bloomBit & 0x20;\n    /** @type {?} */\n    var tData = /** @type {?} */ (tView.data);\n    if (b7) {\n        b6 ? (b5 ? (tData[injectorIndex + 7] |= mask) : (tData[injectorIndex + 6] |= mask)) :\n            (b5 ? (tData[injectorIndex + 5] |= mask) : (tData[injectorIndex + 4] |= mask));\n    }\n    else {\n        b6 ? (b5 ? (tData[injectorIndex + 3] |= mask) : (tData[injectorIndex + 2] |= mask)) :\n            (b5 ? (tData[injectorIndex + 1] |= mask) : (tData[injectorIndex] |= mask));\n    }\n}\n/**\n * Creates (or gets an existing) injector for a given element or container.\n *\n * @param {?} tNode for which an injector should be retrieved / created.\n * @param {?} hostView View where the node is stored\n * @return {?} Node injector\n */\nexport function getOrCreateNodeInjectorForNode(tNode, hostView) {\n    /** @type {?} */\n    var existingInjectorIndex = getInjectorIndex(tNode, hostView);\n    if (existingInjectorIndex !== -1) {\n        return existingInjectorIndex;\n    }\n    /** @type {?} */\n    var tView = hostView[TVIEW];\n    if (tView.firstTemplatePass) {\n        tNode.injectorIndex = hostView.length;\n        insertBloom(tView.data, tNode); // foundation for node bloom\n        insertBloom(hostView, null); // foundation for cumulative bloom\n        insertBloom(tView.blueprint, null);\n        ngDevMode && assertEqual(tNode.flags === 0 || tNode.flags === 4096 /* isComponent */, true, 'expected tNode.flags to not be initialized');\n    }\n    /** @type {?} */\n    var parentLoc = getParentInjectorLocation(tNode, hostView);\n    /** @type {?} */\n    var parentIndex = getParentInjectorIndex(parentLoc);\n    /** @type {?} */\n    var parentLView = getParentInjectorView(parentLoc, hostView);\n    /** @type {?} */\n    var injectorIndex = tNode.injectorIndex;\n    // If a parent injector can't be found, its location is set to -1.\n    // In that case, we don't need to set up a cumulative bloom\n    if (hasParentInjector(parentLoc)) {\n        /** @type {?} */\n        var parentData = /** @type {?} */ (parentLView[TVIEW].data);\n        // Creates a cumulative bloom filter that merges the parent's bloom filter\n        // and its own cumulative bloom (which contains tokens for all ancestors)\n        for (var i = 0; i < 8; i++) {\n            hostView[injectorIndex + i] = parentLView[parentIndex + i] | parentData[parentIndex + i];\n        }\n    }\n    hostView[injectorIndex + PARENT_INJECTOR] = parentLoc;\n    return injectorIndex;\n}\n/**\n * @param {?} arr\n * @param {?} footer\n * @return {?}\n */\nfunction insertBloom(arr, footer) {\n    arr.push(0, 0, 0, 0, 0, 0, 0, 0, footer);\n}\n/**\n * @param {?} tNode\n * @param {?} hostView\n * @return {?}\n */\nexport function getInjectorIndex(tNode, hostView) {\n    if (tNode.injectorIndex === -1 ||\n        // If the injector index is the same as its parent's injector index, then the index has been\n        // copied down from the parent node. No injector has been created yet on this node.\n        (tNode.parent && tNode.parent.injectorIndex === tNode.injectorIndex) ||\n        // After the first template pass, the injector index might exist but the parent values\n        // might not have been calculated yet for this instance\n        hostView[tNode.injectorIndex + PARENT_INJECTOR] == null) {\n        return -1;\n    }\n    else {\n        return tNode.injectorIndex;\n    }\n}\n/**\n * Finds the index of the parent injector, with a view offset if applicable. Used to set the\n * parent injector initially.\n *\n * Returns a combination of number of `ViewData` we have to go up and index in that `Viewdata`\n * @param {?} tNode\n * @param {?} view\n * @return {?}\n */\nexport function getParentInjectorLocation(tNode, view) {\n    if (tNode.parent && tNode.parent.injectorIndex !== -1) {\n        return /** @type {?} */ (tNode.parent.injectorIndex); // ViewOffset is 0, AcrossHostBoundary is 0\n    }\n    /** @type {?} */\n    var hostTNode = view[HOST_NODE];\n    /** @type {?} */\n    var viewOffset = 1;\n    while (hostTNode && hostTNode.injectorIndex === -1) {\n        view = /** @type {?} */ ((view[DECLARATION_VIEW]));\n        hostTNode = /** @type {?} */ ((view[HOST_NODE]));\n        viewOffset++;\n    }\n    /** @type {?} */\n    var acrossHostBoundary = hostTNode && hostTNode.type === 3 /* Element */ ?\n        32768 /* AcrossHostBoundary */ :\n        0;\n    return hostTNode ?\n        hostTNode.injectorIndex | (viewOffset << 16 /* ViewOffsetShift */) |\n            acrossHostBoundary : /** @type {?} */ (-1);\n}\n/**\n * Makes a type or an injection token public to the DI system by adding it to an\n * injector's bloom filter.\n *\n * @param {?} injectorIndex\n * @param {?} view\n * @param {?} token The type or the injection token to be made public\n * @return {?}\n */\nexport function diPublicInInjector(injectorIndex, view, token) {\n    bloomAdd(injectorIndex, view[TVIEW], token);\n}\n/**\n * Inject static attribute value into directive constructor.\n *\n * This method is used with `factory` functions which are generated as part of\n * `defineDirective` or `defineComponent`. The method retrieves the static value\n * of an attribute. (Dynamic attributes are not supported since they are not resolved\n *  at the time of injection and can change over time.)\n *\n * # Example\n * Given:\n * ```\n * \\@Component(...)\n * class MyComponent {\n *   constructor(\\@Attribute('title') title: string) { ... }\n * }\n * ```\n * When instantiated with\n * ```\n * <my-component title=\"Hello\"></my-component>\n * ```\n *\n * Then factory method generated is:\n * ```\n * MyComponent.ngComponentDef = defineComponent({\n *   factory: () => new MyComponent(injectAttribute('title'))\n *   ...\n * })\n * ```\n *\n * \\@publicApi\n * @param {?} tNode\n * @param {?} attrNameToInject\n * @return {?}\n */\nexport function injectAttributeImpl(tNode, attrNameToInject) {\n    ngDevMode && assertNodeOfPossibleTypes(tNode, 0 /* Container */, 3 /* Element */, 4 /* ElementContainer */);\n    ngDevMode && assertDefined(tNode, 'expecting tNode');\n    /** @type {?} */\n    var attrs = tNode.attrs;\n    if (attrs) {\n        for (var i = 0; i < attrs.length; i = i + 2) {\n            /** @type {?} */\n            var attrName = attrs[i];\n            if (attrName === 1 /* SelectOnly */)\n                break;\n            if (attrName == attrNameToInject) {\n                return /** @type {?} */ (attrs[i + 1]);\n            }\n        }\n    }\n    return null;\n}\n/**\n * Returns the value associated to the given token from the NodeInjectors => ModuleInjector.\n *\n * Look for the injector providing the token by walking up the node injector tree and then\n * the module injector tree.\n *\n * @template T\n * @param {?} tNode\n * @param {?} lView\n * @param {?} token The token to look for\n * @param {?=} flags Injection flags\n * @param {?=} notFoundValue\n * @return {?} the value from the injector or `null` when not found\n */\nexport function getOrCreateInjectable(tNode, lView, token, flags, notFoundValue) {\n    if (flags === void 0) { flags = InjectFlags.Default; }\n    /** @type {?} */\n    var bloomHash = bloomHashBitOrFactory(token);\n    // If the ID stored here is a function, this is a special object like ElementRef or TemplateRef\n    // so just call the factory function to create it.\n    if (typeof bloomHash === 'function') {\n        /** @type {?} */\n        var savePreviousOrParentTNode = getPreviousOrParentTNode();\n        /** @type {?} */\n        var saveLView = getLView();\n        setTNodeAndViewData(tNode, lView);\n        try {\n            /** @type {?} */\n            var value = bloomHash();\n            if (value == null && !(flags & InjectFlags.Optional)) {\n                throw new Error(\"No provider for \" + stringify(token));\n            }\n            else {\n                return value;\n            }\n        }\n        finally {\n            setTNodeAndViewData(savePreviousOrParentTNode, saveLView);\n        }\n    }\n    else if (typeof bloomHash == 'number') {\n        /** @type {?} */\n        var previousTView = null;\n        /** @type {?} */\n        var injectorIndex = getInjectorIndex(tNode, lView);\n        /** @type {?} */\n        var parentLocation = NO_PARENT_INJECTOR;\n        // If we should skip this injector, or if there is no injector on this node, start by searching\n        // the parent injector.\n        if (injectorIndex === -1 || flags & InjectFlags.SkipSelf) {\n            parentLocation = injectorIndex === -1 ? getParentInjectorLocation(tNode, lView) :\n                lView[injectorIndex + PARENT_INJECTOR];\n            if (!shouldSearchParent(flags, parentLocation)) {\n                injectorIndex = -1;\n            }\n            else {\n                previousTView = lView[TVIEW];\n                injectorIndex = getParentInjectorIndex(parentLocation);\n                lView = getParentInjectorView(parentLocation, lView);\n            }\n        }\n        // Traverse up the injector tree until we find a potential match or until we know there\n        // *isn't* a match.\n        while (injectorIndex !== -1) {\n            parentLocation = lView[injectorIndex + PARENT_INJECTOR];\n            /** @type {?} */\n            var tView = lView[TVIEW];\n            if (bloomHasToken(bloomHash, injectorIndex, tView.data)) {\n                /** @type {?} */\n                var instance = searchTokensOnInjector(injectorIndex, lView, token, previousTView);\n                if (instance !== NOT_FOUND) {\n                    return instance;\n                }\n            }\n            if (shouldSearchParent(flags, parentLocation) &&\n                bloomHasToken(bloomHash, injectorIndex, lView)) {\n                // The def wasn't found anywhere on this node, so it was a false positive.\n                // Traverse up the tree and continue searching.\n                previousTView = tView;\n                injectorIndex = getParentInjectorIndex(parentLocation);\n                lView = getParentInjectorView(parentLocation, lView);\n            }\n            else {\n                // If we should not search parent OR If the ancestor bloom filter value does not have the\n                // bit corresponding to the directive we can give up on traversing up to find the specific\n                // injector.\n                injectorIndex = -1;\n            }\n        }\n    }\n    if (flags & InjectFlags.Optional && notFoundValue === undefined) {\n        // This must be set or the NullInjector will throw for optional deps\n        notFoundValue = null;\n    }\n    if ((flags & (InjectFlags.Self | InjectFlags.Host)) === 0) {\n        /** @type {?} */\n        var moduleInjector = lView[INJECTOR];\n        if (moduleInjector) {\n            return moduleInjector.get(token, notFoundValue, flags & InjectFlags.Optional);\n        }\n        else {\n            return injectRootLimpMode(token, notFoundValue, flags & InjectFlags.Optional);\n        }\n    }\n    if (flags & InjectFlags.Optional) {\n        return notFoundValue;\n    }\n    else {\n        throw new Error(\"NodeInjector: NOT_FOUND [\" + stringify(token) + \"]\");\n    }\n}\n/** @type {?} */\nvar NOT_FOUND = {};\n/**\n * @template T\n * @param {?} injectorIndex\n * @param {?} injectorView\n * @param {?} token\n * @param {?} previousTView\n * @return {?}\n */\nfunction searchTokensOnInjector(injectorIndex, injectorView, token, previousTView) {\n    /** @type {?} */\n    var currentTView = injectorView[TVIEW];\n    /** @type {?} */\n    var tNode = /** @type {?} */ (currentTView.data[injectorIndex + TNODE]);\n    /** @type {?} */\n    var canAccessViewProviders = false;\n    // We need to determine if view providers can be accessed by the starting element.\n    // It happens in 2 cases:\n    // 1) On the initial element injector , if we are instantiating a token which can see the\n    // viewProviders of the component of that element. Such token are:\n    // - the component itself (but not other directives)\n    // - viewProviders tokens of the component (but not providers tokens)\n    // 2) Upper in the element injector tree, if the starting element is actually in the view of\n    // the current element. To determine this, we track the transition of view during the climb,\n    // and check the host node of the current view to identify component views.\n    if (previousTView == null && isComponent(tNode) && includeViewProviders ||\n        previousTView != null && previousTView != currentTView &&\n            (currentTView.node == null || currentTView.node.type === 3 /* Element */)) {\n        canAccessViewProviders = true;\n    }\n    /** @type {?} */\n    var injectableIdx = locateDirectiveOrProvider(tNode, injectorView, token, canAccessViewProviders);\n    if (injectableIdx !== null) {\n        return getNodeInjectable(currentTView.data, injectorView, injectableIdx, /** @type {?} */ (tNode));\n    }\n    else {\n        return NOT_FOUND;\n    }\n}\n/**\n * Searches for the given token among the node's directives and providers.\n *\n * @template T\n * @param {?} tNode TNode on which directives are present.\n * @param {?} lView The view we are currently processing\n * @param {?} token Provider token or type of a directive to look for.\n * @param {?} canAccessViewProviders Whether view providers should be considered.\n * @return {?} Index of a found directive or provider, or null when none found.\n */\nexport function locateDirectiveOrProvider(tNode, lView, token, canAccessViewProviders) {\n    /** @type {?} */\n    var tView = lView[TVIEW];\n    /** @type {?} */\n    var nodeFlags = tNode.flags;\n    /** @type {?} */\n    var nodeProviderIndexes = tNode.providerIndexes;\n    /** @type {?} */\n    var tInjectables = tView.data;\n    /** @type {?} */\n    var startInjectables = nodeProviderIndexes & 65535 /* ProvidersStartIndexMask */;\n    /** @type {?} */\n    var startDirectives = nodeFlags >> 16 /* DirectiveStartingIndexShift */;\n    /** @type {?} */\n    var cptViewProvidersCount = nodeProviderIndexes >> 16 /* CptViewProvidersCountShift */;\n    /** @type {?} */\n    var startingIndex = canAccessViewProviders ? startInjectables : startInjectables + cptViewProvidersCount;\n    /** @type {?} */\n    var directiveCount = nodeFlags & 4095 /* DirectiveCountMask */;\n    for (var i = startingIndex; i < startDirectives + directiveCount; i++) {\n        /** @type {?} */\n        var providerTokenOrDef = /** @type {?} */ (tInjectables[i]);\n        if (i < startDirectives && token === providerTokenOrDef ||\n            i >= startDirectives && (/** @type {?} */ (providerTokenOrDef)).type === token) {\n            return i;\n        }\n    }\n    return null;\n}\n/**\n * Retrieve or instantiate the injectable from the `lData` at particular `index`.\n *\n * This function checks to see if the value has already been instantiated and if so returns the\n * cached `injectable`. Otherwise if it detects that the value is still a factory it\n * instantiates the `injectable` and caches the value.\n * @param {?} tData\n * @param {?} lData\n * @param {?} index\n * @param {?} tNode\n * @return {?}\n */\nexport function getNodeInjectable(tData, lData, index, tNode) {\n    /** @type {?} */\n    var value = lData[index];\n    if (isFactory(value)) {\n        /** @type {?} */\n        var factory = value;\n        if (factory.resolving) {\n            throw new Error(\"Circular dep for \" + stringify(tData[index]));\n        }\n        /** @type {?} */\n        var previousIncludeViewProviders = setIncludeViewProviders(factory.canSeeViewProviders);\n        factory.resolving = true;\n        /** @type {?} */\n        var previousInjectImplementation = void 0;\n        if (factory.injectImpl) {\n            previousInjectImplementation = setInjectImplementation(factory.injectImpl);\n        }\n        /** @type {?} */\n        var savePreviousOrParentTNode = getPreviousOrParentTNode();\n        /** @type {?} */\n        var saveLView = getLView();\n        setTNodeAndViewData(tNode, lData);\n        try {\n            value = lData[index] = factory.factory(null, tData, lData, tNode);\n        }\n        finally {\n            if (factory.injectImpl)\n                setInjectImplementation(previousInjectImplementation);\n            setIncludeViewProviders(previousIncludeViewProviders);\n            factory.resolving = false;\n            setTNodeAndViewData(savePreviousOrParentTNode, saveLView);\n        }\n    }\n    return value;\n}\n/**\n * Returns the bit in an injector's bloom filter that should be used to determine whether or not\n * the directive might be provided by the injector.\n *\n * When a directive is public, it is added to the bloom filter and given a unique ID that can be\n * retrieved on the Type. When the directive isn't public or the token is not a directive `null`\n * is returned as the node injector can not possibly provide that token.\n *\n * @param {?} token the injection token\n * @return {?} the matching bit to check in the bloom filter or `null` if the token is not known.\n */\nexport function bloomHashBitOrFactory(token) {\n    ngDevMode && assertDefined(token, 'token must be defined');\n    if (typeof token === 'string') {\n        return token.charCodeAt(0) || 0;\n    }\n    /** @type {?} */\n    var tokenId = (/** @type {?} */ (token))[NG_ELEMENT_ID];\n    return typeof tokenId === 'number' ? tokenId & BLOOM_MASK : tokenId;\n}\n/**\n * @param {?} bloomHash\n * @param {?} injectorIndex\n * @param {?} injectorView\n * @return {?}\n */\nexport function bloomHasToken(bloomHash, injectorIndex, injectorView) {\n    /** @type {?} */\n    var mask = 1 << bloomHash;\n    /** @type {?} */\n    var b7 = bloomHash & 0x80;\n    /** @type {?} */\n    var b6 = bloomHash & 0x40;\n    /** @type {?} */\n    var b5 = bloomHash & 0x20;\n    /** @type {?} */\n    var value;\n    if (b7) {\n        value = b6 ? (b5 ? injectorView[injectorIndex + 7] : injectorView[injectorIndex + 6]) :\n            (b5 ? injectorView[injectorIndex + 5] : injectorView[injectorIndex + 4]);\n    }\n    else {\n        value = b6 ? (b5 ? injectorView[injectorIndex + 3] : injectorView[injectorIndex + 2]) :\n            (b5 ? injectorView[injectorIndex + 1] : injectorView[injectorIndex]);\n    }\n    // If the bloom filter value has the bit corresponding to the directive's bloomBit flipped on,\n    // this injector is a potential match.\n    return !!(value & mask);\n}\n/**\n * Returns true if flags prevent parent injector from being searched for tokens\n * @param {?} flags\n * @param {?} parentLocation\n * @return {?}\n */\nfunction shouldSearchParent(flags, parentLocation) {\n    return !(flags & InjectFlags.Self ||\n        (flags & InjectFlags.Host &&\n            ((/** @type {?} */ ((parentLocation))) & 32768 /* AcrossHostBoundary */)));\n}\n/**\n * @return {?}\n */\nexport function injectInjector() {\n    /** @type {?} */\n    var tNode = /** @type {?} */ (getPreviousOrParentTNode());\n    return new NodeInjector(tNode, getLView());\n}\nvar NodeInjector = /** @class */ (function () {\n    function NodeInjector(_tNode, _lView) {\n        this._tNode = _tNode;\n        this._lView = _lView;\n        this._injectorIndex = getOrCreateNodeInjectorForNode(_tNode, _lView);\n    }\n    /**\n     * @param {?} token\n     * @return {?}\n     */\n    NodeInjector.prototype.get = /**\n     * @param {?} token\n     * @return {?}\n     */\n    function (token) {\n        /** @type {?} */\n        var previousTNode = getPreviousOrParentTNode();\n        /** @type {?} */\n        var previousLView = getLView();\n        setTNodeAndViewData(this._tNode, this._lView);\n        try {\n            return getOrCreateInjectable(this._tNode, this._lView, token);\n        }\n        finally {\n            setTNodeAndViewData(previousTNode, previousLView);\n        }\n    };\n    return NodeInjector;\n}());\nexport { NodeInjector };\nif (false) {\n    /** @type {?} */\n    NodeInjector.prototype._injectorIndex;\n    /** @type {?} */\n    NodeInjector.prototype._tNode;\n    /** @type {?} */\n    NodeInjector.prototype._lView;\n}\n/**\n * @template T\n * @param {?} type\n * @return {?}\n */\nexport function getFactoryOf(type) {\n    /** @type {?} */\n    var typeAny = /** @type {?} */ (type);\n    /** @type {?} */\n    var def = getComponentDef(typeAny) || getDirectiveDef(typeAny) ||\n        getPipeDef(typeAny) || getInjectableDef(typeAny) || getInjectorDef(typeAny);\n    if (!def || def.factory === undefined) {\n        return null;\n    }\n    return def.factory;\n}\n/**\n * @template T\n * @param {?} type\n * @return {?}\n */\nexport function getInheritedFactory(type) {\n    /** @type {?} */\n    var proto = /** @type {?} */ (Object.getPrototypeOf(type.prototype).constructor);\n    /** @type {?} */\n    var factory = getFactoryOf(proto);\n    if (factory !== null) {\n        return factory;\n    }\n    else {\n        // There is no factory defined. Either this was improper usage of inheritance\n        // (no Angular decorator on the superclass) or there is no constructor at all\n        // in the inheritance chain. Since the two cases cannot be distinguished, the\n        // latter has to be assumed.\n        return function (t) { return new t(); };\n    }\n}\n//# sourceMappingURL=di.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nimport './ng_dev_mode';\nimport { assertDomNode } from './assert';\nimport { EMPTY_ARRAY } from './definition';\nimport { MONKEY_PATCH_KEY_NAME } from './interfaces/context';\nimport { CONTEXT, HEADER_OFFSET, HOST, TVIEW } from './interfaces/view';\nimport { getComponentViewByIndex, getNativeByTNode, readElementValue, readPatchedData } from './util';\n/**\n * Returns the matching `LContext` data for a given DOM node, directive or component instance.\n *\n * This function will examine the provided DOM element, component, or directive instance\\'s\n * monkey-patched property to derive the `LContext` data. Once called then the monkey-patched\n * value will be that of the newly created `LContext`.\n *\n * If the monkey-patched value is the `LView` instance then the context value for that\n * target will be created and the monkey-patch reference will be updated. Therefore when this\n * function is called it may mutate the provided element\\'s, component\\'s or any of the associated\n * directive\\'s monkey-patch values.\n *\n * If the monkey-patch value is not detected then the code will walk up the DOM until an element\n * is found which contains a monkey-patch reference. When that occurs then the provided element\n * will be updated with a new context (which is then returned). If the monkey-patch value is not\n * detected for a component/directive instance then it will throw an error (all components and\n * directives should be automatically monkey-patched by ivy).\n *\n * @param {?} target Component, Directive or DOM Node.\n * @return {?}\n */\nexport function getContext(target) {\n    /** @type {?} */\n    var mpValue = readPatchedData(target);\n    if (mpValue) {\n        // only when it's an array is it considered an LView instance\n        // ... otherwise it's an already constructed LContext instance\n        if (Array.isArray(mpValue)) {\n            /** @type {?} */\n            var lView = /** @type {?} */ ((mpValue));\n            /** @type {?} */\n            var nodeIndex = void 0;\n            /** @type {?} */\n            var component = undefined;\n            /** @type {?} */\n            var directives = undefined;\n            if (isComponentInstance(target)) {\n                nodeIndex = findViaComponent(lView, target);\n                if (nodeIndex == -1) {\n                    throw new Error('The provided component was not found in the application');\n                }\n                component = target;\n            }\n            else if (isDirectiveInstance(target)) {\n                nodeIndex = findViaDirective(lView, target);\n                if (nodeIndex == -1) {\n                    throw new Error('The provided directive was not found in the application');\n                }\n                directives = getDirectivesAtNodeIndex(nodeIndex, lView, false);\n            }\n            else {\n                nodeIndex = findViaNativeElement(lView, /** @type {?} */ (target));\n                if (nodeIndex == -1) {\n                    return null;\n                }\n            }\n            /** @type {?} */\n            var native = readElementValue(lView[nodeIndex]);\n            /** @type {?} */\n            var existingCtx = readPatchedData(native);\n            /** @type {?} */\n            var context = (existingCtx && !Array.isArray(existingCtx)) ?\n                existingCtx :\n                createLContext(lView, nodeIndex, native);\n            // only when the component has been discovered then update the monkey-patch\n            if (component && context.component === undefined) {\n                context.component = component;\n                attachPatchData(context.component, context);\n            }\n            // only when the directives have been discovered then update the monkey-patch\n            if (directives && context.directives === undefined) {\n                context.directives = directives;\n                for (var i = 0; i < directives.length; i++) {\n                    attachPatchData(directives[i], context);\n                }\n            }\n            attachPatchData(context.native, context);\n            mpValue = context;\n        }\n    }\n    else {\n        /** @type {?} */\n        var rElement = /** @type {?} */ (target);\n        ngDevMode && assertDomNode(rElement);\n        /** @type {?} */\n        var parent_1 = /** @type {?} */ (rElement);\n        while (parent_1 = parent_1.parentNode) {\n            /** @type {?} */\n            var parentContext = readPatchedData(parent_1);\n            if (parentContext) {\n                /** @type {?} */\n                var lView = void 0;\n                if (Array.isArray(parentContext)) {\n                    lView = /** @type {?} */ (parentContext);\n                }\n                else {\n                    lView = parentContext.lView;\n                }\n                // the edge of the app was also reached here through another means\n                // (maybe because the DOM was changed manually).\n                if (!lView) {\n                    return null;\n                }\n                /** @type {?} */\n                var index = findViaNativeElement(lView, rElement);\n                if (index >= 0) {\n                    /** @type {?} */\n                    var native = readElementValue(lView[index]);\n                    /** @type {?} */\n                    var context = createLContext(lView, index, native);\n                    attachPatchData(native, context);\n                    mpValue = context;\n                    break;\n                }\n            }\n        }\n    }\n    return (/** @type {?} */ (mpValue)) || null;\n}\n/**\n * Creates an empty instance of a `LContext` context\n * @param {?} lView\n * @param {?} nodeIndex\n * @param {?} native\n * @return {?}\n */\nfunction createLContext(lView, nodeIndex, native) {\n    return {\n        lView: lView,\n        nodeIndex: nodeIndex,\n        native: native,\n        component: undefined,\n        directives: undefined,\n        localRefs: undefined,\n    };\n}\n/**\n * Takes a component instance and returns the view for that component.\n *\n * @param {?} componentInstance\n * @return {?} The component's view\n */\nexport function getComponentViewByInstance(componentInstance) {\n    /** @type {?} */\n    var lView = readPatchedData(componentInstance);\n    /** @type {?} */\n    var view;\n    if (Array.isArray(lView)) {\n        /** @type {?} */\n        var nodeIndex = findViaComponent(lView, componentInstance);\n        view = getComponentViewByIndex(nodeIndex, lView);\n        /** @type {?} */\n        var context = createLContext(lView, nodeIndex, /** @type {?} */ (view[HOST]));\n        context.component = componentInstance;\n        attachPatchData(componentInstance, context);\n        attachPatchData(context.native, context);\n    }\n    else {\n        /** @type {?} */\n        var context = /** @type {?} */ ((lView));\n        view = getComponentViewByIndex(context.nodeIndex, context.lView);\n    }\n    return view;\n}\n/**\n * Assigns the given data to the given target (which could be a component,\n * directive or DOM node instance) using monkey-patching.\n * @param {?} target\n * @param {?} data\n * @return {?}\n */\nexport function attachPatchData(target, data) {\n    target[MONKEY_PATCH_KEY_NAME] = data;\n}\n/**\n * @param {?} instance\n * @return {?}\n */\nexport function isComponentInstance(instance) {\n    return instance && instance.constructor && instance.constructor.ngComponentDef;\n}\n/**\n * @param {?} instance\n * @return {?}\n */\nexport function isDirectiveInstance(instance) {\n    return instance && instance.constructor && instance.constructor.ngDirectiveDef;\n}\n/**\n * Locates the element within the given LView and returns the matching index\n * @param {?} lView\n * @param {?} target\n * @return {?}\n */\nfunction findViaNativeElement(lView, target) {\n    /** @type {?} */\n    var tNode = lView[TVIEW].firstChild;\n    while (tNode) {\n        /** @type {?} */\n        var native = /** @type {?} */ ((getNativeByTNode(tNode, lView)));\n        if (native === target) {\n            return tNode.index;\n        }\n        tNode = traverseNextElement(tNode);\n    }\n    return -1;\n}\n/**\n * Locates the next tNode (child, sibling or parent).\n * @param {?} tNode\n * @return {?}\n */\nfunction traverseNextElement(tNode) {\n    if (tNode.child) {\n        return tNode.child;\n    }\n    else if (tNode.next) {\n        return tNode.next;\n    }\n    else if (tNode.parent) {\n        return tNode.parent.next || null;\n    }\n    return null;\n}\n/**\n * Locates the component within the given LView and returns the matching index\n * @param {?} lView\n * @param {?} componentInstance\n * @return {?}\n */\nfunction findViaComponent(lView, componentInstance) {\n    /** @type {?} */\n    var componentIndices = lView[TVIEW].components;\n    if (componentIndices) {\n        for (var i = 0; i < componentIndices.length; i++) {\n            /** @type {?} */\n            var elementComponentIndex = componentIndices[i];\n            /** @type {?} */\n            var componentView = getComponentViewByIndex(elementComponentIndex, lView);\n            if (componentView[CONTEXT] === componentInstance) {\n                return elementComponentIndex;\n            }\n        }\n    }\n    else {\n        /** @type {?} */\n        var rootComponentView = getComponentViewByIndex(HEADER_OFFSET, lView);\n        /** @type {?} */\n        var rootComponent = rootComponentView[CONTEXT];\n        if (rootComponent === componentInstance) {\n            // we are dealing with the root element here therefore we know that the\n            // element is the very first element after the HEADER data in the lView\n            return HEADER_OFFSET;\n        }\n    }\n    return -1;\n}\n/**\n * Locates the directive within the given LView and returns the matching index\n * @param {?} lView\n * @param {?} directiveInstance\n * @return {?}\n */\nfunction findViaDirective(lView, directiveInstance) {\n    /** @type {?} */\n    var tNode = lView[TVIEW].firstChild;\n    while (tNode) {\n        /** @type {?} */\n        var directiveIndexStart = getDirectiveStartIndex(tNode);\n        /** @type {?} */\n        var directiveIndexEnd = getDirectiveEndIndex(tNode, directiveIndexStart);\n        for (var i = directiveIndexStart; i < directiveIndexEnd; i++) {\n            if (lView[i] === directiveInstance) {\n                return tNode.index;\n            }\n        }\n        tNode = traverseNextElement(tNode);\n    }\n    return -1;\n}\n/**\n * Returns a list of directives extracted from the given view based on the\n * provided list of directive index values.\n *\n * @param {?} nodeIndex The node index\n * @param {?} lView The target view data\n * @param {?} includeComponents Whether or not to include components in returned directives\n * @return {?}\n */\nexport function getDirectivesAtNodeIndex(nodeIndex, lView, includeComponents) {\n    /** @type {?} */\n    var tNode = /** @type {?} */ (lView[TVIEW].data[nodeIndex]);\n    /** @type {?} */\n    var directiveStartIndex = getDirectiveStartIndex(tNode);\n    if (directiveStartIndex == 0)\n        return EMPTY_ARRAY;\n    /** @type {?} */\n    var directiveEndIndex = getDirectiveEndIndex(tNode, directiveStartIndex);\n    if (!includeComponents && tNode.flags & 4096 /* isComponent */)\n        directiveStartIndex++;\n    return lView.slice(directiveStartIndex, directiveEndIndex);\n}\n/**\n * @param {?} nodeIndex\n * @param {?} lView\n * @return {?}\n */\nexport function getComponentAtNodeIndex(nodeIndex, lView) {\n    /** @type {?} */\n    var tNode = /** @type {?} */ (lView[TVIEW].data[nodeIndex]);\n    /** @type {?} */\n    var directiveStartIndex = getDirectiveStartIndex(tNode);\n    return tNode.flags & 4096 /* isComponent */ ? lView[directiveStartIndex] : null;\n}\n/**\n * Returns a map of local references (local reference name => element or directive instance) that\n * exist on a given element.\n * @param {?} lView\n * @param {?} nodeIndex\n * @return {?}\n */\nexport function discoverLocalRefs(lView, nodeIndex) {\n    /** @type {?} */\n    var tNode = /** @type {?} */ (lView[TVIEW].data[nodeIndex]);\n    if (tNode && tNode.localNames) {\n        /** @type {?} */\n        var result = {};\n        for (var i = 0; i < tNode.localNames.length; i += 2) {\n            /** @type {?} */\n            var localRefName = tNode.localNames[i];\n            /** @type {?} */\n            var directiveIndex = /** @type {?} */ (tNode.localNames[i + 1]);\n            result[localRefName] =\n                directiveIndex === -1 ? /** @type {?} */ ((getNativeByTNode(tNode, lView))) : lView[directiveIndex];\n        }\n        return result;\n    }\n    return null;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction getDirectiveStartIndex(tNode) {\n    // the tNode instances store a flag value which then has a\n    // pointer which tells the starting index of where all the\n    // active directives are in the master directive array\n    return tNode.flags >> 16 /* DirectiveStartingIndexShift */;\n}\n/**\n * @param {?} tNode\n * @param {?} startIndex\n * @return {?}\n */\nfunction getDirectiveEndIndex(tNode, startIndex) {\n    /** @type {?} */\n    var count = tNode.flags & 4095 /* DirectiveCountMask */;\n    return count ? (startIndex + count) : -1;\n}\n//# sourceMappingURL=context_discovery.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {...?} args\n * @return {?}\n */\nexport function noop() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    // Do nothing.\n}\n//# sourceMappingURL=noop.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { stringify } from '../util';\nimport { getClosureSafeProperty } from '../util/property';\n/**\n * An interface that a function passed into {\\@link forwardRef} has to implement.\n *\n * \\@usageNotes\n * ### Example\n *\n * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref_fn'}\n * \\@publicApi\n * @record\n */\nexport function ForwardRefFn() { }\n/** @type {?} */\nvar __forward_ref__ = getClosureSafeProperty({ __forward_ref__: getClosureSafeProperty });\n/**\n * Allows to refer to references which are not yet defined.\n *\n * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n * DI is declared, but not yet defined. It is also used when the `token` which we use when creating\n * a query is not yet defined.\n *\n * \\@usageNotes\n * ### Example\n * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n * \\@publicApi\n * @param {?} forwardRefFn\n * @return {?}\n */\nexport function forwardRef(forwardRefFn) {\n    (/** @type {?} */ (forwardRefFn)).__forward_ref__ = forwardRef;\n    (/** @type {?} */ (forwardRefFn)).toString = function () { return stringify(this()); };\n    return (/** @type {?} */ (/** @type {?} */ (forwardRefFn)));\n}\n/**\n * Lazily retrieves the reference value from a forwardRef.\n *\n * Acts as the identity function when given a non-forward-ref value.\n *\n * \\@usageNotes\n * ### Example\n *\n * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n *\n * @see `forwardRef`\n * \\@publicApi\n * @template T\n * @param {?} type\n * @return {?}\n */\nexport function resolveForwardRef(type) {\n    /** @type {?} */\n    var fn = type;\n    if (typeof fn === 'function' && fn.hasOwnProperty(__forward_ref__) &&\n        fn.__forward_ref__ === forwardRef) {\n        return fn();\n    }\n    else {\n        return type;\n    }\n}\n//# sourceMappingURL=forward_ref.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { injectInjector } from '../render3/di';\nimport { stringify } from '../util';\nimport { noop } from '../util/noop';\nimport { getClosureSafeProperty } from '../util/property';\nimport { defineInjectable } from './defs';\nimport { resolveForwardRef } from './forward_ref';\nimport { InjectionToken } from './injection_token';\nimport { InjectFlags, inject } from './injector_compatibility';\nimport { Inject, Optional, Self, SkipSelf } from './metadata';\n/** @type {?} */\nexport var SOURCE = '__source';\n/** @type {?} */\nvar _THROW_IF_NOT_FOUND = new Object();\n/** @type {?} */\nexport var THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n/** *\n * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.\n *\n * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a\n * project.\n *\n * \\@publicApi\n  @type {?} */\nexport var INJECTOR = new InjectionToken('INJECTOR');\nvar NullInjector = /** @class */ (function () {\n    function NullInjector() {\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    NullInjector.prototype.get = /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    function (token, notFoundValue) {\n        if (notFoundValue === void 0) { notFoundValue = _THROW_IF_NOT_FOUND; }\n        if (notFoundValue === _THROW_IF_NOT_FOUND) {\n            // Intentionally left behind: With dev tools open the debugger will stop here. There is no\n            // reason why correctly written application should cause this exception.\n            // TODO(misko): uncomment the next line once `ngDevMode` works with closure.\n            // if(ngDevMode) debugger;\n            throw new Error(\"NullInjectorError: No provider for \" + stringify(token) + \"!\");\n        }\n        return notFoundValue;\n    };\n    return NullInjector;\n}());\nexport { NullInjector };\n/**\n * Concrete injectors implement this interface.\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * \\@usageNotes\n * ### Example\n *\n * {\\@example core/di/ts/injector_spec.ts region='Injector'}\n *\n * `Injector` returns itself when given `Injector` as a token:\n *\n * {\\@example core/di/ts/injector_spec.ts region='injectInjector'}\n *\n * \\@publicApi\n * @abstract\n */\nvar Injector = /** @class */ (function () {\n    function Injector() {\n    }\n    /**\n     * Create a new Injector which is configure using `StaticProvider`s.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n     */\n    /**\n     * Create a new Injector which is configure using `StaticProvider`s.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * {\\@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n     * @param {?} options\n     * @param {?=} parent\n     * @return {?}\n     */\n    Injector.create = /**\n     * Create a new Injector which is configure using `StaticProvider`s.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * {\\@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n     * @param {?} options\n     * @param {?=} parent\n     * @return {?}\n     */\n    function (options, parent) {\n        if (Array.isArray(options)) {\n            return new StaticInjector(options, parent);\n        }\n        else {\n            return new StaticInjector(options.providers, options.parent, options.name || null);\n        }\n    };\n    Injector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n    Injector.NULL = new NullInjector();\n    /** @nocollapse */\n    /** @nocollapse */ Injector.ngInjectableDef = defineInjectable({\n        providedIn: /** @type {?} */ ('any'),\n        factory: function () { return inject(INJECTOR); },\n    });\n    /**\n     * \\@internal\n     */\n    Injector.__NG_ELEMENT_ID__ = function () { return SWITCH_INJECTOR_FACTORY(); };\n    return Injector;\n}());\nexport { Injector };\nif (false) {\n    /** @type {?} */\n    Injector.THROW_IF_NOT_FOUND;\n    /** @type {?} */\n    Injector.NULL;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    Injector.ngInjectableDef;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    Injector.__NG_ELEMENT_ID__;\n    /**\n     * Retrieves an instance from the injector based on the provided token.\n     * @throws When the `notFoundValue` is `undefined` or `Injector.THROW_IF_NOT_FOUND`.\n     * @abstract\n     * @template T\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} flags\n     * @return {?} The instance from the injector if defined, otherwise the `notFoundValue`.\n     */\n    Injector.prototype.get = function (token, notFoundValue, flags) { };\n    /**\n     * @deprecated from v4.0.0 use Type<T> or InjectionToken<T>\n     * @suppress {duplicate}\n     * @abstract\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    Injector.prototype.get = function (token, notFoundValue) { };\n}\n/** @type {?} */\nexport var SWITCH_INJECTOR_FACTORY__POST_R3__ = function () {\n    return injectInjector();\n};\n/** @type {?} */\nvar SWITCH_INJECTOR_FACTORY__PRE_R3__ = noop;\n/** @type {?} */\nvar SWITCH_INJECTOR_FACTORY = SWITCH_INJECTOR_FACTORY__PRE_R3__;\n/** @type {?} */\nvar IDENT = function (value) {\n    return value;\n};\nvar Éµ0 = IDENT;\n/** @type {?} */\nvar EMPTY = /** @type {?} */ ([]);\n/** @type {?} */\nvar CIRCULAR = IDENT;\n/** @type {?} */\nvar MULTI_PROVIDER_FN = function () {\n    return Array.prototype.slice.call(arguments);\n};\nvar Éµ1 = MULTI_PROVIDER_FN;\n/** @type {?} */\nexport var USE_VALUE = getClosureSafeProperty({ provide: String, useValue: getClosureSafeProperty });\n/** @type {?} */\nvar NG_TOKEN_PATH = 'ngTokenPath';\n/** @type {?} */\nvar NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';\n/** @enum {number} */\nvar OptionFlags = {\n    Optional: 1,\n    CheckSelf: 2,\n    CheckParent: 4,\n    Default: 6,\n};\n/** @type {?} */\nvar NULL_INJECTOR = Injector.NULL;\n/** @type {?} */\nvar NEW_LINE = /\\n/gm;\n/** @type {?} */\nvar NO_NEW_LINE = 'Éµ';\nvar StaticInjector = /** @class */ (function () {\n    function StaticInjector(providers, parent, source) {\n        if (parent === void 0) { parent = NULL_INJECTOR; }\n        if (source === void 0) { source = null; }\n        this.parent = parent;\n        this.source = source;\n        /** @type {?} */\n        var records = this._records = new Map();\n        records.set(Injector, /** @type {?} */ ({ token: Injector, fn: IDENT, deps: EMPTY, value: this, useNew: false }));\n        records.set(INJECTOR, /** @type {?} */ ({ token: INJECTOR, fn: IDENT, deps: EMPTY, value: this, useNew: false }));\n        recursivelyProcessProviders(records, providers);\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} flags\n     * @return {?}\n     */\n    StaticInjector.prototype.get = /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} flags\n     * @return {?}\n     */\n    function (token, notFoundValue, flags) {\n        if (flags === void 0) { flags = InjectFlags.Default; }\n        /** @type {?} */\n        var record = this._records.get(token);\n        try {\n            return tryResolveToken(token, record, this._records, this.parent, notFoundValue, flags);\n        }\n        catch (e) {\n            /** @type {?} */\n            var tokenPath = e[NG_TEMP_TOKEN_PATH];\n            if (token[SOURCE]) {\n                tokenPath.unshift(token[SOURCE]);\n            }\n            e.message = formatError('\\n' + e.message, tokenPath, this.source);\n            e[NG_TOKEN_PATH] = tokenPath;\n            e[NG_TEMP_TOKEN_PATH] = null;\n            throw e;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    StaticInjector.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var tokens = /** @type {?} */ ([]);\n        /** @type {?} */\n        var records = this._records;\n        records.forEach(function (v, token) { return tokens.push(stringify(token)); });\n        return \"StaticInjector[\" + tokens.join(', ') + \"]\";\n    };\n    return StaticInjector;\n}());\nexport { StaticInjector };\nif (false) {\n    /** @type {?} */\n    StaticInjector.prototype.parent;\n    /** @type {?} */\n    StaticInjector.prototype.source;\n    /** @type {?} */\n    StaticInjector.prototype._records;\n}\n/** @typedef {?} */\nvar SupportedProvider;\n/**\n * @record\n */\nfunction Record() { }\n/** @type {?} */\nRecord.prototype.fn;\n/** @type {?} */\nRecord.prototype.useNew;\n/** @type {?} */\nRecord.prototype.deps;\n/** @type {?} */\nRecord.prototype.value;\n/**\n * @record\n */\nfunction DependencyRecord() { }\n/** @type {?} */\nDependencyRecord.prototype.token;\n/** @type {?} */\nDependencyRecord.prototype.options;\n/** @typedef {?} */\nvar TokenPath;\n/**\n * @param {?} provider\n * @return {?}\n */\nfunction resolveProvider(provider) {\n    /** @type {?} */\n    var deps = computeDeps(provider);\n    /** @type {?} */\n    var fn = IDENT;\n    /** @type {?} */\n    var value = EMPTY;\n    /** @type {?} */\n    var useNew = false;\n    /** @type {?} */\n    var provide = resolveForwardRef(provider.provide);\n    if (USE_VALUE in provider) {\n        // We need to use USE_VALUE in provider since provider.useValue could be defined as undefined.\n        value = (/** @type {?} */ (provider)).useValue;\n    }\n    else if ((/** @type {?} */ (provider)).useFactory) {\n        fn = (/** @type {?} */ (provider)).useFactory;\n    }\n    else if ((/** @type {?} */ (provider)).useExisting) {\n        // Just use IDENT\n    }\n    else if ((/** @type {?} */ (provider)).useClass) {\n        useNew = true;\n        fn = resolveForwardRef((/** @type {?} */ (provider)).useClass);\n    }\n    else if (typeof provide == 'function') {\n        useNew = true;\n        fn = provide;\n    }\n    else {\n        throw staticError('StaticProvider does not have [useValue|useFactory|useExisting|useClass] or [provide] is not newable', provider);\n    }\n    return { deps: deps, fn: fn, useNew: useNew, value: value };\n}\n/**\n * @param {?} token\n * @return {?}\n */\nfunction multiProviderMixError(token) {\n    return staticError('Cannot mix multi providers and regular providers', token);\n}\n/**\n * @param {?} records\n * @param {?} provider\n * @return {?}\n */\nfunction recursivelyProcessProviders(records, provider) {\n    if (provider) {\n        provider = resolveForwardRef(provider);\n        if (provider instanceof Array) {\n            // if we have an array recurse into the array\n            for (var i = 0; i < provider.length; i++) {\n                recursivelyProcessProviders(records, provider[i]);\n            }\n        }\n        else if (typeof provider === 'function') {\n            // Functions were supported in ReflectiveInjector, but are not here. For safety give useful\n            // error messages\n            throw staticError('Function/Class not supported', provider);\n        }\n        else if (provider && typeof provider === 'object' && provider.provide) {\n            /** @type {?} */\n            var token = resolveForwardRef(provider.provide);\n            /** @type {?} */\n            var resolvedProvider = resolveProvider(provider);\n            if (provider.multi === true) {\n                /** @type {?} */\n                var multiProvider = records.get(token);\n                if (multiProvider) {\n                    if (multiProvider.fn !== MULTI_PROVIDER_FN) {\n                        throw multiProviderMixError(token);\n                    }\n                }\n                else {\n                    // Create a placeholder factory which will look up the constituents of the multi provider.\n                    records.set(token, multiProvider = /** @type {?} */ ({\n                        token: provider.provide,\n                        deps: [],\n                        useNew: false,\n                        fn: MULTI_PROVIDER_FN,\n                        value: EMPTY\n                    }));\n                }\n                // Treat the provider as the token.\n                token = provider;\n                multiProvider.deps.push({ token: token, options: 6 /* Default */ });\n            }\n            /** @type {?} */\n            var record = records.get(token);\n            if (record && record.fn == MULTI_PROVIDER_FN) {\n                throw multiProviderMixError(token);\n            }\n            records.set(token, resolvedProvider);\n        }\n        else {\n            throw staticError('Unexpected provider', provider);\n        }\n    }\n}\n/**\n * @param {?} token\n * @param {?} record\n * @param {?} records\n * @param {?} parent\n * @param {?} notFoundValue\n * @param {?} flags\n * @return {?}\n */\nfunction tryResolveToken(token, record, records, parent, notFoundValue, flags) {\n    try {\n        return resolveToken(token, record, records, parent, notFoundValue, flags);\n    }\n    catch (e) {\n        // ensure that 'e' is of type Error.\n        if (!(e instanceof Error)) {\n            e = new Error(e);\n        }\n        /** @type {?} */\n        var path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];\n        path.unshift(token);\n        if (record && record.value == CIRCULAR) {\n            // Reset the Circular flag.\n            record.value = EMPTY;\n        }\n        throw e;\n    }\n}\n/**\n * @param {?} token\n * @param {?} record\n * @param {?} records\n * @param {?} parent\n * @param {?} notFoundValue\n * @param {?} flags\n * @return {?}\n */\nfunction resolveToken(token, record, records, parent, notFoundValue, flags) {\n    var _a;\n    /** @type {?} */\n    var value;\n    if (record && !(flags & InjectFlags.SkipSelf)) {\n        // If we don't have a record, this implies that we don't own the provider hence don't know how\n        // to resolve it.\n        value = record.value;\n        if (value == CIRCULAR) {\n            throw Error(NO_NEW_LINE + 'Circular dependency');\n        }\n        else if (value === EMPTY) {\n            record.value = CIRCULAR;\n            /** @type {?} */\n            var obj = undefined;\n            /** @type {?} */\n            var useNew = record.useNew;\n            /** @type {?} */\n            var fn = record.fn;\n            /** @type {?} */\n            var depRecords = record.deps;\n            /** @type {?} */\n            var deps = EMPTY;\n            if (depRecords.length) {\n                deps = [];\n                for (var i = 0; i < depRecords.length; i++) {\n                    /** @type {?} */\n                    var depRecord = depRecords[i];\n                    /** @type {?} */\n                    var options = depRecord.options;\n                    /** @type {?} */\n                    var childRecord = options & 2 /* CheckSelf */ ? records.get(depRecord.token) : undefined;\n                    deps.push(tryResolveToken(\n                    // Current Token to resolve\n                    depRecord.token, childRecord, records, \n                    // If we don't know how to resolve dependency and we should not check parent for it,\n                    // than pass in Null injector.\n                    !childRecord && !(options & 4 /* CheckParent */) ? NULL_INJECTOR : parent, options & 1 /* Optional */ ? null : Injector.THROW_IF_NOT_FOUND, InjectFlags.Default));\n                }\n            }\n            record.value = value = useNew ? new ((_a = (/** @type {?} */ (fn))).bind.apply(_a, [void 0].concat(deps)))() : fn.apply(obj, deps);\n        }\n    }\n    else if (!(flags & InjectFlags.Self)) {\n        value = parent.get(token, notFoundValue, InjectFlags.Default);\n    }\n    return value;\n}\n/**\n * @param {?} provider\n * @return {?}\n */\nfunction computeDeps(provider) {\n    /** @type {?} */\n    var deps = EMPTY;\n    /** @type {?} */\n    var providerDeps = (/** @type {?} */ (provider)).deps;\n    if (providerDeps && providerDeps.length) {\n        deps = [];\n        for (var i = 0; i < providerDeps.length; i++) {\n            /** @type {?} */\n            var options = 6 /* Default */;\n            /** @type {?} */\n            var token = resolveForwardRef(providerDeps[i]);\n            if (token instanceof Array) {\n                for (var j = 0, annotations = token; j < annotations.length; j++) {\n                    /** @type {?} */\n                    var annotation = annotations[j];\n                    if (annotation instanceof Optional || annotation == Optional) {\n                        options = options | 1 /* Optional */;\n                    }\n                    else if (annotation instanceof SkipSelf || annotation == SkipSelf) {\n                        options = options & ~2 /* CheckSelf */;\n                    }\n                    else if (annotation instanceof Self || annotation == Self) {\n                        options = options & ~4 /* CheckParent */;\n                    }\n                    else if (annotation instanceof Inject) {\n                        token = (/** @type {?} */ (annotation)).token;\n                    }\n                    else {\n                        token = resolveForwardRef(annotation);\n                    }\n                }\n            }\n            deps.push({ token: token, options: options });\n        }\n    }\n    else if ((/** @type {?} */ (provider)).useExisting) {\n        /** @type {?} */\n        var token = resolveForwardRef((/** @type {?} */ (provider)).useExisting);\n        deps = [{ token: token, options: 6 /* Default */ }];\n    }\n    else if (!providerDeps && !(USE_VALUE in provider)) {\n        // useValue & useExisting are the only ones which are exempt from deps all others need it.\n        throw staticError('\\'deps\\' required', provider);\n    }\n    return deps;\n}\n/**\n * @param {?} text\n * @param {?} obj\n * @param {?=} source\n * @return {?}\n */\nfunction formatError(text, obj, source) {\n    if (source === void 0) { source = null; }\n    text = text && text.charAt(0) === '\\n' && text.charAt(1) == NO_NEW_LINE ? text.substr(2) : text;\n    /** @type {?} */\n    var context = stringify(obj);\n    if (obj instanceof Array) {\n        context = obj.map(stringify).join(' -> ');\n    }\n    else if (typeof obj === 'object') {\n        /** @type {?} */\n        var parts = /** @type {?} */ ([]);\n        for (var key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                /** @type {?} */\n                var value = obj[key];\n                parts.push(key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)));\n            }\n        }\n        context = \"{\" + parts.join(', ') + \"}\";\n    }\n    return \"StaticInjectorError\" + (source ? '(' + source + ')' : '') + \"[\" + context + \"]: \" + text.replace(NEW_LINE, '\\n  ');\n}\n/**\n * @param {?} text\n * @param {?} obj\n * @return {?}\n */\nfunction staticError(text, obj) {\n    return new Error(formatError(text, obj));\n}\nexport { Éµ0, Éµ1 };\n//# sourceMappingURL=injector.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} name\n * @return {?}\n */\nexport function normalizeDebugBindingName(name) {\n    // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers\n    name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));\n    return \"ng-reflect-\" + name;\n}\n/** @type {?} */\nvar CAMEL_CASE_REGEXP = /([A-Z])/g;\n/**\n * @param {?} input\n * @return {?}\n */\nfunction camelCaseToDashCase(input) {\n    return input.replace(CAMEL_CASE_REGEXP, function () {\n        var m = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            m[_i] = arguments[_i];\n        }\n        return '-' + m[1].toLowerCase();\n    });\n}\n/**\n * @param {?} value\n * @return {?}\n */\nexport function normalizeDebugBindingValue(value) {\n    try {\n        // Limit the size of the value as otherwise the DOM just gets polluted.\n        return value != null ? value.toString().slice(0, 30) : value;\n    }\n    catch (e) {\n        return '[ERROR] Exception while trying to serialize the value';\n    }\n}\n//# sourceMappingURL=ng_reflect.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getSymbolIterator, looseIdentical } from '../util';\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nexport function devModeEqual(a, b) {\n    /** @type {?} */\n    var isListLikeIterableA = isListLikeIterable(a);\n    /** @type {?} */\n    var isListLikeIterableB = isListLikeIterable(b);\n    if (isListLikeIterableA && isListLikeIterableB) {\n        return areIterablesEqual(a, b, devModeEqual);\n    }\n    else {\n        /** @type {?} */\n        var isAObject = a && (typeof a === 'object' || typeof a === 'function');\n        /** @type {?} */\n        var isBObject = b && (typeof b === 'object' || typeof b === 'function');\n        if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {\n            return true;\n        }\n        else {\n            return looseIdentical(a, b);\n        }\n    }\n}\n/**\n * Indicates that the result of a {\\@link Pipe} transformation has changed even though the\n * reference has not changed.\n *\n * Wrapped values are unwrapped automatically during the change detection, and the unwrapped value\n * is stored.\n *\n * Example:\n *\n * ```\n * if (this._latestValue === this._latestReturnedValue) {\n *    return this._latestReturnedValue;\n *  } else {\n *    this._latestReturnedValue = this._latestValue;\n *    return WrappedValue.wrap(this._latestValue); // this will force update\n *  }\n * ```\n *\n * \\@publicApi\n */\nvar /**\n * Indicates that the result of a {\\@link Pipe} transformation has changed even though the\n * reference has not changed.\n *\n * Wrapped values are unwrapped automatically during the change detection, and the unwrapped value\n * is stored.\n *\n * Example:\n *\n * ```\n * if (this._latestValue === this._latestReturnedValue) {\n *    return this._latestReturnedValue;\n *  } else {\n *    this._latestReturnedValue = this._latestValue;\n *    return WrappedValue.wrap(this._latestValue); // this will force update\n *  }\n * ```\n *\n * \\@publicApi\n */\nWrappedValue = /** @class */ (function () {\n    function WrappedValue(value) {\n        this.wrapped = value;\n    }\n    /** Creates a wrapped value. */\n    /**\n     * Creates a wrapped value.\n     * @param {?} value\n     * @return {?}\n     */\n    WrappedValue.wrap = /**\n     * Creates a wrapped value.\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) { return new WrappedValue(value); };\n    /**\n     * Returns the underlying value of a wrapped value.\n     * Returns the given `value` when it is not wrapped.\n     **/\n    /**\n     * Returns the underlying value of a wrapped value.\n     * Returns the given `value` when it is not wrapped.\n     *\n     * @param {?} value\n     * @return {?}\n     */\n    WrappedValue.unwrap = /**\n     * Returns the underlying value of a wrapped value.\n     * Returns the given `value` when it is not wrapped.\n     *\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) { return WrappedValue.isWrapped(value) ? value.wrapped : value; };\n    /** Returns true if `value` is a wrapped value. */\n    /**\n     * Returns true if `value` is a wrapped value.\n     * @param {?} value\n     * @return {?}\n     */\n    WrappedValue.isWrapped = /**\n     * Returns true if `value` is a wrapped value.\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) { return value instanceof WrappedValue; };\n    return WrappedValue;\n}());\n/**\n * Indicates that the result of a {\\@link Pipe} transformation has changed even though the\n * reference has not changed.\n *\n * Wrapped values are unwrapped automatically during the change detection, and the unwrapped value\n * is stored.\n *\n * Example:\n *\n * ```\n * if (this._latestValue === this._latestReturnedValue) {\n *    return this._latestReturnedValue;\n *  } else {\n *    this._latestReturnedValue = this._latestValue;\n *    return WrappedValue.wrap(this._latestValue); // this will force update\n *  }\n * ```\n *\n * \\@publicApi\n */\nexport { WrappedValue };\nif (false) {\n    /**\n     * @deprecated from 5.3, use `unwrap()` instead - will switch to protected\n     * @type {?}\n     */\n    WrappedValue.prototype.wrapped;\n}\n/**\n * Represents a basic change from a previous to a new value.\n *\n * \\@publicApi\n */\nvar /**\n * Represents a basic change from a previous to a new value.\n *\n * \\@publicApi\n */\nSimpleChange = /** @class */ (function () {\n    function SimpleChange(previousValue, currentValue, firstChange) {\n        this.previousValue = previousValue;\n        this.currentValue = currentValue;\n        this.firstChange = firstChange;\n    }\n    /**\n     * Check whether the new value is the first value assigned.\n     */\n    /**\n     * Check whether the new value is the first value assigned.\n     * @return {?}\n     */\n    SimpleChange.prototype.isFirstChange = /**\n     * Check whether the new value is the first value assigned.\n     * @return {?}\n     */\n    function () { return this.firstChange; };\n    return SimpleChange;\n}());\n/**\n * Represents a basic change from a previous to a new value.\n *\n * \\@publicApi\n */\nexport { SimpleChange };\nif (false) {\n    /** @type {?} */\n    SimpleChange.prototype.previousValue;\n    /** @type {?} */\n    SimpleChange.prototype.currentValue;\n    /** @type {?} */\n    SimpleChange.prototype.firstChange;\n}\n/**\n * @param {?} obj\n * @return {?}\n */\nexport function isListLikeIterable(obj) {\n    if (!isJsObject(obj))\n        return false;\n    return Array.isArray(obj) ||\n        (!(obj instanceof Map) && // JS Map are iterables but return entries as [k, v]\n            // JS Map are iterables but return entries as [k, v]\n            getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop\n}\n/**\n * @param {?} a\n * @param {?} b\n * @param {?} comparator\n * @return {?}\n */\nexport function areIterablesEqual(a, b, comparator) {\n    /** @type {?} */\n    var iterator1 = a[getSymbolIterator()]();\n    /** @type {?} */\n    var iterator2 = b[getSymbolIterator()]();\n    while (true) {\n        /** @type {?} */\n        var item1 = iterator1.next();\n        /** @type {?} */\n        var item2 = iterator2.next();\n        if (item1.done && item2.done)\n            return true;\n        if (item1.done || item2.done)\n            return false;\n        if (!comparator(item1.value, item2.value))\n            return false;\n    }\n}\n/**\n * @param {?} obj\n * @param {?} fn\n * @return {?}\n */\nexport function iterateListLike(obj, fn) {\n    if (Array.isArray(obj)) {\n        for (var i = 0; i < obj.length; i++) {\n            fn(obj[i]);\n        }\n    }\n    else {\n        /** @type {?} */\n        var iterator = obj[getSymbolIterator()]();\n        /** @type {?} */\n        var item = void 0;\n        while (!((item = iterator.next()).done)) {\n            fn(item.value);\n        }\n    }\n}\n/**\n * @param {?} o\n * @return {?}\n */\nexport function isJsObject(o) {\n    return o !== null && (typeof o === 'function' || typeof o === 'object');\n}\n//# sourceMappingURL=change_detection_util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { devModeEqual } from '../change_detection/change_detection_util';\nimport { assertDataInRange, assertLessThan, assertNotEqual } from './assert';\nimport { throwErrorIfNoChangesMode } from './errors';\nimport { getCheckNoChangesMode, getCreationMode } from './state';\nimport { NO_CHANGE } from './tokens';\nimport { isDifferent } from './util';\n/**\n * Updates binding and returns the value.\n * @param {?} lView\n * @param {?} bindingIndex\n * @param {?} value\n * @return {?}\n */\nexport function updateBinding(lView, bindingIndex, value) {\n    return lView[bindingIndex] = value;\n}\n/**\n * Gets the current binding value.\n * @param {?} lView\n * @param {?} bindingIndex\n * @return {?}\n */\nexport function getBinding(lView, bindingIndex) {\n    ngDevMode && assertDataInRange(lView, lView[bindingIndex]);\n    ngDevMode &&\n        assertNotEqual(lView[bindingIndex], NO_CHANGE, 'Stored value should never be NO_CHANGE.');\n    return lView[bindingIndex];\n}\n/**\n * Updates binding if changed, then returns whether it was updated.\n * @param {?} lView\n * @param {?} bindingIndex\n * @param {?} value\n * @return {?}\n */\nexport function bindingUpdated(lView, bindingIndex, value) {\n    ngDevMode && assertNotEqual(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');\n    ngDevMode &&\n        assertLessThan(bindingIndex, lView.length, \"Slot should have been initialized to NO_CHANGE\");\n    if (lView[bindingIndex] === NO_CHANGE) {\n        // initial pass\n        lView[bindingIndex] = value;\n    }\n    else if (isDifferent(lView[bindingIndex], value)) {\n        if (ngDevMode && getCheckNoChangesMode()) {\n            if (!devModeEqual(lView[bindingIndex], value)) {\n                throwErrorIfNoChangesMode(getCreationMode(), lView[bindingIndex], value);\n            }\n        }\n        lView[bindingIndex] = value;\n    }\n    else {\n        return false;\n    }\n    return true;\n}\n/**\n * Updates 2 bindings if changed, then returns whether either was updated.\n * @param {?} lView\n * @param {?} bindingIndex\n * @param {?} exp1\n * @param {?} exp2\n * @return {?}\n */\nexport function bindingUpdated2(lView, bindingIndex, exp1, exp2) {\n    /** @type {?} */\n    var different = bindingUpdated(lView, bindingIndex, exp1);\n    return bindingUpdated(lView, bindingIndex + 1, exp2) || different;\n}\n/**\n * Updates 3 bindings if changed, then returns whether any was updated.\n * @param {?} lView\n * @param {?} bindingIndex\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @return {?}\n */\nexport function bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) {\n    /** @type {?} */\n    var different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\n    return bindingUpdated(lView, bindingIndex + 2, exp3) || different;\n}\n/**\n * Updates 4 bindings if changed, then returns whether any was updated.\n * @param {?} lView\n * @param {?} bindingIndex\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @return {?}\n */\nexport function bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) {\n    /** @type {?} */\n    var different = bindingUpdated2(lView, bindingIndex, exp1, exp2);\n    return bindingUpdated2(lView, bindingIndex + 2, exp3, exp4) || different;\n}\n//# sourceMappingURL=bindings.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Called when directives inject each other (creating a circular dependency)\n * @param {?} token\n * @return {?}\n */\nexport function throwCyclicDependencyError(token) {\n    throw new Error(\"Cannot instantiate cyclic dependency! \" + token);\n}\n/**\n * Called when there are multiple component selectors that match a given node\n * @param {?} tNode\n * @return {?}\n */\nexport function throwMultipleComponentError(tNode) {\n    throw new Error(\"Multiple components match node with tagname \" + tNode.tagName);\n}\n/**\n * Throws an ExpressionChangedAfterChecked error if checkNoChanges mode is on.\n * @param {?} creationMode\n * @param {?} oldValue\n * @param {?} currValue\n * @return {?}\n */\nexport function throwErrorIfNoChangesMode(creationMode, oldValue, currValue) {\n    /** @type {?} */\n    var msg = \"ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '\" + oldValue + \"'. Current value: '\" + currValue + \"'.\";\n    if (creationMode) {\n        msg +=\n            \" It seems like the view has been created after its parent and its children have been dirty checked.\" +\n                \" Has it been created in a change detection hook ?\";\n    }\n    // TODO: include debug context\n    throw new Error(msg);\n}\n//# sourceMappingURL=errors.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nvar RendererStyleFlags3 = {\n    Important: 1,\n    DashCase: 2,\n};\nexport { RendererStyleFlags3 };\nRendererStyleFlags3[RendererStyleFlags3.Important] = 'Important';\nRendererStyleFlags3[RendererStyleFlags3.DashCase] = 'DashCase';\n/** @typedef {?} */\nvar Renderer3;\nexport { Renderer3 };\n/**\n * Object Oriented style of API needed to create elements and text nodes.\n *\n * This is the native browser API style, e.g. operations are methods on individual objects\n * like HTMLElement. With this style, no additional code is needed as a facade\n * (reducing payload size).\n *\n * @record\n */\nexport function ObjectOrientedRenderer3() { }\n/** @type {?} */\nObjectOrientedRenderer3.prototype.createComment;\n/** @type {?} */\nObjectOrientedRenderer3.prototype.createElement;\n/** @type {?} */\nObjectOrientedRenderer3.prototype.createElementNS;\n/** @type {?} */\nObjectOrientedRenderer3.prototype.createTextNode;\n/** @type {?} */\nObjectOrientedRenderer3.prototype.querySelector;\n/**\n * Returns whether the `renderer` is a `ProceduralRenderer3`\n * @param {?} renderer\n * @return {?}\n */\nexport function isProceduralRenderer(renderer) {\n    return !!((/** @type {?} */ (renderer)).listen);\n}\n/**\n * Procedural style of API needed to create elements and text nodes.\n *\n * In non-native browser environments (e.g. platforms such as web-workers), this is the\n * facade that enables element manipulation. This also facilitates backwards compatibility\n * with Renderer2.\n * @record\n */\nexport function ProceduralRenderer3() { }\n/** @type {?} */\nProceduralRenderer3.prototype.destroy;\n/** @type {?} */\nProceduralRenderer3.prototype.createComment;\n/** @type {?} */\nProceduralRenderer3.prototype.createElement;\n/** @type {?} */\nProceduralRenderer3.prototype.createText;\n/**\n * This property is allowed to be null / undefined,\n * in which case the view engine won't call it.\n * This is used as a performance optimization for production mode.\n * @type {?|undefined}\n */\nProceduralRenderer3.prototype.destroyNode;\n/** @type {?} */\nProceduralRenderer3.prototype.appendChild;\n/** @type {?} */\nProceduralRenderer3.prototype.insertBefore;\n/** @type {?} */\nProceduralRenderer3.prototype.removeChild;\n/** @type {?} */\nProceduralRenderer3.prototype.selectRootElement;\n/** @type {?} */\nProceduralRenderer3.prototype.parentNode;\n/** @type {?} */\nProceduralRenderer3.prototype.nextSibling;\n/** @type {?} */\nProceduralRenderer3.prototype.setAttribute;\n/** @type {?} */\nProceduralRenderer3.prototype.removeAttribute;\n/** @type {?} */\nProceduralRenderer3.prototype.addClass;\n/** @type {?} */\nProceduralRenderer3.prototype.removeClass;\n/** @type {?} */\nProceduralRenderer3.prototype.setStyle;\n/** @type {?} */\nProceduralRenderer3.prototype.removeStyle;\n/** @type {?} */\nProceduralRenderer3.prototype.setProperty;\n/** @type {?} */\nProceduralRenderer3.prototype.setValue;\n/** @type {?} */\nProceduralRenderer3.prototype.listen;\n/**\n * @record\n */\nexport function RendererFactory3() { }\n/** @type {?} */\nRendererFactory3.prototype.createRenderer;\n/** @type {?|undefined} */\nRendererFactory3.prototype.begin;\n/** @type {?|undefined} */\nRendererFactory3.prototype.end;\n/** @type {?} */\nexport var domRendererFactory3 = {\n    createRenderer: function (hostElement, rendererType) { return document; }\n};\n/**\n * Subset of API needed for appending elements and text nodes.\n * @record\n */\nexport function RNode() { }\n/** @type {?} */\nRNode.prototype.parentNode;\n/** @type {?} */\nRNode.prototype.nextSibling;\n/** @type {?} */\nRNode.prototype.removeChild;\n/**\n * Insert a child node.\n *\n * Used exclusively for adding View root nodes into ViewAnchor location.\n * @type {?}\n */\nRNode.prototype.insertBefore;\n/**\n * Append a child node.\n *\n * Used exclusively for building up DOM which are static (ie not View roots)\n * @type {?}\n */\nRNode.prototype.appendChild;\n/**\n * Subset of API needed for writing attributes, properties, and setting up\n * listeners on Element.\n * @record\n */\nexport function RElement() { }\n/** @type {?} */\nRElement.prototype.style;\n/** @type {?} */\nRElement.prototype.classList;\n/** @type {?} */\nRElement.prototype.className;\n/** @type {?} */\nRElement.prototype.setAttribute;\n/** @type {?} */\nRElement.prototype.removeAttribute;\n/** @type {?} */\nRElement.prototype.setAttributeNS;\n/** @type {?} */\nRElement.prototype.addEventListener;\n/** @type {?} */\nRElement.prototype.removeEventListener;\n/** @type {?|undefined} */\nRElement.prototype.setProperty;\n/**\n * @record\n */\nexport function RCssStyleDeclaration() { }\n/** @type {?} */\nRCssStyleDeclaration.prototype.removeProperty;\n/** @type {?} */\nRCssStyleDeclaration.prototype.setProperty;\n/**\n * @record\n */\nexport function RDomTokenList() { }\n/** @type {?} */\nRDomTokenList.prototype.add;\n/** @type {?} */\nRDomTokenList.prototype.remove;\n/**\n * @record\n */\nexport function RText() { }\n/** @type {?} */\nRText.prototype.textContent;\n/**\n * @record\n */\nexport function RComment() { }\n/** @type {?} */\nexport var unusedValueExportToPlacateAjd = 1;\n//# sourceMappingURL=renderer.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { assertDefined } from './assert';\nimport { attachPatchData } from './context_discovery';\nimport { callHooks } from './hooks';\nimport { NATIVE, RENDER_PARENT, VIEWS, unusedValueExportToPlacateAjd as unused1 } from './interfaces/container';\nimport { unusedValueExportToPlacateAjd as unused2 } from './interfaces/node';\nimport { unusedValueExportToPlacateAjd as unused3 } from './interfaces/projection';\nimport { isProceduralRenderer, unusedValueExportToPlacateAjd as unused4 } from './interfaces/renderer';\nimport { CLEANUP, CONTAINER_INDEX, FLAGS, HEADER_OFFSET, HOST_NODE, NEXT, PARENT, QUERIES, RENDERER, TVIEW, unusedValueExportToPlacateAjd as unused5 } from './interfaces/view';\nimport { assertNodeType } from './node_assert';\nimport { getNativeByTNode, isLContainer, isRootView, readElementValue, stringify } from './util';\n/** @type {?} */\nvar unusedValueToPlacateAjd = unused1 + unused2 + unused3 + unused4 + unused5;\n/**\n * Retrieves the parent element of a given node.\n * @param {?} tNode\n * @param {?} currentView\n * @return {?}\n */\nexport function getParentNative(tNode, currentView) {\n    if (tNode.parent == null) {\n        return getHostNative(currentView);\n    }\n    else {\n        /** @type {?} */\n        var parentTNode = getFirstParentNative(tNode);\n        return getNativeByTNode(parentTNode, currentView);\n    }\n}\n/**\n * Get the first parent of a node that isn't an IcuContainer TNode\n * @param {?} tNode\n * @return {?}\n */\nfunction getFirstParentNative(tNode) {\n    /** @type {?} */\n    var parent = tNode.parent;\n    while (parent && parent.type === 5 /* IcuContainer */) {\n        parent = parent.parent;\n    }\n    return /** @type {?} */ ((parent));\n}\n/**\n * Gets the host element given a view. Will return null if the current view is an embedded view,\n * which does not have a host element.\n * @param {?} currentView\n * @return {?}\n */\nexport function getHostNative(currentView) {\n    /** @type {?} */\n    var hostTNode = /** @type {?} */ (currentView[HOST_NODE]);\n    return hostTNode && hostTNode.type !== 2 /* View */ ?\n        (/** @type {?} */ (getNativeByTNode(hostTNode, /** @type {?} */ ((currentView[PARENT]))))) :\n        null;\n}\n/**\n * @param {?} tNode\n * @param {?} embeddedView\n * @return {?}\n */\nexport function getLContainer(tNode, embeddedView) {\n    if (tNode.index === -1) {\n        /** @type {?} */\n        var containerHostIndex = embeddedView[CONTAINER_INDEX];\n        return containerHostIndex > -1 ? /** @type {?} */ ((embeddedView[PARENT]))[containerHostIndex] : null;\n    }\n    else {\n        // This is a inline view node (e.g. embeddedViewStart)\n        return /** @type {?} */ (((embeddedView[PARENT]))[/** @type {?} */ ((tNode.parent)).index]);\n    }\n}\n/**\n * Retrieves render parent for a given view.\n * Might be null if a view is not yet attached to any container.\n * @param {?} tViewNode\n * @param {?} view\n * @return {?}\n */\nexport function getContainerRenderParent(tViewNode, view) {\n    /** @type {?} */\n    var container = getLContainer(tViewNode, view);\n    return container ? container[RENDER_PARENT] : null;\n}\n/** @enum {number} */\nvar WalkTNodeTreeAction = {\n    /** node insert in the native environment */\n    Insert: 0,\n    /** node detach from the native environment */\n    Detach: 1,\n    /** node destruction using the renderer's API */\n    Destroy: 2,\n};\n/** *\n * Stack used to keep track of projection nodes in walkTNodeTree.\n *\n * This is deliberately created outside of walkTNodeTree to avoid allocating\n * a new array each time the function is called. Instead the array will be\n * re-used by each invocation. This works because the function is not reentrant.\n  @type {?} */\nvar projectionNodeStack = [];\n/**\n * Walks a tree of TNodes, applying a transformation on the element nodes, either only on the first\n * one found, or on all of them.\n *\n * @param {?} viewToWalk the view to walk\n * @param {?} action identifies the action to be performed on the elements\n * @param {?} renderer the current renderer.\n * @param {?} renderParent Optional the render parent node to be set in all LContainers found,\n * required for action modes Insert and Destroy.\n * @param {?=} beforeNode Optional the node before which elements should be added, required for action\n * Insert.\n * @return {?}\n */\nfunction walkTNodeTree(viewToWalk, action, renderer, renderParent, beforeNode) {\n    /** @type {?} */\n    var rootTNode = /** @type {?} */ (viewToWalk[TVIEW].node);\n    /** @type {?} */\n    var projectionNodeIndex = -1;\n    /** @type {?} */\n    var currentView = viewToWalk;\n    /** @type {?} */\n    var tNode = /** @type {?} */ (rootTNode.child);\n    while (tNode) {\n        /** @type {?} */\n        var nextTNode = null;\n        if (tNode.type === 3 /* Element */) {\n            executeNodeAction(action, renderer, renderParent, getNativeByTNode(tNode, currentView), beforeNode);\n            /** @type {?} */\n            var nodeOrContainer = currentView[tNode.index];\n            if (isLContainer(nodeOrContainer)) {\n                // This element has an LContainer, and its comment needs to be handled\n                executeNodeAction(action, renderer, renderParent, nodeOrContainer[NATIVE], beforeNode);\n            }\n        }\n        else if (tNode.type === 0 /* Container */) {\n            /** @type {?} */\n            var lContainer = /** @type {?} */ (((currentView))[tNode.index]);\n            executeNodeAction(action, renderer, renderParent, lContainer[NATIVE], beforeNode);\n            if (renderParent)\n                lContainer[RENDER_PARENT] = renderParent;\n            if (lContainer[VIEWS].length) {\n                currentView = lContainer[VIEWS][0];\n                nextTNode = currentView[TVIEW].node;\n                // When the walker enters a container, then the beforeNode has to become the local native\n                // comment node.\n                beforeNode = lContainer[NATIVE];\n            }\n        }\n        else if (tNode.type === 1 /* Projection */) {\n            /** @type {?} */\n            var componentView = findComponentView(/** @type {?} */ ((currentView)));\n            /** @type {?} */\n            var componentHost = /** @type {?} */ (componentView[HOST_NODE]);\n            /** @type {?} */\n            var head = (/** @type {?} */ (componentHost.projection))[/** @type {?} */ (tNode.projection)];\n            // Must store both the TNode and the view because this projection node could be nested\n            // deeply inside embedded views, and we need to get back down to this particular nested view.\n            projectionNodeStack[++projectionNodeIndex] = tNode;\n            projectionNodeStack[++projectionNodeIndex] = /** @type {?} */ ((currentView));\n            if (head) {\n                currentView = /** @type {?} */ ((componentView[PARENT]));\n                nextTNode = /** @type {?} */ (currentView[TVIEW].data[head.index]);\n            }\n        }\n        else {\n            // Otherwise, this is a View or an ElementContainer\n            nextTNode = tNode.child;\n        }\n        if (nextTNode === null) {\n            // this last node was projected, we need to get back down to its projection node\n            if (tNode.next === null && (tNode.flags & 8192 /* isProjected */)) {\n                currentView = /** @type {?} */ (projectionNodeStack[projectionNodeIndex--]);\n                tNode = /** @type {?} */ (projectionNodeStack[projectionNodeIndex--]);\n            }\n            nextTNode = tNode.next;\n            /**\n                   * Find the next node in the TNode tree, taking into account the place where a node is\n                   * projected (in the shadow DOM) rather than where it comes from (in the light DOM).\n                   *\n                   * If there is no sibling node, then it goes to the next sibling of the parent node...\n                   * until it reaches rootNode (at which point null is returned).\n                   */\n            while (!nextTNode) {\n                // If parent is null, we're crossing the view boundary, so we should get the host TNode.\n                tNode = tNode.parent || currentView[TVIEW].node;\n                if (tNode === null || tNode === rootTNode)\n                    return null;\n                // When exiting a container, the beforeNode must be restored to the previous value\n                if (tNode.type === 0 /* Container */) {\n                    currentView = /** @type {?} */ ((currentView[PARENT]));\n                    beforeNode = currentView[tNode.index][NATIVE];\n                }\n                if (tNode.type === 2 /* View */ && currentView[NEXT]) {\n                    currentView = /** @type {?} */ (currentView[NEXT]);\n                    nextTNode = currentView[TVIEW].node;\n                }\n                else {\n                    nextTNode = tNode.next;\n                }\n            }\n        }\n        tNode = nextTNode;\n    }\n}\n/**\n * Given a current view, finds the nearest component's host (LElement).\n *\n * @param {?} lView LView for which we want a host element node\n * @return {?} The host node\n */\nexport function findComponentView(lView) {\n    /** @type {?} */\n    var rootTNode = lView[HOST_NODE];\n    while (rootTNode && rootTNode.type === 2 /* View */) {\n        ngDevMode && assertDefined(lView[PARENT], 'lView.parent');\n        lView = /** @type {?} */ ((lView[PARENT]));\n        rootTNode = lView[HOST_NODE];\n    }\n    return lView;\n}\n/**\n * NOTE: for performance reasons, the possible actions are inlined within the function instead of\n * being passed as an argument.\n * @param {?} action\n * @param {?} renderer\n * @param {?} parent\n * @param {?} node\n * @param {?=} beforeNode\n * @return {?}\n */\nfunction executeNodeAction(action, renderer, parent, node, beforeNode) {\n    if (action === 0 /* Insert */) {\n        isProceduralRenderer(/** @type {?} */ ((renderer))) ?\n            (/** @type {?} */ (renderer)).insertBefore(/** @type {?} */ ((parent)), node, /** @type {?} */ (beforeNode)) : /** @type {?} */ ((parent)).insertBefore(node, /** @type {?} */ (beforeNode), true);\n    }\n    else if (action === 1 /* Detach */) {\n        isProceduralRenderer(/** @type {?} */ ((renderer))) ?\n            (/** @type {?} */ (renderer)).removeChild(/** @type {?} */ ((parent)), node) : /** @type {?} */ ((parent)).removeChild(node);\n    }\n    else if (action === 2 /* Destroy */) {\n        ngDevMode && ngDevMode.rendererDestroyNode++; /** @type {?} */\n        (((/** @type {?} */ (renderer)).destroyNode))(node);\n    }\n}\n/**\n * @param {?} value\n * @param {?} renderer\n * @return {?}\n */\nexport function createTextNode(value, renderer) {\n    return isProceduralRenderer(renderer) ? renderer.createText(stringify(value)) :\n        renderer.createTextNode(stringify(value));\n}\n/**\n * @param {?} viewToWalk\n * @param {?} insertMode\n * @param {?=} beforeNode\n * @return {?}\n */\nexport function addRemoveViewFromContainer(viewToWalk, insertMode, beforeNode) {\n    /** @type {?} */\n    var renderParent = getContainerRenderParent(/** @type {?} */ (viewToWalk[TVIEW].node), viewToWalk);\n    ngDevMode && assertNodeType(/** @type {?} */ (viewToWalk[TVIEW].node), 2 /* View */);\n    if (renderParent) {\n        /** @type {?} */\n        var renderer = viewToWalk[RENDERER];\n        walkTNodeTree(viewToWalk, insertMode ? 0 /* Insert */ : 1 /* Detach */, renderer, renderParent, beforeNode);\n    }\n}\n/**\n * Traverses down and up the tree of views and containers to remove listeners and\n * call onDestroy callbacks.\n *\n * Notes:\n *  - Because it's used for onDestroy calls, it needs to be bottom-up.\n *  - Must process containers instead of their views to avoid splicing\n *  when views are destroyed and re-added.\n *  - Using a while loop because it's faster than recursion\n *  - Destroy only called on movement to sibling or movement to parent (laterally or up)\n *\n * @param {?} rootView The view to destroy\n * @return {?}\n */\nexport function destroyViewTree(rootView) {\n    // If the view has no children, we can clean it up and return early.\n    if (rootView[TVIEW].childIndex === -1) {\n        return cleanUpView(rootView);\n    }\n    /** @type {?} */\n    var viewOrContainer = getLViewChild(rootView);\n    while (viewOrContainer) {\n        /** @type {?} */\n        var next = null;\n        if (viewOrContainer.length >= HEADER_OFFSET) {\n            /** @type {?} */\n            var view = /** @type {?} */ (viewOrContainer);\n            if (view[TVIEW].childIndex > -1)\n                next = getLViewChild(view);\n        }\n        else {\n            /** @type {?} */\n            var container = /** @type {?} */ (viewOrContainer);\n            if (container[VIEWS].length)\n                next = container[VIEWS][0];\n        }\n        if (next == null) {\n            // Only clean up view when moving to the side or up, as destroy hooks\n            // should be called in order from the bottom up.\n            while (viewOrContainer && !/** @type {?} */ ((viewOrContainer))[NEXT] && viewOrContainer !== rootView) {\n                cleanUpView(viewOrContainer);\n                viewOrContainer = getParentState(viewOrContainer, rootView);\n            }\n            cleanUpView(viewOrContainer || rootView);\n            next = viewOrContainer && /** @type {?} */ ((viewOrContainer))[NEXT];\n        }\n        viewOrContainer = next;\n    }\n}\n/**\n * Inserts a view into a container.\n *\n * This adds the view to the container's array of active views in the correct\n * position. It also adds the view's elements to the DOM if the container isn't a\n * root node of another view (in that case, the view's elements will be added when\n * the container's parent view is added later).\n *\n * @param {?} lView The view to insert\n * @param {?} lContainer The container into which the view should be inserted\n * @param {?} parentView The new parent of the inserted view\n * @param {?} index The index at which to insert the view\n * @param {?} containerIndex The index of the container node, if dynamic\n * @return {?}\n */\nexport function insertView(lView, lContainer, parentView, index, containerIndex) {\n    /** @type {?} */\n    var views = lContainer[VIEWS];\n    if (index > 0) {\n        // This is a new view, we need to add it to the children.\n        views[index - 1][NEXT] = lView;\n    }\n    if (index < views.length) {\n        lView[NEXT] = views[index];\n        views.splice(index, 0, lView);\n    }\n    else {\n        views.push(lView);\n        lView[NEXT] = null;\n    }\n    // Dynamically inserted views need a reference to their parent container's host so it's\n    // possible to jump from a view to its container's next when walking the node tree.\n    if (containerIndex > -1) {\n        lView[CONTAINER_INDEX] = containerIndex;\n        lView[PARENT] = parentView;\n    }\n    // Notify query that a new view has been added\n    if (lView[QUERIES]) {\n        /** @type {?} */ ((lView[QUERIES])).insertView(index);\n    }\n    // Sets the attached flag\n    lView[FLAGS] |= 8 /* Attached */;\n}\n/**\n * Detaches a view from a container.\n *\n * This method splices the view from the container's array of active views. It also\n * removes the view's elements from the DOM.\n *\n * @param {?} lContainer The container from which to detach a view\n * @param {?} removeIndex The index of the view to detach\n * @param {?} detached Whether or not this view is already detached.\n * @return {?}\n */\nexport function detachView(lContainer, removeIndex, detached) {\n    /** @type {?} */\n    var views = lContainer[VIEWS];\n    /** @type {?} */\n    var viewToDetach = views[removeIndex];\n    if (removeIndex > 0) {\n        views[removeIndex - 1][NEXT] = /** @type {?} */ (viewToDetach[NEXT]);\n    }\n    views.splice(removeIndex, 1);\n    if (!detached) {\n        addRemoveViewFromContainer(viewToDetach, false);\n    }\n    if (viewToDetach[QUERIES]) {\n        /** @type {?} */ ((viewToDetach[QUERIES])).removeView();\n    }\n    viewToDetach[CONTAINER_INDEX] = -1;\n    viewToDetach[PARENT] = null;\n    // Unsets the attached flag\n    viewToDetach[FLAGS] &= ~8 /* Attached */;\n}\n/**\n * Removes a view from a container, i.e. detaches it and then destroys the underlying LView.\n *\n * @param {?} lContainer The container from which to remove a view\n * @param {?} containerHost\n * @param {?} removeIndex The index of the view to remove\n * @return {?}\n */\nexport function removeView(lContainer, containerHost, removeIndex) {\n    /** @type {?} */\n    var view = lContainer[VIEWS][removeIndex];\n    detachView(lContainer, removeIndex, !!containerHost.detached);\n    destroyLView(view);\n}\n/**\n * Gets the child of the given LView\n * @param {?} lView\n * @return {?}\n */\nexport function getLViewChild(lView) {\n    /** @type {?} */\n    var childIndex = lView[TVIEW].childIndex;\n    return childIndex === -1 ? null : lView[childIndex];\n}\n/**\n * A standalone function which destroys an LView,\n * conducting cleanup (e.g. removing listeners, calling onDestroys).\n *\n * @param {?} view The view to be destroyed.\n * @return {?}\n */\nexport function destroyLView(view) {\n    /** @type {?} */\n    var renderer = view[RENDERER];\n    if (isProceduralRenderer(renderer) && renderer.destroyNode) {\n        walkTNodeTree(view, 2 /* Destroy */, renderer, null);\n    }\n    destroyViewTree(view);\n    // Sets the destroyed flag\n    view[FLAGS] |= 32 /* Destroyed */;\n}\n/**\n * Determines which LViewOrLContainer to jump to when traversing back up the\n * tree in destroyViewTree.\n *\n * Normally, the view's parent LView should be checked, but in the case of\n * embedded views, the container (which is the view node's parent, but not the\n * LView's parent) needs to be checked for a possible next property.\n *\n * @param {?} state The LViewOrLContainer for which we need a parent state\n * @param {?} rootView The rootView, so we don't propagate too far up the view tree\n * @return {?} The correct parent LViewOrLContainer\n */\nexport function getParentState(state, rootView) {\n    /** @type {?} */\n    var tNode;\n    if (state.length >= HEADER_OFFSET && (tNode = /** @type {?} */ (((/** @type {?} */ (state))))[HOST_NODE]) &&\n        tNode.type === 2 /* View */) {\n        // if it's an embedded view, the state needs to go up to the container, in case the\n        // container has a next\n        return /** @type {?} */ (getLContainer(/** @type {?} */ (tNode), /** @type {?} */ (state)));\n    }\n    else {\n        // otherwise, use parent view for containers or component views\n        return state[PARENT] === rootView ? null : state[PARENT];\n    }\n}\n/**\n * Removes all listeners and call all onDestroys in a given view.\n *\n * @param {?} viewOrContainer\n * @return {?}\n */\nfunction cleanUpView(viewOrContainer) {\n    if ((/** @type {?} */ (viewOrContainer)).length >= HEADER_OFFSET) {\n        /** @type {?} */\n        var view = /** @type {?} */ (viewOrContainer);\n        removeListeners(view);\n        executeOnDestroys(view);\n        executePipeOnDestroys(view);\n        // For component views only, the local renderer is destroyed as clean up time.\n        if (view[TVIEW].id === -1 && isProceduralRenderer(view[RENDERER])) {\n            ngDevMode && ngDevMode.rendererDestroy++;\n            (/** @type {?} */ (view[RENDERER])).destroy();\n        }\n    }\n}\n/**\n * Removes listeners and unsubscribes from output subscriptions\n * @param {?} lView\n * @return {?}\n */\nfunction removeListeners(lView) {\n    /** @type {?} */\n    var cleanup = /** @type {?} */ ((lView[TVIEW].cleanup));\n    if (cleanup != null) {\n        for (var i = 0; i < cleanup.length - 1; i += 2) {\n            if (typeof cleanup[i] === 'string') {\n                /** @type {?} */\n                var native = readElementValue(lView[cleanup[i + 1]]);\n                /** @type {?} */\n                var listener = /** @type {?} */ ((lView[CLEANUP]))[cleanup[i + 2]];\n                native.removeEventListener(cleanup[i], listener, cleanup[i + 3]);\n                i += 2;\n            }\n            else if (typeof cleanup[i] === 'number') {\n                /** @type {?} */\n                var cleanupFn = /** @type {?} */ ((lView[CLEANUP]))[cleanup[i]];\n                cleanupFn();\n            }\n            else {\n                /** @type {?} */\n                var context = /** @type {?} */ ((lView[CLEANUP]))[cleanup[i + 1]];\n                cleanup[i].call(context);\n            }\n        }\n        lView[CLEANUP] = null;\n    }\n}\n/**\n * Calls onDestroy hooks for this view\n * @param {?} view\n * @return {?}\n */\nfunction executeOnDestroys(view) {\n    /** @type {?} */\n    var tView = view[TVIEW];\n    /** @type {?} */\n    var destroyHooks;\n    if (tView != null && (destroyHooks = tView.destroyHooks) != null) {\n        callHooks(view, destroyHooks);\n    }\n}\n/**\n * Calls pipe destroy hooks for this view\n * @param {?} lView\n * @return {?}\n */\nfunction executePipeOnDestroys(lView) {\n    /** @type {?} */\n    var pipeDestroyHooks = lView[TVIEW] && lView[TVIEW].pipeDestroyHooks;\n    if (pipeDestroyHooks) {\n        callHooks(/** @type {?} */ ((lView)), pipeDestroyHooks);\n    }\n}\n/**\n * @param {?} tNode\n * @param {?} currentView\n * @return {?}\n */\nexport function getRenderParent(tNode, currentView) {\n    if (canInsertNativeNode(tNode, currentView)) {\n        // If we are asked for a render parent of the root component we need to do low-level DOM\n        // operation as LTree doesn't exist above the topmost host node. We might need to find a render\n        // parent of the topmost host node if the root component injects ViewContainerRef.\n        if (isRootView(currentView)) {\n            return nativeParentNode(currentView[RENDERER], getNativeByTNode(tNode, currentView));\n        }\n        /** @type {?} */\n        var hostTNode = currentView[HOST_NODE];\n        /** @type {?} */\n        var tNodeParent = tNode.parent;\n        if (tNodeParent != null && tNodeParent.type === 4 /* ElementContainer */) {\n            tNode = getHighestElementContainer(tNodeParent);\n        }\n        return tNode.parent == null && /** @type {?} */ ((hostTNode)).type === 2 /* View */ ?\n            getContainerRenderParent(/** @type {?} */ (hostTNode), currentView) : /** @type {?} */ (getParentNative(tNode, currentView));\n    }\n    return null;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction canInsertNativeChildOfElement(tNode) {\n    // If the parent is null, then we are inserting across views. This happens when we\n    // insert a root element of the component view into the component host element and it\n    // should always be eager.\n    if (tNode.parent == null ||\n        // We should also eagerly insert if the parent is a regular, non-component element\n        // since we know that this relationship will never be broken.\n        tNode.parent.type === 3 /* Element */ && !(tNode.parent.flags & 4096 /* isComponent */)) {\n        return true;\n    }\n    // Parent is a Component. Component's content nodes are not inserted immediately\n    // because they will be projected, and so doing insert at this point would be wasteful.\n    // Since the projection would than move it to its final destination.\n    return false;\n}\n/**\n * We might delay insertion of children for a given view if it is disconnected.\n * This might happen for 2 main reasons:\n * - view is not inserted into any container (view was created but not inserted yet)\n * - view is inserted into a container but the container itself is not inserted into the DOM\n * (container might be part of projection or child of a view that is not inserted yet).\n *\n * In other words we can insert children of a given view if this view was inserted into a container\n * and\n * the container itself has its render parent determined.\n * @param {?} viewTNode\n * @param {?} view\n * @return {?}\n */\nfunction canInsertNativeChildOfView(viewTNode, view) {\n    /** @type {?} */\n    var container = /** @type {?} */ ((getLContainer(viewTNode, view)));\n    if (container == null || container[RENDER_PARENT] == null) {\n        // The `View` is not inserted into a `Container` or the parent `Container`\n        // itself is disconnected. So we have to delay.\n        return false;\n    }\n    // The parent `Container` is in inserted state, so we can eagerly insert into\n    // this location.\n    return true;\n}\n/**\n * Returns whether a native element can be inserted into the given parent.\n *\n * There are two reasons why we may not be able to insert a element immediately.\n * - Projection: When creating a child content element of a component, we have to skip the\n *   insertion because the content of a component will be projected.\n *   `<component><content>delayed due to projection</content></component>`\n * - Parent container is disconnected: This can happen when we are inserting a view into\n *   parent container, which itself is disconnected. For example the parent container is part\n *   of a View which has not be inserted or is mare for projection but has not been inserted\n *   into destination.\n *\n *\n * @param {?} tNode The tNode of the node that we want to insert.\n * @param {?} currentView Current LView being processed.\n * @return {?} boolean Whether the node should be inserted now (or delayed until later).\n */\nexport function canInsertNativeNode(tNode, currentView) {\n    /** @type {?} */\n    var currentNode = tNode;\n    /** @type {?} */\n    var parent = tNode.parent;\n    if (tNode.parent) {\n        if (tNode.parent.type === 4 /* ElementContainer */) {\n            currentNode = getHighestElementContainer(tNode);\n            parent = currentNode.parent;\n        }\n        else if (tNode.parent.type === 5 /* IcuContainer */) {\n            currentNode = getFirstParentNative(currentNode);\n            parent = currentNode.parent;\n        }\n    }\n    if (parent === null)\n        parent = currentView[HOST_NODE];\n    if (parent && parent.type === 2 /* View */) {\n        return canInsertNativeChildOfView(/** @type {?} */ (parent), currentView);\n    }\n    else {\n        // Parent is a regular element or a component\n        return canInsertNativeChildOfElement(currentNode);\n    }\n}\n/**\n * Inserts a native node before another native node for a given parent using {\\@link Renderer3}.\n * This is a utility function that can be used when native nodes were determined - it abstracts an\n * actual renderer being used.\n * @param {?} renderer\n * @param {?} parent\n * @param {?} child\n * @param {?} beforeNode\n * @return {?}\n */\nexport function nativeInsertBefore(renderer, parent, child, beforeNode) {\n    if (isProceduralRenderer(renderer)) {\n        renderer.insertBefore(parent, child, beforeNode);\n    }\n    else {\n        parent.insertBefore(child, beforeNode, true);\n    }\n}\n/**\n * Returns a native parent of a given native node.\n * @param {?} renderer\n * @param {?} node\n * @return {?}\n */\nexport function nativeParentNode(renderer, node) {\n    return /** @type {?} */ ((isProceduralRenderer(renderer) ? renderer.parentNode(node) : node.parentNode));\n}\n/**\n * Returns a native sibling of a given native node.\n * @param {?} renderer\n * @param {?} node\n * @return {?}\n */\nexport function nativeNextSibling(renderer, node) {\n    return isProceduralRenderer(renderer) ? renderer.nextSibling(node) : node.nextSibling;\n}\n/**\n * Appends the `child` element to the `parent`.\n *\n * The element insertion might be delayed {\\@link canInsertNativeNode}.\n *\n * @param {?=} childEl The child that should be appended\n * @param {?=} childTNode The TNode of the child element\n * @param {?=} currentView The current LView\n * @return {?} Whether or not the child was appended\n */\nexport function appendChild(childEl, childTNode, currentView) {\n    if (childEl === void 0) { childEl = null; }\n    if (childEl !== null && canInsertNativeNode(childTNode, currentView)) {\n        /** @type {?} */\n        var renderer = currentView[RENDERER];\n        /** @type {?} */\n        var parentEl = getParentNative(childTNode, currentView);\n        /** @type {?} */\n        var parentTNode = childTNode.parent || /** @type {?} */ ((currentView[HOST_NODE]));\n        if (parentTNode.type === 2 /* View */) {\n            /** @type {?} */\n            var lContainer = /** @type {?} */ (getLContainer(/** @type {?} */ (parentTNode), currentView));\n            /** @type {?} */\n            var views = lContainer[VIEWS];\n            /** @type {?} */\n            var index = views.indexOf(currentView);\n            nativeInsertBefore(renderer, /** @type {?} */ ((lContainer[RENDER_PARENT])), childEl, getBeforeNodeForView(index, views, lContainer[NATIVE]));\n        }\n        else if (parentTNode.type === 4 /* ElementContainer */) {\n            /** @type {?} */\n            var renderParent = /** @type {?} */ ((getRenderParent(childTNode, currentView)));\n            nativeInsertBefore(renderer, renderParent, childEl, parentEl);\n        }\n        else if (parentTNode.type === 5 /* IcuContainer */) {\n            /** @type {?} */\n            var icuAnchorNode = /** @type {?} */ (((getNativeByTNode(/** @type {?} */ ((childTNode.parent)), currentView))));\n            nativeInsertBefore(renderer, /** @type {?} */ (parentEl), childEl, icuAnchorNode);\n        }\n        else {\n            isProceduralRenderer(renderer) ? renderer.appendChild(/** @type {?} */ (((parentEl))), childEl) : /** @type {?} */ ((parentEl)).appendChild(childEl);\n        }\n        return true;\n    }\n    return false;\n}\n/**\n * Gets the top-level ng-container if ng-containers are nested.\n *\n * @param {?} ngContainer The TNode of the starting ng-container\n * @return {?} tNode The TNode of the highest level ng-container\n */\nfunction getHighestElementContainer(ngContainer) {\n    while (ngContainer.parent != null && ngContainer.parent.type === 4 /* ElementContainer */) {\n        ngContainer = ngContainer.parent;\n    }\n    return ngContainer;\n}\n/**\n * @param {?} index\n * @param {?} views\n * @param {?} containerNative\n * @return {?}\n */\nexport function getBeforeNodeForView(index, views, containerNative) {\n    if (index + 1 < views.length) {\n        /** @type {?} */\n        var view = /** @type {?} */ (views[index + 1]);\n        /** @type {?} */\n        var viewTNode = /** @type {?} */ (view[HOST_NODE]);\n        return viewTNode.child ? getNativeByTNode(viewTNode.child, view) : containerNative;\n    }\n    else {\n        return containerNative;\n    }\n}\n/**\n * Removes the `child` element from the DOM if not in view and not projected.\n *\n * @param {?} childTNode The TNode of the child to remove\n * @param {?} childEl The child that should be removed\n * @param {?} currentView The current LView\n * @return {?} Whether or not the child was removed\n */\nexport function removeChild(childTNode, childEl, currentView) {\n    // We only remove the element if not in View or not projected.\n    if (childEl !== null && canInsertNativeNode(childTNode, currentView)) {\n        /** @type {?} */\n        var parentNative = /** @type {?} */ (((getParentNative(childTNode, currentView))));\n        /** @type {?} */\n        var renderer = currentView[RENDERER];\n        isProceduralRenderer(renderer) ? renderer.removeChild(/** @type {?} */ (parentNative), childEl) : /** @type {?} */ ((parentNative)).removeChild(childEl);\n        return true;\n    }\n    return false;\n}\n/**\n * Appends a projected node to the DOM, or in the case of a projected container,\n * appends the nodes from all of the container's active views to the DOM.\n *\n * @param {?} projectedTNode The TNode to be projected\n * @param {?} tProjectionNode The projection (ng-content) TNode\n * @param {?} currentView Current LView\n * @param {?} projectionView Projection view (view above current)\n * @return {?}\n */\nexport function appendProjectedNode(projectedTNode, tProjectionNode, currentView, projectionView) {\n    /** @type {?} */\n    var native = getNativeByTNode(projectedTNode, projectionView);\n    appendChild(native, tProjectionNode, currentView);\n    // the projected contents are processed while in the shadow view (which is the currentView)\n    // therefore we need to extract the view where the host element lives since it's the\n    // logical container of the content projected views\n    attachPatchData(native, projectionView);\n    /** @type {?} */\n    var renderParent = getRenderParent(tProjectionNode, currentView);\n    /** @type {?} */\n    var nodeOrContainer = projectionView[projectedTNode.index];\n    if (projectedTNode.type === 0 /* Container */) {\n        // The node we are adding is a container and we are adding it to an element which\n        // is not a component (no more re-projection).\n        // Alternatively a container is projected at the root of a component's template\n        // and can't be re-projected (as not content of any component).\n        // Assign the final projection location in those cases.\n        nodeOrContainer[RENDER_PARENT] = renderParent;\n        /** @type {?} */\n        var views = nodeOrContainer[VIEWS];\n        for (var i = 0; i < views.length; i++) {\n            addRemoveViewFromContainer(views[i], true, nodeOrContainer[NATIVE]);\n        }\n    }\n    else {\n        if (projectedTNode.type === 4 /* ElementContainer */) {\n            /** @type {?} */\n            var ngContainerChildTNode = /** @type {?} */ (projectedTNode.child);\n            while (ngContainerChildTNode) {\n                appendProjectedNode(ngContainerChildTNode, tProjectionNode, currentView, projectionView);\n                ngContainerChildTNode = ngContainerChildTNode.next;\n            }\n        }\n        if (isLContainer(nodeOrContainer)) {\n            nodeOrContainer[RENDER_PARENT] = renderParent;\n            appendChild(nodeOrContainer[NATIVE], tProjectionNode, currentView);\n        }\n    }\n}\n//# sourceMappingURL=node_manipulation.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport './ng_dev_mode';\nimport { assertDefined, assertNotEqual } from './assert';\nimport { unusedValueExportToPlacateAjd as unused1 } from './interfaces/node';\nimport { NG_PROJECT_AS_ATTR_NAME, unusedValueExportToPlacateAjd as unused2 } from './interfaces/projection';\n/** @type {?} */\nvar unusedValueToPlacateAjd = unused1 + unused2;\n/**\n * @param {?} nodeClassAttrVal\n * @param {?} cssClassToMatch\n * @return {?}\n */\nfunction isCssClassMatching(nodeClassAttrVal, cssClassToMatch) {\n    /** @type {?} */\n    var nodeClassesLen = nodeClassAttrVal.length;\n    /** @type {?} */\n    var matchIndex = /** @type {?} */ ((nodeClassAttrVal)).indexOf(cssClassToMatch);\n    /** @type {?} */\n    var matchEndIdx = matchIndex + cssClassToMatch.length;\n    if (matchIndex === -1 // no match\n        || (matchIndex > 0 && /** @type {?} */ ((nodeClassAttrVal))[matchIndex - 1] !== ' ') // no space before\n        ||\n            (matchEndIdx < nodeClassesLen && /** @type {?} */ ((nodeClassAttrVal))[matchEndIdx] !== ' ')) // no space after\n     {\n        return false;\n    }\n    return true;\n}\n/**\n * A utility function to match an Ivy node static data against a simple CSS selector\n *\n * @param {?} tNode\n * @param {?} selector\n * @return {?} true if node matches the selector.\n */\nexport function isNodeMatchingSelector(tNode, selector) {\n    ngDevMode && assertDefined(selector[0], 'Selector should have a tag name');\n    /** @type {?} */\n    var mode = 4 /* ELEMENT */;\n    /** @type {?} */\n    var nodeAttrs = /** @type {?} */ ((tNode.attrs));\n    /** @type {?} */\n    var selectOnlyMarkerIdx = nodeAttrs ? nodeAttrs.indexOf(1 /* SelectOnly */) : -1;\n    /** @type {?} */\n    var skipToNextSelector = false;\n    for (var i = 0; i < selector.length; i++) {\n        /** @type {?} */\n        var current = selector[i];\n        if (typeof current === 'number') {\n            // If we finish processing a :not selector and it hasn't failed, return false\n            if (!skipToNextSelector && !isPositive(mode) && !isPositive(/** @type {?} */ (current))) {\n                return false;\n            }\n            // If we are skipping to the next :not() and this mode flag is positive,\n            // it's a part of the current :not() selector, and we should keep skipping\n            if (skipToNextSelector && isPositive(current))\n                continue;\n            skipToNextSelector = false;\n            mode = (/** @type {?} */ (current)) | (mode & 1 /* NOT */);\n            continue;\n        }\n        if (skipToNextSelector)\n            continue;\n        if (mode & 4 /* ELEMENT */) {\n            mode = 2 /* ATTRIBUTE */ | mode & 1 /* NOT */;\n            if (current !== '' && current !== tNode.tagName || current === '' && selector.length === 1) {\n                if (isPositive(mode))\n                    return false;\n                skipToNextSelector = true;\n            }\n        }\n        else {\n            /** @type {?} */\n            var attrName = mode & 8 /* CLASS */ ? 'class' : current;\n            /** @type {?} */\n            var attrIndexInNode = findAttrIndexInNode(attrName, nodeAttrs);\n            if (attrIndexInNode === -1) {\n                if (isPositive(mode))\n                    return false;\n                skipToNextSelector = true;\n                continue;\n            }\n            /** @type {?} */\n            var selectorAttrValue = mode & 8 /* CLASS */ ? current : selector[++i];\n            if (selectorAttrValue !== '') {\n                /** @type {?} */\n                var nodeAttrValue = void 0;\n                /** @type {?} */\n                var maybeAttrName = nodeAttrs[attrIndexInNode];\n                if (selectOnlyMarkerIdx > -1 && attrIndexInNode > selectOnlyMarkerIdx) {\n                    nodeAttrValue = '';\n                }\n                else {\n                    ngDevMode && assertNotEqual(maybeAttrName, 0 /* NamespaceURI */, 'We do not match directives on namespaced attributes');\n                    nodeAttrValue = /** @type {?} */ (nodeAttrs[attrIndexInNode + 1]);\n                }\n                if (mode & 8 /* CLASS */ &&\n                    !isCssClassMatching(/** @type {?} */ (nodeAttrValue), /** @type {?} */ (selectorAttrValue)) ||\n                    mode & 2 /* ATTRIBUTE */ && selectorAttrValue !== nodeAttrValue) {\n                    if (isPositive(mode))\n                        return false;\n                    skipToNextSelector = true;\n                }\n            }\n        }\n    }\n    return isPositive(mode) || skipToNextSelector;\n}\n/**\n * @param {?} mode\n * @return {?}\n */\nfunction isPositive(mode) {\n    return (mode & 1 /* NOT */) === 0;\n}\n/**\n * Examines an attributes definition array from a node to find the index of the\n * attribute with the specified name.\n *\n * NOTE: Will not find namespaced attributes.\n *\n * @param {?} name the name of the attribute to find\n * @param {?} attrs the attribute array to examine\n * @return {?}\n */\nfunction findAttrIndexInNode(name, attrs) {\n    if (attrs === null)\n        return -1;\n    /** @type {?} */\n    var selectOnlyMode = false;\n    /** @type {?} */\n    var i = 0;\n    while (i < attrs.length) {\n        /** @type {?} */\n        var maybeAttrName = attrs[i];\n        if (maybeAttrName === name) {\n            return i;\n        }\n        else if (maybeAttrName === 0 /* NamespaceURI */) {\n            // NOTE(benlesh): will not find namespaced attributes. This is by design.\n            i += 4;\n        }\n        else {\n            if (maybeAttrName === 1 /* SelectOnly */) {\n                selectOnlyMode = true;\n            }\n            i += selectOnlyMode ? 1 : 2;\n        }\n    }\n    return -1;\n}\n/**\n * @param {?} tNode\n * @param {?} selector\n * @return {?}\n */\nexport function isNodeMatchingSelectorList(tNode, selector) {\n    for (var i = 0; i < selector.length; i++) {\n        if (isNodeMatchingSelector(tNode, selector[i])) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nexport function getProjectAsAttrValue(tNode) {\n    /** @type {?} */\n    var nodeAttrs = tNode.attrs;\n    if (nodeAttrs != null) {\n        /** @type {?} */\n        var ngProjectAsAttrIdx = nodeAttrs.indexOf(NG_PROJECT_AS_ATTR_NAME);\n        // only check for ngProjectAs in attribute names, don't accidentally match attribute's value\n        // (attribute names are stored at even indexes)\n        if ((ngProjectAsAttrIdx & 1) === 0) {\n            return /** @type {?} */ (nodeAttrs[ngProjectAsAttrIdx + 1]);\n        }\n    }\n    return null;\n}\n/**\n * Checks a given node against matching selectors and returns\n * selector index (or 0 if none matched).\n *\n * This function takes into account the ngProjectAs attribute: if present its value will be compared\n * to the raw (un-parsed) CSS selector instead of using standard selector matching logic.\n * @param {?} tNode\n * @param {?} selectors\n * @param {?} textSelectors\n * @return {?}\n */\nexport function matchingSelectorIndex(tNode, selectors, textSelectors) {\n    /** @type {?} */\n    var ngProjectAsAttrVal = getProjectAsAttrValue(tNode);\n    for (var i = 0; i < selectors.length; i++) {\n        // if a node has the ngProjectAs attribute match it against unparsed selector\n        // match a node against a parsed selector only if ngProjectAs attribute is not present\n        if (ngProjectAsAttrVal === textSelectors[i] ||\n            ngProjectAsAttrVal === null && isNodeMatchingSelectorList(tNode, selectors[i])) {\n            return i + 1; // first matching selector \"captures\" a given node\n        }\n    }\n    return 0;\n}\n//# sourceMappingURL=node_selector_matcher.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Combines the binding value and a factory for an animation player.\n *\n * Used to bind a player to an element template binding (currently only\n * `[style]`, `[style.prop]`, `[class]` and `[class.name]` bindings\n * supported). The provided `factoryFn` function will be run once all\n * the associated bindings have been evaluated on the element and is\n * designed to return a player which will then be placed on the element.\n *\n * @template T\n * @param {?} factoryFn The function that is used to create a player\n *   once all the rendering-related (styling values) have been\n *   processed for the element binding.\n * @param {?} value The raw value that will be exposed to the binding\n *   so that the binding can update its internal values when\n *   any changes are evaluated.\n * @return {?}\n */\nexport function bindPlayerFactory(factoryFn, value) {\n    return /** @type {?} */ (new BoundPlayerFactory(factoryFn, value));\n}\n/**\n * @template T\n */\nvar /**\n * @template T\n */\nBoundPlayerFactory = /** @class */ (function () {\n    function BoundPlayerFactory(fn, value) {\n        this.fn = fn;\n        this.value = value;\n    }\n    return BoundPlayerFactory;\n}());\n/**\n * @template T\n */\nexport { BoundPlayerFactory };\nif (false) {\n    /** @type {?} */\n    BoundPlayerFactory.prototype.__brand__;\n    /** @type {?} */\n    BoundPlayerFactory.prototype.fn;\n    /** @type {?} */\n    BoundPlayerFactory.prototype.value;\n}\n//# sourceMappingURL=player_factory.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar CorePlayerHandler = /** @class */ (function () {\n    function CorePlayerHandler() {\n        this._players = [];\n    }\n    /**\n     * @return {?}\n     */\n    CorePlayerHandler.prototype.flushPlayers = /**\n     * @return {?}\n     */\n    function () {\n        for (var i = 0; i < this._players.length; i++) {\n            /** @type {?} */\n            var player = this._players[i];\n            if (!player.parent && player.state === 0 /* Pending */) {\n                player.play();\n            }\n        }\n        this._players.length = 0;\n    };\n    /**\n     * @param {?} player\n     * @return {?}\n     */\n    CorePlayerHandler.prototype.queuePlayer = /**\n     * @param {?} player\n     * @return {?}\n     */\n    function (player) { this._players.push(player); };\n    return CorePlayerHandler;\n}());\nexport { CorePlayerHandler };\nif (false) {\n    /** @type {?} */\n    CorePlayerHandler.prototype._players;\n}\n//# sourceMappingURL=core_player_handler.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nimport '../ng_dev_mode';\nimport { getContext } from '../context_discovery';\nimport { ACTIVE_INDEX } from '../interfaces/container';\nimport { FLAGS, HEADER_OFFSET, HOST } from '../interfaces/view';\nimport { getTNode } from '../util';\nimport { CorePlayerHandler } from './core_player_handler';\n/**\n * @param {?=} element\n * @param {?=} sanitizer\n * @param {?=} initialStylingValues\n * @return {?}\n */\nexport function createEmptyStylingContext(element, sanitizer, initialStylingValues) {\n    return [\n        null,\n        // PlayerContext\n        sanitizer || null,\n        // StyleSanitizer\n        initialStylingValues || [null],\n        0,\n        0,\n        // ClassOffset\n        element || null,\n        null,\n        null\n    ];\n}\n/**\n * Used clone a copy of a pre-computed template of a styling context.\n *\n * A pre-computed template is designed to be computed once for a given element\n * (instructions.ts has logic for caching this).\n * @param {?} element\n * @param {?} templateStyleContext\n * @return {?}\n */\nexport function allocStylingContext(element, templateStyleContext) {\n    /** @type {?} */\n    var context = /** @type {?} */ ((templateStyleContext.slice()));\n    context[5 /* ElementPosition */] = element;\n    return context;\n}\n/**\n * Retrieve the `StylingContext` at a given index.\n *\n * This method lazily creates the `StylingContext`. This is because in most cases\n * we have styling without any bindings. Creating `StylingContext` eagerly would mean that\n * every style declaration such as `<div style=\"color: red\">` would result `StyleContext`\n * which would create unnecessary memory pressure.\n *\n * @param {?} index Index of the style allocation. See: `elementStyling`.\n * @param {?} viewData The view to search for the styling context\n * @return {?}\n */\nexport function getStylingContext(index, viewData) {\n    /** @type {?} */\n    var storageIndex = index + HEADER_OFFSET;\n    /** @type {?} */\n    var slotValue = viewData[storageIndex];\n    /** @type {?} */\n    var wrapper = viewData;\n    while (Array.isArray(slotValue)) {\n        wrapper = slotValue;\n        slotValue = /** @type {?} */ (slotValue[HOST]);\n    }\n    if (isStylingContext(wrapper)) {\n        return /** @type {?} */ (wrapper);\n    }\n    else {\n        /** @type {?} */\n        var stylingTemplate = getTNode(index, viewData).stylingTemplate;\n        if (wrapper !== viewData) {\n            storageIndex = HOST;\n        }\n        return wrapper[storageIndex] = stylingTemplate ?\n            allocStylingContext(slotValue, stylingTemplate) :\n            createEmptyStylingContext(slotValue);\n    }\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isStylingContext(value) {\n    // Not an LView or an LContainer\n    return typeof value[FLAGS] !== 'number' && typeof value[ACTIVE_INDEX] !== 'number';\n}\n/**\n * @param {?} playerContext\n * @param {?} rootContext\n * @param {?} element\n * @param {?} player\n * @param {?} playerContextIndex\n * @param {?=} ref\n * @return {?}\n */\nexport function addPlayerInternal(playerContext, rootContext, element, player, playerContextIndex, ref) {\n    ref = ref || element;\n    if (playerContextIndex) {\n        playerContext[playerContextIndex] = player;\n    }\n    else {\n        playerContext.push(player);\n    }\n    if (player) {\n        player.addEventListener(200 /* Destroyed */, function () {\n            /** @type {?} */\n            var index = playerContext.indexOf(player);\n            /** @type {?} */\n            var nonFactoryPlayerIndex = playerContext[0 /* NonBuilderPlayersStart */];\n            // if the player is being removed from the factory side of the context\n            // (which is where the [style] and [class] bindings do their thing) then\n            // that side of the array cannot be resized since the respective bindings\n            // have pointer index values that point to the associated factory instance\n            if (index) {\n                if (index < nonFactoryPlayerIndex) {\n                    playerContext[index] = null;\n                }\n                else {\n                    playerContext.splice(index, 1);\n                }\n            }\n            player.destroy();\n        });\n        /** @type {?} */\n        var playerHandler = rootContext.playerHandler || (rootContext.playerHandler = new CorePlayerHandler());\n        playerHandler.queuePlayer(player, ref);\n        return true;\n    }\n    return false;\n}\n/**\n * @param {?} playerContext\n * @return {?}\n */\nexport function getPlayersInternal(playerContext) {\n    /** @type {?} */\n    var players = [];\n    /** @type {?} */\n    var nonFactoryPlayersStart = playerContext[0 /* NonBuilderPlayersStart */];\n    // add all factory-based players (which are apart of [style] and [class] bindings)\n    for (var i = 1 /* PlayerBuildersStartPosition */ + 1 /* PlayerOffsetPosition */; i < nonFactoryPlayersStart; i += 2 /* PlayerAndPlayerBuildersTupleSize */) {\n        /** @type {?} */\n        var player = /** @type {?} */ (playerContext[i]);\n        if (player) {\n            players.push(player);\n        }\n    }\n    // add all custom players (not apart of [style] and [class] bindings)\n    for (var i = nonFactoryPlayersStart; i < playerContext.length; i++) {\n        players.push(/** @type {?} */ (playerContext[i]));\n    }\n    return players;\n}\n/**\n * @param {?} target\n * @param {?=} context\n * @return {?}\n */\nexport function getOrCreatePlayerContext(target, context) {\n    context = context || /** @type {?} */ ((getContext(target)));\n    if (!context) {\n        ngDevMode && throwInvalidRefError();\n        return null;\n    }\n    var lView = context.lView, nodeIndex = context.nodeIndex;\n    /** @type {?} */\n    var stylingContext = getStylingContext(nodeIndex - HEADER_OFFSET, lView);\n    return getPlayerContext(stylingContext) || allocPlayerContext(stylingContext);\n}\n/**\n * @param {?} stylingContext\n * @return {?}\n */\nexport function getPlayerContext(stylingContext) {\n    return stylingContext[0 /* PlayerContext */];\n}\n/**\n * @param {?} data\n * @return {?}\n */\nexport function allocPlayerContext(data) {\n    return data[0 /* PlayerContext */] =\n        [5 /* SinglePlayerBuildersStartPosition */, null, null, null, null];\n}\n/**\n * @return {?}\n */\nexport function throwInvalidRefError() {\n    throw new Error('Only elements that exist in an Angular application can be used for animations');\n}\n//# sourceMappingURL=util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nimport { RendererStyleFlags3, isProceduralRenderer } from '../interfaces/renderer';\nimport { NO_CHANGE } from '../tokens';\nimport { getRootContext } from '../util';\nimport { BoundPlayerFactory } from './player_factory';\nimport { addPlayerInternal, allocPlayerContext, createEmptyStylingContext, getPlayerContext } from './util';\n/** @type {?} */\nvar EMPTY_ARR = [];\n/** @type {?} */\nvar EMPTY_OBJ = {};\n/**\n * Creates a styling context template where styling information is stored.\n * Any styles that are later referenced using `updateStyleProp` must be\n * passed in within this function. Initial values for those styles are to\n * be declared after all initial style properties are declared (this change in\n * mode between declarations and initial styles is made possible using a special\n * enum value found in `definition.ts`).\n *\n * @param {?=} initialClassDeclarations a list of class declarations and initial class values\n *    that are used later within the styling context.\n *\n *    -> ['foo', 'bar', SPECIAL_ENUM_VAL, 'foo', true]\n *       This implies that `foo` and `bar` will be later styled and that the `foo`\n *       class will be applied to the element as an initial class since it's true\n * @param {?=} initialStyleDeclarations a list of style declarations and initial style values\n *    that are used later within the styling context.\n *\n *    -> ['width', 'height', SPECIAL_ENUM_VAL, 'width', '100px']\n *       This implies that `width` and `height` will be later styled and that the `width`\n *       property has an initial value of `100px`.\n *\n * @param {?=} styleSanitizer\n * @param {?=} onlyProcessSingleClasses\n * @return {?}\n */\nexport function createStylingContextTemplate(initialClassDeclarations, initialStyleDeclarations, styleSanitizer, onlyProcessSingleClasses) {\n    /** @type {?} */\n    var initialStylingValues = [null];\n    /** @type {?} */\n    var context = createEmptyStylingContext(null, styleSanitizer, initialStylingValues);\n    /** @type {?} */\n    var stylesLookup = {};\n    /** @type {?} */\n    var classesLookup = {};\n    /** @type {?} */\n    var totalStyleDeclarations = 0;\n    if (initialStyleDeclarations) {\n        /** @type {?} */\n        var hasPassedDeclarations = false;\n        for (var i = 0; i < initialStyleDeclarations.length; i++) {\n            /** @type {?} */\n            var v = /** @type {?} */ (initialStyleDeclarations[i]);\n            // this flag value marks where the declarations end the initial values begin\n            if (v === 1 /* VALUES_MODE */) {\n                hasPassedDeclarations = true;\n            }\n            else {\n                /** @type {?} */\n                var prop = /** @type {?} */ (v);\n                if (hasPassedDeclarations) {\n                    /** @type {?} */\n                    var value = /** @type {?} */ (initialStyleDeclarations[++i]);\n                    initialStylingValues.push(value);\n                    stylesLookup[prop] = initialStylingValues.length - 1;\n                }\n                else {\n                    totalStyleDeclarations++;\n                    stylesLookup[prop] = 0;\n                }\n            }\n        }\n    }\n    // make where the class offsets begin\n    context[4 /* ClassOffsetPosition */] = totalStyleDeclarations;\n    /** @type {?} */\n    var initialStaticClasses = onlyProcessSingleClasses ? [] : null;\n    if (initialClassDeclarations) {\n        /** @type {?} */\n        var hasPassedDeclarations = false;\n        for (var i = 0; i < initialClassDeclarations.length; i++) {\n            /** @type {?} */\n            var v = /** @type {?} */ (initialClassDeclarations[i]);\n            // this flag value marks where the declarations end the initial values begin\n            if (v === 1 /* VALUES_MODE */) {\n                hasPassedDeclarations = true;\n            }\n            else {\n                /** @type {?} */\n                var className = /** @type {?} */ (v);\n                if (hasPassedDeclarations) {\n                    /** @type {?} */\n                    var value = /** @type {?} */ (initialClassDeclarations[++i]);\n                    initialStylingValues.push(value);\n                    classesLookup[className] = initialStylingValues.length - 1;\n                    initialStaticClasses && initialStaticClasses.push(className);\n                }\n                else {\n                    classesLookup[className] = 0;\n                }\n            }\n        }\n    }\n    /** @type {?} */\n    var styleProps = Object.keys(stylesLookup);\n    /** @type {?} */\n    var classNames = Object.keys(classesLookup);\n    /** @type {?} */\n    var classNamesIndexStart = styleProps.length;\n    /** @type {?} */\n    var totalProps = styleProps.length + classNames.length;\n    /** @type {?} */\n    var maxLength = totalProps * 4 /* Size */ * 2 + 8 /* SingleStylesStartPosition */;\n    // we need to fill the array from the start so that we can access\n    // both the multi and the single array positions in the same loop block\n    for (var i = 8 /* SingleStylesStartPosition */; i < maxLength; i++) {\n        context.push(null);\n    }\n    /** @type {?} */\n    var singleStart = 8 /* SingleStylesStartPosition */;\n    /** @type {?} */\n    var multiStart = totalProps * 4 /* Size */ + 8 /* SingleStylesStartPosition */;\n    // fill single and multi-level styles\n    for (var i = 0; i < totalProps; i++) {\n        /** @type {?} */\n        var isClassBased_1 = i >= classNamesIndexStart;\n        /** @type {?} */\n        var prop = isClassBased_1 ? classNames[i - classNamesIndexStart] : styleProps[i];\n        /** @type {?} */\n        var indexForInitial = isClassBased_1 ? classesLookup[prop] : stylesLookup[prop];\n        /** @type {?} */\n        var initialValue = initialStylingValues[indexForInitial];\n        /** @type {?} */\n        var indexForMulti = i * 4 /* Size */ + multiStart;\n        /** @type {?} */\n        var indexForSingle = i * 4 /* Size */ + singleStart;\n        /** @type {?} */\n        var initialFlag = prepareInitialFlag(prop, isClassBased_1, styleSanitizer || null);\n        setFlag(context, indexForSingle, pointers(initialFlag, indexForInitial, indexForMulti));\n        setProp(context, indexForSingle, prop);\n        setValue(context, indexForSingle, null);\n        setPlayerBuilderIndex(context, indexForSingle, 0);\n        /** @type {?} */\n        var flagForMulti = initialFlag | (initialValue !== null ? 1 /* Dirty */ : 0 /* None */);\n        setFlag(context, indexForMulti, pointers(flagForMulti, indexForInitial, indexForSingle));\n        setProp(context, indexForMulti, prop);\n        setValue(context, indexForMulti, null);\n        setPlayerBuilderIndex(context, indexForMulti, 0);\n    }\n    /** @type {?} */\n    var masterFlag = pointers(0, 0, multiStart) |\n        (onlyProcessSingleClasses ? 16 /* OnlyProcessSingleClasses */ : 0);\n    setFlag(context, 3 /* MasterFlagPosition */, masterFlag);\n    setContextDirty(context, initialStylingValues.length > 1);\n    if (initialStaticClasses) {\n        context[6 /* PreviousOrCachedMultiClassValue */] = initialStaticClasses.join(' ');\n    }\n    return context;\n}\n/**\n * Sets and resolves all `multi` styling on an `StylingContext` so that they can be\n * applied to the element once `renderStyleAndClassBindings` is called.\n *\n * All missing styles/class (any values that are not provided in the new `styles`\n * or `classes` params) will resolve to `null` within their respective positions\n * in the context.\n *\n * @param {?} context The styling context that will be updated with the\n *    newly provided style values.\n * @param {?} classesInput The key/value map of CSS class names that will be used for the update.\n * @param {?=} stylesInput The key/value map of CSS styles that will be used for the update.\n * @return {?}\n */\nexport function updateStylingMap(context, classesInput, stylesInput) {\n    stylesInput = stylesInput || null;\n    /** @type {?} */\n    var element = /** @type {?} */ (((context[5 /* ElementPosition */])));\n    /** @type {?} */\n    var classesPlayerBuilder = classesInput instanceof BoundPlayerFactory ?\n        new ClassAndStylePlayerBuilder(/** @type {?} */ (classesInput), element, 1 /* Class */) :\n        null;\n    /** @type {?} */\n    var stylesPlayerBuilder = stylesInput instanceof BoundPlayerFactory ?\n        new ClassAndStylePlayerBuilder(/** @type {?} */ (stylesInput), element, 2 /* Style */) :\n        null;\n    /** @type {?} */\n    var classesValue = classesPlayerBuilder ? /** @type {?} */ (((/** @type {?} */ (classesInput)))).value :\n        classesInput;\n    /** @type {?} */\n    var stylesValue = stylesPlayerBuilder ? stylesInput[\"value\"] : stylesInput;\n    /** @type {?} */\n    var ignoreAllClassUpdates = limitToSingleClasses(context) || classesValue === NO_CHANGE ||\n        classesValue === context[6 /* PreviousOrCachedMultiClassValue */];\n    /** @type {?} */\n    var ignoreAllStyleUpdates = stylesValue === NO_CHANGE || stylesValue === context[7 /* PreviousMultiStyleValue */];\n    if (ignoreAllClassUpdates && ignoreAllStyleUpdates)\n        return;\n    context[6 /* PreviousOrCachedMultiClassValue */] = classesValue;\n    context[7 /* PreviousMultiStyleValue */] = stylesValue;\n    /** @type {?} */\n    var classNames = EMPTY_ARR;\n    /** @type {?} */\n    var applyAllClasses = false;\n    /** @type {?} */\n    var playerBuildersAreDirty = false;\n    /** @type {?} */\n    var classesPlayerBuilderIndex = classesPlayerBuilder ? 1 /* ClassMapPlayerBuilderPosition */ : 0;\n    if (hasPlayerBuilderChanged(context, classesPlayerBuilder, 1 /* ClassMapPlayerBuilderPosition */)) {\n        setPlayerBuilder(context, classesPlayerBuilder, 1 /* ClassMapPlayerBuilderPosition */);\n        playerBuildersAreDirty = true;\n    }\n    /** @type {?} */\n    var stylesPlayerBuilderIndex = stylesPlayerBuilder ? 3 /* StyleMapPlayerBuilderPosition */ : 0;\n    if (hasPlayerBuilderChanged(context, stylesPlayerBuilder, 3 /* StyleMapPlayerBuilderPosition */)) {\n        setPlayerBuilder(context, stylesPlayerBuilder, 3 /* StyleMapPlayerBuilderPosition */);\n        playerBuildersAreDirty = true;\n    }\n    // each time a string-based value pops up then it shouldn't require a deep\n    // check of what's changed.\n    if (!ignoreAllClassUpdates) {\n        if (typeof classesValue == 'string') {\n            classNames = classesValue.split(/\\s+/);\n            // this boolean is used to avoid having to create a key/value map of `true` values\n            // since a classname string implies that all those classes are added\n            applyAllClasses = true;\n        }\n        else {\n            classNames = classesValue ? Object.keys(classesValue) : EMPTY_ARR;\n        }\n    }\n    /** @type {?} */\n    var classes = /** @type {?} */ ((classesValue || EMPTY_OBJ));\n    /** @type {?} */\n    var styleProps = stylesValue ? Object.keys(stylesValue) : EMPTY_ARR;\n    /** @type {?} */\n    var styles = stylesValue || EMPTY_OBJ;\n    /** @type {?} */\n    var classesStartIndex = styleProps.length;\n    /** @type {?} */\n    var multiStartIndex = getMultiStartIndex(context);\n    /** @type {?} */\n    var dirty = false;\n    /** @type {?} */\n    var ctxIndex = multiStartIndex;\n    /** @type {?} */\n    var propIndex = 0;\n    /** @type {?} */\n    var propLimit = styleProps.length + classNames.length;\n    // the main loop here will try and figure out how the shape of the provided\n    // styles differ with respect to the context. Later if the context/styles/classes\n    // are off-balance then they will be dealt in another loop after this one\n    while (ctxIndex < context.length && propIndex < propLimit) {\n        /** @type {?} */\n        var isClassBased_2 = propIndex >= classesStartIndex;\n        /** @type {?} */\n        var processValue = (!isClassBased_2 && !ignoreAllStyleUpdates) || (isClassBased_2 && !ignoreAllClassUpdates);\n        // when there is a cache-hit for a string-based class then we should\n        // avoid doing any work diffing any of the changes\n        if (processValue) {\n            /** @type {?} */\n            var adjustedPropIndex = isClassBased_2 ? propIndex - classesStartIndex : propIndex;\n            /** @type {?} */\n            var newProp = isClassBased_2 ? classNames[adjustedPropIndex] : styleProps[adjustedPropIndex];\n            /** @type {?} */\n            var newValue = isClassBased_2 ? (applyAllClasses ? true : classes[newProp]) : styles[newProp];\n            /** @type {?} */\n            var playerBuilderIndex = isClassBased_2 ? classesPlayerBuilderIndex : stylesPlayerBuilderIndex;\n            /** @type {?} */\n            var prop = getProp(context, ctxIndex);\n            if (prop === newProp) {\n                /** @type {?} */\n                var value = getValue(context, ctxIndex);\n                /** @type {?} */\n                var flag = getPointers(context, ctxIndex);\n                setPlayerBuilderIndex(context, ctxIndex, playerBuilderIndex);\n                if (hasValueChanged(flag, value, newValue)) {\n                    setValue(context, ctxIndex, newValue);\n                    playerBuildersAreDirty = playerBuildersAreDirty || !!playerBuilderIndex;\n                    /** @type {?} */\n                    var initialValue = getInitialValue(context, flag);\n                    // there is no point in setting this to dirty if the previously\n                    // rendered value was being referenced by the initial style (or null)\n                    if (hasValueChanged(flag, initialValue, newValue)) {\n                        setDirty(context, ctxIndex, true);\n                        dirty = true;\n                    }\n                }\n            }\n            else {\n                /** @type {?} */\n                var indexOfEntry = findEntryPositionByProp(context, newProp, ctxIndex);\n                if (indexOfEntry > 0) {\n                    /** @type {?} */\n                    var valueToCompare = getValue(context, indexOfEntry);\n                    /** @type {?} */\n                    var flagToCompare = getPointers(context, indexOfEntry);\n                    swapMultiContextEntries(context, ctxIndex, indexOfEntry);\n                    if (hasValueChanged(flagToCompare, valueToCompare, newValue)) {\n                        /** @type {?} */\n                        var initialValue = getInitialValue(context, flagToCompare);\n                        setValue(context, ctxIndex, newValue);\n                        if (hasValueChanged(flagToCompare, initialValue, newValue)) {\n                            setDirty(context, ctxIndex, true);\n                            playerBuildersAreDirty = playerBuildersAreDirty || !!playerBuilderIndex;\n                            dirty = true;\n                        }\n                    }\n                }\n                else {\n                    /** @type {?} */\n                    var newFlag = prepareInitialFlag(newProp, isClassBased_2, getStyleSanitizer(context));\n                    playerBuildersAreDirty = playerBuildersAreDirty || !!playerBuilderIndex;\n                    insertNewMultiProperty(context, ctxIndex, isClassBased_2, newProp, newFlag, newValue, playerBuilderIndex);\n                    dirty = true;\n                }\n            }\n        }\n        ctxIndex += 4 /* Size */;\n        propIndex++;\n    }\n    // this means that there are left-over values in the context that\n    // were not included in the provided styles/classes and in this\n    // case the  goal is to \"remove\" them from the context (by nullifying)\n    while (ctxIndex < context.length) {\n        /** @type {?} */\n        var flag = getPointers(context, ctxIndex);\n        /** @type {?} */\n        var isClassBased_3 = (flag & 2 /* Class */) === 2 /* Class */;\n        /** @type {?} */\n        var processValue = (!isClassBased_3 && !ignoreAllStyleUpdates) || (isClassBased_3 && !ignoreAllClassUpdates);\n        if (processValue) {\n            /** @type {?} */\n            var value = getValue(context, ctxIndex);\n            /** @type {?} */\n            var doRemoveValue = valueExists(value, isClassBased_3);\n            if (doRemoveValue) {\n                setDirty(context, ctxIndex, true);\n                setValue(context, ctxIndex, null);\n                /** @type {?} */\n                var playerBuilderIndex = isClassBased_3 ? classesPlayerBuilderIndex : stylesPlayerBuilderIndex;\n                setPlayerBuilderIndex(context, ctxIndex, playerBuilderIndex);\n                dirty = true;\n            }\n        }\n        ctxIndex += 4 /* Size */;\n    }\n    /** @type {?} */\n    var sanitizer = getStyleSanitizer(context);\n    while (propIndex < propLimit) {\n        /** @type {?} */\n        var isClassBased_4 = propIndex >= classesStartIndex;\n        /** @type {?} */\n        var processValue = (!isClassBased_4 && !ignoreAllStyleUpdates) || (isClassBased_4 && !ignoreAllClassUpdates);\n        if (processValue) {\n            /** @type {?} */\n            var adjustedPropIndex = isClassBased_4 ? propIndex - classesStartIndex : propIndex;\n            /** @type {?} */\n            var prop = isClassBased_4 ? classNames[adjustedPropIndex] : styleProps[adjustedPropIndex];\n            /** @type {?} */\n            var value = isClassBased_4 ? (applyAllClasses ? true : classes[prop]) : styles[prop];\n            /** @type {?} */\n            var flag = prepareInitialFlag(prop, isClassBased_4, sanitizer) | 1 /* Dirty */;\n            /** @type {?} */\n            var playerBuilderIndex = isClassBased_4 ? classesPlayerBuilderIndex : stylesPlayerBuilderIndex;\n            context.push(flag, prop, value, playerBuilderIndex);\n            dirty = true;\n        }\n        propIndex++;\n    }\n    if (dirty) {\n        setContextDirty(context, true);\n    }\n    if (playerBuildersAreDirty) {\n        setContextPlayersDirty(context, true);\n    }\n}\n/**\n * Sets and resolves a single styling property/value on the provided `StylingContext` so\n * that they can be applied to the element once `renderStyleAndClassBindings` is called.\n *\n * Note that prop-level styling values are considered higher priority than any styling that\n * has been applied using `updateStylingMap`, therefore, when styling values are rendered\n * then any styles/classes that have been applied using this function will be considered first\n * (then multi values second and then initial values as a backup).\n *\n * @param {?} context The styling context that will be updated with the\n *    newly provided style value.\n * @param {?} index The index of the property which is being updated.\n * @param {?} input\n * @return {?}\n */\nexport function updateStyleProp(context, index, input) {\n    /** @type {?} */\n    var singleIndex = 8 /* SingleStylesStartPosition */ + index * 4 /* Size */;\n    /** @type {?} */\n    var currValue = getValue(context, singleIndex);\n    /** @type {?} */\n    var currFlag = getPointers(context, singleIndex);\n    /** @type {?} */\n    var value = (input instanceof BoundPlayerFactory) ? input.value : input;\n    // didn't change ... nothing to make a note of\n    if (hasValueChanged(currFlag, currValue, value)) {\n        /** @type {?} */\n        var isClassBased_5 = (currFlag & 2 /* Class */) === 2 /* Class */;\n        /** @type {?} */\n        var element = /** @type {?} */ (((context[5 /* ElementPosition */])));\n        /** @type {?} */\n        var playerBuilder = input instanceof BoundPlayerFactory ?\n            new ClassAndStylePlayerBuilder(/** @type {?} */ (input), element, isClassBased_5 ? 1 /* Class */ : 2 /* Style */) :\n            null;\n        /** @type {?} */\n        var value_1 = /** @type {?} */ ((playerBuilder ? (/** @type {?} */ (input)).value : input));\n        /** @type {?} */\n        var currPlayerIndex = getPlayerBuilderIndex(context, singleIndex);\n        /** @type {?} */\n        var playerBuildersAreDirty = false;\n        /** @type {?} */\n        var playerBuilderIndex = playerBuilder ? currPlayerIndex : 0;\n        if (hasPlayerBuilderChanged(context, playerBuilder, currPlayerIndex)) {\n            /** @type {?} */\n            var newIndex = setPlayerBuilder(context, playerBuilder, currPlayerIndex);\n            playerBuilderIndex = playerBuilder ? newIndex : 0;\n            setPlayerBuilderIndex(context, singleIndex, playerBuilderIndex);\n            playerBuildersAreDirty = true;\n        }\n        // the value will always get updated (even if the dirty flag is skipped)\n        setValue(context, singleIndex, value_1);\n        /** @type {?} */\n        var indexForMulti = getMultiOrSingleIndex(currFlag);\n        /** @type {?} */\n        var valueForMulti = getValue(context, indexForMulti);\n        if (!valueForMulti || hasValueChanged(currFlag, valueForMulti, value_1)) {\n            /** @type {?} */\n            var multiDirty = false;\n            /** @type {?} */\n            var singleDirty = true;\n            // only when the value is set to `null` should the multi-value get flagged\n            if (!valueExists(value_1, isClassBased_5) && valueExists(valueForMulti, isClassBased_5)) {\n                multiDirty = true;\n                singleDirty = false;\n            }\n            setDirty(context, indexForMulti, multiDirty);\n            setDirty(context, singleIndex, singleDirty);\n            setContextDirty(context, true);\n        }\n        if (playerBuildersAreDirty) {\n            setContextPlayersDirty(context, true);\n        }\n    }\n}\n/**\n * This method will toggle the referenced CSS class (by the provided index)\n * within the given context.\n *\n * @param {?} context The styling context that will be updated with the\n *    newly provided class value.\n * @param {?} index The index of the CSS class which is being updated.\n * @param {?} addOrRemove Whether or not to add or remove the CSS class\n * @return {?}\n */\nexport function updateClassProp(context, index, addOrRemove) {\n    /** @type {?} */\n    var adjustedIndex = index + context[4 /* ClassOffsetPosition */];\n    updateStyleProp(context, adjustedIndex, addOrRemove);\n}\n/**\n * Renders all queued styling using a renderer onto the given element.\n *\n * This function works by rendering any styles (that have been applied\n * using `updateStylingMap`) and any classes (that have been applied using\n * `updateStyleProp`) onto the provided element using the provided renderer.\n * Just before the styles/classes are rendered a final key/value style map\n * will be assembled (if `styleStore` or `classStore` are provided).\n *\n * @param {?} context The styling context that will be used to determine\n *      what styles will be rendered\n * @param {?} renderer the renderer that will be used to apply the styling\n * @param {?} rootOrView\n * @param {?} isFirstRender\n * @param {?=} classesStore if provided, the updated class values will be applied\n *    to this key/value map instead of being renderered via the renderer.\n * @param {?=} stylesStore if provided, the updated style values will be applied\n *    to this key/value map instead of being renderered via the renderer.\n * @return {?} number the total amount of players that got queued for animation (if any)\n */\nexport function renderStyleAndClassBindings(context, renderer, rootOrView, isFirstRender, classesStore, stylesStore) {\n    /** @type {?} */\n    var totalPlayersQueued = 0;\n    if (isContextDirty(context)) {\n        /** @type {?} */\n        var flushPlayerBuilders = context[3 /* MasterFlagPosition */] & 8 /* PlayerBuildersDirty */;\n        /** @type {?} */\n        var native = /** @type {?} */ ((context[5 /* ElementPosition */]));\n        /** @type {?} */\n        var multiStartIndex = getMultiStartIndex(context);\n        /** @type {?} */\n        var styleSanitizer = getStyleSanitizer(context);\n        /** @type {?} */\n        var onlySingleClasses = limitToSingleClasses(context);\n        for (var i = 8 /* SingleStylesStartPosition */; i < context.length; i += 4 /* Size */) {\n            // there is no point in rendering styles that have not changed on screen\n            if (isDirty(context, i)) {\n                /** @type {?} */\n                var prop = getProp(context, i);\n                /** @type {?} */\n                var value = getValue(context, i);\n                /** @type {?} */\n                var flag = getPointers(context, i);\n                /** @type {?} */\n                var playerBuilder = getPlayerBuilder(context, i);\n                /** @type {?} */\n                var isClassBased_6 = flag & 2 /* Class */ ? true : false;\n                /** @type {?} */\n                var isInSingleRegion = i < multiStartIndex;\n                /** @type {?} */\n                var readInitialValue = !isClassBased_6 || !onlySingleClasses;\n                /** @type {?} */\n                var valueToApply = value;\n                // VALUE DEFER CASE 1: Use a multi value instead of a null single value\n                // this check implies that a single value was removed and we\n                // should now defer to a multi value and use that (if set).\n                if (isInSingleRegion && !valueExists(valueToApply, isClassBased_6)) {\n                    /** @type {?} */\n                    var multiIndex = getMultiOrSingleIndex(flag);\n                    valueToApply = getValue(context, multiIndex);\n                }\n                // VALUE DEFER CASE 2: Use the initial value if all else fails (is falsy)\n                // the initial value will always be a string or null,\n                // therefore we can safely adopt it incase there's nothing else\n                // note that this should always be a falsy check since `false` is used\n                // for both class and style comparisons (styles can't be false and false\n                // classes are turned off and should therefore defer to their initial values)\n                if (!valueExists(valueToApply, isClassBased_6) && readInitialValue) {\n                    valueToApply = getInitialValue(context, flag);\n                }\n                /** @type {?} */\n                var doApplyValue = isFirstRender ? valueToApply : true;\n                if (doApplyValue) {\n                    if (isClassBased_6) {\n                        setClass(native, prop, valueToApply ? true : false, renderer, classesStore, playerBuilder);\n                    }\n                    else {\n                        /** @type {?} */\n                        var sanitizer = (flag & 4 /* Sanitize */) ? styleSanitizer : null;\n                        setStyle(native, prop, /** @type {?} */ (valueToApply), renderer, sanitizer, stylesStore, playerBuilder);\n                    }\n                }\n                setDirty(context, i, false);\n            }\n        }\n        if (flushPlayerBuilders) {\n            /** @type {?} */\n            var rootContext = Array.isArray(rootOrView) ? getRootContext(rootOrView) : /** @type {?} */ (rootOrView);\n            /** @type {?} */\n            var playerContext = /** @type {?} */ ((getPlayerContext(context)));\n            /** @type {?} */\n            var playersStartIndex = playerContext[0 /* NonBuilderPlayersStart */];\n            for (var i = 1 /* PlayerBuildersStartPosition */; i < playersStartIndex; i += 2 /* PlayerAndPlayerBuildersTupleSize */) {\n                /** @type {?} */\n                var builder = /** @type {?} */ (playerContext[i]);\n                /** @type {?} */\n                var playerInsertionIndex = i + 1 /* PlayerOffsetPosition */;\n                /** @type {?} */\n                var oldPlayer = /** @type {?} */ (playerContext[playerInsertionIndex]);\n                if (builder) {\n                    /** @type {?} */\n                    var player = builder.buildPlayer(oldPlayer, isFirstRender);\n                    if (player !== undefined) {\n                        if (player != null) {\n                            /** @type {?} */\n                            var wasQueued = addPlayerInternal(playerContext, rootContext, /** @type {?} */ (native), player, playerInsertionIndex);\n                            wasQueued && totalPlayersQueued++;\n                        }\n                        if (oldPlayer) {\n                            oldPlayer.destroy();\n                        }\n                    }\n                }\n                else if (oldPlayer) {\n                    // the player builder has been removed ... therefore we should delete the associated\n                    // player\n                    oldPlayer.destroy();\n                }\n            }\n            setContextPlayersDirty(context, false);\n        }\n        setContextDirty(context, false);\n    }\n    return totalPlayersQueued;\n}\n/**\n * This function renders a given CSS prop/value entry using the\n * provided renderer. If a `store` value is provided then\n * that will be used a render context instead of the provided\n * renderer.\n *\n * @param {?} native the DOM Element\n * @param {?} prop the CSS style property that will be rendered\n * @param {?} value the CSS style value that will be rendered\n * @param {?} renderer\n * @param {?} sanitizer\n * @param {?=} store an optional key/value map that will be used as a context to render styles on\n * @param {?=} playerBuilder\n * @return {?}\n */\nfunction setStyle(native, prop, value, renderer, sanitizer, store, playerBuilder) {\n    value = sanitizer && value ? sanitizer(prop, value) : value;\n    if (store || playerBuilder) {\n        if (store) {\n            store.setValue(prop, value);\n        }\n        if (playerBuilder) {\n            playerBuilder.setValue(prop, value);\n        }\n    }\n    else if (value) {\n        ngDevMode && ngDevMode.rendererSetStyle++;\n        isProceduralRenderer(renderer) ?\n            renderer.setStyle(native, prop, value, RendererStyleFlags3.DashCase) :\n            native['style'].setProperty(prop, value);\n    }\n    else {\n        ngDevMode && ngDevMode.rendererRemoveStyle++;\n        isProceduralRenderer(renderer) ?\n            renderer.removeStyle(native, prop, RendererStyleFlags3.DashCase) :\n            native['style'].removeProperty(prop);\n    }\n}\n/**\n * This function renders a given CSS class value using the provided\n * renderer (by adding or removing it from the provided element).\n * If a `store` value is provided then that will be used a render\n * context instead of the provided renderer.\n *\n * @param {?} native the DOM Element\n * @param {?} className\n * @param {?} add\n * @param {?} renderer\n * @param {?=} store an optional key/value map that will be used as a context to render styles on\n * @param {?=} playerBuilder\n * @return {?}\n */\nfunction setClass(native, className, add, renderer, store, playerBuilder) {\n    if (store || playerBuilder) {\n        if (store) {\n            store.setValue(className, add);\n        }\n        if (playerBuilder) {\n            playerBuilder.setValue(className, add);\n        }\n    }\n    else if (add) {\n        ngDevMode && ngDevMode.rendererAddClass++;\n        isProceduralRenderer(renderer) ? renderer.addClass(native, className) :\n            native['classList'].add(className);\n    }\n    else {\n        ngDevMode && ngDevMode.rendererRemoveClass++;\n        isProceduralRenderer(renderer) ? renderer.removeClass(native, className) :\n            native['classList'].remove(className);\n    }\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} isDirtyYes\n * @return {?}\n */\nfunction setDirty(context, index, isDirtyYes) {\n    /** @type {?} */\n    var adjustedIndex = index >= 8 /* SingleStylesStartPosition */ ? (index + 0 /* FlagsOffset */) : index;\n    if (isDirtyYes) {\n        (/** @type {?} */ (context[adjustedIndex])) |= 1 /* Dirty */;\n    }\n    else {\n        (/** @type {?} */ (context[adjustedIndex])) &= ~1 /* Dirty */;\n    }\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction isDirty(context, index) {\n    /** @type {?} */\n    var adjustedIndex = index >= 8 /* SingleStylesStartPosition */ ? (index + 0 /* FlagsOffset */) : index;\n    return ((/** @type {?} */ (context[adjustedIndex])) & 1 /* Dirty */) == 1 /* Dirty */;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction isClassBased(context, index) {\n    /** @type {?} */\n    var adjustedIndex = index >= 8 /* SingleStylesStartPosition */ ? (index + 0 /* FlagsOffset */) : index;\n    return ((/** @type {?} */ (context[adjustedIndex])) & 2 /* Class */) == 2 /* Class */;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction isSanitizable(context, index) {\n    /** @type {?} */\n    var adjustedIndex = index >= 8 /* SingleStylesStartPosition */ ? (index + 0 /* FlagsOffset */) : index;\n    return ((/** @type {?} */ (context[adjustedIndex])) & 4 /* Sanitize */) == 4 /* Sanitize */;\n}\n/**\n * @param {?} configFlag\n * @param {?} staticIndex\n * @param {?} dynamicIndex\n * @return {?}\n */\nfunction pointers(configFlag, staticIndex, dynamicIndex) {\n    return (configFlag & 31 /* BitMask */) | (staticIndex << 5 /* BitCountSize */) |\n        (dynamicIndex << (14 /* BitCountSize */ + 5 /* BitCountSize */));\n}\n/**\n * @param {?} context\n * @param {?} flag\n * @return {?}\n */\nfunction getInitialValue(context, flag) {\n    /** @type {?} */\n    var index = getInitialIndex(flag);\n    return /** @type {?} */ (context[2 /* InitialStylesPosition */][index]);\n}\n/**\n * @param {?} flag\n * @return {?}\n */\nfunction getInitialIndex(flag) {\n    return (flag >> 5 /* BitCountSize */) & 16383 /* BitMask */;\n}\n/**\n * @param {?} flag\n * @return {?}\n */\nfunction getMultiOrSingleIndex(flag) {\n    /** @type {?} */\n    var index = (flag >> (14 /* BitCountSize */ + 5 /* BitCountSize */)) & 16383 /* BitMask */;\n    return index >= 8 /* SingleStylesStartPosition */ ? index : -1;\n}\n/**\n * @param {?} context\n * @return {?}\n */\nfunction getMultiStartIndex(context) {\n    return /** @type {?} */ (getMultiOrSingleIndex(context[3 /* MasterFlagPosition */]));\n}\n/**\n * @param {?} context\n * @return {?}\n */\nfunction getStyleSanitizer(context) {\n    return context[1 /* StyleSanitizerPosition */];\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} prop\n * @return {?}\n */\nfunction setProp(context, index, prop) {\n    context[index + 1 /* PropertyOffset */] = prop;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} value\n * @return {?}\n */\nfunction setValue(context, index, value) {\n    context[index + 2 /* ValueOffset */] = value;\n}\n/**\n * @param {?} context\n * @param {?} builder\n * @param {?} index\n * @return {?}\n */\nfunction hasPlayerBuilderChanged(context, builder, index) {\n    /** @type {?} */\n    var playerContext = /** @type {?} */ ((context[0 /* PlayerContext */]));\n    if (builder) {\n        if (!playerContext || index === 0) {\n            return true;\n        }\n    }\n    else if (!playerContext) {\n        return false;\n    }\n    return playerContext[index] !== builder;\n}\n/**\n * @param {?} context\n * @param {?} builder\n * @param {?} insertionIndex\n * @return {?}\n */\nfunction setPlayerBuilder(context, builder, insertionIndex) {\n    /** @type {?} */\n    var playerContext = context[0 /* PlayerContext */] || allocPlayerContext(context);\n    if (insertionIndex > 0) {\n        playerContext[insertionIndex] = builder;\n    }\n    else {\n        insertionIndex = playerContext[0 /* NonBuilderPlayersStart */];\n        playerContext.splice(insertionIndex, 0, builder, null);\n        playerContext[0 /* NonBuilderPlayersStart */] +=\n            2 /* PlayerAndPlayerBuildersTupleSize */;\n    }\n    return insertionIndex;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} playerBuilderIndex\n * @return {?}\n */\nfunction setPlayerBuilderIndex(context, index, playerBuilderIndex) {\n    context[index + 3 /* PlayerBuilderIndexOffset */] = playerBuilderIndex;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction getPlayerBuilderIndex(context, index) {\n    return (/** @type {?} */ (context[index + 3 /* PlayerBuilderIndexOffset */])) || 0;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction getPlayerBuilder(context, index) {\n    /** @type {?} */\n    var playerBuilderIndex = getPlayerBuilderIndex(context, index);\n    if (playerBuilderIndex) {\n        /** @type {?} */\n        var playerContext = context[0 /* PlayerContext */];\n        if (playerContext) {\n            return /** @type {?} */ (playerContext[playerBuilderIndex]);\n        }\n    }\n    return null;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} flag\n * @return {?}\n */\nfunction setFlag(context, index, flag) {\n    /** @type {?} */\n    var adjustedIndex = index === 3 /* MasterFlagPosition */ ? index : (index + 0 /* FlagsOffset */);\n    context[adjustedIndex] = flag;\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction getPointers(context, index) {\n    /** @type {?} */\n    var adjustedIndex = index === 3 /* MasterFlagPosition */ ? index : (index + 0 /* FlagsOffset */);\n    return /** @type {?} */ (context[adjustedIndex]);\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction getValue(context, index) {\n    return /** @type {?} */ (context[index + 2 /* ValueOffset */]);\n}\n/**\n * @param {?} context\n * @param {?} index\n * @return {?}\n */\nfunction getProp(context, index) {\n    return /** @type {?} */ (context[index + 1 /* PropertyOffset */]);\n}\n/**\n * @param {?} context\n * @return {?}\n */\nexport function isContextDirty(context) {\n    return isDirty(context, 3 /* MasterFlagPosition */);\n}\n/**\n * @param {?} context\n * @return {?}\n */\nexport function limitToSingleClasses(context) {\n    return context[3 /* MasterFlagPosition */] & 16 /* OnlyProcessSingleClasses */;\n}\n/**\n * @param {?} context\n * @param {?} isDirtyYes\n * @return {?}\n */\nexport function setContextDirty(context, isDirtyYes) {\n    setDirty(context, 3 /* MasterFlagPosition */, isDirtyYes);\n}\n/**\n * @param {?} context\n * @param {?} isDirtyYes\n * @return {?}\n */\nexport function setContextPlayersDirty(context, isDirtyYes) {\n    if (isDirtyYes) {\n        (/** @type {?} */ (context[3 /* MasterFlagPosition */])) |= 8 /* PlayerBuildersDirty */;\n    }\n    else {\n        (/** @type {?} */ (context[3 /* MasterFlagPosition */])) &= ~8 /* PlayerBuildersDirty */;\n    }\n}\n/**\n * @param {?} context\n * @param {?} prop\n * @param {?=} startIndex\n * @return {?}\n */\nfunction findEntryPositionByProp(context, prop, startIndex) {\n    for (var i = (startIndex || 0) + 1 /* PropertyOffset */; i < context.length; i += 4 /* Size */) {\n        /** @type {?} */\n        var thisProp = context[i];\n        if (thisProp == prop) {\n            return i - 1 /* PropertyOffset */;\n        }\n    }\n    return -1;\n}\n/**\n * @param {?} context\n * @param {?} indexA\n * @param {?} indexB\n * @return {?}\n */\nfunction swapMultiContextEntries(context, indexA, indexB) {\n    /** @type {?} */\n    var tmpValue = getValue(context, indexA);\n    /** @type {?} */\n    var tmpProp = getProp(context, indexA);\n    /** @type {?} */\n    var tmpFlag = getPointers(context, indexA);\n    /** @type {?} */\n    var tmpPlayerBuilderIndex = getPlayerBuilderIndex(context, indexA);\n    /** @type {?} */\n    var flagA = tmpFlag;\n    /** @type {?} */\n    var flagB = getPointers(context, indexB);\n    /** @type {?} */\n    var singleIndexA = getMultiOrSingleIndex(flagA);\n    if (singleIndexA >= 0) {\n        /** @type {?} */\n        var _flag = getPointers(context, singleIndexA);\n        /** @type {?} */\n        var _initial = getInitialIndex(_flag);\n        setFlag(context, singleIndexA, pointers(_flag, _initial, indexB));\n    }\n    /** @type {?} */\n    var singleIndexB = getMultiOrSingleIndex(flagB);\n    if (singleIndexB >= 0) {\n        /** @type {?} */\n        var _flag = getPointers(context, singleIndexB);\n        /** @type {?} */\n        var _initial = getInitialIndex(_flag);\n        setFlag(context, singleIndexB, pointers(_flag, _initial, indexA));\n    }\n    setValue(context, indexA, getValue(context, indexB));\n    setProp(context, indexA, getProp(context, indexB));\n    setFlag(context, indexA, getPointers(context, indexB));\n    setPlayerBuilderIndex(context, indexA, getPlayerBuilderIndex(context, indexB));\n    setValue(context, indexB, tmpValue);\n    setProp(context, indexB, tmpProp);\n    setFlag(context, indexB, tmpFlag);\n    setPlayerBuilderIndex(context, indexB, tmpPlayerBuilderIndex);\n}\n/**\n * @param {?} context\n * @param {?} indexStartPosition\n * @return {?}\n */\nfunction updateSinglePointerValues(context, indexStartPosition) {\n    for (var i = indexStartPosition; i < context.length; i += 4 /* Size */) {\n        /** @type {?} */\n        var multiFlag = getPointers(context, i);\n        /** @type {?} */\n        var singleIndex = getMultiOrSingleIndex(multiFlag);\n        if (singleIndex > 0) {\n            /** @type {?} */\n            var singleFlag = getPointers(context, singleIndex);\n            /** @type {?} */\n            var initialIndexForSingle = getInitialIndex(singleFlag);\n            /** @type {?} */\n            var flagValue = (isDirty(context, singleIndex) ? 1 /* Dirty */ : 0 /* None */) |\n                (isClassBased(context, singleIndex) ? 2 /* Class */ : 0 /* None */) |\n                (isSanitizable(context, singleIndex) ? 4 /* Sanitize */ : 0 /* None */);\n            /** @type {?} */\n            var updatedFlag = pointers(flagValue, initialIndexForSingle, i);\n            setFlag(context, singleIndex, updatedFlag);\n        }\n    }\n}\n/**\n * @param {?} context\n * @param {?} index\n * @param {?} classBased\n * @param {?} name\n * @param {?} flag\n * @param {?} value\n * @param {?} playerIndex\n * @return {?}\n */\nfunction insertNewMultiProperty(context, index, classBased, name, flag, value, playerIndex) {\n    /** @type {?} */\n    var doShift = index < context.length;\n    // prop does not exist in the list, add it in\n    context.splice(index, 0, flag | 1 /* Dirty */ | (classBased ? 2 /* Class */ : 0 /* None */), name, value, playerIndex);\n    if (doShift) {\n        // because the value was inserted midway into the array then we\n        // need to update all the shifted multi values' single value\n        // pointers to point to the newly shifted location\n        updateSinglePointerValues(context, index + 4 /* Size */);\n    }\n}\n/**\n * @param {?} value\n * @param {?=} isClassBased\n * @return {?}\n */\nfunction valueExists(value, isClassBased) {\n    if (isClassBased) {\n        return value ? true : false;\n    }\n    return value !== null;\n}\n/**\n * @param {?} name\n * @param {?} isClassBased\n * @param {?=} sanitizer\n * @return {?}\n */\nfunction prepareInitialFlag(name, isClassBased, sanitizer) {\n    if (isClassBased) {\n        return 2 /* Class */;\n    }\n    else if (sanitizer && sanitizer(name)) {\n        return 4 /* Sanitize */;\n    }\n    return 0 /* None */;\n}\n/**\n * @param {?} flag\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction hasValueChanged(flag, a, b) {\n    /** @type {?} */\n    var isClassBased = flag & 2 /* Class */;\n    /** @type {?} */\n    var hasValues = a && b;\n    /** @type {?} */\n    var usesSanitizer = flag & 4 /* Sanitize */;\n    // the toString() comparison ensures that a value is checked\n    // ... otherwise (during sanitization bypassing) the === comparsion\n    // would fail since a new String() instance is created\n    if (!isClassBased && hasValues && usesSanitizer) {\n        // we know for sure we're dealing with strings at this point\n        return (/** @type {?} */ (a)).toString() !== (/** @type {?} */ (b)).toString();\n    }\n    // everything else is safe to check with a normal equality check\n    return a !== b;\n}\n/**\n * @template T\n */\nvar /**\n * @template T\n */\nClassAndStylePlayerBuilder = /** @class */ (function () {\n    function ClassAndStylePlayerBuilder(factory, _element, _type) {\n        this._element = _element;\n        this._type = _type;\n        this._values = {};\n        this._dirty = false;\n        this._factory = /** @type {?} */ (factory);\n    }\n    /**\n     * @param {?} prop\n     * @param {?} value\n     * @return {?}\n     */\n    ClassAndStylePlayerBuilder.prototype.setValue = /**\n     * @param {?} prop\n     * @param {?} value\n     * @return {?}\n     */\n    function (prop, value) {\n        if (this._values[prop] !== value) {\n            this._values[prop] = value;\n            this._dirty = true;\n        }\n    };\n    /**\n     * @param {?} currentPlayer\n     * @param {?} isFirstRender\n     * @return {?}\n     */\n    ClassAndStylePlayerBuilder.prototype.buildPlayer = /**\n     * @param {?} currentPlayer\n     * @param {?} isFirstRender\n     * @return {?}\n     */\n    function (currentPlayer, isFirstRender) {\n        // if no values have been set here then this means the binding didn't\n        // change and therefore the binding values were not updated through\n        // `setValue` which means no new player will be provided.\n        if (this._dirty) {\n            /** @type {?} */\n            var player = this._factory.fn(this._element, this._type, /** @type {?} */ ((this._values)), isFirstRender, currentPlayer || null);\n            this._values = {};\n            this._dirty = false;\n            return player;\n        }\n        return undefined;\n    };\n    return ClassAndStylePlayerBuilder;\n}());\n/**\n * @template T\n */\nexport { ClassAndStylePlayerBuilder };\nif (false) {\n    /** @type {?} */\n    ClassAndStylePlayerBuilder.prototype._values;\n    /** @type {?} */\n    ClassAndStylePlayerBuilder.prototype._dirty;\n    /** @type {?} */\n    ClassAndStylePlayerBuilder.prototype._factory;\n    /** @type {?} */\n    ClassAndStylePlayerBuilder.prototype._element;\n    /** @type {?} */\n    ClassAndStylePlayerBuilder.prototype._type;\n}\n//# sourceMappingURL=class_and_style_bindings.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { resolveForwardRef } from '../di/forward_ref';\nimport { InjectFlags } from '../di/injector_compatibility';\nimport { normalizeDebugBindingName, normalizeDebugBindingValue } from '../util/ng_reflect';\nimport { assertDataInRange, assertDefined, assertEqual, assertHasParent, assertLessThan, assertNotEqual, assertPreviousIsParent } from './assert';\nimport { bindingUpdated, bindingUpdated2, bindingUpdated3, bindingUpdated4 } from './bindings';\nimport { attachPatchData, getComponentViewByInstance } from './context_discovery';\nimport { diPublicInInjector, getNodeInjectable, getOrCreateInjectable, getOrCreateNodeInjectorForNode, injectAttributeImpl } from './di';\nimport { throwMultipleComponentError } from './errors';\nimport { executeHooks, executeInitHooks, queueInitHooks, queueLifecycleHooks } from './hooks';\nimport { ACTIVE_INDEX, VIEWS } from './interfaces/container';\nimport { INJECTOR_SIZE, NodeInjectorFactory } from './interfaces/injector';\nimport { NG_PROJECT_AS_ATTR_NAME } from './interfaces/projection';\nimport { isProceduralRenderer } from './interfaces/renderer';\nimport { BINDING_INDEX, CLEANUP, CONTAINER_INDEX, CONTENT_QUERIES, CONTEXT, DECLARATION_VIEW, FLAGS, HEADER_OFFSET, HOST, HOST_NODE, INJECTOR, NEXT, PARENT, QUERIES, RENDERER, RENDERER_FACTORY, SANITIZER, TAIL, TVIEW } from './interfaces/view';\nimport { assertNodeOfPossibleTypes, assertNodeType } from './node_assert';\nimport { appendChild, appendProjectedNode, createTextNode, findComponentView, getLViewChild, getRenderParent, insertView, removeView } from './node_manipulation';\nimport { isNodeMatchingSelectorList, matchingSelectorIndex } from './node_selector_matcher';\nimport { decreaseElementDepthCount, enterView, getBindingsEnabled, getCheckNoChangesMode, getContextLView, getCreationMode, getCurrentDirectiveDef, getElementDepthCount, getFirstTemplatePass, getIsParent, getLView, getPreviousOrParentTNode, increaseElementDepthCount, leaveView, nextContextImpl, resetComponentState, setBindingRoot, setCheckNoChangesMode, setCurrentDirectiveDef, setFirstTemplatePass, setIsParent, setPreviousOrParentTNode } from './state';\nimport { createStylingContextTemplate, renderStyleAndClassBindings, updateClassProp as updateElementClassProp, updateStyleProp as updateElementStyleProp, updateStylingMap } from './styling/class_and_style_bindings';\nimport { BoundPlayerFactory } from './styling/player_factory';\nimport { getStylingContext } from './styling/util';\nimport { NO_CHANGE } from './tokens';\nimport { getComponentViewByIndex, getNativeByIndex, getNativeByTNode, getRootContext, getRootView, getTNode, isComponent, isComponentDef, loadInternal, readElementValue, readPatchedLView, stringify } from './util';\n/** *\n * A permanent marker promise which signifies that the current CD tree is\n * clean.\n  @type {?} */\nvar _CLEAN_PROMISE = Promise.resolve(null);\n/** @enum {number} */\nvar BindingDirection = {\n    Input: 0,\n    Output: 1,\n};\n/**\n * Refreshes the view, executing the following steps in that order:\n * triggers init hooks, refreshes dynamic embedded views, triggers content hooks, sets host\n * bindings, refreshes child components.\n * Note: view hooks are triggered later when leaving the view.\n * @param {?} lView\n * @param {?} rf\n * @return {?}\n */\nexport function refreshDescendantViews(lView, rf) {\n    /** @type {?} */\n    var tView = lView[TVIEW];\n    // This needs to be set before children are processed to support recursive components\n    tView.firstTemplatePass = false;\n    setFirstTemplatePass(false);\n    // Dynamically created views must run first only in creation mode. If this is a\n    // creation-only pass, we should not call lifecycle hooks or evaluate bindings.\n    // This will be done in the update-only pass.\n    if (rf !== 1 /* Create */) {\n        /** @type {?} */\n        var creationMode = getCreationMode();\n        /** @type {?} */\n        var checkNoChangesMode = getCheckNoChangesMode();\n        if (!checkNoChangesMode) {\n            executeInitHooks(lView, tView, creationMode);\n        }\n        refreshDynamicEmbeddedViews(lView);\n        // Content query results must be refreshed before content hooks are called.\n        refreshContentQueries(tView);\n        if (!checkNoChangesMode) {\n            executeHooks(lView, tView.contentHooks, tView.contentCheckHooks, creationMode);\n        }\n        setHostBindings(tView, lView);\n    }\n    refreshChildComponents(tView.components, rf);\n}\n/**\n * Sets the host bindings for the current view.\n * @param {?} tView\n * @param {?} viewData\n * @return {?}\n */\nexport function setHostBindings(tView, viewData) {\n    if (tView.expandoInstructions) {\n        /** @type {?} */\n        var bindingRootIndex = viewData[BINDING_INDEX] = tView.expandoStartIndex;\n        setBindingRoot(bindingRootIndex);\n        /** @type {?} */\n        var currentDirectiveIndex = -1;\n        /** @type {?} */\n        var currentElementIndex = -1;\n        for (var i = 0; i < tView.expandoInstructions.length; i++) {\n            /** @type {?} */\n            var instruction = tView.expandoInstructions[i];\n            if (typeof instruction === 'number') {\n                if (instruction <= 0) {\n                    // Negative numbers mean that we are starting new EXPANDO block and need to update\n                    // the current element and directive index.\n                    currentElementIndex = -instruction;\n                    /** @type {?} */\n                    var providerCount = (/** @type {?} */ (tView.expandoInstructions[++i]));\n                    bindingRootIndex += INJECTOR_SIZE + providerCount;\n                    currentDirectiveIndex = bindingRootIndex;\n                }\n                else {\n                    // This is either the injector size (so the binding root can skip over directives\n                    // and get to the first set of host bindings on this node) or the host var count\n                    // (to get to the next set of host bindings on this node).\n                    bindingRootIndex += instruction;\n                }\n                setBindingRoot(bindingRootIndex);\n            }\n            else {\n                // If it's not a number, it's a host binding function that needs to be executed.\n                if (instruction !== null) {\n                    viewData[BINDING_INDEX] = bindingRootIndex;\n                    instruction(2 /* Update */, readElementValue(viewData[currentDirectiveIndex]), currentElementIndex);\n                }\n                currentDirectiveIndex++;\n            }\n        }\n    }\n}\n/**\n * Refreshes content queries for all directives in the given view.\n * @param {?} tView\n * @return {?}\n */\nfunction refreshContentQueries(tView) {\n    if (tView.contentQueries != null) {\n        for (var i = 0; i < tView.contentQueries.length; i += 2) {\n            /** @type {?} */\n            var directiveDefIdx = tView.contentQueries[i];\n            /** @type {?} */\n            var directiveDef = /** @type {?} */ (tView.data[directiveDefIdx]); /** @type {?} */\n            ((directiveDef.contentQueriesRefresh))(directiveDefIdx - HEADER_OFFSET, tView.contentQueries[i + 1]);\n        }\n    }\n}\n/**\n * Refreshes child components in the current view.\n * @param {?} components\n * @param {?} rf\n * @return {?}\n */\nfunction refreshChildComponents(components, rf) {\n    if (components != null) {\n        for (var i = 0; i < components.length; i++) {\n            componentRefresh(components[i], rf);\n        }\n    }\n}\n/**\n * @template T\n * @param {?} parentLView\n * @param {?} tView\n * @param {?} context\n * @param {?} flags\n * @param {?=} rendererFactory\n * @param {?=} renderer\n * @param {?=} sanitizer\n * @param {?=} injector\n * @return {?}\n */\nexport function createLView(parentLView, tView, context, flags, rendererFactory, renderer, sanitizer, injector) {\n    /** @type {?} */\n    var lView = /** @type {?} */ (tView.blueprint.slice());\n    lView[FLAGS] = flags | 1 /* CreationMode */ | 8 /* Attached */ | 16 /* RunInit */;\n    lView[PARENT] = lView[DECLARATION_VIEW] = parentLView;\n    lView[CONTEXT] = context;\n    lView[RENDERER_FACTORY] = /** @type {?} */ (((rendererFactory || parentLView && parentLView[RENDERER_FACTORY])));\n    ngDevMode && assertDefined(lView[RENDERER_FACTORY], 'RendererFactory is required');\n    lView[RENDERER] = /** @type {?} */ (((renderer || parentLView && parentLView[RENDERER])));\n    ngDevMode && assertDefined(lView[RENDERER], 'Renderer is required');\n    lView[SANITIZER] = sanitizer || parentLView && parentLView[SANITIZER] || /** @type {?} */ ((null));\n    lView[/** @type {?} */ (INJECTOR)] = injector || parentLView && parentLView[INJECTOR] || null;\n    return lView;\n}\n/**\n * @param {?} index\n * @param {?} type\n * @param {?} native\n * @param {?} name\n * @param {?} attrs\n * @return {?}\n */\nexport function createNodeAtIndex(index, type, native, name, attrs) {\n    /** @type {?} */\n    var lView = getLView();\n    /** @type {?} */\n    var tView = lView[TVIEW];\n    /** @type {?} */\n    var adjustedIndex = index + HEADER_OFFSET;\n    ngDevMode &&\n        assertLessThan(adjustedIndex, lView.length, \"Slot should have been initialized with null\");\n    lView[adjustedIndex] = native;\n    /** @type {?} */\n    var tNode = /** @type {?} */ (tView.data[adjustedIndex]);\n    if (tNode == null) {\n        /** @type {?} */\n        var previousOrParentTNode = getPreviousOrParentTNode();\n        /** @type {?} */\n        var isParent = getIsParent();\n        tNode = tView.data[adjustedIndex] = createTNode(lView, type, adjustedIndex, name, attrs, null);\n        // Now link ourselves into the tree.\n        if (previousOrParentTNode) {\n            if (isParent && previousOrParentTNode.child == null &&\n                (tNode.parent !== null || previousOrParentTNode.type === 2 /* View */)) {\n                // We are in the same view, which means we are adding content node to the parent view.\n                previousOrParentTNode.child = tNode;\n            }\n            else if (!isParent) {\n                previousOrParentTNode.next = tNode;\n            }\n        }\n    }\n    if (tView.firstChild == null && type === 3 /* Element */) {\n        tView.firstChild = tNode;\n    }\n    setPreviousOrParentTNode(tNode);\n    setIsParent(true);\n    return /** @type {?} */ (tNode);\n}\n/**\n * @param {?} index\n * @param {?} view\n * @return {?}\n */\nexport function createViewNode(index, view) {\n    // View nodes are not stored in data because they can be added / removed at runtime (which\n    // would cause indices to change). Their TNodes are instead stored in tView.node.\n    if (view[TVIEW].node == null) {\n        view[TVIEW].node = /** @type {?} */ (createTNode(view, 2 /* View */, index, null, null, null));\n    }\n    setIsParent(true);\n    /** @type {?} */\n    var tNode = /** @type {?} */ (view[TVIEW].node);\n    setPreviousOrParentTNode(tNode);\n    return view[HOST_NODE] = tNode;\n}\n/**\n * When elements are created dynamically after a view blueprint is created (e.g. through\n * i18nApply() or ComponentFactory.create), we need to adjust the blueprint for future\n * template passes.\n * @param {?} view\n * @return {?}\n */\nexport function allocExpando(view) {\n    /** @type {?} */\n    var tView = view[TVIEW];\n    if (tView.firstTemplatePass) {\n        tView.expandoStartIndex++;\n        tView.blueprint.push(null);\n        tView.data.push(null);\n        view.push(null);\n    }\n}\n/**\n *\n * @template T\n * @param {?} hostNode Existing node to render into.\n * @param {?} templateFn Template function with the instructions.\n * @param {?} consts The number of nodes, local refs, and pipes in this template\n * @param {?} vars\n * @param {?} context to pass into the template.\n * @param {?} providedRendererFactory renderer factory to use\n * @param {?} hostView\n * @param {?=} directives Directive defs that should be used for matching\n * @param {?=} pipes Pipe defs that should be used for matching\n * @param {?=} sanitizer\n * @return {?}\n */\nexport function renderTemplate(hostNode, templateFn, consts, vars, context, providedRendererFactory, hostView, directives, pipes, sanitizer) {\n    if (hostView == null) {\n        resetComponentState();\n        /** @type {?} */\n        var renderer = providedRendererFactory.createRenderer(null, null);\n        /** @type {?} */\n        var hostLView = createLView(null, createTView(-1, null, 1, 0, null, null, null), {}, 2 /* CheckAlways */ | 64 /* IsRoot */, providedRendererFactory, renderer);\n        enterView(hostLView, null);\n        /** @type {?} */\n        var componentTView = getOrCreateTView(templateFn, consts, vars, directives || null, pipes || null, null);\n        hostView = createLView(hostLView, componentTView, context, 2 /* CheckAlways */, providedRendererFactory, renderer, sanitizer);\n        hostView[HOST_NODE] = createNodeAtIndex(0, 3 /* Element */, hostNode, null, null);\n    }\n    renderComponentOrTemplate(hostView, context, null, templateFn);\n    return hostView;\n}\n/**\n * Used for creating the LViewNode of a dynamic embedded view,\n * either through ViewContainerRef.createEmbeddedView() or TemplateRef.createEmbeddedView().\n * Such lViewNode will then be renderer with renderEmbeddedTemplate() (see below).\n * @template T\n * @param {?} tView\n * @param {?} context\n * @param {?} declarationView\n * @param {?} renderer\n * @param {?} queries\n * @param {?} injectorIndex\n * @return {?}\n */\nexport function createEmbeddedViewAndNode(tView, context, declarationView, renderer, queries, injectorIndex) {\n    /** @type {?} */\n    var _isParent = getIsParent();\n    /** @type {?} */\n    var _previousOrParentTNode = getPreviousOrParentTNode();\n    setIsParent(true);\n    setPreviousOrParentTNode(/** @type {?} */ ((null)));\n    /** @type {?} */\n    var lView = createLView(declarationView, tView, context, 2 /* CheckAlways */);\n    lView[DECLARATION_VIEW] = declarationView;\n    if (queries) {\n        lView[QUERIES] = queries.createView();\n    }\n    createViewNode(-1, lView);\n    if (tView.firstTemplatePass) {\n        /** @type {?} */ ((tView.node)).injectorIndex = injectorIndex;\n    }\n    setIsParent(_isParent);\n    setPreviousOrParentTNode(_previousOrParentTNode);\n    return lView;\n}\n/**\n * Used for rendering embedded views (e.g. dynamically created views)\n *\n * Dynamically created views must store/retrieve their TViews differently from component views\n * because their template functions are nested in the template functions of their hosts, creating\n * closures. If their host template happens to be an embedded template in a loop (e.g. ngFor inside\n * an ngFor), the nesting would mean we'd have multiple instances of the template function, so we\n * can't store TViews in the template function itself (as we do for comps). Instead, we store the\n * TView for dynamically created views on their host TNode, which only has one instance.\n * @template T\n * @param {?} viewToRender\n * @param {?} tView\n * @param {?} context\n * @param {?} rf\n * @return {?}\n */\nexport function renderEmbeddedTemplate(viewToRender, tView, context, rf) {\n    /** @type {?} */\n    var _isParent = getIsParent();\n    /** @type {?} */\n    var _previousOrParentTNode = getPreviousOrParentTNode();\n    setIsParent(true);\n    setPreviousOrParentTNode(/** @type {?} */ ((null)));\n    /** @type {?} */\n    var oldView;\n    if (viewToRender[FLAGS] & 64 /* IsRoot */) {\n        // This is a root view inside the view tree\n        tickRootContext(getRootContext(viewToRender));\n    }\n    else {\n        try {\n            setIsParent(true);\n            setPreviousOrParentTNode(/** @type {?} */ ((null)));\n            oldView = enterView(viewToRender, viewToRender[HOST_NODE]);\n            namespaceHTML(); /** @type {?} */\n            ((tView.template))(rf, context);\n            if (rf & 2 /* Update */) {\n                refreshDescendantViews(viewToRender, null);\n            }\n            else {\n                // This must be set to false immediately after the first creation run because in an\n                // ngFor loop, all the views will be created together before update mode runs and turns\n                // off firstTemplatePass. If we don't set it here, instances will perform directive\n                // matching, etc again and again.\n                viewToRender[TVIEW].firstTemplatePass = false;\n                setFirstTemplatePass(false);\n            }\n        }\n        finally {\n            /** @type {?} */\n            var isCreationOnly = (rf & 1 /* Create */) === 1 /* Create */;\n            leaveView(/** @type {?} */ ((oldView)), isCreationOnly);\n            setIsParent(_isParent);\n            setPreviousOrParentTNode(_previousOrParentTNode);\n        }\n    }\n}\n/**\n * Retrieves a context at the level specified and saves it as the global, contextViewData.\n * Will get the next level up if level is not specified.\n *\n * This is used to save contexts of parent views so they can be bound in embedded views, or\n * in conjunction with reference() to bind a ref from a parent view.\n *\n * @template T\n * @param {?=} level The relative level of the view from which to grab context compared to contextVewData\n * @return {?} context\n */\nexport function nextContext(level) {\n    if (level === void 0) { level = 1; }\n    return nextContextImpl(level);\n}\n/**\n * @template T\n * @param {?} hostView\n * @param {?} componentOrContext\n * @param {?} rf\n * @param {?=} templateFn\n * @return {?}\n */\nfunction renderComponentOrTemplate(hostView, componentOrContext, rf, templateFn) {\n    /** @type {?} */\n    var rendererFactory = hostView[RENDERER_FACTORY];\n    /** @type {?} */\n    var oldView = enterView(hostView, hostView[HOST_NODE]);\n    try {\n        if (rendererFactory.begin) {\n            rendererFactory.begin();\n        }\n        if (templateFn) {\n            namespaceHTML();\n            templateFn(rf || getRenderFlags(hostView), /** @type {?} */ ((componentOrContext)));\n        }\n        refreshDescendantViews(hostView, rf);\n    }\n    finally {\n        if (rendererFactory.end) {\n            rendererFactory.end();\n        }\n        leaveView(oldView);\n    }\n}\n/**\n * This function returns the default configuration of rendering flags depending on when the\n * template is in creation mode or update mode. By default, the update block is run with the\n * creation block when the view is in creation mode. Otherwise, the update block is run\n * alone.\n *\n * Dynamically created views do NOT use this configuration (update block and create block are\n * always run separately).\n * @param {?} view\n * @return {?}\n */\nfunction getRenderFlags(view) {\n    return view[FLAGS] & 1 /* CreationMode */ ? 1 /* Create */ | 2 /* Update */ :\n        2 /* Update */;\n}\n/** @type {?} */\nvar _currentNamespace = null;\n/**\n * @return {?}\n */\nexport function namespaceSVG() {\n    _currentNamespace = 'http://www.w3.org/2000/svg/';\n}\n/**\n * @return {?}\n */\nexport function namespaceMathML() {\n    _currentNamespace = 'http://www.w3.org/1998/MathML/';\n}\n/**\n * @return {?}\n */\nexport function namespaceHTML() {\n    _currentNamespace = null;\n}\n/**\n * Creates an empty element using {\\@link elementStart} and {\\@link elementEnd}\n *\n * @param {?} index Index of the element in the data array\n * @param {?} name Name of the DOM Node\n * @param {?=} attrs Statically bound set of attributes to be written into the DOM element on creation.\n * @param {?=} localRefs A set of local reference bindings on the element.\n * @return {?}\n */\nexport function element(index, name, attrs, localRefs) {\n    elementStart(index, name, attrs, localRefs);\n    elementEnd();\n}\n/**\n * Creates a logical container for other nodes (<ng-container>) backed by a comment node in the DOM.\n * The instruction must later be followed by `elementContainerEnd()` call.\n *\n * @param {?} index Index of the element in the LView array\n * @param {?=} attrs Set of attributes to be used when matching directives.\n * @param {?=} localRefs A set of local reference bindings on the element.\n *\n * Even if this instruction accepts a set of attributes no actual attribute values are propagated to\n * the DOM (as a comment node can't have attributes). Attributes are here only for directive\n * matching purposes and setting initial inputs of directives.\n * @return {?}\n */\nexport function elementContainerStart(index, attrs, localRefs) {\n    /** @type {?} */\n    var lView = getLView();\n    /** @type {?} */\n    var tView = lView[TVIEW];\n    /** @type {?} */\n    var renderer = lView[RENDERER];\n    ngDevMode && assertEqual(lView[BINDING_INDEX], tView.bindingStartIndex, 'element containers should be created before any bindings');\n    ngDevMode && ngDevMode.rendererCreateComment++;\n    /** @type {?} */\n    var native = renderer.createComment(ngDevMode ? 'ng-container' : '');\n    ngDevMode && assertDataInRange(lView, index - 1);\n    /** @type {?} */\n    var tNode = createNodeAtIndex(index, 4 /* ElementContainer */, native, null, attrs || null);\n    appendChild(native, tNode, lView);\n    createDirectivesAndLocals(tView, lView, localRefs);\n}\n/**\n * Mark the end of the <ng-container>.\n * @return {?}\n */\nexport function elementContainerEnd() {\n    /** @type {?} */\n    var previousOrParentTNode = getPreviousOrParentTNode();\n    /** @type {?} */\n    var lView = getLView();\n    /** @type {?} */\n    var tView = lView[TVIEW];\n    if (getIsParent()) {\n        setIsParent(false);\n    }\n    else {\n        ngDevMode && assertHasParent(getPreviousOrParentTNode());\n        previousOrParentTNode = /** @type {?} */ ((previousOrParentTNode.parent));\n        setPreviousOrParentTNode(previousOrParentTNode);\n    }\n    ngDevMode && assertNodeType(previousOrParentTNode, 4 /* ElementContainer */);\n    /** @type {?} */\n    var currentQueries = lView[QUERIES];\n    if (currentQueries) {\n        lView[QUERIES] = currentQueries.addNode(/** @type {?} */ (previousOrParentTNode));\n    }\n    queueLifecycleHooks(previousOrParentTNode.flags, tView);\n}\n/**\n * Create DOM element. The instruction must later be followed by `elementEnd()` call.\n *\n * @param {?} index Index of the element in the LView array\n * @param {?} name Name of the DOM Node\n * @param {?=} attrs Statically bound set of attributes to be written into the DOM element on creation.\n * @param {?=} localRefs A set of local reference bindings on the element.\n *\n * Attributes and localRefs are passed as an array of strings where elements with an even index\n * hold an attribute name and elements with an odd index hold an attribute value, ex.:\n * ['id', 'warning5', 'class', 'alert']\n * @return {?}\n */\nexport function elementStart(index, name, attrs, localRefs) {\n    /** @type {?} */\n    var lView = getLView();\n    /** @type {?} */\n    var tView = lView[TVIEW];\n    ngDevMode && assertEqual(lView[BINDING_INDEX], tView.bindingStartIndex, 'elements should be created before any bindings ');\n    ngDevMode && ngDevMode.rendererCreateElement++;\n    /** @type {?} */\n    var native = elementCreate(name);\n    ngDevMode && assertDataInRange(lView, index - 1);\n    /** @type {?} */\n    var tNode = createNodeAtIndex(index, 3 /* Element */, /** @type {?} */ ((native)), name, attrs || null);\n    if (attrs) {\n        setUpAttributes(native, attrs);\n    }\n    appendChild(native, tNode, lView);\n    createDirectivesAndLocals(tView, lView, localRefs);\n    // any immediate children of a component or template container must be pre-emptively\n    // monkey-patched with the component view data so that the element can be inspected\n    // later on using any element discovery utility methods (see `element_discovery.ts`)\n    if (getElementDepthCount() === 0) {\n        attachPatchData(native, lView);\n    }\n    increaseElementDepthCount();\n}\n/**\n * Creates a native element from a tag name, using a renderer.\n * @param {?} name the tag name\n * @param {?=} overriddenRenderer Optional A renderer to override the default one\n * @return {?} the element created\n */\nexport function elementCreate(name, overriddenRenderer) {\n    /** @type {?} */\n    var native;\n    /** @type {?} */\n    var rendererToUse = overriddenRenderer || getLView()[RENDERER];\n    if (isProceduralRenderer(rendererToUse)) {\n        native = rendererToUse.createElement(name, _currentNamespace);\n    }\n    else {\n        if (_currentNamespace === null) {\n            native = rendererToUse.createElement(name);\n        }\n        else {\n            native = rendererToUse.createElementNS(_currentNamespace, name);\n        }\n    }\n    return native;\n}\n/**\n * Creates directive instances and populates local refs.\n *\n * @param {?} tView\n * @param {?} viewData\n * @param {?} localRefs Local refs of the node in question\n * @param {?=} localRefExtractor mapping function that extracts local ref value from TNode\n * @return {?}\n */\nfunction createDirectivesAndLocals(tView, viewData, localRefs, localRefExtractor) {\n    if (localRefExtractor === void 0) { localRefExtractor = getNativeByTNode; }\n    if (!getBindingsEnabled())\n        return;\n    /** @type {?} */\n    var previousOrParentTNode = getPreviousOrParentTNode();\n    if (getFirstTemplatePass()) {\n        ngDevMode && ngDevMode.firstTemplatePass++;\n        resolveDirectives(tView, viewData, findDirectiveMatches(tView, viewData, previousOrParentTNode), previousOrParentTNode, localRefs || null);\n    }\n    instantiateAllDirectives(tView, viewData, previousOrParentTNode);\n    invokeDirectivesHostBindings(tView, viewData, previousOrParentTNode);\n    saveResolvedLocalsInData(viewData, previousOrParentTNode, localRefExtractor);\n}\n/**\n * Takes a list of local names and indices and pushes the resolved local variable values\n * to LView in the same order as they are loaded in the template with load().\n * @param {?} viewData\n * @param {?} tNode\n * @param {?} localRefExtractor\n * @return {?}\n */\nfunction saveResolvedLocalsInData(viewData, tNode, localRefExtractor) {\n    /** @type {?} */\n    var localNames = tNode.localNames;\n    if (localNames) {\n        /** @type {?} */\n        var localIndex = tNode.index + 1;\n        for (var i = 0; i < localNames.length; i += 2) {\n            /** @type {?} */\n            var index = /** @type {?} */ (localNames[i + 1]);\n            /** @type {?} */\n            var value = index === -1 ?\n                localRefExtractor(/** @type {?} */ (tNode), viewData) :\n                viewData[index];\n            viewData[localIndex++] = value;\n        }\n    }\n}\n/**\n * Gets TView from a template function or creates a new TView\n * if it doesn't already exist.\n *\n * @param {?} templateFn The template from which to get static data\n * @param {?} consts The number of nodes, local refs, and pipes in this view\n * @param {?} vars The number of bindings and pure function bindings in this view\n * @param {?} directives Directive defs that should be saved on TView\n * @param {?} pipes Pipe defs that should be saved on TView\n * @param {?} viewQuery\n * @return {?} TView\n */\nexport function getOrCreateTView(templateFn, consts, vars, directives, pipes, viewQuery) {\n    // TODO(misko): reading `ngPrivateData` here is problematic for two reasons\n    // 1. It is a megamorphic call on each invocation.\n    // 2. For nested embedded views (ngFor inside ngFor) the template instance is per\n    //    outer template invocation, which means that no such property will exist\n    // Correct solution is to only put `ngPrivateData` on the Component template\n    // and not on embedded templates.\n    return templateFn.ngPrivateData ||\n        (templateFn.ngPrivateData = /** @type {?} */ (createTView(-1, templateFn, consts, vars, directives, pipes, viewQuery)));\n}\n/**\n * Creates a TView instance\n *\n * @param {?} viewIndex The viewBlockId for inline views, or -1 if it's a component/dynamic\n * @param {?} templateFn Template function\n * @param {?} consts The number of nodes, local refs, and pipes in this template\n * @param {?} vars\n * @param {?} directives Registry of directives for this view\n * @param {?} pipes Registry of pipes for this view\n * @param {?} viewQuery\n * @return {?}\n */\nexport function createTView(viewIndex, templateFn, consts, vars, directives, pipes, viewQuery) {\n    ngDevMode && ngDevMode.tView++;\n    /** @type {?} */\n    var bindingStartIndex = HEADER_OFFSET + consts;\n    /** @type {?} */\n    var initialViewLength = bindingStartIndex + vars;\n    /** @type {?} */\n    var blueprint = createViewBlueprint(bindingStartIndex, initialViewLength);\n    return blueprint[/** @type {?} */ (TVIEW)] = {\n        id: viewIndex,\n        blueprint: blueprint,\n        template: templateFn,\n        viewQuery: viewQuery,\n        node: /** @type {?} */ ((null)),\n        data: blueprint.slice(),\n        // Fill in to match HEADER_OFFSET in LView\n        childIndex: -1,\n        // Children set in addToViewTree(), if any\n        bindingStartIndex: bindingStartIndex,\n        expandoStartIndex: initialViewLength,\n        expandoInstructions: null,\n        firstTemplatePass: true,\n        initHooks: null,\n        checkHooks: null,\n        contentHooks: null,\n        contentCheckHooks: null,\n        viewHooks: null,\n        viewCheckHooks: null,\n        destroyHooks: null,\n        pipeDestroyHooks: null,\n        cleanup: null,\n        contentQueries: null,\n        components: null,\n        directiveRegistry: typeof directives === 'function' ? directives() : directives,\n        pipeRegistry: typeof pipes === 'function' ? pipes() : pipes,\n        firstChild: null,\n    };\n}\n/**\n * @param {?} bindingStartIndex\n * @param {?} initialViewLength\n * @return {?}\n */\nfunction createViewBlueprint(bindingStartIndex, initialViewLength) {\n    /** @type {?} */\n    var blueprint = /** @type {?} */ (new Array(initialViewLength)\n        .fill(null, 0, bindingStartIndex)\n        .fill(NO_CHANGE, bindingStartIndex));\n    blueprint[CONTAINER_INDEX] = -1;\n    blueprint[BINDING_INDEX] = bindingStartIndex;\n    return blueprint;\n}\n/**\n * @param {?} native\n * @param {?} attrs\n * @return {?}\n */\nfunction setUpAttributes(native, attrs) {\n    /** @type {?} */\n    var renderer = getLView()[RENDERER];\n    /** @type {?} */\n    var isProc = isProceduralRenderer(renderer);\n    /** @type {?} */\n    var i = 0;\n    while (i < attrs.length) {\n        /** @type {?} */\n        var attrName = attrs[i];\n        if (attrName === 1 /* SelectOnly */)\n            break;\n        if (attrName === NG_PROJECT_AS_ATTR_NAME) {\n            i += 2;\n        }\n        else {\n            ngDevMode && ngDevMode.rendererSetAttribute++;\n            if (attrName === 0 /* NamespaceURI */) {\n                /** @type {?} */\n                var namespaceURI = /** @type {?} */ (attrs[i + 1]);\n                /** @type {?} */\n                var attrName_1 = /** @type {?} */ (attrs[i + 2]);\n                /** @type {?} */\n                var attrVal = /** @type {?} */ (attrs[i + 3]);\n                isProc ?\n                    (/** @type {?} */ (renderer))\n                        .setAttribute(native, attrName_1, attrVal, namespaceURI) :\n                    native.setAttributeNS(namespaceURI, attrName_1, attrVal);\n                i += 4;\n            }\n            else {\n                /** @type {?} */\n                var attrVal = attrs[i + 1];\n                isProc ?\n                    (/** @type {?} */ (renderer))\n                        .setAttribute(native, /** @type {?} */ (attrName), /** @type {?} */ (attrVal)) :\n                    native.setAttribute(/** @type {?} */ (attrName), /** @type {?} */ (attrVal));\n                i += 2;\n            }\n        }\n    }\n}\n/**\n * @param {?} text\n * @param {?} token\n * @return {?}\n */\nexport function createError(text, token) {\n    return new Error(\"Renderer: \" + text + \" [\" + stringify(token) + \"]\");\n}\n/**\n * Locates the host native element, used for bootstrapping existing nodes into rendering pipeline.\n *\n * @param {?} factory\n * @param {?} elementOrSelector Render element or CSS selector to locate the element.\n * @return {?}\n */\nexport function locateHostElement(factory, elementOrSelector) {\n    /** @type {?} */\n    var defaultRenderer = factory.createRenderer(null, null);\n    /** @type {?} */\n    var rNode = typeof elementOrSelector === 'string' ?\n        (isProceduralRenderer(defaultRenderer) ?\n            defaultRenderer.selectRootElement(elementOrSelector) :\n            defaultRenderer.querySelector(elementOrSelector)) :\n        elementOrSelector;\n    if (ngDevMode && !rNode) {\n        if (typeof elementOrSelector === 'string') {\n            throw createError('Host node with selector not found:', elementOrSelector);\n        }\n        else {\n            throw createError('Host node is required:', elementOrSelector);\n        }\n    }\n    return rNode;\n}\n/**\n * Adds an event listener to the current node.\n *\n * If an output exists on one of the node's directives, it also subscribes to the output\n * and saves the subscription for later cleanup.\n *\n * @param {?} eventName Name of the event\n * @param {?} listenerFn The function to be called when event emits\n * @param {?=} useCapture Whether or not to use capture in event listener.\n * @return {?}\n */\nexport function listener(eventName, listenerFn, useCapture) {\n    if (useCapture === void 0) { useCapture = false; }\n    /** @type {?} */\n    var lView = getLView();\n    /** @type {?} */\n    var tNode = getPreviousOrParentTNode();\n    ngDevMode && assertNodeOfPossibleTypes(tNode, 3 /* Element */, 0 /* Container */, 4 /* ElementContainer */);\n    // add native event listener - applicable to elements only\n    if (tNode.type === 3 /* Element */) {\n        /** @type {?} */\n        var native = /** @type {?} */ (getNativeByTNode(tNode, lView));\n        ngDevMode && ngDevMode.rendererAddEventListener++;\n        /** @type {?} */\n        var renderer = lView[RENDERER];\n        // In order to match current behavior, native DOM event listeners must be added for all\n        // events (including outputs).\n        if (isProceduralRenderer(renderer)) {\n            /** @type {?} */\n            var cleanupFn = renderer.listen(native, eventName, listenerFn);\n            storeCleanupFn(lView, cleanupFn);\n        }\n        else {\n            /** @type {?} */\n            var wrappedListener = wrapListenerWithPreventDefault(listenerFn);\n            native.addEventListener(eventName, wrappedListener, useCapture);\n            /** @type {?} */\n            var cleanupInstances = getCleanup(lView);\n            cleanupInstances.push(wrappedListener);\n            if (getFirstTemplatePass()) {\n                getTViewCleanup(lView).push(eventName, tNode.index, /** @type {?} */ ((cleanupInstances)).length - 1, useCapture);\n            }\n        }\n    }\n    // subscribe to directive outputs\n    if (tNode.outputs === undefined) {\n        // if we create TNode here, inputs must be undefined so we know they still need to be\n        // checked\n        tNode.outputs = generatePropertyAliases(tNode.flags, 1 /* Output */);\n    }\n    /** @type {?} */\n    var outputs = tNode.outputs;\n    /** @type {?} */\n    var outputData;\n    if (outputs && (outputData = outputs[eventName])) {\n        createOutput(lView, outputData, listenerFn);\n    }\n}\n/**\n * Iterates through the outputs associated with a particular event name and subscribes to\n * each output.\n * @param {?} lView\n * @param {?} outputs\n * @param {?} listener\n * @return {?}\n */\nfunction createOutput(lView, outputs, listener) {\n    for (var i = 0; i < outputs.length; i += 2) {\n        ngDevMode && assertDataInRange(lView, /** @type {?} */ (outputs[i]));\n        /** @type {?} */\n        var subscription = lView[/** @type {?} */ (outputs[i])][outputs[i + 1]].subscribe(listener);\n        storeCleanupWithContext(lView, subscription, subscription.unsubscribe);\n    }\n}\n/**\n * Saves context for this cleanup function in LView.cleanupInstances.\n *\n * On the first template pass, saves in TView:\n * - Cleanup function\n * - Index of context we just saved in LView.cleanupInstances\n * @param {?} lView\n * @param {?} context\n * @param {?} cleanupFn\n * @return {?}\n */\nexport function storeCleanupWithContext(lView, context, cleanupFn) {\n    getCleanup(lView).push(context);\n    if (lView[TVIEW].firstTemplatePass) {\n        getTViewCleanup(lView).push(cleanupFn, /** @type {?} */ ((lView[CLEANUP])).length - 1);\n    }\n}\n/**\n * Saves the cleanup function itself in LView.cleanupInstances.\n *\n * This is necessary for functions that are wrapped with their contexts, like in renderer2\n * listeners.\n *\n * On the first template pass, the index of the cleanup function is saved in TView.\n * @param {?} view\n * @param {?} cleanupFn\n * @return {?}\n */\nexport function storeCleanupFn(view, cleanupFn) {\n    getCleanup(view).push(cleanupFn);\n    if (view[TVIEW].firstTemplatePass) {\n        getTViewCleanup(view).push(/** @type {?} */ ((view[CLEANUP])).length - 1, null);\n    }\n}\n/**\n * Mark the end of the element.\n * @return {?}\n */\nexport function elementEnd() {\n    /** @type {?} */\n    var previousOrParentTNode = getPreviousOrParentTNode();\n    if (getIsParent()) {\n        setIsParent(false);\n    }\n    else {\n        ngDevMode && assertHasParent(getPreviousOrParentTNode());\n        previousOrParentTNode = /** @type {?} */ ((previousOrParentTNode.parent));\n        setPreviousOrParentTNode(previousOrParentTNode);\n    }\n    ngDevMode && assertNodeType(previousOrParentTNode, 3 /* Element */);\n    /** @type {?} */\n    var lView = getLView();\n    /** @type {?} */\n    var currentQueries = lView[QUERIES];\n    if (currentQueries) {\n        lView[QUERIES] = currentQueries.addNode(/** @type {?} */ (previousOrParentTNode));\n    }\n    queueLifecycleHooks(previousOrParentTNode.flags, getLView()[TVIEW]);\n    decreaseElementDepthCount();\n}\n/**\n * Updates the value of removes an attribute on an Element.\n *\n * @param {?} index\n * @param {?} name name The name of the attribute.\n * @param {?} value value The attribute is removed when value is `null` or `undefined`.\n *                  Otherwise the attribute value is set to the stringified value.\n * @param {?=} sanitizer An optional function used to sanitize the value.\n * @return {?}\n */\nexport function elementAttribute(index, name, value, sanitizer) {\n    if (value !== NO_CHANGE) {\n        /** @type {?} */\n        var lView = getLView();\n        /** @type {?} */\n        var renderer = lView[RENDERER];\n        /** @type {?} */\n        var element_1 = getNativeByIndex(index, lView);\n        if (value == null) {\n            ngDevMode && ngDevMode.rendererRemoveAttribute++;\n            isProceduralRenderer(renderer) ? renderer.removeAttribute(element_1, name) :\n                element_1.removeAttribute(name);\n        }\n        else {\n            ngDevMode && ngDevMode.rendererSetAttribute++;\n            /** @type {?} */\n            var strValue = sanitizer == null ? stringify(value) : sanitizer(value);\n            isProceduralRenderer(renderer) ? renderer.setAttribute(element_1, name, strValue) :\n                element_1.setAttribute(name, strValue);\n        }\n    }\n}\n/**\n * Update a property on an Element.\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new \\@Inputs don't have to be re-compiled.\n *\n * @template T\n * @param {?} index The index of the element to update in the data array\n * @param {?} propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param {?} value New value to write.\n * @param {?=} sanitizer An optional function used to sanitize the value.\n * @return {?}\n */\nexport function elementProperty(index, propName, value, sanitizer) {\n    if (value === NO_CHANGE)\n        return;\n    /** @type {?} */\n    var lView = getLView();\n    /** @type {?} */\n    var element = /** @type {?} */ (getNativeByIndex(index, lView));\n    /** @type {?} */\n    var tNode = getTNode(index, lView);\n    /** @type {?} */\n    var inputData = initializeTNodeInputs(tNode);\n    /** @type {?} */\n    var dataValue;\n    if (inputData && (dataValue = inputData[propName])) {\n        setInputsForProperty(lView, dataValue, value);\n        if (isComponent(tNode))\n            markDirtyIfOnPush(lView, index + HEADER_OFFSET);\n        if (ngDevMode && tNode.type === 3 /* Element */) {\n            setNgReflectProperties(lView, /** @type {?} */ (element), propName, value);\n        }\n    }\n    else if (tNode.type === 3 /* Element */) {\n        /** @type {?} */\n        var renderer = lView[RENDERER];\n        // It is assumed that the sanitizer is only added when the compiler determines that the property\n        // is risky, so sanitization can be done without further checks.\n        value = sanitizer != null ? (/** @type {?} */ (sanitizer(value))) : value;\n        ngDevMode && ngDevMode.rendererSetProperty++;\n        isProceduralRenderer(renderer) ?\n            renderer.setProperty(/** @type {?} */ (element), propName, value) :\n            ((/** @type {?} */ (element)).setProperty ? (/** @type {?} */ (element)).setProperty(propName, value) :\n                (/** @type {?} */ (element))[propName] = value);\n    }\n}\n/**\n * Constructs a TNode object from the arguments.\n *\n * @param {?} viewData\n * @param {?} type The type of the node\n * @param {?} adjustedIndex The index of the TNode in TView.data, adjusted for HEADER_OFFSET\n * @param {?} tagName The tag name of the node\n * @param {?} attrs The attributes defined on this node\n * @param {?} tViews Any TViews attached to this node\n * @return {?} the TNode object\n */\nexport function createTNode(viewData, type, adjustedIndex, tagName, attrs, tViews) {\n    /** @type {?} */\n    var previousOrParentTNode = getPreviousOrParentTNode();\n    ngDevMode && ngDevMode.tNode++;\n    /** @type {?} */\n    var parent = getIsParent() ? previousOrParentTNode : previousOrParentTNode && previousOrParentTNode.parent;\n    /** @type {?} */\n    var parentInSameView = parent && viewData && parent !== viewData[HOST_NODE];\n    /** @type {?} */\n    var tParent = parentInSameView ? /** @type {?} */ (parent) : null;\n    return {\n        type: type,\n        index: adjustedIndex,\n        injectorIndex: tParent ? tParent.injectorIndex : -1,\n        flags: 0,\n        providerIndexes: 0,\n        tagName: tagName,\n        attrs: attrs,\n        localNames: null,\n        initialInputs: undefined,\n        inputs: undefined,\n        outputs: undefined,\n        tViews: tViews,\n        next: null,\n        child: null,\n        parent: tParent,\n        detached: null,\n        stylingTemplate: null,\n        projection: null\n    };\n}\n/**\n * Given a list of directive indices and minified input names, sets the\n * input properties on the corresponding directives.\n * @param {?} lView\n * @param {?} inputs\n * @param {?} value\n * @return {?}\n */\nfunction setInputsForProperty(lView, inputs, value) {\n    for (var i = 0; i < inputs.length; i += 2) {\n        ngDevMode && assertDataInRange(lView, /** @type {?} */ (inputs[i]));\n        lView[/** @type {?} */ (inputs[i])][inputs[i + 1]] = value;\n    }\n}\n/**\n * @param {?} lView\n * @param {?} element\n * @param {?} propName\n * @param {?} value\n * @return {?}\n */\nfunction setNgReflectProperties(lView, element, propName, value) {\n    /** @type {?} */\n    var renderer = lView[RENDERER];\n    /** @type {?} */\n    var attrName = normalizeDebugBindingName(propName);\n    /** @type {?} */\n    var debugValue = normalizeDebugBindingValue(value);\n    isProceduralRenderer(renderer) ? renderer.setAttribute(element, attrName, debugValue) :\n        element.setAttribute(attrName, debugValue);\n}\n/**\n * Consolidates all inputs or outputs of all directives on this logical node.\n *\n * @param {?} tNodeFlags\n * @param {?} direction\n * @return {?} PropertyAliases|null aggregate of all properties if any, `null` otherwise\n */\nfunction generatePropertyAliases(tNodeFlags, direction) {\n    /** @type {?} */\n    var tView = getLView()[TVIEW];\n    /** @type {?} */\n    var count = tNodeFlags & 4095 /* DirectiveCountMask */;\n    /** @type {?} */\n    var propStore = null;\n    if (count > 0) {\n        /** @type {?} */\n        var start = tNodeFlags >> 16 /* DirectiveStartingIndexShift */;\n        /** @type {?} */\n        var end = start + count;\n        /** @type {?} */\n        var isInput = direction === 0 /* Input */;\n        /** @type {?} */\n        var defs = tView.data;\n        for (var i = start; i < end; i++) {\n            /** @type {?} */\n            var directiveDef = /** @type {?} */ (defs[i]);\n            /** @type {?} */\n            var propertyAliasMap = isInput ? directiveDef.inputs : directiveDef.outputs;\n            for (var publicName in propertyAliasMap) {\n                if (propertyAliasMap.hasOwnProperty(publicName)) {\n                    propStore = propStore || {};\n                    /** @type {?} */\n                    var internalName = propertyAliasMap[publicName];\n                    /** @type {?} */\n                    var hasProperty = propStore.hasOwnProperty(publicName);\n                    hasProperty ? propStore[publicName].push(i, internalName) :\n                        (propStore[publicName] = [i, internalName]);\n                }\n            }\n        }\n    }\n    return propStore;\n}\n/**\n * Add or remove a class in a `classList` on a DOM element.\n *\n * This instruction is meant to handle the [class.foo]=\"exp\" case\n *\n * @param {?} index The index of the element to update in the data array\n * @param {?} classIndex Index of class to toggle. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param {?} value A value indicating if a given class should be added or removed.\n * @param {?=} directive the ref to the directive that is attempting to change styling.\n * @return {?}\n */\nexport function elementClassProp(index, classIndex, value, directive) {\n    if (directive != undefined) {\n        return hackImplementationOfElementClassProp(index, classIndex, value, directive); // proper supported in next PR\n    }\n    /** @type {?} */\n    var val = (value instanceof BoundPlayerFactory) ? (/** @type {?} */ (value)) : (!!value);\n    updateElementClassProp(getStylingContext(index, getLView()), classIndex, val);\n}\n/**\n * Assign any inline style values to the element during creation mode.\n *\n * This instruction is meant to be called during creation mode to apply all styling\n * (e.g. `style=\"...\"`) values to the element. This is also where the provided index\n * value is allocated for the styling details for its corresponding element (the element\n * index is the previous index value from this one).\n *\n * (Note this function calls `elementStylingApply` immediately when called.)\n *\n *\n * @param {?=} classDeclarations A key/value array of CSS classes that will be registered on the element.\n *   Each individual style will be used on the element as long as it is not overridden\n *   by any classes placed on the element by multiple (`[class]`) or singular (`[class.named]`)\n *   bindings. If a class binding changes its value to a falsy value then the matching initial\n *   class value that are passed in here will be applied to the element (if matched).\n * @param {?=} styleDeclarations A key/value array of CSS styles that will be registered on the element.\n *   Each individual style will be used on the element as long as it is not overridden\n *   by any styles placed on the element by multiple (`[style]`) or singular (`[style.prop]`)\n *   bindings. If a style binding changes its value to null then the initial styling\n *   values that are passed in here will be applied to the element (if matched).\n * @param {?=} styleSanitizer An optional sanitizer function that will be used (if provided)\n *   to sanitize the any CSS property values that are applied to the element (during rendering).\n * @param {?=} directive the ref to the directive that is attempting to change styling.\n * @return {?}\n */\nexport function elementStyling(classDeclarations, styleDeclarations, styleSanitizer, directive) {\n    if (directive != undefined) {\n        getCreationMode() &&\n            hackImplementationOfElementStyling(classDeclarations || null, styleDeclarations || null, styleSanitizer || null, directive); // supported in next PR\n        return;\n    }\n    /** @type {?} */\n    var tNode = getPreviousOrParentTNode();\n    /** @type {?} */\n    var inputData = initializeTNodeInputs(tNode);\n    if (!tNode.stylingTemplate) {\n        /** @type {?} */\n        var hasClassInput = inputData && inputData.hasOwnProperty('class') ? true : false;\n        if (hasClassInput) {\n            tNode.flags |= 32768 /* hasClassInput */;\n        }\n        // initialize the styling template.\n        tNode.stylingTemplate = createStylingContextTemplate(classDeclarations, styleDeclarations, styleSanitizer, hasClassInput);\n    }\n    if (styleDeclarations && styleDeclarations.length ||\n        classDeclarations && classDeclarations.length) {\n        /** @type {?} */\n        var index = tNode.index - HEADER_OFFSET;\n        if (delegateToClassInput(tNode)) {\n            /** @type {?} */\n            var lView = getLView();\n            /** @type {?} */\n            var stylingContext = getStylingContext(index, lView);\n            /** @type {?} */\n            var initialClasses = /** @type {?} */ (stylingContext[6 /* PreviousOrCachedMultiClassValue */]);\n            setInputsForProperty(lView, /** @type {?} */ ((/** @type {?} */ ((tNode.inputs))['class'])), initialClasses);\n        }\n        elementStylingApply(index);\n    }\n}\n/**\n * Apply all styling values to the element which have been queued by any styling instructions.\n *\n * This instruction is meant to be run once one or more `elementStyle` and/or `elementStyleProp`\n * have been issued against the element. This function will also determine if any styles have\n * changed and will then skip the operation if there is nothing new to render.\n *\n * Once called then all queued styles will be flushed.\n *\n * @param {?} index Index of the element's styling storage that will be rendered.\n *        (Note that this is not the element index, but rather an index value allocated\n *        specifically for element styling--the index must be the next index after the element\n *        index.)\n * @param {?=} directive the ref to the directive that is attempting to change styling.\n * @return {?}\n */\nexport function elementStylingApply(index, directive) {\n    if (directive != undefined) {\n        return hackImplementationOfElementStylingApply(index, directive); // supported in next PR\n    }\n    /** @type {?} */\n    var lView = getLView();\n    /** @type {?} */\n    var isFirstRender = (lView[FLAGS] & 1 /* CreationMode */) !== 0;\n    /** @type {?} */\n    var totalPlayersQueued = renderStyleAndClassBindings(getStylingContext(index, lView), lView[RENDERER], lView, isFirstRender);\n    if (totalPlayersQueued > 0) {\n        /** @type {?} */\n        var rootContext = getRootContext(lView);\n        scheduleTick(rootContext, 2 /* FlushPlayers */);\n    }\n}\n/**\n * Queue a given style to be rendered on an Element.\n *\n * If the style value is `null` then it will be removed from the element\n * (or assigned a different value depending if there are any styles placed\n * on the element with `elementStyle` or any styles that are present\n * from when the element was created (with `elementStyling`).\n *\n * (Note that the styling instruction will not be applied until `elementStylingApply` is called.)\n *\n * @param {?} index Index of the element's styling storage to change in the data array.\n *        (Note that this is not the element index, but rather an index value allocated\n *        specifically for element styling--the index must be the next index after the element\n *        index.)\n * @param {?} styleIndex Index of the style property on this element. (Monotonically increasing.)\n * @param {?} value New value to write (null to remove).\n * @param {?=} suffix Optional suffix. Used with scalar values to add unit such as `px`.\n *        Note that when a suffix is provided then the underlying sanitizer will\n *        be ignored.\n * @param {?=} directive the ref to the directive that is attempting to change styling.\n * @return {?}\n */\nexport function elementStyleProp(index, styleIndex, value, suffix, directive) {\n    if (directive != undefined)\n        return hackImplementationOfElementStyleProp(index, styleIndex, value, suffix, directive);\n    /** @type {?} */\n    var valueToAdd = null;\n    if (value) {\n        if (suffix) {\n            // when a suffix is applied then it will bypass\n            // sanitization entirely (b/c a new string is created)\n            valueToAdd = stringify(value) + suffix;\n        }\n        else {\n            // sanitization happens by dealing with a String value\n            // this means that the string value will be passed through\n            // into the style rendering later (which is where the value\n            // will be sanitized before it is applied)\n            valueToAdd = /** @type {?} */ ((value));\n        }\n    }\n    updateElementStyleProp(getStylingContext(index, getLView()), styleIndex, valueToAdd);\n}\n/**\n * Queue a key/value map of styles to be rendered on an Element.\n *\n * This instruction is meant to handle the `[style]=\"exp\"` usage. When styles are applied to\n * the Element they will then be placed with respect to any styles set with `elementStyleProp`.\n * If any styles are set to `null` then they will be removed from the element (unless the same\n * style properties have been assigned to the element during creation using `elementStyling`).\n *\n * (Note that the styling instruction will not be applied until `elementStylingApply` is called.)\n *\n * @template T\n * @param {?} index Index of the element's styling storage to change in the data array.\n *        (Note that this is not the element index, but rather an index value allocated\n *        specifically for element styling--the index must be the next index after the element\n *        index.)\n * @param {?} classes A key/value style map of CSS classes that will be added to the given element.\n *        Any missing classes (that have already been applied to the element beforehand) will be\n *        removed (unset) from the element's list of CSS classes.\n * @param {?=} styles A key/value style map of the styles that will be applied to the given element.\n *        Any missing styles (that have already been applied to the element beforehand) will be\n *        removed (unset) from the element's styling.\n * @param {?=} directive the ref to the directive that is attempting to change styling.\n * @return {?}\n */\nexport function elementStylingMap(index, classes, styles, directive) {\n    if (directive != undefined)\n        return hackImplementationOfElementStylingMap(index, classes, styles, directive);\n    /** @type {?} */\n    var lView = getLView();\n    /** @type {?} */\n    var tNode = getTNode(index, lView);\n    /** @type {?} */\n    var stylingContext = getStylingContext(index, lView);\n    if (delegateToClassInput(tNode) && classes !== NO_CHANGE) {\n        /** @type {?} */\n        var initialClasses = /** @type {?} */ (stylingContext[6 /* PreviousOrCachedMultiClassValue */]);\n        /** @type {?} */\n        var classInputVal = (initialClasses.length ? (initialClasses + ' ') : '') + (/** @type {?} */ (classes));\n        setInputsForProperty(lView, /** @type {?} */ ((/** @type {?} */ ((tNode.inputs))['class'])), classInputVal);\n    }\n    updateStylingMap(stylingContext, classes, styles);\n}\n/**\n * @record\n */\nfunction HostStylingHack() { }\n/** @type {?} */\nHostStylingHack.prototype.classDeclarations;\n/** @type {?} */\nHostStylingHack.prototype.styleDeclarations;\n/** @type {?} */\nHostStylingHack.prototype.styleSanitizer;\n/** @typedef {?} */\nvar HostStylingHackMap;\n/**\n * @param {?} classDeclarations\n * @param {?} styleDeclarations\n * @param {?} styleSanitizer\n * @param {?} directive\n * @return {?}\n */\nfunction hackImplementationOfElementStyling(classDeclarations, styleDeclarations, styleSanitizer, directive) {\n    /** @type {?} */\n    var node = getNativeByTNode(getPreviousOrParentTNode(), getLView());\n    ngDevMode && assertDefined(node, 'expecting parent DOM node');\n    /** @type {?} */\n    var hostStylingHackMap = ((/** @type {?} */ (node)).hostStylingHack || ((/** @type {?} */ (node)).hostStylingHack = new Map()));\n    hostStylingHackMap.set(directive, {\n        classDeclarations: hackSquashDeclaration(classDeclarations),\n        styleDeclarations: hackSquashDeclaration(styleDeclarations), styleSanitizer: styleSanitizer\n    });\n}\n/**\n * @param {?} declarations\n * @return {?}\n */\nfunction hackSquashDeclaration(declarations) {\n    // assume the array is correct. This should be fine for View Engine compatibility.\n    return declarations || /** @type {?} */ ([]);\n}\n/**\n * @param {?} index\n * @param {?} classIndex\n * @param {?} value\n * @param {?} directive\n * @return {?}\n */\nfunction hackImplementationOfElementClassProp(index, classIndex, value, directive) {\n    /** @type {?} */\n    var lView = getLView();\n    /** @type {?} */\n    var node = getNativeByIndex(index, lView);\n    ngDevMode && assertDefined(node, 'could not locate node');\n    /** @type {?} */\n    var hostStylingHack = (/** @type {?} */ (node)).hostStylingHack.get(directive);\n    /** @type {?} */\n    var className = hostStylingHack.classDeclarations[classIndex];\n    /** @type {?} */\n    var renderer = lView[RENDERER];\n    if (isProceduralRenderer(renderer)) {\n        value ? renderer.addClass(node, className) : renderer.removeClass(node, className);\n    }\n    else {\n        /** @type {?} */\n        var classList = (/** @type {?} */ (node)).classList;\n        value ? classList.add(className) : classList.remove(className);\n    }\n}\n/**\n * @param {?} index\n * @param {?=} directive\n * @return {?}\n */\nfunction hackImplementationOfElementStylingApply(index, directive) {\n    // Do nothing because the hack implementation is eager.\n}\n/**\n * @param {?} index\n * @param {?} styleIndex\n * @param {?} value\n * @param {?=} suffix\n * @param {?=} directive\n * @return {?}\n */\nfunction hackImplementationOfElementStyleProp(index, styleIndex, value, suffix, directive) {\n    throw new Error('unimplemented. Should not be needed by ViewEngine compatibility');\n}\n/**\n * @template T\n * @param {?} index\n * @param {?} classes\n * @param {?=} styles\n * @param {?=} directive\n * @return {?}\n */\nfunction hackImplementationOfElementStylingMap(index, classes, styles, directive) {\n    throw new Error('unimplemented. Should not be needed by ViewEngine compatibility');\n}\n/**\n * Create static text node\n *\n * @param {?} index Index of the node in the data array\n * @param {?=} value Value to write. This value will be stringified.\n * @return {?}\n */\nexport function text(index, value) {\n    /** @type {?} */\n    var lView = getLView();\n    ngDevMode && assertEqual(lView[BINDING_INDEX], lView[TVIEW].bindingStartIndex, 'text nodes should be created before any bindings');\n    ngDevMode && ngDevMode.rendererCreateTextNode++;\n    /** @type {?} */\n    var textNative = createTextNode(value, lView[RENDERER]);\n    /** @type {?} */\n    var tNode = createNodeAtIndex(index, 3 /* Element */, textNative, null, null);\n    // Text nodes are self closing.\n    setIsParent(false);\n    appendChild(textNative, tNode, lView);\n}\n/**\n * Create text node with binding\n * Bindings should be handled externally with the proper interpolation(1-8) method\n *\n * @template T\n * @param {?} index Index of the node in the data array.\n * @param {?} value Stringified value to write.\n * @return {?}\n */\nexport function textBinding(index, value) {\n    if (value !== NO_CHANGE) {\n        /** @type {?} */\n        var lView = getLView();\n        ngDevMode && assertDataInRange(lView, index + HEADER_OFFSET);\n        /** @type {?} */\n        var element_2 = /** @type {?} */ ((getNativeByIndex(index, lView)));\n        ngDevMode && assertDefined(element_2, 'native element should exist');\n        ngDevMode && ngDevMode.rendererSetText++;\n        /** @type {?} */\n        var renderer = lView[RENDERER];\n        isProceduralRenderer(renderer) ? renderer.setValue(element_2, stringify(value)) :\n            element_2.textContent = stringify(value);\n    }\n}\n/**\n * Instantiate a root component.\n * @template T\n * @param {?} tView\n * @param {?} viewData\n * @param {?} def\n * @return {?}\n */\nexport function instantiateRootComponent(tView, viewData, def) {\n    /** @type {?} */\n    var rootTNode = getPreviousOrParentTNode();\n    if (tView.firstTemplatePass) {\n        if (def.providersResolver)\n            def.providersResolver(def);\n        generateExpandoInstructionBlock(tView, rootTNode, 1);\n        baseResolveDirective(tView, viewData, def, def.factory);\n    }\n    /** @type {?} */\n    var directive = getNodeInjectable(tView.data, viewData, viewData.length - 1, /** @type {?} */ (rootTNode));\n    postProcessBaseDirective(viewData, rootTNode, directive, /** @type {?} */ (def));\n    return directive;\n}\n/**\n * Resolve the matched directives on a node.\n * @param {?} tView\n * @param {?} viewData\n * @param {?} directives\n * @param {?} tNode\n * @param {?} localRefs\n * @return {?}\n */\nfunction resolveDirectives(tView, viewData, directives, tNode, localRefs) {\n    // Please make sure to have explicit type for `exportsMap`. Inferred type triggers bug in tsickle.\n    ngDevMode && assertEqual(getFirstTemplatePass(), true, 'should run on first template pass only');\n    /** @type {?} */\n    var exportsMap = localRefs ? { '': -1 } : null;\n    if (directives) {\n        initNodeFlags(tNode, tView.data.length, directives.length);\n        // When the same token is provided by several directives on the same node, some rules apply in\n        // the viewEngine:\n        // - viewProviders have priority over providers\n        // - the last directive in NgModule.declarations has priority over the previous one\n        // So to match these rules, the order in which providers are added in the arrays is very\n        // important.\n        for (var i = 0; i < directives.length; i++) {\n            /** @type {?} */\n            var def = /** @type {?} */ (directives[i]);\n            if (def.providersResolver)\n                def.providersResolver(def);\n        }\n        generateExpandoInstructionBlock(tView, tNode, directives.length);\n        for (var i = 0; i < directives.length; i++) {\n            /** @type {?} */\n            var def = /** @type {?} */ (directives[i]);\n            /** @type {?} */\n            var directiveDefIdx = tView.data.length;\n            baseResolveDirective(tView, viewData, def, def.factory);\n            saveNameToExportMap(/** @type {?} */ ((tView.data)).length - 1, def, exportsMap);\n            // Init hooks are queued now so ngOnInit is called in host components before\n            // any projected components.\n            queueInitHooks(directiveDefIdx, def.onInit, def.doCheck, tView);\n        }\n    }\n    if (exportsMap)\n        cacheMatchingLocalNames(tNode, localRefs, exportsMap);\n}\n/**\n * Instantiate all the directives that were previously resolved on the current node.\n * @param {?} tView\n * @param {?} viewData\n * @param {?} previousOrParentTNode\n * @return {?}\n */\nfunction instantiateAllDirectives(tView, viewData, previousOrParentTNode) {\n    /** @type {?} */\n    var start = previousOrParentTNode.flags >> 16 /* DirectiveStartingIndexShift */;\n    /** @type {?} */\n    var end = start + (previousOrParentTNode.flags & 4095 /* DirectiveCountMask */);\n    if (!getFirstTemplatePass() && start < end) {\n        getOrCreateNodeInjectorForNode(/** @type {?} */ (previousOrParentTNode), viewData);\n    }\n    for (var i = start; i < end; i++) {\n        /** @type {?} */\n        var def = /** @type {?} */ (tView.data[i]);\n        if (isComponentDef(def)) {\n            addComponentLogic(viewData, previousOrParentTNode, /** @type {?} */ (def));\n        }\n        /** @type {?} */\n        var directive = getNodeInjectable(tView.data, /** @type {?} */ ((viewData)), i, /** @type {?} */ (previousOrParentTNode));\n        postProcessDirective(viewData, directive, def, i);\n    }\n}\n/**\n * @param {?} tView\n * @param {?} viewData\n * @param {?} previousOrParentTNode\n * @return {?}\n */\nfunction invokeDirectivesHostBindings(tView, viewData, previousOrParentTNode) {\n    /** @type {?} */\n    var start = previousOrParentTNode.flags >> 16 /* DirectiveStartingIndexShift */;\n    /** @type {?} */\n    var end = start + (previousOrParentTNode.flags & 4095 /* DirectiveCountMask */);\n    /** @type {?} */\n    var expando = /** @type {?} */ ((tView.expandoInstructions));\n    /** @type {?} */\n    var firstTemplatePass = getFirstTemplatePass();\n    for (var i = start; i < end; i++) {\n        /** @type {?} */\n        var def = /** @type {?} */ (tView.data[i]);\n        /** @type {?} */\n        var directive = viewData[i];\n        if (def.hostBindings) {\n            /** @type {?} */\n            var previousExpandoLength = expando.length;\n            setCurrentDirectiveDef(def); /** @type {?} */\n            ((def.hostBindings))(1 /* Create */, directive, previousOrParentTNode.index);\n            setCurrentDirectiveDef(null);\n            // `hostBindings` function may or may not contain `allocHostVars` call\n            // (e.g. it may not if it only contains host listeners), so we need to check whether\n            // `expandoInstructions` has changed and if not - we push `null` to keep indices in sync\n            if (previousExpandoLength === expando.length && firstTemplatePass) {\n                expando.push(null);\n            }\n        }\n        else if (firstTemplatePass) {\n            expando.push(null);\n        }\n    }\n}\n/**\n * Generates a new block in TView.expandoInstructions for this node.\n *\n * Each expando block starts with the element index (turned negative so we can distinguish\n * it from the hostVar count) and the directive count. See more in VIEW_DATA.md.\n * @param {?} tView\n * @param {?} tNode\n * @param {?} directiveCount\n * @return {?}\n */\nexport function generateExpandoInstructionBlock(tView, tNode, directiveCount) {\n    ngDevMode && assertEqual(tView.firstTemplatePass, true, 'Expando block should only be generated on first template pass.');\n    /** @type {?} */\n    var elementIndex = -(tNode.index - HEADER_OFFSET);\n    /** @type {?} */\n    var providerStartIndex = tNode.providerIndexes & 65535 /* ProvidersStartIndexMask */;\n    /** @type {?} */\n    var providerCount = tView.data.length - providerStartIndex;\n    (tView.expandoInstructions || (tView.expandoInstructions = [])).push(elementIndex, providerCount, directiveCount);\n}\n/**\n * On the first template pass, we need to reserve space for host binding values\n * after directives are matched (so all directives are saved, then bindings).\n * Because we are updating the blueprint, we only need to do this once.\n * @param {?} tView\n * @param {?} lView\n * @param {?} totalHostVars\n * @return {?}\n */\nfunction prefillHostVars(tView, lView, totalHostVars) {\n    ngDevMode &&\n        assertEqual(getFirstTemplatePass(), true, 'Should only be called in first template pass.');\n    for (var i = 0; i < totalHostVars; i++) {\n        lView.push(NO_CHANGE);\n        tView.blueprint.push(NO_CHANGE);\n        tView.data.push(null);\n    }\n}\n/**\n * Process a directive on the current node after its creation.\n * @template T\n * @param {?} viewData\n * @param {?} directive\n * @param {?} def\n * @param {?} directiveDefIdx\n * @return {?}\n */\nfunction postProcessDirective(viewData, directive, def, directiveDefIdx) {\n    /** @type {?} */\n    var previousOrParentTNode = getPreviousOrParentTNode();\n    postProcessBaseDirective(viewData, previousOrParentTNode, directive, def);\n    ngDevMode && assertDefined(previousOrParentTNode, 'previousOrParentTNode');\n    if (previousOrParentTNode && previousOrParentTNode.attrs) {\n        setInputsFromAttrs(directiveDefIdx, directive, def.inputs, previousOrParentTNode);\n    }\n    if (def.contentQueries) {\n        def.contentQueries(directiveDefIdx);\n    }\n    if (isComponentDef(def)) {\n        /** @type {?} */\n        var componentView = getComponentViewByIndex(previousOrParentTNode.index, viewData);\n        componentView[CONTEXT] = directive;\n    }\n}\n/**\n * A lighter version of postProcessDirective() that is used for the root component.\n * @template T\n * @param {?} lView\n * @param {?} previousOrParentTNode\n * @param {?} directive\n * @param {?} def\n * @return {?}\n */\nfunction postProcessBaseDirective(lView, previousOrParentTNode, directive, def) {\n    /** @type {?} */\n    var native = getNativeByTNode(previousOrParentTNode, lView);\n    ngDevMode && assertEqual(lView[BINDING_INDEX], lView[TVIEW].bindingStartIndex, 'directives should be created before any bindings');\n    ngDevMode && assertPreviousIsParent(getIsParent());\n    attachPatchData(directive, lView);\n    if (native) {\n        attachPatchData(native, lView);\n    }\n    // TODO(misko): setUpAttributes should be a feature for better treeshakability.\n    if (def.attributes != null && previousOrParentTNode.type == 3 /* Element */) {\n        setUpAttributes(/** @type {?} */ (native), /** @type {?} */ (def.attributes));\n    }\n}\n/**\n * Matches the current node against all available selectors.\n * If a component is matched (at most one), it is returned in first position in the array.\n * @param {?} tView\n * @param {?} viewData\n * @param {?} tNode\n * @return {?}\n */\nfunction findDirectiveMatches(tView, viewData, tNode) {\n    ngDevMode && assertEqual(getFirstTemplatePass(), true, 'should run on first template pass only');\n    /** @type {?} */\n    var registry = tView.directiveRegistry;\n    /** @type {?} */\n    var matches = null;\n    if (registry) {\n        for (var i = 0; i < registry.length; i++) {\n            /** @type {?} */\n            var def = /** @type {?} */ (registry[i]);\n            if (isNodeMatchingSelectorList(tNode, /** @type {?} */ ((def.selectors)))) {\n                matches || (matches = []);\n                diPublicInInjector(getOrCreateNodeInjectorForNode(/** @type {?} */ (getPreviousOrParentTNode()), viewData), viewData, def.type);\n                if (isComponentDef(def)) {\n                    if (tNode.flags & 4096 /* isComponent */)\n                        throwMultipleComponentError(tNode);\n                    tNode.flags = 4096 /* isComponent */;\n                    // The component is always stored first with directives after.\n                    matches.unshift(def);\n                }\n                else {\n                    matches.push(def);\n                }\n            }\n        }\n    }\n    return matches;\n}\n/**\n * Stores index of component's host element so it will be queued for view refresh during CD.\n * @param {?} previousOrParentTNode\n * @return {?}\n */\nexport function queueComponentIndexForCheck(previousOrParentTNode) {\n    ngDevMode &&\n        assertEqual(getFirstTemplatePass(), true, 'Should only be called in first template pass.');\n    /** @type {?} */\n    var tView = getLView()[TVIEW];\n    (tView.components || (tView.components = [])).push(previousOrParentTNode.index);\n}\n/**\n * Stores host binding fn and number of host vars so it will be queued for binding refresh during\n * CD.\n * @param {?} tView\n * @param {?} def\n * @param {?} hostVars\n * @return {?}\n */\nfunction queueHostBindingForCheck(tView, def, hostVars) {\n    ngDevMode &&\n        assertEqual(getFirstTemplatePass(), true, 'Should only be called in first template pass.');\n    /** @type {?} */\n    var expando = /** @type {?} */ ((tView.expandoInstructions));\n    // check whether a given `hostBindings` function already exists in expandoInstructions,\n    // which can happen in case directive definition was extended from base definition (as a part of\n    // the `InheritDefinitionFeature` logic)\n    if (expando.length < 2 || expando[expando.length - 2] !== def.hostBindings) {\n        expando.push(/** @type {?} */ ((def.hostBindings)), hostVars);\n    }\n}\n/**\n * Caches local names and their matching directive indices for query and template lookups.\n * @param {?} tNode\n * @param {?} localRefs\n * @param {?} exportsMap\n * @return {?}\n */\nfunction cacheMatchingLocalNames(tNode, localRefs, exportsMap) {\n    if (localRefs) {\n        /** @type {?} */\n        var localNames = tNode.localNames = [];\n        // Local names must be stored in tNode in the same order that localRefs are defined\n        // in the template to ensure the data is loaded in the same slots as their refs\n        // in the template (for template queries).\n        for (var i = 0; i < localRefs.length; i += 2) {\n            /** @type {?} */\n            var index = exportsMap[localRefs[i + 1]];\n            if (index == null)\n                throw new Error(\"Export of name '\" + localRefs[i + 1] + \"' not found!\");\n            localNames.push(localRefs[i], index);\n        }\n    }\n}\n/**\n * Builds up an export map as directives are created, so local refs can be quickly mapped\n * to their directive instances.\n * @param {?} index\n * @param {?} def\n * @param {?} exportsMap\n * @return {?}\n */\nfunction saveNameToExportMap(index, def, exportsMap) {\n    if (exportsMap) {\n        if (def.exportAs)\n            exportsMap[def.exportAs] = index;\n        if ((/** @type {?} */ (def)).template)\n            exportsMap[''] = index;\n    }\n}\n/**\n * Initializes the flags on the current node, setting all indices to the initial index,\n * the directive count to 0, and adding the isComponent flag.\n * @param {?} tNode\n * @param {?} index the initial index\n * @param {?} numberOfDirectives\n * @return {?}\n */\nexport function initNodeFlags(tNode, index, numberOfDirectives) {\n    ngDevMode && assertEqual(getFirstTemplatePass(), true, 'expected firstTemplatePass to be true');\n    /** @type {?} */\n    var flags = tNode.flags;\n    ngDevMode && assertEqual(flags === 0 || flags === 4096 /* isComponent */, true, 'expected node flags to not be initialized');\n    ngDevMode && assertNotEqual(numberOfDirectives, 4095 /* DirectiveCountMask */, 'Reached the max number of directives');\n    // When the first directive is created on a node, save the index\n    tNode.flags = index << 16 /* DirectiveStartingIndexShift */ | flags & 4096 /* isComponent */ |\n        numberOfDirectives;\n    tNode.providerIndexes = index;\n}\n/**\n * @template T\n * @param {?} tView\n * @param {?} viewData\n * @param {?} def\n * @param {?} directiveFactory\n * @return {?}\n */\nfunction baseResolveDirective(tView, viewData, def, directiveFactory) {\n    tView.data.push(def);\n    /** @type {?} */\n    var nodeInjectorFactory = new NodeInjectorFactory(directiveFactory, isComponentDef(def), null);\n    tView.blueprint.push(nodeInjectorFactory);\n    viewData.push(nodeInjectorFactory);\n}\n/**\n * @template T\n * @param {?} lView\n * @param {?} previousOrParentTNode\n * @param {?} def\n * @return {?}\n */\nfunction addComponentLogic(lView, previousOrParentTNode, def) {\n    /** @type {?} */\n    var native = getNativeByTNode(previousOrParentTNode, lView);\n    /** @type {?} */\n    var tView = getOrCreateTView(def.template, def.consts, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery);\n    /** @type {?} */\n    var rendererFactory = lView[RENDERER_FACTORY];\n    /** @type {?} */\n    var componentView = addToViewTree(lView, /** @type {?} */ (previousOrParentTNode.index), createLView(lView, tView, null, def.onPush ? 4 /* Dirty */ : 2 /* CheckAlways */, rendererFactory, lView[RENDERER_FACTORY].createRenderer(/** @type {?} */ (native), def)));\n    componentView[HOST_NODE] = /** @type {?} */ (previousOrParentTNode);\n    // Component view will always be created before any injected LContainers,\n    // so this is a regular element, wrap it with the component view\n    componentView[HOST] = lView[previousOrParentTNode.index];\n    lView[previousOrParentTNode.index] = componentView;\n    if (getFirstTemplatePass()) {\n        queueComponentIndexForCheck(previousOrParentTNode);\n    }\n}\n/**\n * Sets initial input properties on directive instances from attribute data\n *\n * @template T\n * @param {?} directiveIndex Index of the directive in directives array\n * @param {?} instance Instance of the directive on which to set the initial inputs\n * @param {?} inputs The list of inputs from the directive def\n * @param {?} tNode The static data for this node\n * @return {?}\n */\nfunction setInputsFromAttrs(directiveIndex, instance, inputs, tNode) {\n    /** @type {?} */\n    var initialInputData = /** @type {?} */ (tNode.initialInputs);\n    if (initialInputData === undefined || directiveIndex >= initialInputData.length) {\n        initialInputData = generateInitialInputs(directiveIndex, inputs, tNode);\n    }\n    /** @type {?} */\n    var initialInputs = initialInputData[directiveIndex];\n    if (initialInputs) {\n        for (var i = 0; i < initialInputs.length; i += 2) {\n            (/** @type {?} */ (instance))[initialInputs[i]] = initialInputs[i + 1];\n        }\n    }\n}\n/**\n * Generates initialInputData for a node and stores it in the template's static storage\n * so subsequent template invocations don't have to recalculate it.\n *\n * initialInputData is an array containing values that need to be set as input properties\n * for directives on this node, but only once on creation. We need this array to support\n * the case where you set an \\@Input property of a directive using attribute-like syntax.\n * e.g. if you have a `name` \\@Input, you can set it once like this:\n *\n * <my-component name=\"Bess\"></my-component>\n *\n * @param {?} directiveIndex Index to store the initial input data\n * @param {?} inputs The list of inputs from the directive def\n * @param {?} tNode The static data on this node\n * @return {?}\n */\nfunction generateInitialInputs(directiveIndex, inputs, tNode) {\n    /** @type {?} */\n    var initialInputData = tNode.initialInputs || (tNode.initialInputs = []);\n    initialInputData[directiveIndex] = null;\n    /** @type {?} */\n    var attrs = /** @type {?} */ ((tNode.attrs));\n    /** @type {?} */\n    var i = 0;\n    while (i < attrs.length) {\n        /** @type {?} */\n        var attrName = attrs[i];\n        if (attrName === 1 /* SelectOnly */)\n            break;\n        if (attrName === 0 /* NamespaceURI */) {\n            // We do not allow inputs on namespaced attributes.\n            i += 4;\n            continue;\n        }\n        /** @type {?} */\n        var minifiedInputName = inputs[attrName];\n        /** @type {?} */\n        var attrValue = attrs[i + 1];\n        if (minifiedInputName !== undefined) {\n            /** @type {?} */\n            var inputsToStore = initialInputData[directiveIndex] || (initialInputData[directiveIndex] = []);\n            inputsToStore.push(minifiedInputName, /** @type {?} */ (attrValue));\n        }\n        i += 2;\n    }\n    return initialInputData;\n}\n/**\n * Creates a LContainer, either from a container instruction, or for a ViewContainerRef.\n *\n * @param {?} hostNative The host element for the LContainer\n * @param {?} hostTNode The host TNode for the LContainer\n * @param {?} currentView The parent view of the LContainer\n * @param {?} native The native comment element\n * @param {?=} isForViewContainerRef Optional a flag indicating the ViewContainerRef case\n * @return {?} LContainer\n */\nexport function createLContainer(hostNative, hostTNode, currentView, native, isForViewContainerRef) {\n    return [\n        isForViewContainerRef ? -1 : 0,\n        // active index\n        [],\n        currentView,\n        null,\n        null,\n        hostNative,\n        native,\n        // native\n        getRenderParent(hostTNode, currentView) // renderParent\n    ];\n}\n/**\n * Creates an LContainer for an ng-template (dynamically-inserted view), e.g.\n *\n * <ng-template #foo>\n *    <div></div>\n * </ng-template>\n *\n * @param {?} index The index of the container in the data array\n * @param {?} templateFn Inline template\n * @param {?} consts The number of nodes, local refs, and pipes for this template\n * @param {?} vars The number of bindings for this template\n * @param {?=} tagName The name of the container element, if applicable\n * @param {?=} attrs The attrs attached to the container, if applicable\n * @param {?=} localRefs A set of local reference bindings on the element.\n * @param {?=} localRefExtractor A function which extracts local-refs values from the template.\n *        Defaults to the current element associated with the local-ref.\n * @return {?}\n */\nexport function template(index, templateFn, consts, vars, tagName, attrs, localRefs, localRefExtractor) {\n    /** @type {?} */\n    var lView = getLView();\n    /** @type {?} */\n    var tView = lView[TVIEW];\n    /** @type {?} */\n    var tNode = containerInternal(index, tagName || null, attrs || null);\n    if (getFirstTemplatePass()) {\n        tNode.tViews = createTView(-1, templateFn, consts, vars, tView.directiveRegistry, tView.pipeRegistry, null);\n    }\n    createDirectivesAndLocals(tView, lView, localRefs, localRefExtractor);\n    /** @type {?} */\n    var currentQueries = lView[QUERIES];\n    /** @type {?} */\n    var previousOrParentTNode = getPreviousOrParentTNode();\n    if (currentQueries) {\n        lView[QUERIES] = currentQueries.addNode(/** @type {?} */ (previousOrParentTNode));\n    }\n    queueLifecycleHooks(tNode.flags, tView);\n    setIsParent(false);\n}\n/**\n * Creates an LContainer for inline views, e.g.\n *\n * % if (showing) {\n *   <div></div>\n * % }\n *\n * @param {?} index The index of the container in the data array\n * @return {?}\n */\nexport function container(index) {\n    /** @type {?} */\n    var tNode = containerInternal(index, null, null);\n    getFirstTemplatePass() && (tNode.tViews = []);\n    setIsParent(false);\n}\n/**\n * @param {?} index\n * @param {?} tagName\n * @param {?} attrs\n * @return {?}\n */\nfunction containerInternal(index, tagName, attrs) {\n    /** @type {?} */\n    var lView = getLView();\n    ngDevMode && assertEqual(lView[BINDING_INDEX], lView[TVIEW].bindingStartIndex, 'container nodes should be created before any bindings');\n    /** @type {?} */\n    var adjustedIndex = index + HEADER_OFFSET;\n    /** @type {?} */\n    var comment = lView[RENDERER].createComment(ngDevMode ? 'container' : '');\n    ngDevMode && ngDevMode.rendererCreateComment++;\n    /** @type {?} */\n    var tNode = createNodeAtIndex(index, 0 /* Container */, comment, tagName, attrs);\n    /** @type {?} */\n    var lContainer = lView[adjustedIndex] =\n        createLContainer(lView[adjustedIndex], tNode, lView, comment);\n    appendChild(comment, tNode, lView);\n    // Containers are added to the current view tree instead of their embedded views\n    // because views can be removed and re-inserted.\n    addToViewTree(lView, index + HEADER_OFFSET, lContainer);\n    /** @type {?} */\n    var currentQueries = lView[QUERIES];\n    if (currentQueries) {\n        // prepare place for matching nodes from views inserted into a given container\n        lContainer[QUERIES] = currentQueries.container();\n    }\n    ngDevMode && assertNodeType(getPreviousOrParentTNode(), 0 /* Container */);\n    return tNode;\n}\n/**\n * Sets a container up to receive views.\n *\n * @param {?} index The index of the container in the data array\n * @return {?}\n */\nexport function containerRefreshStart(index) {\n    /** @type {?} */\n    var lView = getLView();\n    /** @type {?} */\n    var tView = lView[TVIEW];\n    /** @type {?} */\n    var previousOrParentTNode = /** @type {?} */ (loadInternal(tView.data, index));\n    setPreviousOrParentTNode(previousOrParentTNode);\n    ngDevMode && assertNodeType(previousOrParentTNode, 0 /* Container */);\n    setIsParent(true);\n    lView[index + HEADER_OFFSET][ACTIVE_INDEX] = 0;\n    if (!getCheckNoChangesMode()) {\n        // We need to execute init hooks here so ngOnInit hooks are called in top level views\n        // before they are called in embedded views (for backwards compatibility).\n        executeInitHooks(lView, tView, getCreationMode());\n    }\n}\n/**\n * Marks the end of the LContainer.\n *\n * Marking the end of LContainer is the time when to child views get inserted or removed.\n * @return {?}\n */\nexport function containerRefreshEnd() {\n    /** @type {?} */\n    var previousOrParentTNode = getPreviousOrParentTNode();\n    if (getIsParent()) {\n        setIsParent(false);\n    }\n    else {\n        ngDevMode && assertNodeType(previousOrParentTNode, 2 /* View */);\n        ngDevMode && assertHasParent(previousOrParentTNode);\n        previousOrParentTNode = /** @type {?} */ ((previousOrParentTNode.parent));\n        setPreviousOrParentTNode(previousOrParentTNode);\n    }\n    ngDevMode && assertNodeType(previousOrParentTNode, 0 /* Container */);\n    /** @type {?} */\n    var lContainer = getLView()[previousOrParentTNode.index];\n    /** @type {?} */\n    var nextIndex = lContainer[ACTIVE_INDEX];\n    // remove extra views at the end of the container\n    while (nextIndex < lContainer[VIEWS].length) {\n        removeView(lContainer, /** @type {?} */ (previousOrParentTNode), nextIndex);\n    }\n}\n/**\n * Goes over dynamic embedded views (ones created through ViewContainerRef APIs) and refreshes them\n * by executing an associated template function.\n * @param {?} lView\n * @return {?}\n */\nfunction refreshDynamicEmbeddedViews(lView) {\n    for (var current = getLViewChild(lView); current !== null; current = current[NEXT]) {\n        // Note: current can be an LView or an LContainer instance, but here we are only interested\n        // in LContainer. We can tell it's an LContainer because its length is less than the LView\n        // header.\n        if (current.length < HEADER_OFFSET && current[ACTIVE_INDEX] === -1) {\n            /** @type {?} */\n            var container_1 = /** @type {?} */ (current);\n            for (var i = 0; i < container_1[VIEWS].length; i++) {\n                /** @type {?} */\n                var dynamicViewData = container_1[VIEWS][i];\n                // The directives and pipes are not needed here as an existing view is only being refreshed.\n                ngDevMode && assertDefined(dynamicViewData[TVIEW], 'TView must be allocated');\n                renderEmbeddedTemplate(dynamicViewData, dynamicViewData[TVIEW], /** @type {?} */ ((dynamicViewData[CONTEXT])), 2 /* Update */);\n            }\n        }\n    }\n}\n/**\n * Looks for a view with a given view block id inside a provided LContainer.\n * Removes views that need to be deleted in the process.\n *\n * @param {?} lContainer to search for views\n * @param {?} tContainerNode to search for views\n * @param {?} startIdx starting index in the views array to search from\n * @param {?} viewBlockId exact view block id to look for\n * @return {?} index of a found view or -1 if not found\n */\nfunction scanForView(lContainer, tContainerNode, startIdx, viewBlockId) {\n    /** @type {?} */\n    var views = lContainer[VIEWS];\n    for (var i = startIdx; i < views.length; i++) {\n        /** @type {?} */\n        var viewAtPositionId = views[i][TVIEW].id;\n        if (viewAtPositionId === viewBlockId) {\n            return views[i];\n        }\n        else if (viewAtPositionId < viewBlockId) {\n            // found a view that should not be at this position - remove\n            removeView(lContainer, tContainerNode, i);\n        }\n        else {\n            // found a view with id greater than the one we are searching for\n            // which means that required view doesn't exist and can't be found at\n            // later positions in the views array - stop the searchdef.cont here\n            break;\n        }\n    }\n    return null;\n}\n/**\n * Marks the start of an embedded view.\n *\n * @param {?} viewBlockId The ID of this view\n * @param {?} consts\n * @param {?} vars\n * @return {?} boolean Whether or not this view is in creation mode\n */\nexport function embeddedViewStart(viewBlockId, consts, vars) {\n    /** @type {?} */\n    var lView = getLView();\n    /** @type {?} */\n    var previousOrParentTNode = getPreviousOrParentTNode();\n    /** @type {?} */\n    var containerTNode = previousOrParentTNode.type === 2 /* View */ ? /** @type {?} */\n        ((previousOrParentTNode.parent)) :\n        previousOrParentTNode;\n    /** @type {?} */\n    var lContainer = /** @type {?} */ (lView[containerTNode.index]);\n    ngDevMode && assertNodeType(containerTNode, 0 /* Container */);\n    /** @type {?} */\n    var viewToRender = scanForView(lContainer, /** @type {?} */ (containerTNode), /** @type {?} */ ((lContainer[ACTIVE_INDEX])), viewBlockId);\n    if (viewToRender) {\n        setIsParent(true);\n        enterView(viewToRender, viewToRender[TVIEW].node);\n    }\n    else {\n        // When we create a new LView, we always reset the state of the instructions.\n        viewToRender = createLView(lView, getOrCreateEmbeddedTView(viewBlockId, consts, vars, /** @type {?} */ (containerTNode)), null, 2 /* CheckAlways */);\n        if (lContainer[QUERIES]) {\n            viewToRender[QUERIES] = /** @type {?} */ ((lContainer[QUERIES])).createView();\n        }\n        createViewNode(viewBlockId, viewToRender);\n        enterView(viewToRender, viewToRender[TVIEW].node);\n    }\n    if (lContainer) {\n        if (getCreationMode()) {\n            // it is a new view, insert it into collection of views for a given container\n            insertView(viewToRender, lContainer, lView, /** @type {?} */ ((lContainer[ACTIVE_INDEX])), -1);\n        } /** @type {?} */\n        ((lContainer[ACTIVE_INDEX]))++;\n    }\n    return getRenderFlags(viewToRender);\n}\n/**\n * Initialize the TView (e.g. static data) for the active embedded view.\n *\n * Each embedded view block must create or retrieve its own TView. Otherwise, the embedded view's\n * static data for a particular node would overwrite the static data for a node in the view above\n * it with the same index (since it's in the same template).\n *\n * @param {?} viewIndex The index of the TView in TNode.tViews\n * @param {?} consts The number of nodes, local refs, and pipes in this template\n * @param {?} vars The number of bindings and pure function bindings in this template\n * @param {?} parent\n * @return {?} TView\n */\nfunction getOrCreateEmbeddedTView(viewIndex, consts, vars, parent) {\n    /** @type {?} */\n    var tView = getLView()[TVIEW];\n    ngDevMode && assertNodeType(parent, 0 /* Container */);\n    /** @type {?} */\n    var containerTViews = /** @type {?} */ (parent.tViews);\n    ngDevMode && assertDefined(containerTViews, 'TView expected');\n    ngDevMode && assertEqual(Array.isArray(containerTViews), true, 'TViews should be in an array');\n    if (viewIndex >= containerTViews.length || containerTViews[viewIndex] == null) {\n        containerTViews[viewIndex] = createTView(viewIndex, null, consts, vars, tView.directiveRegistry, tView.pipeRegistry, null);\n    }\n    return containerTViews[viewIndex];\n}\n/**\n * Marks the end of an embedded view.\n * @return {?}\n */\nexport function embeddedViewEnd() {\n    /** @type {?} */\n    var lView = getLView();\n    /** @type {?} */\n    var viewHost = lView[HOST_NODE];\n    refreshDescendantViews(lView, null);\n    leaveView(/** @type {?} */ ((lView[PARENT])));\n    setPreviousOrParentTNode(/** @type {?} */ ((viewHost)));\n    setIsParent(false);\n}\n/**\n * Refreshes components by entering the component view and processing its bindings, queries, etc.\n *\n * @template T\n * @param {?} adjustedElementIndex  Element index in LView[] (adjusted for HEADER_OFFSET)\n * @param {?} rf  The render flags that should be used to process this template\n * @return {?}\n */\nexport function componentRefresh(adjustedElementIndex, rf) {\n    /** @type {?} */\n    var lView = getLView();\n    ngDevMode && assertDataInRange(lView, adjustedElementIndex);\n    /** @type {?} */\n    var hostView = getComponentViewByIndex(adjustedElementIndex, lView);\n    ngDevMode && assertNodeType(/** @type {?} */ (lView[TVIEW].data[adjustedElementIndex]), 3 /* Element */);\n    // Only attached CheckAlways components or attached, dirty OnPush components should be checked\n    if (viewAttached(hostView) && hostView[FLAGS] & (2 /* CheckAlways */ | 4 /* Dirty */)) {\n        syncViewWithBlueprint(hostView);\n        detectChangesInternal(hostView, hostView[CONTEXT], rf);\n    }\n}\n/**\n * Syncs an LView instance with its blueprint if they have gotten out of sync.\n *\n * Typically, blueprints and their view instances should always be in sync, so the loop here\n * will be skipped. However, consider this case of two components side-by-side:\n *\n * App template:\n * ```\n * <comp></comp>\n * <comp></comp>\n * ```\n *\n * The following will happen:\n * 1. App template begins processing.\n * 2. First <comp> is matched as a component and its LView is created.\n * 3. Second <comp> is matched as a component and its LView is created.\n * 4. App template completes processing, so it's time to check child templates.\n * 5. First <comp> template is checked. It has a directive, so its def is pushed to blueprint.\n * 6. Second <comp> template is checked. Its blueprint has been updated by the first\n * <comp> template, but its LView was created before this update, so it is out of sync.\n *\n * Note that embedded views inside ngFor loops will never be out of sync because these views\n * are processed as soon as they are created.\n *\n * @param {?} componentView The view to sync\n * @return {?}\n */\nfunction syncViewWithBlueprint(componentView) {\n    /** @type {?} */\n    var componentTView = componentView[TVIEW];\n    for (var i = componentView.length; i < componentTView.blueprint.length; i++) {\n        componentView[i] = componentTView.blueprint[i];\n    }\n}\n/**\n * Returns a boolean for whether the view is attached\n * @param {?} view\n * @return {?}\n */\nexport function viewAttached(view) {\n    return (view[FLAGS] & 8 /* Attached */) === 8 /* Attached */;\n}\n/**\n * Instruction to distribute projectable nodes among <ng-content> occurrences in a given template.\n * It takes all the selectors from the entire component's template and decides where\n * each projected node belongs (it re-distributes nodes among \"buckets\" where each \"bucket\" is\n * backed by a selector).\n *\n * This function requires CSS selectors to be provided in 2 forms: parsed (by a compiler) and text,\n * un-parsed form.\n *\n * The parsed form is needed for efficient matching of a node against a given CSS selector.\n * The un-parsed, textual form is needed for support of the ngProjectAs attribute.\n *\n * Having a CSS selector in 2 different formats is not ideal, but alternatives have even more\n * drawbacks:\n * - having only a textual form would require runtime parsing of CSS selectors;\n * - we can't have only a parsed as we can't re-construct textual form from it (as entered by a\n * template author).\n *\n * @param {?=} selectors A collection of parsed CSS selectors\n * @param {?=} textSelectors\n * @return {?}\n */\nexport function projectionDef(selectors, textSelectors) {\n    /** @type {?} */\n    var componentNode = /** @type {?} */ (findComponentView(getLView())[HOST_NODE]);\n    if (!componentNode.projection) {\n        /** @type {?} */\n        var noOfNodeBuckets = selectors ? selectors.length + 1 : 1;\n        /** @type {?} */\n        var pData = componentNode.projection =\n            new Array(noOfNodeBuckets).fill(null);\n        /** @type {?} */\n        var tails = pData.slice();\n        /** @type {?} */\n        var componentChild = componentNode.child;\n        while (componentChild !== null) {\n            /** @type {?} */\n            var bucketIndex = selectors ? matchingSelectorIndex(componentChild, selectors, /** @type {?} */ ((textSelectors))) : 0;\n            /** @type {?} */\n            var nextNode = componentChild.next;\n            if (tails[bucketIndex]) {\n                /** @type {?} */ ((tails[bucketIndex])).next = componentChild;\n            }\n            else {\n                pData[bucketIndex] = componentChild;\n                componentChild.next = null;\n            }\n            tails[bucketIndex] = componentChild;\n            componentChild = nextNode;\n        }\n    }\n}\n/** *\n * Stack used to keep track of projection nodes in projection() instruction.\n *\n * This is deliberately created outside of projection() to avoid allocating\n * a new array each time the function is called. Instead the array will be\n * re-used by each invocation. This works because the function is not reentrant.\n  @type {?} */\nvar projectionNodeStack = [];\n/**\n * Inserts previously re-distributed projected nodes. This instruction must be preceded by a call\n * to the projectionDef instruction.\n *\n * @param {?} nodeIndex\n * @param {?=} selectorIndex\n * @param {?=} attrs\n * @return {?}\n */\nexport function projection(nodeIndex, selectorIndex, attrs) {\n    if (selectorIndex === void 0) { selectorIndex = 0; }\n    /** @type {?} */\n    var lView = getLView();\n    /** @type {?} */\n    var tProjectionNode = createNodeAtIndex(nodeIndex, 1 /* Projection */, null, null, attrs || null);\n    // We can't use viewData[HOST_NODE] because projection nodes can be nested in embedded views.\n    if (tProjectionNode.projection === null)\n        tProjectionNode.projection = selectorIndex;\n    // `<ng-content>` has no content\n    setIsParent(false);\n    /** @type {?} */\n    var componentView = findComponentView(lView);\n    /** @type {?} */\n    var componentNode = /** @type {?} */ (componentView[HOST_NODE]);\n    /** @type {?} */\n    var nodeToProject = (/** @type {?} */ (componentNode.projection))[selectorIndex];\n    /** @type {?} */\n    var projectedView = /** @type {?} */ ((componentView[PARENT]));\n    /** @type {?} */\n    var projectionNodeIndex = -1;\n    while (nodeToProject) {\n        if (nodeToProject.type === 1 /* Projection */) {\n            /** @type {?} */\n            var currentComponentView = findComponentView(projectedView);\n            /** @type {?} */\n            var currentComponentHost = /** @type {?} */ (currentComponentView[HOST_NODE]);\n            /** @type {?} */\n            var firstProjectedNode = (/** @type {?} */ (currentComponentHost.projection))[/** @type {?} */ (nodeToProject.projection)];\n            if (firstProjectedNode) {\n                projectionNodeStack[++projectionNodeIndex] = nodeToProject;\n                projectionNodeStack[++projectionNodeIndex] = projectedView;\n                nodeToProject = firstProjectedNode;\n                projectedView = /** @type {?} */ ((currentComponentView[PARENT]));\n                continue;\n            }\n        }\n        else {\n            // This flag must be set now or we won't know that this node is projected\n            // if the nodes are inserted into a container later.\n            nodeToProject.flags |= 8192 /* isProjected */;\n            appendProjectedNode(nodeToProject, tProjectionNode, lView, projectedView);\n        }\n        // If we are finished with a list of re-projected nodes, we need to get\n        // back to the root projection node that was re-projected.\n        if (nodeToProject.next === null && projectedView !== /** @type {?} */ ((componentView[PARENT]))) {\n            projectedView = /** @type {?} */ (projectionNodeStack[projectionNodeIndex--]);\n            nodeToProject = /** @type {?} */ (projectionNodeStack[projectionNodeIndex--]);\n        }\n        nodeToProject = nodeToProject.next;\n    }\n}\n/**\n * Adds LView or LContainer to the end of the current view tree.\n *\n * This structure will be used to traverse through nested views to remove listeners\n * and call onDestroy callbacks.\n *\n * @template T\n * @param {?} lView The view where LView or LContainer should be added\n * @param {?} adjustedHostIndex Index of the view's host node in LView[], adjusted for header\n * @param {?} state The LView or LContainer to add to the view tree\n * @return {?} The state passed in\n */\nexport function addToViewTree(lView, adjustedHostIndex, state) {\n    /** @type {?} */\n    var tView = lView[TVIEW];\n    /** @type {?} */\n    var firstTemplatePass = getFirstTemplatePass();\n    if (lView[TAIL]) {\n        /** @type {?} */ ((lView[TAIL]))[NEXT] = state;\n    }\n    else if (firstTemplatePass) {\n        tView.childIndex = adjustedHostIndex;\n    }\n    lView[TAIL] = state;\n    return state;\n}\n/**\n * If node is an OnPush component, marks its LView dirty.\n * @param {?} lView\n * @param {?} viewIndex\n * @return {?}\n */\nfunction markDirtyIfOnPush(lView, viewIndex) {\n    /** @type {?} */\n    var childComponentLView = getComponentViewByIndex(viewIndex, lView);\n    if (!(childComponentLView[FLAGS] & 2 /* CheckAlways */)) {\n        childComponentLView[FLAGS] |= 4 /* Dirty */;\n    }\n}\n/**\n * Wraps an event listener with preventDefault behavior.\n * @param {?} listenerFn\n * @return {?}\n */\nfunction wrapListenerWithPreventDefault(listenerFn) {\n    return function wrapListenerIn_preventDefault(e) {\n        if (listenerFn(e) === false) {\n            e.preventDefault();\n            // Necessary for legacy browsers that don't support preventDefault (e.g. IE)\n            e.returnValue = false;\n        }\n    };\n}\n/**\n * Marks current view and all ancestors dirty\n * @param {?} lView\n * @return {?}\n */\nexport function markViewDirty(lView) {\n    while (lView && !(lView[FLAGS] & 64 /* IsRoot */)) {\n        lView[FLAGS] |= 4 /* Dirty */;\n        lView = /** @type {?} */ ((lView[PARENT]));\n    }\n    lView[FLAGS] |= 4 /* Dirty */;\n    ngDevMode && assertDefined(lView[CONTEXT], 'rootContext should be defined');\n    /** @type {?} */\n    var rootContext = /** @type {?} */ (lView[CONTEXT]);\n    scheduleTick(rootContext, 1 /* DetectChanges */);\n}\n/**\n * Used to schedule change detection on the whole application.\n *\n * Unlike `tick`, `scheduleTick` coalesces multiple calls into one change detection run.\n * It is usually called indirectly by calling `markDirty` when the view needs to be\n * re-rendered.\n *\n * Typically `scheduleTick` uses `requestAnimationFrame` to coalesce multiple\n * `scheduleTick` requests. The scheduling function can be overridden in\n * `renderComponent`'s `scheduler` option.\n * @template T\n * @param {?} rootContext\n * @param {?} flags\n * @return {?}\n */\nexport function scheduleTick(rootContext, flags) {\n    /** @type {?} */\n    var nothingScheduled = rootContext.flags === 0 /* Empty */;\n    rootContext.flags |= flags;\n    if (nothingScheduled && rootContext.clean == _CLEAN_PROMISE) {\n        /** @type {?} */\n        var res_1 = void 0;\n        rootContext.clean = new Promise(function (r) { return res_1 = r; });\n        rootContext.scheduler(function () {\n            if (rootContext.flags & 1 /* DetectChanges */) {\n                rootContext.flags &= ~1 /* DetectChanges */;\n                tickRootContext(rootContext);\n            }\n            if (rootContext.flags & 2 /* FlushPlayers */) {\n                rootContext.flags &= ~2 /* FlushPlayers */;\n                /** @type {?} */\n                var playerHandler = rootContext.playerHandler;\n                if (playerHandler) {\n                    playerHandler.flushPlayers();\n                }\n            }\n            rootContext.clean = _CLEAN_PROMISE; /** @type {?} */\n            ((res_1))(null);\n        });\n    }\n}\n/**\n * Used to perform change detection on the whole application.\n *\n * This is equivalent to `detectChanges`, but invoked on root component. Additionally, `tick`\n * executes lifecycle hooks and conditionally checks components based on their\n * `ChangeDetectionStrategy` and dirtiness.\n *\n * The preferred way to trigger change detection is to call `markDirty`. `markDirty` internally\n * schedules `tick` using a scheduler in order to coalesce multiple `markDirty` calls into a\n * single change detection run. By default, the scheduler is `requestAnimationFrame`, but can\n * be changed when calling `renderComponent` and providing the `scheduler` option.\n * @template T\n * @param {?} component\n * @return {?}\n */\nexport function tick(component) {\n    /** @type {?} */\n    var rootView = getRootView(component);\n    /** @type {?} */\n    var rootContext = /** @type {?} */ (rootView[CONTEXT]);\n    tickRootContext(rootContext);\n}\n/**\n * @param {?} rootContext\n * @return {?}\n */\nfunction tickRootContext(rootContext) {\n    for (var i = 0; i < rootContext.components.length; i++) {\n        /** @type {?} */\n        var rootComponent = rootContext.components[i];\n        renderComponentOrTemplate(/** @type {?} */ ((readPatchedLView(rootComponent))), rootComponent, 2 /* Update */);\n    }\n}\n/**\n * Synchronously perform change detection on a component (and possibly its sub-components).\n *\n * This function triggers change detection in a synchronous way on a component. There should\n * be very little reason to call this function directly since a preferred way to do change\n * detection is to {\\@link markDirty} the component and wait for the scheduler to call this method\n * at some future point in time. This is because a single user action often results in many\n * components being invalidated and calling change detection on each component synchronously\n * would be inefficient. It is better to wait until all components are marked as dirty and\n * then perform single change detection across all of the components\n *\n * @template T\n * @param {?} component The component which the change detection should be performed on.\n * @return {?}\n */\nexport function detectChanges(component) {\n    detectChangesInternal(/** @type {?} */ ((getComponentViewByInstance(component))), component, null);\n}\n/**\n * Synchronously perform change detection on a root view and its components.\n *\n * @param {?} lView The view which the change detection should be performed on.\n * @return {?}\n */\nexport function detectChangesInRootView(lView) {\n    tickRootContext(/** @type {?} */ (lView[CONTEXT]));\n}\n/**\n * Checks the change detector and its children, and throws if any changes are detected.\n *\n * This is used in development mode to verify that running change detection doesn't\n * introduce other changes.\n * @template T\n * @param {?} component\n * @return {?}\n */\nexport function checkNoChanges(component) {\n    setCheckNoChangesMode(true);\n    try {\n        detectChanges(component);\n    }\n    finally {\n        setCheckNoChangesMode(false);\n    }\n}\n/**\n * Checks the change detector on a root view and its components, and throws if any changes are\n * detected.\n *\n * This is used in development mode to verify that running change detection doesn't\n * introduce other changes.\n *\n * @param {?} lView The view which the change detection should be checked on.\n * @return {?}\n */\nexport function checkNoChangesInRootView(lView) {\n    setCheckNoChangesMode(true);\n    try {\n        detectChangesInRootView(lView);\n    }\n    finally {\n        setCheckNoChangesMode(false);\n    }\n}\n/**\n * Checks the view of the component provided. Does not gate on dirty checks or execute doCheck.\n * @template T\n * @param {?} hostView\n * @param {?} component\n * @param {?} rf\n * @return {?}\n */\nfunction detectChangesInternal(hostView, component, rf) {\n    /** @type {?} */\n    var hostTView = hostView[TVIEW];\n    /** @type {?} */\n    var oldView = enterView(hostView, hostView[HOST_NODE]);\n    /** @type {?} */\n    var templateFn = /** @type {?} */ ((hostTView.template));\n    /** @type {?} */\n    var viewQuery = hostTView.viewQuery;\n    try {\n        namespaceHTML();\n        createViewQuery(viewQuery, rf, hostView[FLAGS], component);\n        templateFn(rf || getRenderFlags(hostView), component);\n        refreshDescendantViews(hostView, rf);\n        updateViewQuery(viewQuery, hostView[FLAGS], component);\n    }\n    finally {\n        leaveView(oldView, rf === 1 /* Create */);\n    }\n}\n/**\n * @template T\n * @param {?} viewQuery\n * @param {?} renderFlags\n * @param {?} viewFlags\n * @param {?} component\n * @return {?}\n */\nfunction createViewQuery(viewQuery, renderFlags, viewFlags, component) {\n    if (viewQuery && (renderFlags === 1 /* Create */ ||\n        (renderFlags === null && (viewFlags & 1 /* CreationMode */)))) {\n        viewQuery(1 /* Create */, component);\n    }\n}\n/**\n * @template T\n * @param {?} viewQuery\n * @param {?} flags\n * @param {?} component\n * @return {?}\n */\nfunction updateViewQuery(viewQuery, flags, component) {\n    if (viewQuery && flags & 2 /* Update */) {\n        viewQuery(2 /* Update */, component);\n    }\n}\n/**\n * Mark the component as dirty (needing change detection).\n *\n * Marking a component dirty will schedule a change detection on this\n * component at some point in the future. Marking an already dirty\n * component as dirty is a noop. Only one outstanding change detection\n * can be scheduled per component tree. (Two components bootstrapped with\n * separate `renderComponent` will have separate schedulers)\n *\n * When the root component is bootstrapped with `renderComponent`, a scheduler\n * can be provided.\n *\n * \\@publicApi\n * @template T\n * @param {?} component Component to mark as dirty.\n *\n * @return {?}\n */\nexport function markDirty(component) {\n    ngDevMode && assertDefined(component, 'component');\n    markViewDirty(getComponentViewByInstance(component));\n}\n/**\n * Creates a single value binding.\n *\n * @template T\n * @param {?} value Value to diff\n * @return {?}\n */\nexport function bind(value) {\n    /** @type {?} */\n    var lView = getLView();\n    return bindingUpdated(lView, lView[BINDING_INDEX]++, value) ? value : NO_CHANGE;\n}\n/**\n * Allocates the necessary amount of slots for host vars.\n *\n * @param {?} count Amount of vars to be allocated\n * @return {?}\n */\nexport function allocHostVars(count) {\n    if (!getFirstTemplatePass())\n        return;\n    /** @type {?} */\n    var lView = getLView();\n    /** @type {?} */\n    var tView = lView[TVIEW];\n    queueHostBindingForCheck(tView, /** @type {?} */ ((getCurrentDirectiveDef())), count);\n    prefillHostVars(tView, lView, count);\n}\n/**\n * Create interpolation bindings with a variable number of expressions.\n *\n * If there are 1 to 8 expressions `interpolation1()` to `interpolation8()` should be used instead.\n * Those are faster because there is no need to create an array of expressions and iterate over it.\n *\n * `values`:\n * - has static text at even indexes,\n * - has evaluated expressions at odd indexes.\n *\n * Returns the concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n * @param {?} values\n * @return {?}\n */\nexport function interpolationV(values) {\n    ngDevMode && assertLessThan(2, values.length, 'should have at least 3 values');\n    ngDevMode && assertEqual(values.length % 2, 1, 'should have an odd number of values');\n    /** @type {?} */\n    var different = false;\n    /** @type {?} */\n    var lView = getLView();\n    /** @type {?} */\n    var bindingIndex = lView[BINDING_INDEX];\n    for (var i = 1; i < values.length; i += 2) {\n        // Check if bindings (odd indexes) have changed\n        bindingUpdated(lView, bindingIndex++, values[i]) && (different = true);\n    }\n    lView[BINDING_INDEX] = bindingIndex;\n    if (!different) {\n        return NO_CHANGE;\n    }\n    /** @type {?} */\n    var content = values[0];\n    for (var i = 1; i < values.length; i += 2) {\n        content += stringify(values[i]) + values[i + 1];\n    }\n    return content;\n}\n/**\n * Creates an interpolation binding with 1 expression.\n *\n * @param {?} prefix static value used for concatenation only.\n * @param {?} v0 value checked for change.\n * @param {?} suffix static value used for concatenation only.\n * @return {?}\n */\nexport function interpolation1(prefix, v0, suffix) {\n    /** @type {?} */\n    var lView = getLView();\n    /** @type {?} */\n    var different = bindingUpdated(lView, lView[BINDING_INDEX], v0);\n    lView[BINDING_INDEX] += 1;\n    return different ? prefix + stringify(v0) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 2 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation2(prefix, v0, i0, v1, suffix) {\n    /** @type {?} */\n    var lView = getLView();\n    /** @type {?} */\n    var different = bindingUpdated2(lView, lView[BINDING_INDEX], v0, v1);\n    lView[BINDING_INDEX] += 2;\n    return different ? prefix + stringify(v0) + i0 + stringify(v1) + suffix : NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 3 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation3(prefix, v0, i0, v1, i1, v2, suffix) {\n    /** @type {?} */\n    var lView = getLView();\n    /** @type {?} */\n    var different = bindingUpdated3(lView, lView[BINDING_INDEX], v0, v1, v2);\n    lView[BINDING_INDEX] += 3;\n    return different ? prefix + stringify(v0) + i0 + stringify(v1) + i1 + stringify(v2) + suffix :\n        NO_CHANGE;\n}\n/**\n * Create an interpolation binding with 4 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {\n    /** @type {?} */\n    var lView = getLView();\n    /** @type {?} */\n    var different = bindingUpdated4(lView, lView[BINDING_INDEX], v0, v1, v2, v3);\n    lView[BINDING_INDEX] += 4;\n    return different ?\n        prefix + stringify(v0) + i0 + stringify(v1) + i1 + stringify(v2) + i2 + stringify(v3) +\n            suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 5 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {\n    /** @type {?} */\n    var lView = getLView();\n    /** @type {?} */\n    var bindingIndex = lView[BINDING_INDEX];\n    /** @type {?} */\n    var different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n    different = bindingUpdated(lView, bindingIndex + 4, v4) || different;\n    lView[BINDING_INDEX] += 5;\n    return different ?\n        prefix + stringify(v0) + i0 + stringify(v1) + i1 + stringify(v2) + i2 + stringify(v3) + i3 +\n            stringify(v4) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 6 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} i4\n * @param {?} v5\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {\n    /** @type {?} */\n    var lView = getLView();\n    /** @type {?} */\n    var bindingIndex = lView[BINDING_INDEX];\n    /** @type {?} */\n    var different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n    different = bindingUpdated2(lView, bindingIndex + 4, v4, v5) || different;\n    lView[BINDING_INDEX] += 6;\n    return different ?\n        prefix + stringify(v0) + i0 + stringify(v1) + i1 + stringify(v2) + i2 + stringify(v3) + i3 +\n            stringify(v4) + i4 + stringify(v5) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 7 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} i4\n * @param {?} v5\n * @param {?} i5\n * @param {?} v6\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {\n    /** @type {?} */\n    var lView = getLView();\n    /** @type {?} */\n    var bindingIndex = lView[BINDING_INDEX];\n    /** @type {?} */\n    var different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n    different = bindingUpdated3(lView, bindingIndex + 4, v4, v5, v6) || different;\n    lView[BINDING_INDEX] += 7;\n    return different ?\n        prefix + stringify(v0) + i0 + stringify(v1) + i1 + stringify(v2) + i2 + stringify(v3) + i3 +\n            stringify(v4) + i4 + stringify(v5) + i5 + stringify(v6) + suffix :\n        NO_CHANGE;\n}\n/**\n * Creates an interpolation binding with 8 expressions.\n * @param {?} prefix\n * @param {?} v0\n * @param {?} i0\n * @param {?} v1\n * @param {?} i1\n * @param {?} v2\n * @param {?} i2\n * @param {?} v3\n * @param {?} i3\n * @param {?} v4\n * @param {?} i4\n * @param {?} v5\n * @param {?} i5\n * @param {?} v6\n * @param {?} i6\n * @param {?} v7\n * @param {?} suffix\n * @return {?}\n */\nexport function interpolation8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {\n    /** @type {?} */\n    var lView = getLView();\n    /** @type {?} */\n    var bindingIndex = lView[BINDING_INDEX];\n    /** @type {?} */\n    var different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n    different = bindingUpdated4(lView, bindingIndex + 4, v4, v5, v6, v7) || different;\n    lView[BINDING_INDEX] += 8;\n    return different ?\n        prefix + stringify(v0) + i0 + stringify(v1) + i1 + stringify(v2) + i2 + stringify(v3) + i3 +\n            stringify(v4) + i4 + stringify(v5) + i5 + stringify(v6) + i6 + stringify(v7) + suffix :\n        NO_CHANGE;\n}\n/**\n * Store a value in the `data` at a given `index`.\n * @template T\n * @param {?} index\n * @param {?} value\n * @return {?}\n */\nexport function store(index, value) {\n    /** @type {?} */\n    var lView = getLView();\n    /** @type {?} */\n    var tView = lView[TVIEW];\n    /** @type {?} */\n    var adjustedIndex = index + HEADER_OFFSET;\n    if (adjustedIndex >= tView.data.length) {\n        tView.data[adjustedIndex] = null;\n    }\n    lView[adjustedIndex] = value;\n}\n/**\n * Retrieves a local reference from the current contextViewData.\n *\n * If the reference to retrieve is in a parent view, this instruction is used in conjunction\n * with a nextContext() call, which walks up the tree and updates the contextViewData instance.\n *\n * @template T\n * @param {?} index The index of the local ref in contextViewData.\n * @return {?}\n */\nexport function reference(index) {\n    /** @type {?} */\n    var contextLView = getContextLView();\n    return loadInternal(contextLView, index);\n}\n/**\n * @template T\n * @param {?} queryListIdx\n * @return {?}\n */\nexport function loadQueryList(queryListIdx) {\n    /** @type {?} */\n    var lView = getLView();\n    ngDevMode &&\n        assertDefined(lView[CONTENT_QUERIES], 'Content QueryList array should be defined if reading a query.');\n    ngDevMode && assertDataInRange(/** @type {?} */ ((lView[CONTENT_QUERIES])), queryListIdx);\n    return /** @type {?} */ ((lView[CONTENT_QUERIES]))[queryListIdx];\n}\n/**\n * Retrieves a value from current `viewData`.\n * @template T\n * @param {?} index\n * @return {?}\n */\nexport function load(index) {\n    return loadInternal(getLView(), index);\n}\n/**\n * @template T\n * @param {?} token\n * @param {?=} flags\n * @return {?}\n */\nexport function directiveInject(token, flags) {\n    if (flags === void 0) { flags = InjectFlags.Default; }\n    token = resolveForwardRef(token);\n    return getOrCreateInjectable(/** @type {?} */ (getPreviousOrParentTNode()), getLView(), token, flags);\n}\n/**\n * Facade for the attribute injection from DI.\n * @param {?} attrNameToInject\n * @return {?}\n */\nexport function injectAttribute(attrNameToInject) {\n    return injectAttributeImpl(getPreviousOrParentTNode(), attrNameToInject);\n}\n/**\n * Registers a QueryList, associated with a content query, for later refresh (part of a view\n * refresh).\n * @template Q\n * @param {?} queryList\n * @param {?} currentDirectiveIndex\n * @return {?}\n */\nexport function registerContentQuery(queryList, currentDirectiveIndex) {\n    /** @type {?} */\n    var viewData = getLView();\n    /** @type {?} */\n    var tView = viewData[TVIEW];\n    /** @type {?} */\n    var savedContentQueriesLength = (viewData[CONTENT_QUERIES] || (viewData[CONTENT_QUERIES] = [])).push(queryList);\n    if (getFirstTemplatePass()) {\n        /** @type {?} */\n        var tViewContentQueries = tView.contentQueries || (tView.contentQueries = []);\n        /** @type {?} */\n        var lastSavedDirectiveIndex = tView.contentQueries.length ? tView.contentQueries[tView.contentQueries.length - 2] : -1;\n        if (currentDirectiveIndex !== lastSavedDirectiveIndex) {\n            tViewContentQueries.push(currentDirectiveIndex, savedContentQueriesLength - 1);\n        }\n    }\n}\n/** @type {?} */\nexport var CLEAN_PROMISE = _CLEAN_PROMISE;\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction initializeTNodeInputs(tNode) {\n    // If tNode.inputs is undefined, a listener has created outputs, but inputs haven't\n    // yet been checked.\n    if (tNode) {\n        if (tNode.inputs === undefined) {\n            // mark inputs as checked\n            tNode.inputs = generatePropertyAliases(tNode.flags, 0 /* Input */);\n        }\n        return tNode.inputs;\n    }\n    return null;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nexport function delegateToClassInput(tNode) {\n    return tNode.flags & 32768 /* hasClassInput */;\n}\n/**\n * Returns the current OpaqueViewState instance.\n *\n * Used in conjunction with the restoreView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n * @return {?}\n */\nexport function getCurrentView() {\n    return /** @type {?} */ ((getLView()));\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction getCleanup(view) {\n    // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n    return view[CLEANUP] || (view[CLEANUP] = []);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction getTViewCleanup(view) {\n    return view[TVIEW].cleanup || (view[TVIEW].cleanup = []);\n}\n//# sourceMappingURL=instructions.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { checkNoChanges, checkNoChangesInRootView, detectChanges, detectChangesInRootView, markViewDirty, storeCleanupFn, viewAttached } from './instructions';\nimport { FLAGS, HOST, HOST_NODE, PARENT, RENDERER_FACTORY } from './interfaces/view';\nimport { destroyLView } from './node_manipulation';\nimport { getNativeByTNode } from './util';\n/**\n * @record\n */\nexport function viewEngine_ChangeDetectorRef_interface() { }\n/**\n * @template T\n */\nvar /**\n * @template T\n */\nViewRef = /** @class */ (function () {\n    function ViewRef(_lView, _context, _componentIndex) {\n        this._context = _context;\n        this._componentIndex = _componentIndex;\n        this._appRef = null;\n        this._viewContainerRef = null;\n        /**\n         * \\@internal\n         */\n        this._tViewNode = null;\n        this._lView = _lView;\n    }\n    Object.defineProperty(ViewRef.prototype, \"rootNodes\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            if (this._lView[HOST] == null) {\n                /** @type {?} */\n                var tView = /** @type {?} */ (this._lView[HOST_NODE]);\n                return collectNativeNodes(this._lView, tView, []);\n            }\n            return [];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewRef.prototype, \"context\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._context ? this._context : this._lookUpContext(); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewRef.prototype, \"destroyed\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return (this._lView[FLAGS] & 32 /* Destroyed */) === 32 /* Destroyed */;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    ViewRef.prototype.destroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this._appRef) {\n            this._appRef.detachView(this);\n        }\n        else if (this._viewContainerRef && viewAttached(this._lView)) {\n            this._viewContainerRef.detach(this._viewContainerRef.indexOf(this));\n            this._viewContainerRef = null;\n        }\n        destroyLView(this._lView);\n    };\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    ViewRef.prototype.onDestroy = /**\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) { storeCleanupFn(this._lView, callback); };\n    /**\n     * Marks a view and all of its ancestors dirty.\n     *\n     * It also triggers change detection by calling `scheduleTick` internally, which coalesces\n     * multiple `markForCheck` calls to into one change detection run.\n     *\n     * This can be used to ensure an {@link ChangeDetectionStrategy#OnPush OnPush} component is\n     * checked when it needs to be re-rendered but the two normal triggers haven't marked it\n     * dirty (i.e. inputs haven't changed and events haven't fired in the view).\n     *\n     * <!-- TODO: Add a link to a chapter on OnPush components -->\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * @Component({\n     *   selector: 'my-app',\n     *   template: `Number of ticks: {{numberOfTicks}}`\n     *   changeDetection: ChangeDetectionStrategy.OnPush,\n     * })\n     * class AppComponent {\n     *   numberOfTicks = 0;\n     *\n     *   constructor(private ref: ChangeDetectorRef) {\n     *     setInterval(() => {\n     *       this.numberOfTicks++;\n     *       // the following is required, otherwise the view will not be updated\n     *       this.ref.markForCheck();\n     *     }, 1000);\n     *   }\n     * }\n     * ```\n     */\n    /**\n     * Marks a view and all of its ancestors dirty.\n     *\n     * It also triggers change detection by calling `scheduleTick` internally, which coalesces\n     * multiple `markForCheck` calls to into one change detection run.\n     *\n     * This can be used to ensure an {\\@link ChangeDetectionStrategy#OnPush OnPush} component is\n     * checked when it needs to be re-rendered but the two normal triggers haven't marked it\n     * dirty (i.e. inputs haven't changed and events haven't fired in the view).\n     *\n     * <!-- TODO: Add a link to a chapter on OnPush components -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Component({\n     *   selector: 'my-app',\n     *   template: `Number of ticks: {{numberOfTicks}}`\n     *   changeDetection: ChangeDetectionStrategy.OnPush,\n     * })\n     * class AppComponent {\n     *   numberOfTicks = 0;\n     *\n     *   constructor(private ref: ChangeDetectorRef) {\n     *     setInterval(() => {\n     *       this.numberOfTicks++;\n     *       // the following is required, otherwise the view will not be updated\n     *       this.ref.markForCheck();\n     *     }, 1000);\n     *   }\n     * }\n     * ```\n     * @return {?}\n     */\n    ViewRef.prototype.markForCheck = /**\n     * Marks a view and all of its ancestors dirty.\n     *\n     * It also triggers change detection by calling `scheduleTick` internally, which coalesces\n     * multiple `markForCheck` calls to into one change detection run.\n     *\n     * This can be used to ensure an {\\@link ChangeDetectionStrategy#OnPush OnPush} component is\n     * checked when it needs to be re-rendered but the two normal triggers haven't marked it\n     * dirty (i.e. inputs haven't changed and events haven't fired in the view).\n     *\n     * <!-- TODO: Add a link to a chapter on OnPush components -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Component({\n     *   selector: 'my-app',\n     *   template: `Number of ticks: {{numberOfTicks}}`\n     *   changeDetection: ChangeDetectionStrategy.OnPush,\n     * })\n     * class AppComponent {\n     *   numberOfTicks = 0;\n     *\n     *   constructor(private ref: ChangeDetectorRef) {\n     *     setInterval(() => {\n     *       this.numberOfTicks++;\n     *       // the following is required, otherwise the view will not be updated\n     *       this.ref.markForCheck();\n     *     }, 1000);\n     *   }\n     * }\n     * ```\n     * @return {?}\n     */\n    function () { markViewDirty(this._lView); };\n    /**\n     * Detaches the view from the change detection tree.\n     *\n     * Detached views will not be checked during change detection runs until they are\n     * re-attached, even if they are dirty. `detach` can be used in combination with\n     * {@link ChangeDetectorRef#detectChanges detectChanges} to implement local change\n     * detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds. We can do that by detaching\n     * the component's change detector and doing a local check every five seconds.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   // in a real application the returned data will be different every time\n     *   get data() {\n     *     return [1,2,3,4,5];\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'giant-list',\n     *   template: `\n     *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\n     *   `,\n     * })\n     * class GiantList {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\n     *     ref.detach();\n     *     setInterval(() => {\n     *       this.ref.detectChanges();\n     *     }, 5000);\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     <giant-list><giant-list>\n     *   `,\n     * })\n     * class App {\n     * }\n     * ```\n     */\n    /**\n     * Detaches the view from the change detection tree.\n     *\n     * Detached views will not be checked during change detection runs until they are\n     * re-attached, even if they are dirty. `detach` can be used in combination with\n     * {\\@link ChangeDetectorRef#detectChanges detectChanges} to implement local change\n     * detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds. We can do that by detaching\n     * the component's change detector and doing a local check every five seconds.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   // in a real application the returned data will be different every time\n     *   get data() {\n     *     return [1,2,3,4,5];\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'giant-list',\n     *   template: `\n     *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\n     *   `,\n     * })\n     * class GiantList {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\n     *     ref.detach();\n     *     setInterval(() => {\n     *       this.ref.detectChanges();\n     *     }, 5000);\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     <giant-list><giant-list>\n     *   `,\n     * })\n     * class App {\n     * }\n     * ```\n     * @return {?}\n     */\n    ViewRef.prototype.detach = /**\n     * Detaches the view from the change detection tree.\n     *\n     * Detached views will not be checked during change detection runs until they are\n     * re-attached, even if they are dirty. `detach` can be used in combination with\n     * {\\@link ChangeDetectorRef#detectChanges detectChanges} to implement local change\n     * detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds. We can do that by detaching\n     * the component's change detector and doing a local check every five seconds.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   // in a real application the returned data will be different every time\n     *   get data() {\n     *     return [1,2,3,4,5];\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'giant-list',\n     *   template: `\n     *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\n     *   `,\n     * })\n     * class GiantList {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\n     *     ref.detach();\n     *     setInterval(() => {\n     *       this.ref.detectChanges();\n     *     }, 5000);\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     <giant-list><giant-list>\n     *   `,\n     * })\n     * class App {\n     * }\n     * ```\n     * @return {?}\n     */\n    function () { this._lView[FLAGS] &= ~8 /* Attached */; };\n    /**\n     * Re-attaches a view to the change detection tree.\n     *\n     * This can be used to re-attach views that were previously detached from the tree\n     * using {@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example creates a component displaying `live` data. The component will detach\n     * its change detector from the main change detector tree when the component's live property\n     * is set to false.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   data = 1;\n     *\n     *   constructor() {\n     *     setInterval(() => {\n     *       this.data = this.data * 2;\n     *     }, 500);\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'live-data',\n     *   inputs: ['live'],\n     *   template: 'Data: {{dataProvider.data}}'\n     * })\n     * class LiveData {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\n     *\n     *   set live(value) {\n     *     if (value) {\n     *       this.ref.reattach();\n     *     } else {\n     *       this.ref.detach();\n     *     }\n     *   }\n     * }\n     *\n     * @Component({\n     *   selector: 'my-app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n     *     <live-data [live]=\"live\"><live-data>\n     *   `,\n     * })\n     * class AppComponent {\n     *   live = true;\n     * }\n     * ```\n     */\n    /**\n     * Re-attaches a view to the change detection tree.\n     *\n     * This can be used to re-attach views that were previously detached from the tree\n     * using {\\@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example creates a component displaying `live` data. The component will detach\n     * its change detector from the main change detector tree when the component's live property\n     * is set to false.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   data = 1;\n     *\n     *   constructor() {\n     *     setInterval(() => {\n     *       this.data = this.data * 2;\n     *     }, 500);\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'live-data',\n     *   inputs: ['live'],\n     *   template: 'Data: {{dataProvider.data}}'\n     * })\n     * class LiveData {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\n     *\n     *   set live(value) {\n     *     if (value) {\n     *       this.ref.reattach();\n     *     } else {\n     *       this.ref.detach();\n     *     }\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'my-app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n     *     <live-data [live]=\"live\"><live-data>\n     *   `,\n     * })\n     * class AppComponent {\n     *   live = true;\n     * }\n     * ```\n     * @return {?}\n     */\n    ViewRef.prototype.reattach = /**\n     * Re-attaches a view to the change detection tree.\n     *\n     * This can be used to re-attach views that were previously detached from the tree\n     * using {\\@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example creates a component displaying `live` data. The component will detach\n     * its change detector from the main change detector tree when the component's live property\n     * is set to false.\n     *\n     * ```typescript\n     * class DataProvider {\n     *   data = 1;\n     *\n     *   constructor() {\n     *     setInterval(() => {\n     *       this.data = this.data * 2;\n     *     }, 500);\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'live-data',\n     *   inputs: ['live'],\n     *   template: 'Data: {{dataProvider.data}}'\n     * })\n     * class LiveData {\n     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\n     *\n     *   set live(value) {\n     *     if (value) {\n     *       this.ref.reattach();\n     *     } else {\n     *       this.ref.detach();\n     *     }\n     *   }\n     * }\n     *\n     * \\@Component({\n     *   selector: 'my-app',\n     *   providers: [DataProvider],\n     *   template: `\n     *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n     *     <live-data [live]=\"live\"><live-data>\n     *   `,\n     * })\n     * class AppComponent {\n     *   live = true;\n     * }\n     * ```\n     * @return {?}\n     */\n    function () { this._lView[FLAGS] |= 8 /* Attached */; };\n    /**\n     * Checks the view and its children.\n     *\n     * This can also be used in combination with {@link ChangeDetectorRef#detach detach} to implement\n     * local change detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine, the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds.\n     *\n     * We can do that by detaching the component's change detector and doing a local change detection\n     * check every five seconds.\n     *\n     * See {@link ChangeDetectorRef#detach detach} for more information.\n     */\n    /**\n     * Checks the view and its children.\n     *\n     * This can also be used in combination with {\\@link ChangeDetectorRef#detach detach} to implement\n     * local change detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine, the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds.\n     *\n     * We can do that by detaching the component's change detector and doing a local change detection\n     * check every five seconds.\n     *\n     * See {\\@link ChangeDetectorRef#detach detach} for more information.\n     * @return {?}\n     */\n    ViewRef.prototype.detectChanges = /**\n     * Checks the view and its children.\n     *\n     * This can also be used in combination with {\\@link ChangeDetectorRef#detach detach} to implement\n     * local change detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example defines a component with a large list of readonly data.\n     * Imagine, the data changes constantly, many times per second. For performance reasons,\n     * we want to check and update the list every five seconds.\n     *\n     * We can do that by detaching the component's change detector and doing a local change detection\n     * check every five seconds.\n     *\n     * See {\\@link ChangeDetectorRef#detach detach} for more information.\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var rendererFactory = this._lView[RENDERER_FACTORY];\n        if (rendererFactory.begin) {\n            rendererFactory.begin();\n        }\n        detectChanges(this.context);\n        if (rendererFactory.end) {\n            rendererFactory.end();\n        }\n    };\n    /**\n     * Checks the change detector and its children, and throws if any changes are detected.\n     *\n     * This is used in development mode to verify that running change detection doesn't\n     * introduce other changes.\n     */\n    /**\n     * Checks the change detector and its children, and throws if any changes are detected.\n     *\n     * This is used in development mode to verify that running change detection doesn't\n     * introduce other changes.\n     * @return {?}\n     */\n    ViewRef.prototype.checkNoChanges = /**\n     * Checks the change detector and its children, and throws if any changes are detected.\n     *\n     * This is used in development mode to verify that running change detection doesn't\n     * introduce other changes.\n     * @return {?}\n     */\n    function () { checkNoChanges(this.context); };\n    /**\n     * @param {?} vcRef\n     * @return {?}\n     */\n    ViewRef.prototype.attachToViewContainerRef = /**\n     * @param {?} vcRef\n     * @return {?}\n     */\n    function (vcRef) { this._viewContainerRef = vcRef; };\n    /**\n     * @return {?}\n     */\n    ViewRef.prototype.detachFromAppRef = /**\n     * @return {?}\n     */\n    function () { this._appRef = null; };\n    /**\n     * @param {?} appRef\n     * @return {?}\n     */\n    ViewRef.prototype.attachToAppRef = /**\n     * @param {?} appRef\n     * @return {?}\n     */\n    function (appRef) { this._appRef = appRef; };\n    /**\n     * @return {?}\n     */\n    ViewRef.prototype._lookUpContext = /**\n     * @return {?}\n     */\n    function () {\n        return this._context = /** @type {?} */ (((this._lView[PARENT]))[this._componentIndex]);\n    };\n    return ViewRef;\n}());\n/**\n * @template T\n */\nexport { ViewRef };\nif (false) {\n    /** @type {?} */\n    ViewRef.prototype._appRef;\n    /** @type {?} */\n    ViewRef.prototype._viewContainerRef;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ViewRef.prototype._tViewNode;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ViewRef.prototype._lView;\n    /** @type {?} */\n    ViewRef.prototype._context;\n    /** @type {?} */\n    ViewRef.prototype._componentIndex;\n}\n/**\n * \\@internal\n * @template T\n */\nvar /**\n * \\@internal\n * @template T\n */\nRootViewRef = /** @class */ (function (_super) {\n    tslib_1.__extends(RootViewRef, _super);\n    function RootViewRef(_view) {\n        var _this = _super.call(this, _view, null, -1) || this;\n        _this._view = _view;\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    RootViewRef.prototype.detectChanges = /**\n     * @return {?}\n     */\n    function () { detectChangesInRootView(this._view); };\n    /**\n     * @return {?}\n     */\n    RootViewRef.prototype.checkNoChanges = /**\n     * @return {?}\n     */\n    function () { checkNoChangesInRootView(this._view); };\n    Object.defineProperty(RootViewRef.prototype, \"context\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return /** @type {?} */ ((null)); },\n        enumerable: true,\n        configurable: true\n    });\n    return RootViewRef;\n}(ViewRef));\n/**\n * \\@internal\n * @template T\n */\nexport { RootViewRef };\nif (false) {\n    /** @type {?} */\n    RootViewRef.prototype._view;\n}\n/**\n * @param {?} lView\n * @param {?} parentTNode\n * @param {?} result\n * @return {?}\n */\nfunction collectNativeNodes(lView, parentTNode, result) {\n    /** @type {?} */\n    var tNodeChild = parentTNode.child;\n    while (tNodeChild) {\n        result.push(getNativeByTNode(tNodeChild, lView));\n        if (tNodeChild.type === 4 /* ElementContainer */) {\n            collectNativeNodes(lView, tNodeChild, result);\n        }\n        tNodeChild = tNodeChild.next;\n    }\n    return result;\n}\n//# sourceMappingURL=view_ref.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { NullInjector } from '../di/injector';\nimport { InjectFlags } from '../di/injector_compatibility';\nimport { NgModuleRef as viewEngine_NgModuleRef } from '../linker/ng_module_factory';\nimport { assertDefined, assertGreaterThan, assertLessThan } from './assert';\nimport { getOrCreateInjectable, getParentInjectorLocation } from './di';\nimport { addToViewTree, createEmbeddedViewAndNode, createLContainer, renderEmbeddedTemplate } from './instructions';\nimport { ACTIVE_INDEX, NATIVE, VIEWS } from './interfaces/container';\nimport { isProceduralRenderer } from './interfaces/renderer';\nimport { CONTEXT, HOST_NODE, QUERIES, RENDERER } from './interfaces/view';\nimport { assertNodeOfPossibleTypes } from './node_assert';\nimport { addRemoveViewFromContainer, appendChild, detachView, findComponentView, getBeforeNodeForView, insertView, nativeInsertBefore, nativeNextSibling, nativeParentNode, removeView } from './node_manipulation';\nimport { getLView, getPreviousOrParentTNode } from './state';\nimport { getComponentViewByIndex, getNativeByTNode, getParentInjectorTNode, getParentInjectorView, hasParentInjector, isComponent, isLContainer, isRootView } from './util';\nimport { ViewRef } from './view_ref';\n/**\n * Creates an ElementRef from the most recent node.\n *\n * @param {?} ElementRefToken\n * @return {?} The ElementRef instance to use\n */\nexport function injectElementRef(ElementRefToken) {\n    return createElementRef(ElementRefToken, getPreviousOrParentTNode(), getLView());\n}\n/** @type {?} */\nvar R3ElementRef;\n/**\n * Creates an ElementRef given a node.\n *\n * @param {?} ElementRefToken The ElementRef type\n * @param {?} tNode The node for which you'd like an ElementRef\n * @param {?} view The view to which the node belongs\n * @return {?} The ElementRef instance to use\n */\nexport function createElementRef(ElementRefToken, tNode, view) {\n    if (!R3ElementRef) {\n        // TODO: Fix class name, should be ElementRef, but there appears to be a rollup bug\n        R3ElementRef = /** @class */ (function (_super) {\n            tslib_1.__extends(ElementRef_, _super);\n            function ElementRef_() {\n                return _super !== null && _super.apply(this, arguments) || this;\n            }\n            return ElementRef_;\n        }(ElementRefToken));\n    }\n    return new R3ElementRef(getNativeByTNode(tNode, view));\n}\n/** @type {?} */\nvar R3TemplateRef;\n/**\n * Creates a TemplateRef given a node.\n *\n * @template T\n * @param {?} TemplateRefToken\n * @param {?} ElementRefToken\n * @return {?} The TemplateRef instance to use\n */\nexport function injectTemplateRef(TemplateRefToken, ElementRefToken) {\n    return createTemplateRef(TemplateRefToken, ElementRefToken, getPreviousOrParentTNode(), getLView());\n}\n/**\n * Creates a TemplateRef and stores it on the injector.\n *\n * @template T\n * @param {?} TemplateRefToken The TemplateRef type\n * @param {?} ElementRefToken The ElementRef type\n * @param {?} hostTNode The node that is requesting a TemplateRef\n * @param {?} hostView The view to which the node belongs\n * @return {?} The TemplateRef instance to use\n */\nexport function createTemplateRef(TemplateRefToken, ElementRefToken, hostTNode, hostView) {\n    if (!R3TemplateRef) {\n        // TODO: Fix class name, should be TemplateRef, but there appears to be a rollup bug\n        R3TemplateRef = /** @class */ (function (_super) {\n            tslib_1.__extends(TemplateRef_, _super);\n            function TemplateRef_(_declarationParentView, elementRef, _tView, _renderer, _queries, _injectorIndex) {\n                var _this = _super.call(this) || this;\n                _this._declarationParentView = _declarationParentView;\n                _this.elementRef = elementRef;\n                _this._tView = _tView;\n                _this._renderer = _renderer;\n                _this._queries = _queries;\n                _this._injectorIndex = _injectorIndex;\n                return _this;\n            }\n            /**\n             * @param {?} context\n             * @param {?=} container\n             * @param {?=} hostTNode\n             * @param {?=} hostView\n             * @param {?=} index\n             * @return {?}\n             */\n            TemplateRef_.prototype.createEmbeddedView = /**\n             * @param {?} context\n             * @param {?=} container\n             * @param {?=} hostTNode\n             * @param {?=} hostView\n             * @param {?=} index\n             * @return {?}\n             */\n            function (context, container, hostTNode, hostView, index) {\n                /** @type {?} */\n                var lView = createEmbeddedViewAndNode(this._tView, context, this._declarationParentView, this._renderer, this._queries, this._injectorIndex);\n                if (container) {\n                    insertView(lView, container, /** @type {?} */ ((hostView)), /** @type {?} */ ((index)), /** @type {?} */ ((hostTNode)).index);\n                }\n                renderEmbeddedTemplate(lView, this._tView, context, 1 /* Create */);\n                /** @type {?} */\n                var viewRef = new ViewRef(lView, context, -1);\n                viewRef._tViewNode = /** @type {?} */ (lView[HOST_NODE]);\n                return viewRef;\n            };\n            return TemplateRef_;\n        }(TemplateRefToken));\n    }\n    if (hostTNode.type === 0 /* Container */) {\n        /** @type {?} */\n        var hostContainer = hostView[hostTNode.index];\n        ngDevMode && assertDefined(hostTNode.tViews, 'TView must be allocated');\n        return new R3TemplateRef(hostView, createElementRef(ElementRefToken, hostTNode, hostView), /** @type {?} */ (hostTNode.tViews), getLView()[RENDERER], hostContainer[QUERIES], hostTNode.injectorIndex);\n    }\n    else {\n        return null;\n    }\n}\n/** @type {?} */\nvar R3ViewContainerRef;\n/**\n * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef\n * already exists, retrieves the existing ViewContainerRef.\n *\n * @param {?} ViewContainerRefToken\n * @param {?} ElementRefToken\n * @return {?} The ViewContainerRef instance to use\n */\nexport function injectViewContainerRef(ViewContainerRefToken, ElementRefToken) {\n    /** @type {?} */\n    var previousTNode = /** @type {?} */ (getPreviousOrParentTNode());\n    return createContainerRef(ViewContainerRefToken, ElementRefToken, previousTNode, getLView());\n}\nvar NodeInjector = /** @class */ (function () {\n    function NodeInjector(_tNode, _hostView) {\n        this._tNode = _tNode;\n        this._hostView = _hostView;\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    NodeInjector.prototype.get = /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    function (token, notFoundValue) {\n        return getOrCreateInjectable(this._tNode, this._hostView, token, InjectFlags.Default, notFoundValue);\n    };\n    return NodeInjector;\n}());\nexport { NodeInjector };\nif (false) {\n    /** @type {?} */\n    NodeInjector.prototype._tNode;\n    /** @type {?} */\n    NodeInjector.prototype._hostView;\n}\n/**\n * Creates a ViewContainerRef and stores it on the injector.\n *\n * @param {?} ViewContainerRefToken The ViewContainerRef type\n * @param {?} ElementRefToken The ElementRef type\n * @param {?} hostTNode The node that is requesting a ViewContainerRef\n * @param {?} hostView The view to which the node belongs\n * @return {?} The ViewContainerRef instance to use\n */\nexport function createContainerRef(ViewContainerRefToken, ElementRefToken, hostTNode, hostView) {\n    if (!R3ViewContainerRef) {\n        // TODO: Fix class name, should be ViewContainerRef, but there appears to be a rollup bug\n        R3ViewContainerRef = /** @class */ (function (_super) {\n            tslib_1.__extends(ViewContainerRef_, _super);\n            function ViewContainerRef_(_lContainer, _hostTNode, _hostView) {\n                var _this = _super.call(this) || this;\n                _this._lContainer = _lContainer;\n                _this._hostTNode = _hostTNode;\n                _this._hostView = _hostView;\n                _this._viewRefs = [];\n                return _this;\n            }\n            Object.defineProperty(ViewContainerRef_.prototype, \"element\", {\n                get: /**\n                 * @return {?}\n                 */\n                function () {\n                    return createElementRef(ElementRefToken, this._hostTNode, this._hostView);\n                },\n                enumerable: true,\n                configurable: true\n            });\n            Object.defineProperty(ViewContainerRef_.prototype, \"injector\", {\n                get: /**\n                 * @return {?}\n                 */\n                function () { return new NodeInjector(this._hostTNode, this._hostView); },\n                enumerable: true,\n                configurable: true\n            });\n            Object.defineProperty(ViewContainerRef_.prototype, \"parentInjector\", {\n                /** @deprecated No replacement */\n                get: /**\n                 * @deprecated No replacement\n                 * @return {?}\n                 */\n                function () {\n                    /** @type {?} */\n                    var parentLocation = getParentInjectorLocation(this._hostTNode, this._hostView);\n                    /** @type {?} */\n                    var parentView = getParentInjectorView(parentLocation, this._hostView);\n                    /** @type {?} */\n                    var parentTNode = getParentInjectorTNode(parentLocation, this._hostView, this._hostTNode);\n                    return !hasParentInjector(parentLocation) || parentTNode == null ?\n                        new NullInjector() :\n                        new NodeInjector(parentTNode, parentView);\n                },\n                enumerable: true,\n                configurable: true\n            });\n            /**\n             * @return {?}\n             */\n            ViewContainerRef_.prototype.clear = /**\n             * @return {?}\n             */\n            function () {\n                while (this._lContainer[VIEWS].length) {\n                    this.remove(0);\n                }\n            };\n            /**\n             * @param {?} index\n             * @return {?}\n             */\n            ViewContainerRef_.prototype.get = /**\n             * @param {?} index\n             * @return {?}\n             */\n            function (index) { return this._viewRefs[index] || null; };\n            Object.defineProperty(ViewContainerRef_.prototype, \"length\", {\n                get: /**\n                 * @return {?}\n                 */\n                function () { return this._lContainer[VIEWS].length; },\n                enumerable: true,\n                configurable: true\n            });\n            /**\n             * @template C\n             * @param {?} templateRef\n             * @param {?=} context\n             * @param {?=} index\n             * @return {?}\n             */\n            ViewContainerRef_.prototype.createEmbeddedView = /**\n             * @template C\n             * @param {?} templateRef\n             * @param {?=} context\n             * @param {?=} index\n             * @return {?}\n             */\n            function (templateRef, context, index) {\n                /** @type {?} */\n                var adjustedIdx = this._adjustIndex(index);\n                /** @type {?} */\n                var viewRef = (/** @type {?} */ (templateRef))\n                    .createEmbeddedView(context || /** @type {?} */ ({}), this._lContainer, this._hostTNode, this._hostView, adjustedIdx);\n                (/** @type {?} */ (viewRef)).attachToViewContainerRef(this);\n                this._viewRefs.splice(adjustedIdx, 0, viewRef);\n                return viewRef;\n            };\n            /**\n             * @template C\n             * @param {?} componentFactory\n             * @param {?=} index\n             * @param {?=} injector\n             * @param {?=} projectableNodes\n             * @param {?=} ngModuleRef\n             * @return {?}\n             */\n            ViewContainerRef_.prototype.createComponent = /**\n             * @template C\n             * @param {?} componentFactory\n             * @param {?=} index\n             * @param {?=} injector\n             * @param {?=} projectableNodes\n             * @param {?=} ngModuleRef\n             * @return {?}\n             */\n            function (componentFactory, index, injector, projectableNodes, ngModuleRef) {\n                /** @type {?} */\n                var contextInjector = injector || this.parentInjector;\n                if (!ngModuleRef && contextInjector) {\n                    ngModuleRef = contextInjector.get(viewEngine_NgModuleRef, null);\n                }\n                /** @type {?} */\n                var componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);\n                this.insert(componentRef.hostView, index);\n                return componentRef;\n            };\n            /**\n             * @param {?} viewRef\n             * @param {?=} index\n             * @return {?}\n             */\n            ViewContainerRef_.prototype.insert = /**\n             * @param {?} viewRef\n             * @param {?=} index\n             * @return {?}\n             */\n            function (viewRef, index) {\n                if (viewRef.destroyed) {\n                    throw new Error('Cannot insert a destroyed View in a ViewContainer!');\n                }\n                /** @type {?} */\n                var lView = /** @type {?} */ (((/** @type {?} */ (viewRef))._lView));\n                /** @type {?} */\n                var adjustedIdx = this._adjustIndex(index);\n                insertView(lView, this._lContainer, this._hostView, adjustedIdx, this._hostTNode.index);\n                /** @type {?} */\n                var beforeNode = getBeforeNodeForView(adjustedIdx, this._lContainer[VIEWS], this._lContainer[NATIVE]);\n                addRemoveViewFromContainer(lView, true, beforeNode);\n                (/** @type {?} */ (viewRef)).attachToViewContainerRef(this);\n                this._viewRefs.splice(adjustedIdx, 0, viewRef);\n                return viewRef;\n            };\n            /**\n             * @param {?} viewRef\n             * @param {?} newIndex\n             * @return {?}\n             */\n            ViewContainerRef_.prototype.move = /**\n             * @param {?} viewRef\n             * @param {?} newIndex\n             * @return {?}\n             */\n            function (viewRef, newIndex) {\n                if (viewRef.destroyed) {\n                    throw new Error('Cannot move a destroyed View in a ViewContainer!');\n                }\n                /** @type {?} */\n                var index = this.indexOf(viewRef);\n                this.detach(index);\n                this.insert(viewRef, this._adjustIndex(newIndex));\n                return viewRef;\n            };\n            /**\n             * @param {?} viewRef\n             * @return {?}\n             */\n            ViewContainerRef_.prototype.indexOf = /**\n             * @param {?} viewRef\n             * @return {?}\n             */\n            function (viewRef) { return this._viewRefs.indexOf(viewRef); };\n            /**\n             * @param {?=} index\n             * @return {?}\n             */\n            ViewContainerRef_.prototype.remove = /**\n             * @param {?=} index\n             * @return {?}\n             */\n            function (index) {\n                /** @type {?} */\n                var adjustedIdx = this._adjustIndex(index, -1);\n                removeView(this._lContainer, this._hostTNode, adjustedIdx);\n                this._viewRefs.splice(adjustedIdx, 1);\n            };\n            /**\n             * @param {?=} index\n             * @return {?}\n             */\n            ViewContainerRef_.prototype.detach = /**\n             * @param {?=} index\n             * @return {?}\n             */\n            function (index) {\n                /** @type {?} */\n                var adjustedIdx = this._adjustIndex(index, -1);\n                detachView(this._lContainer, adjustedIdx, !!this._hostTNode.detached);\n                return this._viewRefs.splice(adjustedIdx, 1)[0] || null;\n            };\n            /**\n             * @param {?=} index\n             * @param {?=} shift\n             * @return {?}\n             */\n            ViewContainerRef_.prototype._adjustIndex = /**\n             * @param {?=} index\n             * @param {?=} shift\n             * @return {?}\n             */\n            function (index, shift) {\n                if (shift === void 0) { shift = 0; }\n                if (index == null) {\n                    return this._lContainer[VIEWS].length + shift;\n                }\n                if (ngDevMode) {\n                    assertGreaterThan(index, -1, 'index must be positive');\n                    // +1 because it's legal to insert at the end.\n                    assertLessThan(index, this._lContainer[VIEWS].length + 1 + shift, 'index');\n                }\n                return index;\n            };\n            return ViewContainerRef_;\n        }(ViewContainerRefToken));\n    }\n    ngDevMode && assertNodeOfPossibleTypes(hostTNode, 0 /* Container */, 3 /* Element */, 4 /* ElementContainer */);\n    /** @type {?} */\n    var lContainer;\n    /** @type {?} */\n    var slotValue = hostView[hostTNode.index];\n    if (isLContainer(slotValue)) {\n        // If the host is a container, we don't need to create a new LContainer\n        lContainer = slotValue;\n        lContainer[ACTIVE_INDEX] = -1;\n    }\n    else {\n        /** @type {?} */\n        var commentNode = hostView[RENDERER].createComment(ngDevMode ? 'container' : '');\n        ngDevMode && ngDevMode.rendererCreateComment++;\n        // A container can be created on the root (topmost / bootstrapped) component and in this case we\n        // can't use LTree to insert container's marker node (both parent of a comment node and the\n        // commend node itself is located outside of elements hold by LTree). In this specific case we\n        // use low-level DOM manipulation to insert container's marker (comment) node.\n        if (isRootView(hostView)) {\n            /** @type {?} */\n            var renderer = hostView[RENDERER];\n            /** @type {?} */\n            var hostNative = /** @type {?} */ ((getNativeByTNode(hostTNode, hostView)));\n            /** @type {?} */\n            var parentOfHostNative = nativeParentNode(renderer, hostNative);\n            nativeInsertBefore(renderer, /** @type {?} */ ((parentOfHostNative)), commentNode, nativeNextSibling(renderer, hostNative));\n        }\n        else {\n            appendChild(commentNode, hostTNode, hostView);\n        }\n        hostView[hostTNode.index] = lContainer =\n            createLContainer(slotValue, hostTNode, hostView, commentNode, true);\n        addToViewTree(hostView, /** @type {?} */ (hostTNode.index), lContainer);\n    }\n    return new R3ViewContainerRef(lContainer, hostTNode, hostView);\n}\n/**\n * Returns a ChangeDetectorRef (a.k.a. a ViewRef)\n * @return {?}\n */\nexport function injectChangeDetectorRef() {\n    return createViewRef(getPreviousOrParentTNode(), getLView(), null);\n}\n/**\n * Creates a ViewRef and stores it on the injector as ChangeDetectorRef (public alias).\n *\n * @param {?} hostTNode The node that is requesting a ChangeDetectorRef\n * @param {?} hostView The view to which the node belongs\n * @param {?} context The context for this change detector ref\n * @return {?} The ChangeDetectorRef to use\n */\nexport function createViewRef(hostTNode, hostView, context) {\n    if (isComponent(hostTNode)) {\n        /** @type {?} */\n        var componentIndex = hostTNode.flags >> 16 /* DirectiveStartingIndexShift */;\n        /** @type {?} */\n        var componentView = getComponentViewByIndex(hostTNode.index, hostView);\n        return new ViewRef(componentView, context, componentIndex);\n    }\n    else if (hostTNode.type === 3 /* Element */) {\n        /** @type {?} */\n        var hostComponentView = findComponentView(hostView);\n        return new ViewRef(hostComponentView, hostComponentView[CONTEXT], -1);\n    }\n    return /** @type {?} */ ((null));\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction getOrCreateRenderer2(view) {\n    /** @type {?} */\n    var renderer = view[RENDERER];\n    if (isProceduralRenderer(renderer)) {\n        return /** @type {?} */ (renderer);\n    }\n    else {\n        throw new Error('Cannot inject Renderer2 when the application uses Renderer3!');\n    }\n}\n/**\n * Returns a Renderer2 (or throws when application was bootstrapped with Renderer3)\n * @return {?}\n */\nexport function injectRenderer2() {\n    return getOrCreateRenderer2(getLView());\n}\n//# sourceMappingURL=view_engine_compatibility.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nimport { assertDefined } from './assert';\nimport { discoverLocalRefs, getComponentAtNodeIndex, getContext, getDirectivesAtNodeIndex } from './context_discovery';\nimport { CONTEXT, FLAGS, HOST, PARENT, TVIEW } from './interfaces/view';\nimport { readPatchedLView, stringify } from './util';\nimport { NodeInjector } from './view_engine_compatibility';\n/**\n * Returns the component instance associated with a given DOM host element.\n * Elements which don't represent components return `null`.\n *\n * \\@publicApi\n * @template T\n * @param {?} element Host DOM element from which the component should be retrieved for.\n *\n * ```\n * <my-app>\n *   #VIEW\n *     <div>\n *       <child-comp></child-comp>\n *     </div>\n * </mp-app>\n *\n * expect(getComponent(<child-comp>) instanceof ChildComponent).toBeTruthy();\n * expect(getComponent(<my-app>) instanceof MyApp).toBeTruthy();\n * ```\n *\n * @return {?}\n */\nexport function getComponent(element) {\n    if (!(element instanceof Node))\n        throw new Error('Expecting instance of DOM Node');\n    /** @type {?} */\n    var context = /** @type {?} */ ((loadContext(element)));\n    if (context.component === undefined) {\n        context.component = getComponentAtNodeIndex(context.nodeIndex, context.lView);\n    }\n    return /** @type {?} */ (context.component);\n}\n/**\n * Returns the component instance associated with view which owns the DOM element (`null`\n * otherwise).\n *\n * \\@publicApi\n * @template T\n * @param {?} element DOM element which is owned by an existing component's view.\n *\n * ```\n * <my-app>\n *   #VIEW\n *     <div>\n *       <child-comp></child-comp>\n *     </div>\n * </mp-app>\n *\n * expect(getViewComponent(<child-comp>) instanceof MyApp).toBeTruthy();\n * expect(getViewComponent(<my-app>)).toEqual(null);\n * ```\n *\n * @return {?}\n */\nexport function getViewComponent(element) {\n    /** @type {?} */\n    var context = /** @type {?} */ ((loadContext(element)));\n    /** @type {?} */\n    var lView = context.lView;\n    while (lView[PARENT] && lView[HOST] === null) {\n        // As long as lView[HOST] is null we know we are part of sub-template such as `*ngIf`\n        lView = /** @type {?} */ ((lView[PARENT]));\n    }\n    return lView[FLAGS] & 64 /* IsRoot */ ? null : /** @type {?} */ (lView[CONTEXT]);\n}\n/**\n * Returns the `RootContext` instance that is associated with\n * the application where the target is situated.\n *\n * @param {?} target\n * @return {?}\n */\nexport function getRootContext(target) {\n    /** @type {?} */\n    var lView = Array.isArray(target) ? target : /** @type {?} */ ((loadContext(target))).lView;\n    /** @type {?} */\n    var rootLView = getRootView(lView);\n    return /** @type {?} */ (rootLView[CONTEXT]);\n}\n/**\n * Retrieve all root components.\n *\n * Root components are those which have been bootstrapped by Angular.\n *\n * \\@publicApi\n * @param {?} target A DOM element, component or directive instance.\n *\n * @return {?}\n */\nexport function getRootComponents(target) {\n    return getRootContext(target).components.slice();\n}\n/**\n * Retrieves an `Injector` associated with the element, component or directive.\n *\n * \\@publicApi\n * @param {?} target A DOM element, component or directive instance.\n *\n * @return {?}\n */\nexport function getInjector(target) {\n    /** @type {?} */\n    var context = loadContext(target);\n    /** @type {?} */\n    var tNode = /** @type {?} */ (context.lView[TVIEW].data[context.nodeIndex]);\n    return new NodeInjector(tNode, context.lView);\n}\n/**\n * Retrieves directives associated with a given DOM host element.\n *\n * \\@publicApi\n * @param {?} target A DOM element, component or directive instance.\n *\n * @return {?}\n */\nexport function getDirectives(target) {\n    /** @type {?} */\n    var context = /** @type {?} */ ((loadContext(target)));\n    if (context.directives === undefined) {\n        context.directives = getDirectivesAtNodeIndex(context.nodeIndex, context.lView, false);\n    }\n    return context.directives || [];\n}\n/**\n * @param {?} target\n * @param {?=} throwOnNotFound\n * @return {?}\n */\nexport function loadContext(target, throwOnNotFound) {\n    if (throwOnNotFound === void 0) { throwOnNotFound = true; }\n    /** @type {?} */\n    var context = getContext(target);\n    if (!context && throwOnNotFound) {\n        throw new Error(ngDevMode ? \"Unable to find context associated with \" + stringify(target) :\n            'Invalid ng target');\n    }\n    return context;\n}\n/**\n * Retrieve the root view from any component by walking the parent `LView` until\n * reaching the root `LView`.\n *\n * @param {?} componentOrView any component or view\n *\n * @return {?}\n */\nexport function getRootView(componentOrView) {\n    /** @type {?} */\n    var lView;\n    if (Array.isArray(componentOrView)) {\n        ngDevMode && assertDefined(componentOrView, 'lView');\n        lView = /** @type {?} */ (componentOrView);\n    }\n    else {\n        ngDevMode && assertDefined(componentOrView, 'component');\n        lView = /** @type {?} */ ((readPatchedLView(componentOrView)));\n    }\n    while (lView && !(lView[FLAGS] & 64 /* IsRoot */)) {\n        lView = /** @type {?} */ ((lView[PARENT]));\n    }\n    return lView;\n}\n/**\n * Retrieve map of local references.\n *\n * The references are retrieved as a map of local reference name to element or directive instance.\n *\n * \\@publicApi\n * @param {?} target A DOM element, component or directive instance.\n *\n * @return {?}\n */\nexport function getLocalRefs(target) {\n    /** @type {?} */\n    var context = /** @type {?} */ ((loadContext(target)));\n    if (context.localRefs === undefined) {\n        context.localRefs = discoverLocalRefs(context.lView, context.nodeIndex);\n    }\n    return context.localRefs || {};\n}\n/**\n * Retrieve the host element of the component.\n *\n * Use this function to retrieve the host element of the component. The host\n * element is the element which the component is associated with.\n *\n * \\@publicApi\n * @template T\n * @param {?} directive Component or Directive for which the host element should be retrieved.\n *\n * @return {?}\n */\nexport function getHostElement(directive) {\n    return /** @type {?} */ ((((getContext(directive))).native));\n}\n/**\n * Retrieves the rendered text for a given component.\n *\n * This function retrieves the host element of a component and\n * and then returns the `textContent` for that element. This implies\n * that the text returned will include re-projected content of\n * the component as well.\n *\n * @param {?} component The component to return the content text for.\n * @return {?}\n */\nexport function getRenderedText(component) {\n    /** @type {?} */\n    var hostElement = getHostElement(component);\n    return hostElement.textContent || '';\n}\n//# sourceMappingURL=discovery_utils.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nimport './ng_dev_mode';\nimport { getContext } from './context_discovery';\nimport { getRootContext } from './discovery_utils';\nimport { scheduleTick } from './instructions';\nimport { HEADER_OFFSET } from './interfaces/view';\nimport { addPlayerInternal, getOrCreatePlayerContext, getPlayerContext, getPlayersInternal, getStylingContext, throwInvalidRefError } from './styling/util';\n/**\n * Adds a player to an element, directive or component instance that will later be\n * animated once change detection has passed.\n *\n * When a player is added to a reference it will stay active until `player.destroy()`\n * is called. Once called then the player will be removed from the active players\n * present on the associated ref instance.\n *\n * To get a list of all the active players on an element see [getPlayers].\n *\n * @param {?} ref The element, directive or component that the player will be placed on.\n * @param {?} player The player that will be triggered to play once change detection has run.\n * @return {?}\n */\nexport function addPlayer(ref, player) {\n    /** @type {?} */\n    var context = getContext(ref);\n    if (!context) {\n        ngDevMode && throwInvalidRefError();\n        return;\n    }\n    /** @type {?} */\n    var element = /** @type {?} */ (context.native);\n    /** @type {?} */\n    var lView = context.lView;\n    /** @type {?} */\n    var playerContext = /** @type {?} */ ((getOrCreatePlayerContext(element, context)));\n    /** @type {?} */\n    var rootContext = getRootContext(lView);\n    addPlayerInternal(playerContext, rootContext, element, player, 0, ref);\n    scheduleTick(rootContext, 2 /* FlushPlayers */);\n}\n/**\n * Returns a list of all the active players present on the provided ref instance (which can\n * be an instance of a directive, component or element).\n *\n * This function will only return players that have been added to the ref instance using\n * `addPlayer` or any players that are active through any template styling bindings\n * (`[style]`, `[style.prop]`, `[class]` and `[class.name]`).\n *\n * \\@publicApi\n * @param {?} ref\n * @return {?}\n */\nexport function getPlayers(ref) {\n    /** @type {?} */\n    var context = getContext(ref);\n    if (!context) {\n        ngDevMode && throwInvalidRefError();\n        return [];\n    }\n    /** @type {?} */\n    var stylingContext = getStylingContext(context.nodeIndex - HEADER_OFFSET, context.lView);\n    /** @type {?} */\n    var playerContext = stylingContext ? getPlayerContext(stylingContext) : null;\n    return playerContext ? getPlayersInternal(playerContext) : [];\n}\n//# sourceMappingURL=players.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nimport { global } from '../util';\nimport { assertDefined } from './assert';\nimport { getComponent, getDirectives, getHostElement, getInjector, getPlayers, getRootComponents, getViewComponent, markDirty } from './global_utils_api';\n/** *\n * This value reflects the property on the window where the dev\n * tools are patched (window.ng).\n *\n  @type {?} */\nexport var GLOBAL_PUBLISH_EXPANDO_KEY = 'ng';\n/** @type {?} */\nvar _published = false;\n/**\n * @return {?}\n */\nexport function publishDefaultGlobalUtils() {\n    if (!_published) {\n        _published = true;\n        publishGlobalUtil('getComponent', getComponent);\n        publishGlobalUtil('getViewComponent', getViewComponent);\n        publishGlobalUtil('getHostElement', getHostElement);\n        publishGlobalUtil('getInjector', getInjector);\n        publishGlobalUtil('getRootComponents', getRootComponents);\n        publishGlobalUtil('getDirectives', getDirectives);\n        publishGlobalUtil('getPlayers', getPlayers);\n        publishGlobalUtil('markDirty', markDirty);\n    }\n}\n/**\n * Publishes the given function to `window.ngDevMode` so that it can be\n * used from the browser console when an application is not in production.\n * @param {?} name\n * @param {?} fn\n * @return {?}\n */\nexport function publishGlobalUtil(name, fn) {\n    /** @type {?} */\n    var w = /** @type {?} */ ((global));\n    ngDevMode && assertDefined(fn, 'function not defined');\n    if (w) {\n        /** @type {?} */\n        var container = w[GLOBAL_PUBLISH_EXPANDO_KEY];\n        if (!container) {\n            container = w[GLOBAL_PUBLISH_EXPANDO_KEY] = {};\n        }\n        container[name] = fn;\n    }\n}\n//# sourceMappingURL=global_utils.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { assertComponentType, assertDefined } from './assert';\nimport { getComponentDef } from './definition';\nimport { diPublicInInjector, getOrCreateNodeInjectorForNode } from './di';\nimport { publishDefaultGlobalUtils } from './global_utils';\nimport { queueInitHooks, queueLifecycleHooks } from './hooks';\nimport { CLEAN_PROMISE, createLView, createNodeAtIndex, createTView, getOrCreateTView, initNodeFlags, instantiateRootComponent, locateHostElement, queueComponentIndexForCheck, refreshDescendantViews } from './instructions';\nimport { domRendererFactory3 } from './interfaces/renderer';\nimport { CONTEXT, HEADER_OFFSET, HOST, HOST_NODE, TVIEW } from './interfaces/view';\nimport { enterView, getPreviousOrParentTNode, leaveView, resetComponentState, setCurrentDirectiveDef } from './state';\nimport { defaultScheduler, getRootView, readPatchedLView, stringify } from './util';\n/**\n * Options that control how the component should be bootstrapped.\n * @record\n */\nexport function CreateComponentOptions() { }\n/**\n * Which renderer factory to use.\n * @type {?|undefined}\n */\nCreateComponentOptions.prototype.rendererFactory;\n/**\n * A custom sanitizer instance\n * @type {?|undefined}\n */\nCreateComponentOptions.prototype.sanitizer;\n/**\n * A custom animation player handler\n * @type {?|undefined}\n */\nCreateComponentOptions.prototype.playerHandler;\n/**\n * Host element on which the component will be bootstrapped. If not specified,\n * the component definition's `tag` is used to query the existing DOM for the\n * element to bootstrap.\n * @type {?|undefined}\n */\nCreateComponentOptions.prototype.host;\n/**\n * Module injector for the component. If unspecified, the injector will be NULL_INJECTOR.\n * @type {?|undefined}\n */\nCreateComponentOptions.prototype.injector;\n/**\n * List of features to be applied to the created component. Features are simply\n * functions that decorate a component with a certain behavior.\n *\n * Typically, the features in this list are features that cannot be added to the\n * other features list in the component definition because they rely on other factors.\n *\n * Example: `RootLifecycleHooks` is a function that adds lifecycle hook capabilities\n * to root components in a tree-shakable way. It cannot be added to the component\n * features list because there's no way of knowing when the component will be used as\n * a root component.\n * @type {?|undefined}\n */\nCreateComponentOptions.prototype.hostFeatures;\n/**\n * A function which is used to schedule change detection work in the future.\n *\n * When marking components as dirty, it is necessary to schedule the work of\n * change detection in the future. This is done to coalesce multiple\n * {\\@link markDirty} calls into a single changed detection processing.\n *\n * The default value of the scheduler is the `requestAnimationFrame` function.\n *\n * It is also useful to override this function for testing purposes.\n * @type {?|undefined}\n */\nCreateComponentOptions.prototype.scheduler;\n/** @typedef {?} */\nvar HostFeature;\n/** @type {?} */\nexport var NULL_INJECTOR = {\n    get: function (token, notFoundValue) {\n        throw new Error('NullInjector: Not found: ' + stringify(token));\n    }\n};\n/**\n * Bootstraps a Component into an existing host element and returns an instance\n * of the component.\n *\n * Use this function to bootstrap a component into the DOM tree. Each invocation\n * of this function will create a separate tree of components, injectors and\n * change detection cycles and lifetimes. To dynamically insert a new component\n * into an existing tree such that it shares the same injection, change detection\n * and object lifetime, use {\\@link ViewContainer#createComponent}.\n *\n * @template T\n * @param {?} componentType Component to bootstrap\n * @param {?=} opts\n * @return {?}\n */\nexport function renderComponent(componentType /* Type as workaround for: Microsoft/TypeScript/issues/4881 */, opts) {\n    if (opts === void 0) { opts = {}; }\n    ngDevMode && publishDefaultGlobalUtils();\n    ngDevMode && assertComponentType(componentType);\n    /** @type {?} */\n    var rendererFactory = opts.rendererFactory || domRendererFactory3;\n    /** @type {?} */\n    var sanitizer = opts.sanitizer || null;\n    /** @type {?} */\n    var componentDef = /** @type {?} */ ((getComponentDef(componentType)));\n    if (componentDef.type != componentType)\n        componentDef.type = componentType;\n    /** @type {?} */\n    var componentTag = /** @type {?} */ (((/** @type {?} */ ((componentDef.selectors))[0]))[0]);\n    /** @type {?} */\n    var hostRNode = locateHostElement(rendererFactory, opts.host || componentTag);\n    /** @type {?} */\n    var rootFlags = componentDef.onPush ? 4 /* Dirty */ | 64 /* IsRoot */ :\n        2 /* CheckAlways */ | 64 /* IsRoot */;\n    /** @type {?} */\n    var rootContext = createRootContext(opts.scheduler, opts.playerHandler);\n    /** @type {?} */\n    var renderer = rendererFactory.createRenderer(hostRNode, componentDef);\n    /** @type {?} */\n    var rootView = createLView(null, createTView(-1, null, 1, 0, null, null, null), rootContext, rootFlags, rendererFactory, renderer, undefined, opts.injector || null);\n    /** @type {?} */\n    var oldView = enterView(rootView, null);\n    /** @type {?} */\n    var component;\n    try {\n        if (rendererFactory.begin)\n            rendererFactory.begin();\n        /** @type {?} */\n        var componentView = createRootComponentView(hostRNode, componentDef, rootView, rendererFactory, renderer, sanitizer);\n        component = createRootComponent(componentView, componentDef, rootView, rootContext, opts.hostFeatures || null);\n        refreshDescendantViews(rootView, null);\n    }\n    finally {\n        leaveView(oldView);\n        if (rendererFactory.end)\n            rendererFactory.end();\n    }\n    return component;\n}\n/**\n * Creates the root component view and the root component node.\n *\n * @param {?} rNode Render host element.\n * @param {?} def ComponentDef\n * @param {?} rootView The parent view where the host node is stored\n * @param {?} rendererFactory\n * @param {?} renderer The current renderer\n * @param {?=} sanitizer The sanitizer, if provided\n *\n * @return {?} Component view created\n */\nexport function createRootComponentView(rNode, def, rootView, rendererFactory, renderer, sanitizer) {\n    resetComponentState();\n    /** @type {?} */\n    var tView = rootView[TVIEW];\n    /** @type {?} */\n    var componentView = createLView(rootView, getOrCreateTView(def.template, def.consts, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery), null, def.onPush ? 4 /* Dirty */ : 2 /* CheckAlways */, rendererFactory, renderer, sanitizer);\n    /** @type {?} */\n    var tNode = createNodeAtIndex(0, 3 /* Element */, rNode, null, null);\n    if (tView.firstTemplatePass) {\n        diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, rootView), rootView, def.type);\n        tNode.flags = 4096 /* isComponent */;\n        initNodeFlags(tNode, rootView.length, 1);\n        queueComponentIndexForCheck(tNode);\n    }\n    // Store component view at node index, with node as the HOST\n    componentView[HOST] = rootView[HEADER_OFFSET];\n    componentView[HOST_NODE] = /** @type {?} */ (tNode);\n    return rootView[HEADER_OFFSET] = componentView;\n}\n/**\n * Creates a root component and sets it up with features and host bindings. Shared by\n * renderComponent() and ViewContainerRef.createComponent().\n * @template T\n * @param {?} componentView\n * @param {?} componentDef\n * @param {?} rootView\n * @param {?} rootContext\n * @param {?} hostFeatures\n * @return {?}\n */\nexport function createRootComponent(componentView, componentDef, rootView, rootContext, hostFeatures) {\n    /** @type {?} */\n    var tView = rootView[TVIEW];\n    /** @type {?} */\n    var component = instantiateRootComponent(tView, rootView, componentDef);\n    rootContext.components.push(component);\n    componentView[CONTEXT] = component;\n    hostFeatures && hostFeatures.forEach(function (feature) { return feature(component, componentDef); });\n    if (tView.firstTemplatePass && componentDef.hostBindings) {\n        /** @type {?} */\n        var rootTNode = getPreviousOrParentTNode();\n        setCurrentDirectiveDef(componentDef);\n        componentDef.hostBindings(1 /* Create */, component, rootTNode.index);\n        setCurrentDirectiveDef(null);\n    }\n    return component;\n}\n/**\n * @param {?=} scheduler\n * @param {?=} playerHandler\n * @return {?}\n */\nexport function createRootContext(scheduler, playerHandler) {\n    return {\n        components: [],\n        scheduler: scheduler || defaultScheduler,\n        clean: CLEAN_PROMISE,\n        playerHandler: playerHandler || null,\n        flags: 0 /* Empty */\n    };\n}\n/**\n * Used to enable lifecycle hooks on the root component.\n *\n * Include this feature when calling `renderComponent` if the root component\n * you are rendering has lifecycle hooks defined. Otherwise, the hooks won't\n * be called properly.\n *\n * Example:\n *\n * ```\n * renderComponent(AppComponent, {features: [RootLifecycleHooks]});\n * ```\n * @param {?} component\n * @param {?} def\n * @return {?}\n */\nexport function LifecycleHooksFeature(component, def) {\n    /** @type {?} */\n    var rootTView = /** @type {?} */ ((readPatchedLView(component)))[TVIEW];\n    /** @type {?} */\n    var dirIndex = rootTView.data.length - 1;\n    queueInitHooks(dirIndex, def.onInit, def.doCheck, rootTView);\n    queueLifecycleHooks(dirIndex << 16 /* DirectiveStartingIndexShift */ | 1, rootTView);\n}\n/**\n * Retrieve the root context for any component by walking the parent `LView` until\n * reaching the root `LView`.\n *\n * @param {?} component any component\n * @return {?}\n */\nfunction getRootContext(component) {\n    /** @type {?} */\n    var rootContext = /** @type {?} */ (getRootView(component)[CONTEXT]);\n    ngDevMode && assertDefined(rootContext, 'rootContext');\n    return rootContext;\n}\n/**\n * Wait on component until it is rendered.\n *\n * This function returns a `Promise` which is resolved when the component's\n * change detection is executed. This is determined by finding the scheduler\n * associated with the `component`'s render tree and waiting until the scheduler\n * flushes. If nothing is scheduled, the function returns a resolved promise.\n *\n * Example:\n * ```\n * await whenRendered(myComponent);\n * ```\n *\n * @param {?} component Component to wait upon\n * @return {?} Promise which resolves when the component is rendered.\n */\nexport function whenRendered(component) {\n    return getRootContext(component).clean;\n}\n//# sourceMappingURL=component.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { fillProperties } from '../../util/property';\nimport { EMPTY, EMPTY_ARRAY } from '../definition';\n/**\n * Determines if a definition is a {\\@link ComponentDef} or a {\\@link DirectiveDef}\n * @template T\n * @param {?} definition The definition to examine\n * @return {?}\n */\nfunction isComponentDef(definition) {\n    /** @type {?} */\n    var def = /** @type {?} */ (definition);\n    return typeof def.template === 'function';\n}\n/**\n * @param {?} type\n * @return {?}\n */\nfunction getSuperType(type) {\n    return Object.getPrototypeOf(type.prototype).constructor;\n}\n/**\n * Merges the definition from a super class to a sub class.\n * @param {?} definition The definition that is a SubClass of another directive of component\n * @return {?}\n */\nexport function InheritDefinitionFeature(definition) {\n    /** @type {?} */\n    var superType = getSuperType(definition.type);\n    var _loop_1 = function () {\n        /** @type {?} */\n        var superDef = undefined;\n        if (isComponentDef(definition)) {\n            // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n            superDef = superType.ngComponentDef || superType.ngDirectiveDef;\n        }\n        else {\n            if (superType.ngComponentDef) {\n                throw new Error('Directives cannot inherit Components');\n            }\n            // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.\n            superDef = superType.ngDirectiveDef;\n        }\n        /** @nocollapse @type {?} */\n        var baseDef = (/** @type {?} */ (superType)).ngBaseDef;\n        // Some fields in the definition may be empty, if there were no values to put in them that\n        // would've justified object creation. Unwrap them if necessary.\n        if (baseDef || superDef) {\n            /** @type {?} */\n            var writeableDef = /** @type {?} */ (definition);\n            writeableDef.inputs = maybeUnwrapEmpty(definition.inputs);\n            writeableDef.declaredInputs = maybeUnwrapEmpty(definition.declaredInputs);\n            writeableDef.outputs = maybeUnwrapEmpty(definition.outputs);\n        }\n        if (baseDef) {\n            // Merge inputs and outputs\n            fillProperties(definition.inputs, baseDef.inputs);\n            fillProperties(definition.declaredInputs, baseDef.declaredInputs);\n            fillProperties(definition.outputs, baseDef.outputs);\n        }\n        if (superDef) {\n            /** @type {?} */\n            var prevHostBindings_1 = definition.hostBindings;\n            /** @type {?} */\n            var superHostBindings_1 = superDef.hostBindings;\n            if (superHostBindings_1) {\n                if (prevHostBindings_1) {\n                    definition.hostBindings = function (rf, ctx, elementIndex) {\n                        superHostBindings_1(rf, ctx, elementIndex);\n                        prevHostBindings_1(rf, ctx, elementIndex);\n                    };\n                }\n                else {\n                    definition.hostBindings = superHostBindings_1;\n                }\n            }\n            // Merge View Queries\n            if (isComponentDef(definition) && isComponentDef(superDef)) {\n                /** @type {?} */\n                var prevViewQuery_1 = definition.viewQuery;\n                /** @type {?} */\n                var superViewQuery_1 = superDef.viewQuery;\n                if (superViewQuery_1) {\n                    if (prevViewQuery_1) {\n                        definition.viewQuery = function (rf, ctx) {\n                            superViewQuery_1(rf, ctx);\n                            prevViewQuery_1(rf, ctx);\n                        };\n                    }\n                    else {\n                        definition.viewQuery = superViewQuery_1;\n                    }\n                }\n            }\n            /** @type {?} */\n            var prevContentQueries_1 = definition.contentQueries;\n            /** @type {?} */\n            var superContentQueries_1 = superDef.contentQueries;\n            if (superContentQueries_1) {\n                if (prevContentQueries_1) {\n                    definition.contentQueries = function (dirIndex) {\n                        superContentQueries_1(dirIndex);\n                        prevContentQueries_1(dirIndex);\n                    };\n                }\n                else {\n                    definition.contentQueries = superContentQueries_1;\n                }\n            }\n            /** @type {?} */\n            var prevContentQueriesRefresh_1 = definition.contentQueriesRefresh;\n            /** @type {?} */\n            var superContentQueriesRefresh_1 = superDef.contentQueriesRefresh;\n            if (superContentQueriesRefresh_1) {\n                if (prevContentQueriesRefresh_1) {\n                    definition.contentQueriesRefresh = function (directiveIndex, queryIndex) {\n                        superContentQueriesRefresh_1(directiveIndex, queryIndex);\n                        prevContentQueriesRefresh_1(directiveIndex, queryIndex);\n                    };\n                }\n                else {\n                    definition.contentQueriesRefresh = superContentQueriesRefresh_1;\n                }\n            }\n            // Merge inputs and outputs\n            fillProperties(definition.inputs, superDef.inputs);\n            fillProperties(definition.declaredInputs, superDef.declaredInputs);\n            fillProperties(definition.outputs, superDef.outputs);\n            // Inherit hooks\n            // Assume super class inheritance feature has already run.\n            definition.afterContentChecked =\n                definition.afterContentChecked || superDef.afterContentChecked;\n            definition.afterContentInit = definition.afterContentInit || superDef.afterContentInit;\n            definition.afterViewChecked = definition.afterViewChecked || superDef.afterViewChecked;\n            definition.afterViewInit = definition.afterViewInit || superDef.afterViewInit;\n            definition.doCheck = definition.doCheck || superDef.doCheck;\n            definition.onDestroy = definition.onDestroy || superDef.onDestroy;\n            definition.onInit = definition.onInit || superDef.onInit;\n            /** @type {?} */\n            var features = superDef.features;\n            if (features) {\n                for (var _i = 0, features_1 = features; _i < features_1.length; _i++) {\n                    var feature = features_1[_i];\n                    if (feature && feature.ngInherit) {\n                        (/** @type {?} */ (feature))(definition);\n                    }\n                }\n            }\n            return \"break\";\n        }\n        else {\n            /** @type {?} */\n            var superPrototype = superType.prototype;\n            if (superPrototype) {\n                definition.afterContentChecked =\n                    definition.afterContentChecked || superPrototype.afterContentChecked;\n                definition.afterContentInit =\n                    definition.afterContentInit || superPrototype.afterContentInit;\n                definition.afterViewChecked =\n                    definition.afterViewChecked || superPrototype.afterViewChecked;\n                definition.afterViewInit = definition.afterViewInit || superPrototype.afterViewInit;\n                definition.doCheck = definition.doCheck || superPrototype.doCheck;\n                definition.onDestroy = definition.onDestroy || superPrototype.onDestroy;\n                definition.onInit = definition.onInit || superPrototype.onInit;\n            }\n        }\n        superType = Object.getPrototypeOf(superType);\n    };\n    while (superType) {\n        var state_1 = _loop_1();\n        if (state_1 === \"break\")\n            break;\n    }\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction maybeUnwrapEmpty(value) {\n    if (value === EMPTY) {\n        return {};\n    }\n    else if (value === EMPTY_ARRAY) {\n        return [];\n    }\n    else {\n        return value;\n    }\n}\n//# sourceMappingURL=inherit_definition_feature.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { SimpleChange } from '../../change_detection/change_detection_util';\n/** @type {?} */\nvar PRIVATE_PREFIX = '__ngOnChanges_';\n/** @typedef {?} */\nvar OnChangesExpando;\n/**\n * The NgOnChangesFeature decorates a component with support for the ngOnChanges\n * lifecycle hook, so it should be included in any component that implements\n * that hook.\n *\n * If the component or directive uses inheritance, the NgOnChangesFeature MUST\n * be included as a feature AFTER {\\@link InheritDefinitionFeature}, otherwise\n * inherited properties will not be propagated to the ngOnChanges lifecycle\n * hook.\n *\n * Example usage:\n *\n * ```\n * static ngComponentDef = defineComponent({\n *   ...\n *   inputs: {name: 'publicName'},\n *   features: [NgOnChangesFeature]\n * });\n * ```\n * @template T\n * @param {?} definition\n * @return {?}\n */\nexport function NgOnChangesFeature(definition) {\n    /** @type {?} */\n    var declaredToMinifiedInputs = definition.declaredInputs;\n    /** @type {?} */\n    var proto = definition.type.prototype;\n    var _loop_1 = function (declaredName) {\n        if (declaredToMinifiedInputs.hasOwnProperty(declaredName)) {\n            /** @type {?} */\n            var minifiedKey = declaredToMinifiedInputs[declaredName];\n            /** @type {?} */\n            var privateMinKey_1 = PRIVATE_PREFIX + minifiedKey;\n            /** @type {?} */\n            var originalProperty = undefined;\n            /** @type {?} */\n            var checkProto = proto;\n            while (!originalProperty && checkProto &&\n                Object.getPrototypeOf(checkProto) !== Object.getPrototypeOf(Object.prototype)) {\n                originalProperty = Object.getOwnPropertyDescriptor(checkProto, minifiedKey);\n                checkProto = Object.getPrototypeOf(checkProto);\n            }\n            /** @type {?} */\n            var getter = originalProperty && originalProperty.get;\n            /** @type {?} */\n            var setter_1 = originalProperty && originalProperty.set;\n            // create a getter and setter for property\n            Object.defineProperty(proto, minifiedKey, {\n                get: getter ||\n                    (setter_1 ? undefined : function () { return this[privateMinKey_1]; }),\n                set: /**\n                 * @template T\n                 * @this {?}\n                 * @param {?} value\n                 * @return {?}\n                 */\n                function (value) {\n                    /** @type {?} */\n                    var simpleChanges = this[PRIVATE_PREFIX];\n                    if (!simpleChanges) {\n                        simpleChanges = {};\n                        // Place where we will store SimpleChanges if there is a change\n                        Object.defineProperty(this, PRIVATE_PREFIX, { value: simpleChanges, writable: true });\n                    }\n                    /** @type {?} */\n                    var isFirstChange = !this.hasOwnProperty(privateMinKey_1);\n                    /** @type {?} */\n                    var currentChange = simpleChanges[declaredName];\n                    if (currentChange) {\n                        currentChange.currentValue = value;\n                    }\n                    else {\n                        simpleChanges[declaredName] =\n                            new SimpleChange(this[privateMinKey_1], value, isFirstChange);\n                    }\n                    if (isFirstChange) {\n                        // Create a place where the actual value will be stored and make it non-enumerable\n                        Object.defineProperty(this, privateMinKey_1, { value: value, writable: true });\n                    }\n                    else {\n                        this[privateMinKey_1] = value;\n                    }\n                    if (setter_1)\n                        setter_1.call(this, value);\n                },\n                // Make the property configurable in dev mode to allow overriding in tests\n                configurable: !!ngDevMode\n            });\n        }\n    };\n    for (var declaredName in declaredToMinifiedInputs) {\n        _loop_1(declaredName);\n    }\n    // If an onInit hook is defined, it will need to wrap the ngOnChanges call\n    // so the call order is changes-init-check in creation mode. In subsequent\n    // change detection runs, only the check wrapper will be called.\n    if (definition.onInit != null) {\n        definition.onInit = onChangesWrapper(definition.onInit);\n    }\n    definition.doCheck = onChangesWrapper(definition.doCheck);\n}\n// This option ensures that the ngOnChanges lifecycle hook will be inherited\n// from superclasses (in InheritDefinitionFeature).\n(/** @type {?} */ (NgOnChangesFeature)).ngInherit = true;\n/**\n * @param {?} delegateHook\n * @return {?}\n */\nfunction onChangesWrapper(delegateHook) {\n    return function () {\n        /** @type {?} */\n        var simpleChanges = this[PRIVATE_PREFIX];\n        if (simpleChanges != null) {\n            this.ngOnChanges(simpleChanges);\n            this[PRIVATE_PREFIX] = null;\n        }\n        if (delegateHook)\n            delegateHook.apply(this);\n    };\n}\n//# sourceMappingURL=ng_onchanges_feature.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { stringify } from '../util';\nimport { getInjectableDef, getInjectorDef } from './defs';\nimport { resolveForwardRef } from './forward_ref';\nimport { InjectionToken } from './injection_token';\nimport { INJECTOR, NullInjector, THROW_IF_NOT_FOUND, USE_VALUE } from './injector';\nimport { InjectFlags, inject, injectArgs, setCurrentInjector } from './injector_compatibility';\nimport { APP_ROOT } from './scope';\n/** @typedef {?} */\nvar SingleProvider;\n/** *\n * Marker which indicates that a value has not yet been created from the factory function.\n  @type {?} */\nvar NOT_YET = {};\n/** *\n * Marker which indicates that the factory function for a token is in the process of being called.\n *\n * If the injector is asked to inject a token with its value set to CIRCULAR, that indicates\n * injection of a dependency has recursively attempted to inject the original token, and there is\n * a circular dependency among the providers.\n  @type {?} */\nvar CIRCULAR = {};\n/** @type {?} */\nvar EMPTY_ARRAY = /** @type {?} */ ([]);\n/** *\n * A lazily initialized NullInjector.\n  @type {?} */\nvar NULL_INJECTOR = undefined;\n/**\n * @return {?}\n */\nfunction getNullInjector() {\n    if (NULL_INJECTOR === undefined) {\n        NULL_INJECTOR = new NullInjector();\n    }\n    return NULL_INJECTOR;\n}\n/**\n * An entry in the injector which tracks information about the given token, including a possible\n * current value.\n * @record\n * @template T\n */\nfunction Record() { }\n/** @type {?} */\nRecord.prototype.factory;\n/** @type {?} */\nRecord.prototype.value;\n/** @type {?} */\nRecord.prototype.multi;\n/**\n * Create a new `Injector` which is configured using a `defType` of `InjectorType<any>`s.\n *\n * \\@publicApi\n * @param {?} defType\n * @param {?=} parent\n * @param {?=} additionalProviders\n * @return {?}\n */\nexport function createInjector(defType, parent, additionalProviders) {\n    if (parent === void 0) { parent = null; }\n    if (additionalProviders === void 0) { additionalProviders = null; }\n    parent = parent || getNullInjector();\n    return new R3Injector(defType, additionalProviders, parent);\n}\nvar R3Injector = /** @class */ (function () {\n    function R3Injector(def, additionalProviders, parent) {\n        var _this = this;\n        this.parent = parent;\n        /**\n         * Map of tokens to records which contain the instances of those tokens.\n         */\n        this.records = new Map();\n        /**\n         * The transitive set of `InjectorType`s which define this injector.\n         */\n        this.injectorDefTypes = new Set();\n        /**\n         * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.\n         */\n        this.onDestroy = new Set();\n        /**\n         * Flag indicating that this injector was previously destroyed.\n         */\n        this.destroyed = false;\n        /** @type {?} */\n        var dedupStack = [];\n        deepForEach([def], function (injectorDef) { return _this.processInjectorType(injectorDef, [], dedupStack); });\n        additionalProviders &&\n            deepForEach(additionalProviders, function (provider) { return _this.processProvider(provider); });\n        // Make sure the INJECTOR token provides this injector.\n        this.records.set(INJECTOR, makeRecord(undefined, this));\n        // Detect whether this injector has the APP_ROOT_SCOPE token and thus should provide\n        // any injectable scoped to APP_ROOT_SCOPE.\n        this.isRootInjector = this.records.has(APP_ROOT);\n        // Eagerly instantiate the InjectorType classes themselves.\n        this.injectorDefTypes.forEach(function (defType) { return _this.get(defType); });\n    }\n    /**\n     * Destroy the injector and release references to every instance or provider associated with it.\n     *\n     * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a\n     * hook was found.\n     */\n    /**\n     * Destroy the injector and release references to every instance or provider associated with it.\n     *\n     * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a\n     * hook was found.\n     * @return {?}\n     */\n    R3Injector.prototype.destroy = /**\n     * Destroy the injector and release references to every instance or provider associated with it.\n     *\n     * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a\n     * hook was found.\n     * @return {?}\n     */\n    function () {\n        this.assertNotDestroyed();\n        // Set destroyed = true first, in case lifecycle hooks re-enter destroy().\n        this.destroyed = true;\n        try {\n            // Call all the lifecycle hooks.\n            this.onDestroy.forEach(function (service) { return service.ngOnDestroy(); });\n        }\n        finally {\n            // Release all references.\n            this.records.clear();\n            this.onDestroy.clear();\n            this.injectorDefTypes.clear();\n        }\n    };\n    /**\n     * @template T\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} flags\n     * @return {?}\n     */\n    R3Injector.prototype.get = /**\n     * @template T\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} flags\n     * @return {?}\n     */\n    function (token, notFoundValue, flags) {\n        if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }\n        if (flags === void 0) { flags = InjectFlags.Default; }\n        this.assertNotDestroyed();\n        /** @type {?} */\n        var previousInjector = setCurrentInjector(this);\n        try {\n            // Check for the SkipSelf flag.\n            if (!(flags & InjectFlags.SkipSelf)) {\n                /** @type {?} */\n                var record = this.records.get(token);\n                if (record === undefined) {\n                    /** @type {?} */\n                    var def = couldBeInjectableType(token) && getInjectableDef(token);\n                    if (def && this.injectableDefInScope(def)) {\n                        // Found an ngInjectableDef and it's scoped to this injector. Pretend as if it was here\n                        // all along.\n                        record = makeRecord(injectableDefFactory(token), NOT_YET);\n                        this.records.set(token, record);\n                    }\n                }\n                // If a record was found, get the instance for it and return it.\n                if (record !== undefined) {\n                    return this.hydrate(token, record);\n                }\n            }\n            /** @type {?} */\n            var nextInjector = !(flags & InjectFlags.Self) ? this.parent : getNullInjector();\n            return nextInjector.get(token, notFoundValue);\n        }\n        finally {\n            // Lastly, clean up the state by restoring the previous injector.\n            setCurrentInjector(previousInjector);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    R3Injector.prototype.assertNotDestroyed = /**\n     * @return {?}\n     */\n    function () {\n        if (this.destroyed) {\n            throw new Error('Injector has already been destroyed.');\n        }\n    };\n    /**\n     * Add an `InjectorType` or `InjectorDefTypeWithProviders` and all of its transitive providers\n     * to this injector.\n     * @param {?} defOrWrappedDef\n     * @param {?} parents\n     * @param {?} dedupStack\n     * @return {?}\n     */\n    R3Injector.prototype.processInjectorType = /**\n     * Add an `InjectorType` or `InjectorDefTypeWithProviders` and all of its transitive providers\n     * to this injector.\n     * @param {?} defOrWrappedDef\n     * @param {?} parents\n     * @param {?} dedupStack\n     * @return {?}\n     */\n    function (defOrWrappedDef, parents, dedupStack) {\n        var _this = this;\n        defOrWrappedDef = resolveForwardRef(defOrWrappedDef);\n        if (!defOrWrappedDef)\n            return;\n        /** @type {?} */\n        var def = getInjectorDef(defOrWrappedDef);\n        /** @type {?} */\n        var ngModule = (def == null) && (/** @type {?} */ (defOrWrappedDef)).ngModule || undefined;\n        /** @type {?} */\n        var defType = (ngModule === undefined) ? (/** @type {?} */ (defOrWrappedDef)) : ngModule;\n        // Check for circular dependencies.\n        if (ngDevMode && parents.indexOf(defType) !== -1) {\n            /** @type {?} */\n            var defName = stringify(defType);\n            throw new Error(\"Circular dependency in DI detected for type \" + defName + \". Dependency path: \" + parents.map(function (defType) { return stringify(defType); }).join(' > ') + \" > \" + defName + \".\");\n        }\n        /** @type {?} */\n        var isDuplicate = dedupStack.indexOf(defType) !== -1;\n        /** @type {?} */\n        var providers = (ngModule !== undefined) && (/** @type {?} */ (defOrWrappedDef)).providers ||\n            EMPTY_ARRAY;\n        // Finally, if defOrWrappedType was an `InjectorDefTypeWithProviders`, then the actual\n        // `InjectorDef` is on its `ngModule`.\n        if (ngModule !== undefined) {\n            def = getInjectorDef(ngModule);\n        }\n        // If no definition was found, it might be from exports. Remove it.\n        if (def == null) {\n            return;\n        }\n        // Track the InjectorType and add a provider for it.\n        this.injectorDefTypes.add(defType);\n        this.records.set(defType, makeRecord(def.factory));\n        // Add providers in the same way that @NgModule resolution did:\n        // First, include providers from any imports.\n        if (def.imports != null && !isDuplicate) {\n            // Before processing defType's imports, add it to the set of parents. This way, if it ends\n            // up deeply importing itself, this can be detected.\n            ngDevMode && parents.push(defType);\n            // Add it to the set of dedups. This way we can detect multiple imports of the same module\n            dedupStack.push(defType);\n            try {\n                deepForEach(def.imports, function (imported) { return _this.processInjectorType(imported, parents, dedupStack); });\n            }\n            finally {\n                // Remove it from the parents set when finished.\n                ngDevMode && parents.pop();\n            }\n        }\n        // Next, include providers listed on the definition itself.\n        if (def.providers != null && !isDuplicate) {\n            deepForEach(def.providers, function (provider) { return _this.processProvider(provider); });\n        }\n        // Finally, include providers from an InjectorDefTypeWithProviders if there was one.\n        deepForEach(providers, function (provider) { return _this.processProvider(provider); });\n    };\n    /**\n     * Process a `SingleProvider` and add it.\n     * @param {?} provider\n     * @return {?}\n     */\n    R3Injector.prototype.processProvider = /**\n     * Process a `SingleProvider` and add it.\n     * @param {?} provider\n     * @return {?}\n     */\n    function (provider) {\n        // Determine the token from the provider. Either it's its own token, or has a {provide: ...}\n        // property.\n        provider = resolveForwardRef(provider);\n        /** @type {?} */\n        var token = isTypeProvider(provider) ? provider : resolveForwardRef(provider.provide);\n        /** @type {?} */\n        var record = providerToRecord(provider);\n        if (!isTypeProvider(provider) && provider.multi === true) {\n            /** @type {?} */\n            var multiRecord_1 = this.records.get(token);\n            if (multiRecord_1) {\n                // It has. Throw a nice error if\n                if (multiRecord_1.multi === undefined) {\n                    throw new Error(\"Mixed multi-provider for \" + token + \".\");\n                }\n            }\n            else {\n                multiRecord_1 = makeRecord(undefined, NOT_YET, true);\n                multiRecord_1.factory = function () { return injectArgs(/** @type {?} */ ((/** @type {?} */ ((multiRecord_1)).multi))); };\n                this.records.set(token, multiRecord_1);\n            }\n            token = provider; /** @type {?} */\n            ((multiRecord_1.multi)).push(provider);\n        }\n        else {\n            /** @type {?} */\n            var existing = this.records.get(token);\n            if (existing && existing.multi !== undefined) {\n                throw new Error(\"Mixed multi-provider for \" + stringify(token));\n            }\n        }\n        this.records.set(token, record);\n    };\n    /**\n     * @template T\n     * @param {?} token\n     * @param {?} record\n     * @return {?}\n     */\n    R3Injector.prototype.hydrate = /**\n     * @template T\n     * @param {?} token\n     * @param {?} record\n     * @return {?}\n     */\n    function (token, record) {\n        if (record.value === CIRCULAR) {\n            throw new Error(\"Circular dep for \" + stringify(token));\n        }\n        else if (record.value === NOT_YET) {\n            record.value = CIRCULAR;\n            record.value = /** @type {?} */ ((record.factory))();\n        }\n        if (typeof record.value === 'object' && record.value && hasOnDestroy(record.value)) {\n            this.onDestroy.add(record.value);\n        }\n        return /** @type {?} */ (record.value);\n    };\n    /**\n     * @param {?} def\n     * @return {?}\n     */\n    R3Injector.prototype.injectableDefInScope = /**\n     * @param {?} def\n     * @return {?}\n     */\n    function (def) {\n        if (!def.providedIn) {\n            return false;\n        }\n        else if (typeof def.providedIn === 'string') {\n            return def.providedIn === 'any' || (def.providedIn === 'root' && this.isRootInjector);\n        }\n        else {\n            return this.injectorDefTypes.has(def.providedIn);\n        }\n    };\n    return R3Injector;\n}());\nexport { R3Injector };\nif (false) {\n    /**\n     * Map of tokens to records which contain the instances of those tokens.\n     * @type {?}\n     */\n    R3Injector.prototype.records;\n    /**\n     * The transitive set of `InjectorType`s which define this injector.\n     * @type {?}\n     */\n    R3Injector.prototype.injectorDefTypes;\n    /**\n     * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.\n     * @type {?}\n     */\n    R3Injector.prototype.onDestroy;\n    /**\n     * Flag indicating this injector provides the APP_ROOT_SCOPE token, and thus counts as the\n     * root scope.\n     * @type {?}\n     */\n    R3Injector.prototype.isRootInjector;\n    /**\n     * Flag indicating that this injector was previously destroyed.\n     * @type {?}\n     */\n    R3Injector.prototype.destroyed;\n    /** @type {?} */\n    R3Injector.prototype.parent;\n}\n/**\n * @param {?} token\n * @return {?}\n */\nfunction injectableDefFactory(token) {\n    /** @type {?} */\n    var injectableDef = getInjectableDef(/** @type {?} */ (token));\n    if (injectableDef === null) {\n        if (token instanceof InjectionToken) {\n            throw new Error(\"Token \" + stringify(token) + \" is missing an ngInjectableDef definition.\");\n        }\n        // TODO(alxhub): there should probably be a strict mode which throws here instead of assuming a\n        // no-args constructor.\n        return function () { return new (/** @type {?} */ (token))(); };\n    }\n    return injectableDef.factory;\n}\n/**\n * @param {?} provider\n * @return {?}\n */\nfunction providerToRecord(provider) {\n    /** @type {?} */\n    var factory = providerToFactory(provider);\n    if (isValueProvider(provider)) {\n        return makeRecord(undefined, provider.useValue);\n    }\n    else {\n        return makeRecord(factory, NOT_YET);\n    }\n}\n/**\n * Converts a `SingleProvider` into a factory function.\n *\n * @param {?} provider provider to convert to factory\n * @return {?}\n */\nexport function providerToFactory(provider) {\n    /** @type {?} */\n    var factory = undefined;\n    if (isTypeProvider(provider)) {\n        return injectableDefFactory(resolveForwardRef(provider));\n    }\n    else {\n        if (isValueProvider(provider)) {\n            factory = function () { return resolveForwardRef(provider.useValue); };\n        }\n        else if (isExistingProvider(provider)) {\n            factory = function () { return inject(resolveForwardRef(provider.useExisting)); };\n        }\n        else if (isFactoryProvider(provider)) {\n            factory = function () { return provider.useFactory.apply(provider, injectArgs(provider.deps || [])); };\n        }\n        else {\n            /** @type {?} */\n            var classRef_1 = resolveForwardRef((/** @type {?} */ (provider)).useClass || provider.provide);\n            if (hasDeps(provider)) {\n                factory = function () { return new ((classRef_1).bind.apply((classRef_1), [void 0].concat(injectArgs(provider.deps))))(); };\n            }\n            else {\n                return injectableDefFactory(classRef_1);\n            }\n        }\n    }\n    return factory;\n}\n/**\n * @template T\n * @param {?} factory\n * @param {?=} value\n * @param {?=} multi\n * @return {?}\n */\nfunction makeRecord(factory, value, multi) {\n    if (value === void 0) { value = NOT_YET; }\n    if (multi === void 0) { multi = false; }\n    return {\n        factory: factory,\n        value: value,\n        multi: multi ? [] : undefined,\n    };\n}\n/**\n * @template T\n * @param {?} input\n * @param {?} fn\n * @return {?}\n */\nfunction deepForEach(input, fn) {\n    input.forEach(function (value) { return Array.isArray(value) ? deepForEach(value, fn) : fn(value); });\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isValueProvider(value) {\n    return USE_VALUE in value;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isExistingProvider(value) {\n    return !!(/** @type {?} */ (value)).useExisting;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isFactoryProvider(value) {\n    return !!(/** @type {?} */ (value)).useFactory;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nexport function isTypeProvider(value) {\n    return typeof value === 'function';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction hasDeps(value) {\n    return !!(/** @type {?} */ (value)).deps;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction hasOnDestroy(value) {\n    return typeof value === 'object' && value != null && (/** @type {?} */ (value)).ngOnDestroy &&\n        typeof (/** @type {?} */ (value)).ngOnDestroy === 'function';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction couldBeInjectableType(value) {\n    return (typeof value === 'function') ||\n        (typeof value === 'object' && value instanceof InjectionToken);\n}\n//# sourceMappingURL=r3_injector.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { resolveForwardRef } from '../di/forward_ref';\nimport { isTypeProvider, providerToFactory } from '../di/r3_injector';\nimport { diPublicInInjector, getNodeInjectable, getOrCreateNodeInjectorForNode } from './di';\nimport { directiveInject } from './instructions';\nimport { NodeInjectorFactory } from './interfaces/injector';\nimport { TVIEW } from './interfaces/view';\nimport { getLView, getPreviousOrParentTNode } from './state';\nimport { isComponentDef } from './util';\n/**\n * Resolves the providers which are defined in the DirectiveDef.\n *\n * When inserting the tokens and the factories in their respective arrays, we can assume that\n * this method is called first for the component (if any), and then for other directives on the same\n * node.\n * As a consequence,the providers are always processed in that order:\n * 1) The view providers of the component\n * 2) The providers of the component\n * 3) The providers of the other directives\n * This matches the structure of the injectables arrays of a view (for each node).\n * So the tokens and the factories can be pushed at the end of the arrays, except\n * in one case for multi providers.\n *\n * @template T\n * @param {?} def the directive definition\n * @param {?} providers\n * @param {?} viewProviders\n * @return {?}\n */\nexport function providersResolver(def, providers, viewProviders) {\n    /** @type {?} */\n    var lView = getLView();\n    /** @type {?} */\n    var tView = lView[TVIEW];\n    if (tView.firstTemplatePass) {\n        /** @type {?} */\n        var isComponent = isComponentDef(def);\n        // The list of view providers is processed first, and the flags are updated\n        resolveProvider(viewProviders, tView.data, tView.blueprint, isComponent, true);\n        // Then, the list of providers is processed, and the flags are updated\n        resolveProvider(providers, tView.data, tView.blueprint, isComponent, false);\n    }\n}\n/**\n * Resolves a provider and publishes it to the DI system.\n * @param {?} provider\n * @param {?} tInjectables\n * @param {?} lInjectablesBlueprint\n * @param {?} isComponent\n * @param {?} isViewProvider\n * @return {?}\n */\nfunction resolveProvider(provider, tInjectables, lInjectablesBlueprint, isComponent, isViewProvider) {\n    provider = resolveForwardRef(provider);\n    if (Array.isArray(provider)) {\n        // Recursively call `resolveProvider`\n        // Recursion is OK in this case because this code will not be in hot-path once we implement\n        // cloning of the initial state.\n        for (var i = 0; i < provider.length; i++) {\n            resolveProvider(provider[i], tInjectables, lInjectablesBlueprint, isComponent, isViewProvider);\n        }\n    }\n    else {\n        /** @type {?} */\n        var lView = getLView();\n        /** @type {?} */\n        var token = isTypeProvider(provider) ? provider : resolveForwardRef(provider.provide);\n        /** @type {?} */\n        var providerFactory = providerToFactory(provider);\n        /** @type {?} */\n        var previousOrParentTNode = getPreviousOrParentTNode();\n        /** @type {?} */\n        var beginIndex = previousOrParentTNode.providerIndexes & 65535 /* ProvidersStartIndexMask */;\n        /** @type {?} */\n        var endIndex = previousOrParentTNode.flags >> 16 /* DirectiveStartingIndexShift */;\n        /** @type {?} */\n        var cptViewProvidersCount = previousOrParentTNode.providerIndexes >> 16 /* CptViewProvidersCountShift */;\n        if (isTypeProvider(provider) || !provider.multi) {\n            /** @type {?} */\n            var factory = new NodeInjectorFactory(providerFactory, isViewProvider, directiveInject);\n            /** @type {?} */\n            var existingFactoryIndex = indexOf(token, tInjectables, isViewProvider ? beginIndex : beginIndex + cptViewProvidersCount, endIndex);\n            if (existingFactoryIndex == -1) {\n                diPublicInInjector(getOrCreateNodeInjectorForNode(/** @type {?} */ (previousOrParentTNode), lView), lView, token);\n                tInjectables.push(token);\n                previousOrParentTNode.flags += 1 << 16 /* DirectiveStartingIndexShift */;\n                if (isViewProvider) {\n                    previousOrParentTNode.providerIndexes +=\n                        65536 /* CptViewProvidersCountShifter */;\n                }\n                lInjectablesBlueprint.push(factory);\n                lView.push(factory);\n            }\n            else {\n                lInjectablesBlueprint[existingFactoryIndex] = factory;\n                lView[existingFactoryIndex] = factory;\n            }\n        }\n        else {\n            /** @type {?} */\n            var existingProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex + cptViewProvidersCount, endIndex);\n            /** @type {?} */\n            var existingViewProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex, beginIndex + cptViewProvidersCount);\n            /** @type {?} */\n            var doesProvidersFactoryExist = existingProvidersFactoryIndex >= 0 &&\n                lInjectablesBlueprint[existingProvidersFactoryIndex];\n            /** @type {?} */\n            var doesViewProvidersFactoryExist = existingViewProvidersFactoryIndex >= 0 &&\n                lInjectablesBlueprint[existingViewProvidersFactoryIndex];\n            if (isViewProvider && !doesViewProvidersFactoryExist ||\n                !isViewProvider && !doesProvidersFactoryExist) {\n                // Cases 1.a and 2.a\n                diPublicInInjector(getOrCreateNodeInjectorForNode(/** @type {?} */ (previousOrParentTNode), lView), lView, token);\n                /** @type {?} */\n                var factory = multiFactory(isViewProvider ? multiViewProvidersFactoryResolver : multiProvidersFactoryResolver, lInjectablesBlueprint.length, isViewProvider, isComponent, providerFactory);\n                if (!isViewProvider && doesViewProvidersFactoryExist) {\n                    lInjectablesBlueprint[existingViewProvidersFactoryIndex].providerFactory = factory;\n                }\n                tInjectables.push(token);\n                previousOrParentTNode.flags += 1 << 16 /* DirectiveStartingIndexShift */;\n                if (isViewProvider) {\n                    previousOrParentTNode.providerIndexes +=\n                        65536 /* CptViewProvidersCountShifter */;\n                }\n                lInjectablesBlueprint.push(factory);\n                lView.push(factory);\n            }\n            else {\n                // Cases 1.b and 2.b\n                multiFactoryAdd(/** @type {?} */ ((lInjectablesBlueprint))[isViewProvider ? existingViewProvidersFactoryIndex : existingProvidersFactoryIndex], providerFactory, !isViewProvider && isComponent);\n            }\n            if (!isViewProvider && isComponent && doesViewProvidersFactoryExist) {\n                /** @type {?} */ ((lInjectablesBlueprint[existingViewProvidersFactoryIndex].componentProviders))++;\n            }\n        }\n    }\n}\n/**\n * Add a factory in a multi factory.\n * @param {?} multiFactory\n * @param {?} factory\n * @param {?} isComponentProvider\n * @return {?}\n */\nfunction multiFactoryAdd(multiFactory, factory, isComponentProvider) {\n    /** @type {?} */ ((multiFactory.multi)).push(factory);\n    if (isComponentProvider) {\n        /** @type {?} */ ((multiFactory.componentProviders))++;\n    }\n}\n/**\n * Returns the index of item in the array, but only in the begin to end range.\n * @param {?} item\n * @param {?} arr\n * @param {?} begin\n * @param {?} end\n * @return {?}\n */\nfunction indexOf(item, arr, begin, end) {\n    for (var i = begin; i < end; i++) {\n        if (arr[i] === item)\n            return i;\n    }\n    return -1;\n}\n/**\n * Use this with `multi` `providers`.\n * @this {?}\n * @param {?} _\n * @param {?} tData\n * @param {?} lData\n * @param {?} tNode\n * @return {?}\n */\nfunction multiProvidersFactoryResolver(_, tData, lData, tNode) {\n    return multiResolve(/** @type {?} */ ((this.multi)), []);\n}\n/**\n * Use this with `multi` `viewProviders`.\n *\n * This factory knows how to concatenate itself with the existing `multi` `providers`.\n * @this {?}\n * @param {?} _\n * @param {?} tData\n * @param {?} lData\n * @param {?} tNode\n * @return {?}\n */\nfunction multiViewProvidersFactoryResolver(_, tData, lData, tNode) {\n    /** @type {?} */\n    var factories = /** @type {?} */ ((this.multi));\n    /** @type {?} */\n    var result;\n    if (this.providerFactory) {\n        /** @type {?} */\n        var componentCount = /** @type {?} */ ((this.providerFactory.componentProviders));\n        /** @type {?} */\n        var multiProviders = getNodeInjectable(tData, lData, /** @type {?} */ ((/** @type {?} */ ((this.providerFactory)).index)), tNode);\n        // Copy the section of the array which contains `multi` `providers` from the component\n        result = multiProviders.slice(0, componentCount);\n        // Insert the `viewProvider` instances.\n        multiResolve(factories, result);\n        // Copy the section of the array which contains `multi` `providers` from other directives\n        for (var i = componentCount; i < multiProviders.length; i++) {\n            result.push(multiProviders[i]);\n        }\n    }\n    else {\n        result = [];\n        // Insert the `viewProvider` instances.\n        multiResolve(factories, result);\n    }\n    return result;\n}\n/**\n * Maps an array of factories into an array of values.\n * @param {?} factories\n * @param {?} result\n * @return {?}\n */\nfunction multiResolve(factories, result) {\n    for (var i = 0; i < factories.length; i++) {\n        /** @type {?} */\n        var factory = /** @type {?} */ (((factories[i])));\n        result.push(factory());\n    }\n    return result;\n}\n/**\n * Creates a multi factory.\n * @param {?} factoryFn\n * @param {?} index\n * @param {?} isViewProvider\n * @param {?} isComponent\n * @param {?} f\n * @return {?}\n */\nfunction multiFactory(factoryFn, index, isViewProvider, isComponent, f) {\n    /** @type {?} */\n    var factory = new NodeInjectorFactory(factoryFn, isViewProvider, directiveInject);\n    factory.multi = [];\n    factory.index = index;\n    factory.componentProviders = 0;\n    multiFactoryAdd(factory, f, isComponent && !isViewProvider);\n    return factory;\n}\n//# sourceMappingURL=di_setup.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nimport { providersResolver } from '../di_setup';\n/**\n * This feature resolves the providers of a directive (or component),\n * and publish them into the DI system, making it visible to others for injection.\n *\n * For example:\n * class ComponentWithProviders {\n *   constructor(private greeter: GreeterDE) {}\n *\n *   static ngComponentDef = defineComponent({\n *     type: ComponentWithProviders,\n *     selectors: [['component-with-providers']],\n *    factory: () => new ComponentWithProviders(directiveInject(GreeterDE as any)),\n *    consts: 1,\n *    vars: 1,\n *    template: function(fs: RenderFlags, ctx: ComponentWithProviders) {\n *      if (fs & RenderFlags.Create) {\n *        text(0);\n *      }\n *      if (fs & RenderFlags.Update) {\n *        textBinding(0, bind(ctx.greeter.greet()));\n *      }\n *    },\n *    features: [ProvidersFeature([GreeterDE])]\n *  });\n * }\n *\n * @template T\n * @param {?} providers\n * @param {?=} viewProviders\n * @return {?}\n */\nexport function ProvidersFeature(providers, viewProviders) {\n    if (viewProviders === void 0) { viewProviders = []; }\n    return function (definition) {\n        definition.providersResolver = function (def) {\n            return providersResolver(def, providers, viewProviders);\n        };\n    };\n}\n//# sourceMappingURL=providers_feature.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { stringify } from '../util';\nimport { ComponentFactory } from './component_factory';\n/**\n * @param {?} component\n * @return {?}\n */\nexport function noComponentFactoryError(component) {\n    /** @type {?} */\n    var error = Error(\"No component factory found for \" + stringify(component) + \". Did you add it to @NgModule.entryComponents?\");\n    (/** @type {?} */ (error))[ERROR_COMPONENT] = component;\n    return error;\n}\n/** @type {?} */\nvar ERROR_COMPONENT = 'ngComponent';\n/**\n * @param {?} error\n * @return {?}\n */\nexport function getComponent(error) {\n    return (/** @type {?} */ (error))[ERROR_COMPONENT];\n}\nvar _NullComponentFactoryResolver = /** @class */ (function () {\n    function _NullComponentFactoryResolver() {\n    }\n    /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    _NullComponentFactoryResolver.prototype.resolveComponentFactory = /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    function (component) {\n        throw noComponentFactoryError(component);\n    };\n    return _NullComponentFactoryResolver;\n}());\n/**\n * \\@publicApi\n * @abstract\n */\nvar ComponentFactoryResolver = /** @class */ (function () {\n    function ComponentFactoryResolver() {\n    }\n    ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();\n    return ComponentFactoryResolver;\n}());\nexport { ComponentFactoryResolver };\nif (false) {\n    /** @type {?} */\n    ComponentFactoryResolver.NULL;\n    /**\n     * @abstract\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    ComponentFactoryResolver.prototype.resolveComponentFactory = function (component) { };\n}\nvar CodegenComponentFactoryResolver = /** @class */ (function () {\n    function CodegenComponentFactoryResolver(factories, _parent, _ngModule) {\n        this._parent = _parent;\n        this._ngModule = _ngModule;\n        this._factories = new Map();\n        for (var i = 0; i < factories.length; i++) {\n            /** @type {?} */\n            var factory = factories[i];\n            this._factories.set(factory.componentType, factory);\n        }\n    }\n    /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    CodegenComponentFactoryResolver.prototype.resolveComponentFactory = /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    function (component) {\n        /** @type {?} */\n        var factory = this._factories.get(component);\n        if (!factory && this._parent) {\n            factory = this._parent.resolveComponentFactory(component);\n        }\n        if (!factory) {\n            throw noComponentFactoryError(component);\n        }\n        return new ComponentFactoryBoundToModule(factory, this._ngModule);\n    };\n    return CodegenComponentFactoryResolver;\n}());\nexport { CodegenComponentFactoryResolver };\nif (false) {\n    /** @type {?} */\n    CodegenComponentFactoryResolver.prototype._factories;\n    /** @type {?} */\n    CodegenComponentFactoryResolver.prototype._parent;\n    /** @type {?} */\n    CodegenComponentFactoryResolver.prototype._ngModule;\n}\n/**\n * @template C\n */\nvar /**\n * @template C\n */\nComponentFactoryBoundToModule = /** @class */ (function (_super) {\n    tslib_1.__extends(ComponentFactoryBoundToModule, _super);\n    function ComponentFactoryBoundToModule(factory, ngModule) {\n        var _this = _super.call(this) || this;\n        _this.factory = factory;\n        _this.ngModule = ngModule;\n        _this.selector = factory.selector;\n        _this.componentType = factory.componentType;\n        _this.ngContentSelectors = factory.ngContentSelectors;\n        _this.inputs = factory.inputs;\n        _this.outputs = factory.outputs;\n        return _this;\n    }\n    /**\n     * @param {?} injector\n     * @param {?=} projectableNodes\n     * @param {?=} rootSelectorOrNode\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    ComponentFactoryBoundToModule.prototype.create = /**\n     * @param {?} injector\n     * @param {?=} projectableNodes\n     * @param {?=} rootSelectorOrNode\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    function (injector, projectableNodes, rootSelectorOrNode, ngModule) {\n        return this.factory.create(injector, projectableNodes, rootSelectorOrNode, ngModule || this.ngModule);\n    };\n    return ComponentFactoryBoundToModule;\n}(ComponentFactory));\n/**\n * @template C\n */\nexport { ComponentFactoryBoundToModule };\nif (false) {\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.selector;\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.componentType;\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.ngContentSelectors;\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.inputs;\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.outputs;\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.factory;\n    /** @type {?} */\n    ComponentFactoryBoundToModule.prototype.ngModule;\n}\n//# sourceMappingURL=component_factory_resolver.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { injectElementRef as render3InjectElementRef } from '../render3/view_engine_compatibility';\nimport { noop } from '../util/noop';\n/**\n * A wrapper around a native element inside of a View.\n *\n * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM\n * element.\n *\n * \\@security Permitting direct access to the DOM can make your application more vulnerable to\n * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the\n * [Security Guide](http://g.co/ng/security).\n *\n * \\@publicApi\n * @template T\n */\nvar ElementRef = /** @class */ (function () {\n    function ElementRef(nativeElement) {\n        this.nativeElement = nativeElement;\n    }\n    /**\n     * \\@internal\n     */\n    ElementRef.__NG_ELEMENT_ID__ = function () { return SWITCH_ELEMENT_REF_FACTORY(ElementRef); };\n    return ElementRef;\n}());\nexport { ElementRef };\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ElementRef.__NG_ELEMENT_ID__;\n    /**\n     * The underlying native element or `null` if direct access to native elements is not supported\n     * (e.g. when the application runs in a web worker).\n     *\n     * <div class=\"callout is-critical\">\n     *   <header>Use with caution</header>\n     *   <p>\n     *    Use this API as the last resort when direct access to DOM is needed. Use templating and\n     *    data-binding provided by Angular instead. Alternatively you can take a look at {\\@link\n     * Renderer2}\n     *    which provides API that can safely be used even when direct access to native elements is not\n     *    supported.\n     *   </p>\n     *   <p>\n     *    Relying on direct DOM access creates tight coupling between your application and rendering\n     *    layers which will make it impossible to separate the two and deploy your application into a\n     *    web worker.\n     *   </p>\n     * </div>\n     *\n     * @type {?}\n     */\n    ElementRef.prototype.nativeElement;\n}\n/** @type {?} */\nexport var SWITCH_ELEMENT_REF_FACTORY__POST_R3__ = render3InjectElementRef;\n/** @type {?} */\nvar SWITCH_ELEMENT_REF_FACTORY__PRE_R3__ = noop;\n/** @type {?} */\nvar SWITCH_ELEMENT_REF_FACTORY = SWITCH_ELEMENT_REF_FACTORY__PRE_R3__;\n//# sourceMappingURL=element_ref.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '../di/injection_token';\nimport { injectRenderer2 as render3InjectRenderer2 } from '../render3/view_engine_compatibility';\nimport { noop } from '../util/noop';\n/**\n * @deprecated Use `RendererType2` (and `Renderer2`) instead.\n * \\@publicApi\n */\nvar /**\n * @deprecated Use `RendererType2` (and `Renderer2`) instead.\n * \\@publicApi\n */\nRenderComponentType = /** @class */ (function () {\n    function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles, animations) {\n        this.id = id;\n        this.templateUrl = templateUrl;\n        this.slotCount = slotCount;\n        this.encapsulation = encapsulation;\n        this.styles = styles;\n        this.animations = animations;\n    }\n    return RenderComponentType;\n}());\n/**\n * @deprecated Use `RendererType2` (and `Renderer2`) instead.\n * \\@publicApi\n */\nexport { RenderComponentType };\nif (false) {\n    /** @type {?} */\n    RenderComponentType.prototype.id;\n    /** @type {?} */\n    RenderComponentType.prototype.templateUrl;\n    /** @type {?} */\n    RenderComponentType.prototype.slotCount;\n    /** @type {?} */\n    RenderComponentType.prototype.encapsulation;\n    /** @type {?} */\n    RenderComponentType.prototype.styles;\n    /** @type {?} */\n    RenderComponentType.prototype.animations;\n}\n/**\n * @deprecated Debug info is handled internally in the view engine now.\n * @abstract\n */\nvar /**\n * @deprecated Debug info is handled internally in the view engine now.\n * @abstract\n */\nRenderDebugInfo = /** @class */ (function () {\n    function RenderDebugInfo() {\n    }\n    return RenderDebugInfo;\n}());\n/**\n * @deprecated Debug info is handled internally in the view engine now.\n * @abstract\n */\nexport { RenderDebugInfo };\nif (false) {\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RenderDebugInfo.prototype.injector = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RenderDebugInfo.prototype.component = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RenderDebugInfo.prototype.providerTokens = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RenderDebugInfo.prototype.references = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RenderDebugInfo.prototype.context = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    RenderDebugInfo.prototype.source = function () { };\n}\n/**\n * @deprecated Use the `Renderer2` instead.\n * @record\n */\nexport function DirectRenderer() { }\n/** @type {?} */\nDirectRenderer.prototype.remove;\n/** @type {?} */\nDirectRenderer.prototype.appendChild;\n/** @type {?} */\nDirectRenderer.prototype.insertBefore;\n/** @type {?} */\nDirectRenderer.prototype.nextSibling;\n/** @type {?} */\nDirectRenderer.prototype.parentElement;\n/**\n * @deprecated Use the `Renderer2` instead.\n * \\@publicApi\n * @abstract\n */\nvar /**\n * @deprecated Use the `Renderer2` instead.\n * \\@publicApi\n * @abstract\n */\nRenderer = /** @class */ (function () {\n    function Renderer() {\n    }\n    return Renderer;\n}());\n/**\n * @deprecated Use the `Renderer2` instead.\n * \\@publicApi\n * @abstract\n */\nexport { Renderer };\nif (false) {\n    /**\n     * @abstract\n     * @param {?} selectorOrNode\n     * @param {?=} debugInfo\n     * @return {?}\n     */\n    Renderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) { };\n    /**\n     * @abstract\n     * @param {?} parentElement\n     * @param {?} name\n     * @param {?=} debugInfo\n     * @return {?}\n     */\n    Renderer.prototype.createElement = function (parentElement, name, debugInfo) { };\n    /**\n     * @abstract\n     * @param {?} hostElement\n     * @return {?}\n     */\n    Renderer.prototype.createViewRoot = function (hostElement) { };\n    /**\n     * @abstract\n     * @param {?} parentElement\n     * @param {?=} debugInfo\n     * @return {?}\n     */\n    Renderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) { };\n    /**\n     * @abstract\n     * @param {?} parentElement\n     * @param {?} value\n     * @param {?=} debugInfo\n     * @return {?}\n     */\n    Renderer.prototype.createText = function (parentElement, value, debugInfo) { };\n    /**\n     * @abstract\n     * @param {?} parentElement\n     * @param {?} nodes\n     * @return {?}\n     */\n    Renderer.prototype.projectNodes = function (parentElement, nodes) { };\n    /**\n     * @abstract\n     * @param {?} node\n     * @param {?} viewRootNodes\n     * @return {?}\n     */\n    Renderer.prototype.attachViewAfter = function (node, viewRootNodes) { };\n    /**\n     * @abstract\n     * @param {?} viewRootNodes\n     * @return {?}\n     */\n    Renderer.prototype.detachView = function (viewRootNodes) { };\n    /**\n     * @abstract\n     * @param {?} hostElement\n     * @param {?} viewAllNodes\n     * @return {?}\n     */\n    Renderer.prototype.destroyView = function (hostElement, viewAllNodes) { };\n    /**\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    Renderer.prototype.listen = function (renderElement, name, callback) { };\n    /**\n     * @abstract\n     * @param {?} target\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    Renderer.prototype.listenGlobal = function (target, name, callback) { };\n    /**\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} propertyName\n     * @param {?} propertyValue\n     * @return {?}\n     */\n    Renderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) { };\n    /**\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} attributeName\n     * @param {?=} attributeValue\n     * @return {?}\n     */\n    Renderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) { };\n    /**\n     * Used only in debug mode to serialize property changes to dom nodes as attributes.\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} propertyName\n     * @param {?} propertyValue\n     * @return {?}\n     */\n    Renderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) { };\n    /**\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} className\n     * @param {?} isAdd\n     * @return {?}\n     */\n    Renderer.prototype.setElementClass = function (renderElement, className, isAdd) { };\n    /**\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} styleName\n     * @param {?=} styleValue\n     * @return {?}\n     */\n    Renderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) { };\n    /**\n     * @abstract\n     * @param {?} renderElement\n     * @param {?} methodName\n     * @param {?=} args\n     * @return {?}\n     */\n    Renderer.prototype.invokeElementMethod = function (renderElement, methodName, args) { };\n    /**\n     * @abstract\n     * @param {?} renderNode\n     * @param {?} text\n     * @return {?}\n     */\n    Renderer.prototype.setText = function (renderNode, text) { };\n    /**\n     * @abstract\n     * @param {?} element\n     * @param {?} startingStyles\n     * @param {?} keyframes\n     * @param {?} duration\n     * @param {?} delay\n     * @param {?} easing\n     * @param {?=} previousPlayers\n     * @return {?}\n     */\n    Renderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) { };\n}\n/** @type {?} */\nexport var Renderer2Interceptor = new InjectionToken('Renderer2Interceptor');\n/**\n * Injectable service that provides a low-level interface for modifying the UI.\n *\n * Use this service to bypass Angular's templating and make custom UI changes that can't be\n * expressed declaratively. For example if you need to set a property or an attribute whose name is\n * not statically known, use {\\@link Renderer#setElementProperty setElementProperty} or\n * {\\@link Renderer#setElementAttribute setElementAttribute} respectively.\n *\n * If you are implementing a custom renderer, you must implement this interface.\n *\n * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.\n *\n * @deprecated Use `RendererFactory2` instead.\n * \\@publicApi\n * @abstract\n */\nvar /**\n * Injectable service that provides a low-level interface for modifying the UI.\n *\n * Use this service to bypass Angular's templating and make custom UI changes that can't be\n * expressed declaratively. For example if you need to set a property or an attribute whose name is\n * not statically known, use {\\@link Renderer#setElementProperty setElementProperty} or\n * {\\@link Renderer#setElementAttribute setElementAttribute} respectively.\n *\n * If you are implementing a custom renderer, you must implement this interface.\n *\n * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.\n *\n * @deprecated Use `RendererFactory2` instead.\n * \\@publicApi\n * @abstract\n */\nRootRenderer = /** @class */ (function () {\n    function RootRenderer() {\n    }\n    return RootRenderer;\n}());\n/**\n * Injectable service that provides a low-level interface for modifying the UI.\n *\n * Use this service to bypass Angular's templating and make custom UI changes that can't be\n * expressed declaratively. For example if you need to set a property or an attribute whose name is\n * not statically known, use {\\@link Renderer#setElementProperty setElementProperty} or\n * {\\@link Renderer#setElementAttribute setElementAttribute} respectively.\n *\n * If you are implementing a custom renderer, you must implement this interface.\n *\n * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.\n *\n * @deprecated Use `RendererFactory2` instead.\n * \\@publicApi\n * @abstract\n */\nexport { RootRenderer };\nif (false) {\n    /**\n     * @abstract\n     * @param {?} componentType\n     * @return {?}\n     */\n    RootRenderer.prototype.renderComponent = function (componentType) { };\n}\n/**\n * Used by `RendererFactory2` to associate custom rendering data and styles\n * with a rendering implementation.\n * \\@publicApi\n * @record\n */\nexport function RendererType2() { }\n/**\n * A unique identifying string for the new renderer, used when creating\n * unique styles for encapsulation.\n * @type {?}\n */\nRendererType2.prototype.id;\n/**\n * The view encapsulation type, which determines how styles are applied to\n * DOM elements. One of\n * - `Emulated` (default): Emulate native scoping of styles.\n * - `Native`: Use the native encapsulation mechanism of the renderer.\n * - `ShadowDom`: Use modern [Shadow\n * DOM](https://w3c.github.io/webcomponents/spec/shadow/) and\n * create a ShadowRoot for component's host element.\n * - `None`: Do not provide any template or style encapsulation.\n * @type {?}\n */\nRendererType2.prototype.encapsulation;\n/**\n * Defines CSS styles to be stored on a renderer instance.\n * @type {?}\n */\nRendererType2.prototype.styles;\n/**\n * Defines arbitrary developer-defined data to be stored on a renderer instance.\n * This is useful for renderers that delegate to other renderers.\n * @type {?}\n */\nRendererType2.prototype.data;\n/**\n * Creates and initializes a custom renderer that implements the `Renderer2` base class.\n *\n * \\@publicApi\n * @abstract\n */\nvar /**\n * Creates and initializes a custom renderer that implements the `Renderer2` base class.\n *\n * \\@publicApi\n * @abstract\n */\nRendererFactory2 = /** @class */ (function () {\n    function RendererFactory2() {\n    }\n    return RendererFactory2;\n}());\n/**\n * Creates and initializes a custom renderer that implements the `Renderer2` base class.\n *\n * \\@publicApi\n * @abstract\n */\nexport { RendererFactory2 };\nif (false) {\n    /**\n     * Creates and initializes a custom renderer for a host DOM element.\n     * @abstract\n     * @param {?} hostElement The element to render.\n     * @param {?} type The base class to implement.\n     * @return {?} The new custom renderer instance.\n     */\n    RendererFactory2.prototype.createRenderer = function (hostElement, type) { };\n    /**\n     * A callback invoked when rendering has begun.\n     * @abstract\n     * @return {?}\n     */\n    RendererFactory2.prototype.begin = function () { };\n    /**\n     * A callback invoked when rendering has completed.\n     * @abstract\n     * @return {?}\n     */\n    RendererFactory2.prototype.end = function () { };\n    /**\n     * Use with animations test-only mode. Notifies the test when rendering has completed.\n     * @abstract\n     * @return {?} The asynchronous result of the developer-defined function.\n     */\n    RendererFactory2.prototype.whenRenderingDone = function () { };\n}\n/** @enum {number} */\nvar RendererStyleFlags2 = {\n    /**\n       * Marks a style as important.\n       */\n    Important: 1,\n    /**\n       * Marks a style as using dash case naming (this-is-dash-case).\n       */\n    DashCase: 2,\n};\nexport { RendererStyleFlags2 };\nRendererStyleFlags2[RendererStyleFlags2.Important] = 'Important';\nRendererStyleFlags2[RendererStyleFlags2.DashCase] = 'DashCase';\n/**\n * Extend this base class to implement custom rendering. By default, Angular\n * renders a template into DOM. You can use custom rendering to intercept\n * rendering calls, or to render to something other than DOM.\n *\n * Create your custom renderer using `RendererFactory2`.\n *\n * Use a custom renderer to bypass Angular's templating and\n * make custom UI changes that can't be expressed declaratively.\n * For example if you need to set a property or an attribute whose name is\n * not statically known, use the `setProperty()` or\n * `setAttribute()` method.\n *\n * \\@publicApi\n * @abstract\n */\nvar Renderer2 = /** @class */ (function () {\n    function Renderer2() {\n    }\n    /**\n     * \\@internal\n     */\n    Renderer2.__NG_ELEMENT_ID__ = function () { return SWITCH_RENDERER2_FACTORY(); };\n    return Renderer2;\n}());\nexport { Renderer2 };\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    Renderer2.__NG_ELEMENT_ID__;\n    /**\n     * If null or undefined, the view engine won't call it.\n     * This is used as a performance optimization for production mode.\n     * @type {?}\n     */\n    Renderer2.prototype.destroyNode;\n    /**\n     * Use to store arbitrary developer-defined data on a renderer instance,\n     * as an object containing key-value pairs.\n     * This is useful for renderers that delegate to other renderers.\n     * @abstract\n     * @return {?}\n     */\n    Renderer2.prototype.data = function () { };\n    /**\n     * Implement this callback to destroy the renderer or the host element.\n     * @abstract\n     * @return {?}\n     */\n    Renderer2.prototype.destroy = function () { };\n    /**\n     * Implement this callback to create an instance of the host element.\n     * @abstract\n     * @param {?} name An identifying name for the new element, unique within the namespace.\n     * @param {?=} namespace The namespace for the new element.\n     * @return {?} The new element.\n     */\n    Renderer2.prototype.createElement = function (name, namespace) { };\n    /**\n     * Implement this callback to add a comment to the DOM of the host element.\n     * @abstract\n     * @param {?} value The comment text.\n     * @return {?} The modified element.\n     */\n    Renderer2.prototype.createComment = function (value) { };\n    /**\n     * Implement this callback to add text to the DOM of the host element.\n     * @abstract\n     * @param {?} value The text string.\n     * @return {?} The modified element.\n     */\n    Renderer2.prototype.createText = function (value) { };\n    /**\n     * Appends a child to a given parent node in the host element DOM.\n     * @abstract\n     * @param {?} parent The parent node.\n     * @param {?} newChild The new child node.\n     * @return {?}\n     */\n    Renderer2.prototype.appendChild = function (parent, newChild) { };\n    /**\n     * Implement this callback to insert a child node at a given position in a parent node\n     * in the host element DOM.\n     * @abstract\n     * @param {?} parent The parent node.\n     * @param {?} newChild The new child nodes.\n     * @param {?} refChild The existing child node that should precede the new node.\n     * @return {?}\n     */\n    Renderer2.prototype.insertBefore = function (parent, newChild, refChild) { };\n    /**\n     * Implement this callback to remove a child node from the host element's DOM.\n     * @abstract\n     * @param {?} parent The parent node.\n     * @param {?} oldChild The child node to remove.\n     * @return {?}\n     */\n    Renderer2.prototype.removeChild = function (parent, oldChild) { };\n    /**\n     * Implement this callback to prepare an element to be bootstrapped\n     * as a root element, and return the element instance.\n     * @abstract\n     * @param {?} selectorOrNode The DOM element.\n     * @param {?=} preserveContent Whether the contents of the root element\n     * should be preserved, or cleared upon bootstrap (default behavior).\n     * Use with `ViewEncapsulation.ShadowDom` to allow simple native\n     * content projection via `<slot>` elements.\n     * @return {?} The root element.\n     */\n    Renderer2.prototype.selectRootElement = function (selectorOrNode, preserveContent) { };\n    /**\n     * Implement this callback to get the parent of a given node\n     * in the host element's DOM.\n     * @abstract\n     * @param {?} node The child node to query.\n     * @return {?} The parent node, or null if there is no parent.\n     * For WebWorkers, always returns true.\n     * This is because the check is synchronous,\n     * and the caller can't rely on checking for null.\n     */\n    Renderer2.prototype.parentNode = function (node) { };\n    /**\n     * Implement this callback to get the next sibling node of a given node\n     * in the host element's DOM.\n     * @abstract\n     * @param {?} node\n     * @return {?} The sibling node, or null if there is no sibling.\n     * For WebWorkers, always returns a value.\n     * This is because the check is synchronous,\n     * and the caller can't rely on checking for null.\n     */\n    Renderer2.prototype.nextSibling = function (node) { };\n    /**\n     * Implement this callback to set an attribute value for an element in the DOM.\n     * @abstract\n     * @param {?} el The element.\n     * @param {?} name The attribute name.\n     * @param {?} value The new value.\n     * @param {?=} namespace The namespace.\n     * @return {?}\n     */\n    Renderer2.prototype.setAttribute = function (el, name, value, namespace) { };\n    /**\n     * Implement this callback to remove an attribute from an element in the DOM.\n     * @abstract\n     * @param {?} el The element.\n     * @param {?} name The attribute name.\n     * @param {?=} namespace The namespace.\n     * @return {?}\n     */\n    Renderer2.prototype.removeAttribute = function (el, name, namespace) { };\n    /**\n     * Implement this callback to add a class to an element in the DOM.\n     * @abstract\n     * @param {?} el The element.\n     * @param {?} name The class name.\n     * @return {?}\n     */\n    Renderer2.prototype.addClass = function (el, name) { };\n    /**\n     * Implement this callback to remove a class from an element in the DOM.\n     * @abstract\n     * @param {?} el The element.\n     * @param {?} name The class name.\n     * @return {?}\n     */\n    Renderer2.prototype.removeClass = function (el, name) { };\n    /**\n     * Implement this callback to set a CSS style for an element in the DOM.\n     * @abstract\n     * @param {?} el The element.\n     * @param {?} style The name of the style.\n     * @param {?} value The new value.\n     * @param {?=} flags Flags for style variations. No flags are set by default.\n     * @return {?}\n     */\n    Renderer2.prototype.setStyle = function (el, style, value, flags) { };\n    /**\n     * Implement this callback to remove the value from a CSS style for an element in the DOM.\n     * @abstract\n     * @param {?} el The element.\n     * @param {?} style The name of the style.\n     * @param {?=} flags Flags for style variations to remove, if set. ???\n     * @return {?}\n     */\n    Renderer2.prototype.removeStyle = function (el, style, flags) { };\n    /**\n     * Implement this callback to set the value of a property of an element in the DOM.\n     * @abstract\n     * @param {?} el The element.\n     * @param {?} name The property name.\n     * @param {?} value The new value.\n     * @return {?}\n     */\n    Renderer2.prototype.setProperty = function (el, name, value) { };\n    /**\n     * Implement this callback to set the value of a node in the host element.\n     * @abstract\n     * @param {?} node The node.\n     * @param {?} value The new value.\n     * @return {?}\n     */\n    Renderer2.prototype.setValue = function (node, value) { };\n    /**\n     * Implement this callback to start an event listener.\n     * @abstract\n     * @param {?} target The context in which to listen for events. Can be\n     * the entire window or document, the body of the document, or a specific\n     * DOM element.\n     * @param {?} eventName The event to listen for.\n     * @param {?} callback A handler function to invoke when the event occurs.\n     * @return {?} An \"unlisten\" function for disposing of this handler.\n     */\n    Renderer2.prototype.listen = function (target, eventName, callback) { };\n}\n/** @type {?} */\nexport var SWITCH_RENDERER2_FACTORY__POST_R3__ = render3InjectRenderer2;\n/** @type {?} */\nvar SWITCH_RENDERER2_FACTORY__PRE_R3__ = noop;\n/** @type {?} */\nvar SWITCH_RENDERER2_FACTORY = SWITCH_RENDERER2_FACTORY__PRE_R3__;\n//# sourceMappingURL=api.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nvar SecurityContext = {\n    NONE: 0,\n    HTML: 1,\n    STYLE: 2,\n    SCRIPT: 3,\n    URL: 4,\n    RESOURCE_URL: 5,\n};\nexport { SecurityContext };\nSecurityContext[SecurityContext.NONE] = 'NONE';\nSecurityContext[SecurityContext.HTML] = 'HTML';\nSecurityContext[SecurityContext.STYLE] = 'STYLE';\nSecurityContext[SecurityContext.SCRIPT] = 'SCRIPT';\nSecurityContext[SecurityContext.URL] = 'URL';\nSecurityContext[SecurityContext.RESOURCE_URL] = 'RESOURCE_URL';\n/**\n * Sanitizer is used by the views to sanitize potentially dangerous values.\n *\n * \\@publicApi\n * @abstract\n */\nvar /**\n * Sanitizer is used by the views to sanitize potentially dangerous values.\n *\n * \\@publicApi\n * @abstract\n */\nSanitizer = /** @class */ (function () {\n    function Sanitizer() {\n    }\n    return Sanitizer;\n}());\n/**\n * Sanitizer is used by the views to sanitize potentially dangerous values.\n *\n * \\@publicApi\n * @abstract\n */\nexport { Sanitizer };\nif (false) {\n    /**\n     * @abstract\n     * @param {?} context\n     * @param {?} value\n     * @return {?}\n     */\n    Sanitizer.prototype.sanitize = function (context, value) { };\n}\n//# sourceMappingURL=security.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@description Represents the version of Angular\n *\n * \\@publicApi\n */\nvar /**\n * \\@description Represents the version of Angular\n *\n * \\@publicApi\n */\nVersion = /** @class */ (function () {\n    function Version(full) {\n        this.full = full;\n        this.major = full.split('.')[0];\n        this.minor = full.split('.')[1];\n        this.patch = full.split('.').slice(2).join('.');\n    }\n    return Version;\n}());\n/**\n * \\@description Represents the version of Angular\n *\n * \\@publicApi\n */\nexport { Version };\nif (false) {\n    /** @type {?} */\n    Version.prototype.major;\n    /** @type {?} */\n    Version.prototype.minor;\n    /** @type {?} */\n    Version.prototype.patch;\n    /** @type {?} */\n    Version.prototype.full;\n}\n/** *\n * \\@publicApi\n  @type {?} */\nexport var VERSION = new Version('7.1.0-ee8310445');\n//# sourceMappingURL=version.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { InjectionToken } from '../di/injection_token';\nimport { inject } from '../di/injector_compatibility';\nimport { ComponentFactory as viewEngine_ComponentFactory, ComponentRef as viewEngine_ComponentRef } from '../linker/component_factory';\nimport { ComponentFactoryResolver as viewEngine_ComponentFactoryResolver } from '../linker/component_factory_resolver';\nimport { ElementRef as viewEngine_ElementRef } from '../linker/element_ref';\nimport { RendererFactory2 } from '../render/api';\nimport { Sanitizer } from '../sanitization/security';\nimport { VERSION } from '../version';\nimport { assertComponentType, assertDefined } from './assert';\nimport { LifecycleHooksFeature, createRootComponent, createRootComponentView, createRootContext } from './component';\nimport { getComponentDef } from './definition';\nimport { NodeInjector } from './di';\nimport { createLView, createNodeAtIndex, createTView, createViewNode, elementCreate, locateHostElement, refreshDescendantViews } from './instructions';\nimport { domRendererFactory3, isProceduralRenderer } from './interfaces/renderer';\nimport { HEADER_OFFSET, TVIEW } from './interfaces/view';\nimport { enterView, leaveView } from './state';\nimport { defaultScheduler, getTNode } from './util';\nimport { createElementRef } from './view_engine_compatibility';\nimport { RootViewRef } from './view_ref';\nvar ComponentFactoryResolver = /** @class */ (function (_super) {\n    tslib_1.__extends(ComponentFactoryResolver, _super);\n    function ComponentFactoryResolver() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    ComponentFactoryResolver.prototype.resolveComponentFactory = /**\n     * @template T\n     * @param {?} component\n     * @return {?}\n     */\n    function (component) {\n        ngDevMode && assertComponentType(component);\n        /** @type {?} */\n        var componentDef = /** @type {?} */ ((getComponentDef(component)));\n        return new ComponentFactory(componentDef);\n    };\n    return ComponentFactoryResolver;\n}(viewEngine_ComponentFactoryResolver));\nexport { ComponentFactoryResolver };\n/**\n * @param {?} map\n * @return {?}\n */\nfunction toRefArray(map) {\n    /** @type {?} */\n    var array = [];\n    for (var nonMinified in map) {\n        if (map.hasOwnProperty(nonMinified)) {\n            /** @type {?} */\n            var minified = map[nonMinified];\n            array.push({ propName: minified, templateName: nonMinified });\n        }\n    }\n    return array;\n}\n/** *\n * Default {\\@link RootContext} for all components rendered with {\\@link renderComponent}.\n  @type {?} */\nexport var ROOT_CONTEXT = new InjectionToken('ROOT_CONTEXT_TOKEN', { providedIn: 'root', factory: function () { return createRootContext(inject(SCHEDULER)); } });\n/** *\n * A change detection scheduler token for {\\@link RootContext}. This token is the default value used\n * for the default `RootContext` found in the {\\@link ROOT_CONTEXT} token.\n  @type {?} */\nexport var SCHEDULER = new InjectionToken('SCHEDULER_TOKEN', {\n    providedIn: 'root',\n    factory: function () { return defaultScheduler; },\n});\n/** @type {?} */\nvar NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};\n/**\n * @param {?} rootViewInjector\n * @param {?} moduleInjector\n * @return {?}\n */\nfunction createChainedInjector(rootViewInjector, moduleInjector) {\n    return {\n        get: function (token, notFoundValue) {\n            /** @type {?} */\n            var value = rootViewInjector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR);\n            if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n                // Return the value from the root element injector when\n                // - it provides it\n                //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n                return value;\n            }\n            return moduleInjector.get(token, notFoundValue);\n        }\n    };\n}\n/**\n * Render3 implementation of {\\@link viewEngine_ComponentFactory}.\n * @template T\n */\nvar /**\n * Render3 implementation of {\\@link viewEngine_ComponentFactory}.\n * @template T\n */\nComponentFactory = /** @class */ (function (_super) {\n    tslib_1.__extends(ComponentFactory, _super);\n    function ComponentFactory(componentDef) {\n        var _this = _super.call(this) || this;\n        _this.componentDef = componentDef;\n        _this.componentType = componentDef.type;\n        _this.selector = /** @type {?} */ (componentDef.selectors[0][0]);\n        _this.ngContentSelectors = [];\n        return _this;\n    }\n    Object.defineProperty(ComponentFactory.prototype, \"inputs\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return toRefArray(this.componentDef.inputs);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComponentFactory.prototype, \"outputs\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return toRefArray(this.componentDef.outputs);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} injector\n     * @param {?=} projectableNodes\n     * @param {?=} rootSelectorOrNode\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    ComponentFactory.prototype.create = /**\n     * @param {?} injector\n     * @param {?=} projectableNodes\n     * @param {?=} rootSelectorOrNode\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    function (injector, projectableNodes, rootSelectorOrNode, ngModule) {\n        /** @type {?} */\n        var isInternalRootView = rootSelectorOrNode === undefined;\n        /** @type {?} */\n        var rendererFactory;\n        /** @type {?} */\n        var sanitizer = null;\n        if (ngModule) {\n            rendererFactory = /** @type {?} */ (ngModule.injector.get(RendererFactory2));\n            sanitizer = ngModule.injector.get(Sanitizer, null);\n        }\n        else {\n            rendererFactory = domRendererFactory3;\n        }\n        /** @type {?} */\n        var hostRNode = isInternalRootView ?\n            elementCreate(this.selector, rendererFactory.createRenderer(null, this.componentDef)) :\n            locateHostElement(rendererFactory, rootSelectorOrNode);\n        /** @type {?} */\n        var rootFlags = this.componentDef.onPush ? 4 /* Dirty */ | 64 /* IsRoot */ :\n            2 /* CheckAlways */ | 64 /* IsRoot */;\n        /** @type {?} */\n        var rootContext = ngModule && !isInternalRootView ? ngModule.injector.get(ROOT_CONTEXT) : createRootContext();\n        /** @type {?} */\n        var renderer = rendererFactory.createRenderer(hostRNode, this.componentDef);\n        /** @type {?} */\n        var rootViewInjector = ngModule ? createChainedInjector(injector, ngModule.injector) : injector;\n        if (rootSelectorOrNode && hostRNode) {\n            ngDevMode && ngDevMode.rendererSetAttribute++;\n            isProceduralRenderer(renderer) ?\n                renderer.setAttribute(hostRNode, 'ng-version', VERSION.full) :\n                hostRNode.setAttribute('ng-version', VERSION.full);\n        }\n        /** @type {?} */\n        var rootLView = createLView(null, createTView(-1, null, 1, 0, null, null, null), rootContext, rootFlags, rendererFactory, renderer, sanitizer, rootViewInjector);\n        /** @type {?} */\n        var oldLView = enterView(rootLView, null);\n        /** @type {?} */\n        var component;\n        /** @type {?} */\n        var tElementNode;\n        try {\n            if (rendererFactory.begin)\n                rendererFactory.begin();\n            /** @type {?} */\n            var componentView = createRootComponentView(hostRNode, this.componentDef, rootLView, rendererFactory, renderer);\n            tElementNode = /** @type {?} */ (getTNode(0, rootLView));\n            // Transform the arrays of native nodes into a structure that can be consumed by the\n            // projection instruction. This is needed to support the reprojection of these nodes.\n            if (projectableNodes) {\n                /** @type {?} */\n                var index = 0;\n                /** @type {?} */\n                var tView = rootLView[TVIEW];\n                /** @type {?} */\n                var projection = tElementNode.projection = [];\n                for (var i = 0; i < projectableNodes.length; i++) {\n                    /** @type {?} */\n                    var nodeList = projectableNodes[i];\n                    /** @type {?} */\n                    var firstTNode = null;\n                    /** @type {?} */\n                    var previousTNode = null;\n                    for (var j = 0; j < nodeList.length; j++) {\n                        if (tView.firstTemplatePass) {\n                            // For dynamically created components such as ComponentRef, we create a new TView for\n                            // each insert. This is not ideal since we should be sharing the TViews.\n                            // Also the logic here should be shared with `component.ts`'s `renderComponent`\n                            // method.\n                            tView.expandoStartIndex++;\n                            tView.blueprint.splice(++index + HEADER_OFFSET, 0, null);\n                            tView.data.splice(index + HEADER_OFFSET, 0, null);\n                            rootLView.splice(index + HEADER_OFFSET, 0, null);\n                        }\n                        /** @type {?} */\n                        var tNode = createNodeAtIndex(index, 3 /* Element */, /** @type {?} */ (nodeList[j]), null, null);\n                        previousTNode ? (previousTNode.next = tNode) : (firstTNode = tNode);\n                        previousTNode = tNode;\n                    }\n                    projection.push(/** @type {?} */ ((firstTNode)));\n                }\n            }\n            // TODO: should LifecycleHooksFeature and other host features be generated by the compiler and\n            // executed here?\n            // Angular 5 reference: https://stackblitz.com/edit/lifecycle-hooks-vcref\n            component = createRootComponent(componentView, this.componentDef, rootLView, rootContext, [LifecycleHooksFeature]);\n            refreshDescendantViews(rootLView, 1 /* Create */);\n        }\n        finally {\n            leaveView(oldLView, true);\n            if (rendererFactory.end)\n                rendererFactory.end();\n        }\n        /** @type {?} */\n        var componentRef = new ComponentRef(this.componentType, component, createElementRef(viewEngine_ElementRef, tElementNode, rootLView), rootLView, tElementNode);\n        if (isInternalRootView) {\n            /** @type {?} */ ((\n            // The host element of the internal root view is attached to the component's host view node\n            componentRef.hostView._tViewNode)).child = tElementNode;\n        }\n        return componentRef;\n    };\n    return ComponentFactory;\n}(viewEngine_ComponentFactory));\n/**\n * Render3 implementation of {\\@link viewEngine_ComponentFactory}.\n * @template T\n */\nexport { ComponentFactory };\nif (false) {\n    /** @type {?} */\n    ComponentFactory.prototype.selector;\n    /** @type {?} */\n    ComponentFactory.prototype.componentType;\n    /** @type {?} */\n    ComponentFactory.prototype.ngContentSelectors;\n    /** @type {?} */\n    ComponentFactory.prototype.componentDef;\n}\n/** @type {?} */\nvar componentFactoryResolver = new ComponentFactoryResolver();\n/**\n * Creates a ComponentFactoryResolver and stores it on the injector. Or, if the\n * ComponentFactoryResolver\n * already exists, retrieves the existing ComponentFactoryResolver.\n *\n * @return {?} The ComponentFactoryResolver instance to use\n */\nexport function injectComponentFactoryResolver() {\n    return componentFactoryResolver;\n}\n/**\n * Represents an instance of a Component created via a {\\@link ComponentFactory}.\n *\n * `ComponentRef` provides access to the Component Instance as well other objects related to this\n * Component Instance and allows you to destroy the Component Instance via the {\\@link #destroy}\n * method.\n *\n * @template T\n */\nvar /**\n * Represents an instance of a Component created via a {\\@link ComponentFactory}.\n *\n * `ComponentRef` provides access to the Component Instance as well other objects related to this\n * Component Instance and allows you to destroy the Component Instance via the {\\@link #destroy}\n * method.\n *\n * @template T\n */\nComponentRef = /** @class */ (function (_super) {\n    tslib_1.__extends(ComponentRef, _super);\n    function ComponentRef(componentType, instance, location, _rootLView, _tNode) {\n        var _this = _super.call(this) || this;\n        _this.location = location;\n        _this._rootLView = _rootLView;\n        _this._tNode = _tNode;\n        _this.destroyCbs = [];\n        _this.instance = instance;\n        _this.hostView = _this.changeDetectorRef = new RootViewRef(_rootLView);\n        _this.hostView._tViewNode = createViewNode(-1, _rootLView);\n        _this.componentType = componentType;\n        return _this;\n    }\n    Object.defineProperty(ComponentRef.prototype, \"injector\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return new NodeInjector(this._tNode, this._rootLView); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    ComponentRef.prototype.destroy = /**\n     * @return {?}\n     */\n    function () {\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed'); /** @type {?} */\n        ((this.destroyCbs)).forEach(function (fn) { return fn(); });\n        this.destroyCbs = null;\n        this.hostView.destroy();\n    };\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    ComponentRef.prototype.onDestroy = /**\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) {\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed'); /** @type {?} */\n        ((this.destroyCbs)).push(callback);\n    };\n    return ComponentRef;\n}(viewEngine_ComponentRef));\n/**\n * Represents an instance of a Component created via a {\\@link ComponentFactory}.\n *\n * `ComponentRef` provides access to the Component Instance as well other objects related to this\n * Component Instance and allows you to destroy the Component Instance via the {\\@link #destroy}\n * method.\n *\n * @template T\n */\nexport { ComponentRef };\nif (false) {\n    /** @type {?} */\n    ComponentRef.prototype.destroyCbs;\n    /** @type {?} */\n    ComponentRef.prototype.instance;\n    /** @type {?} */\n    ComponentRef.prototype.hostView;\n    /** @type {?} */\n    ComponentRef.prototype.changeDetectorRef;\n    /** @type {?} */\n    ComponentRef.prototype.componentType;\n    /** @type {?} */\n    ComponentRef.prototype.location;\n    /** @type {?} */\n    ComponentRef.prototype._rootLView;\n    /** @type {?} */\n    ComponentRef.prototype._tNode;\n}\n//# sourceMappingURL=component_ref.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This helper class is used to get hold of an inert tree of DOM elements containing dirty HTML\n * that needs sanitizing.\n * Depending upon browser support we must use one of three strategies for doing this.\n * Support: Safari 10.x -> XHR strategy\n * Support: Firefox -> DomParser strategy\n * Default: InertDocument strategy\n */\nvar /**\n * This helper class is used to get hold of an inert tree of DOM elements containing dirty HTML\n * that needs sanitizing.\n * Depending upon browser support we must use one of three strategies for doing this.\n * Support: Safari 10.x -> XHR strategy\n * Support: Firefox -> DomParser strategy\n * Default: InertDocument strategy\n */\nInertBodyHelper = /** @class */ (function () {\n    function InertBodyHelper(defaultDoc) {\n        this.defaultDoc = defaultDoc;\n        this.inertDocument = this.defaultDoc.implementation.createHTMLDocument('sanitization-inert');\n        this.inertBodyElement = this.inertDocument.body;\n        if (this.inertBodyElement == null) {\n            /** @type {?} */\n            var inertHtml = this.inertDocument.createElement('html');\n            this.inertDocument.appendChild(inertHtml);\n            this.inertBodyElement = this.inertDocument.createElement('body');\n            inertHtml.appendChild(this.inertBodyElement);\n        }\n        this.inertBodyElement.innerHTML = '<svg><g onload=\"this.parentNode.remove()\"></g></svg>';\n        if (this.inertBodyElement.querySelector && !this.inertBodyElement.querySelector('svg')) {\n            // We just hit the Safari 10.1 bug - which allows JS to run inside the SVG G element\n            // so use the XHR strategy.\n            this.getInertBodyElement = this.getInertBodyElement_XHR;\n            return;\n        }\n        this.inertBodyElement.innerHTML =\n            '<svg><p><style><img src=\"</style><img src=x onerror=alert(1)//\">';\n        if (this.inertBodyElement.querySelector && this.inertBodyElement.querySelector('svg img')) {\n            // We just hit the Firefox bug - which prevents the inner img JS from being sanitized\n            // so use the DOMParser strategy, if it is available.\n            // If the DOMParser is not available then we are not in Firefox (Server/WebWorker?) so we\n            // fall through to the default strategy below.\n            if (isDOMParserAvailable()) {\n                this.getInertBodyElement = this.getInertBodyElement_DOMParser;\n                return;\n            }\n        }\n        // None of the bugs were hit so it is safe for us to use the default InertDocument strategy\n        this.getInertBodyElement = this.getInertBodyElement_InertDocument;\n    }\n    /**\n     * Use XHR to create and fill an inert body element (on Safari 10.1)\n     * See\n     * https://github.com/cure53/DOMPurify/blob/a992d3a75031cb8bb032e5ea8399ba972bdf9a65/src/purify.js#L439-L449\n     * @param {?} html\n     * @return {?}\n     */\n    InertBodyHelper.prototype.getInertBodyElement_XHR = /**\n     * Use XHR to create and fill an inert body element (on Safari 10.1)\n     * See\n     * https://github.com/cure53/DOMPurify/blob/a992d3a75031cb8bb032e5ea8399ba972bdf9a65/src/purify.js#L439-L449\n     * @param {?} html\n     * @return {?}\n     */\n    function (html) {\n        // We add these extra elements to ensure that the rest of the content is parsed as expected\n        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n        // `<head>` tag.\n        html = '<body><remove></remove>' + html + '</body>';\n        try {\n            html = encodeURI(html);\n        }\n        catch (e) {\n            return null;\n        }\n        /** @type {?} */\n        var xhr = new XMLHttpRequest();\n        xhr.responseType = 'document';\n        xhr.open('GET', 'data:text/html;charset=utf-8,' + html, false);\n        xhr.send(undefined);\n        /** @type {?} */\n        var body = xhr.response.body;\n        body.removeChild(/** @type {?} */ ((body.firstChild)));\n        return body;\n    };\n    /**\n     * Use DOMParser to create and fill an inert body element (on Firefox)\n     * See https://github.com/cure53/DOMPurify/releases/tag/0.6.7\n     *\n     * @param {?} html\n     * @return {?}\n     */\n    InertBodyHelper.prototype.getInertBodyElement_DOMParser = /**\n     * Use DOMParser to create and fill an inert body element (on Firefox)\n     * See https://github.com/cure53/DOMPurify/releases/tag/0.6.7\n     *\n     * @param {?} html\n     * @return {?}\n     */\n    function (html) {\n        // We add these extra elements to ensure that the rest of the content is parsed as expected\n        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n        // `<head>` tag.\n        html = '<body><remove></remove>' + html + '</body>';\n        try {\n            /** @type {?} */\n            var body = /** @type {?} */ (new (/** @type {?} */ (window))\n                .DOMParser()\n                .parseFromString(html, 'text/html')\n                .body);\n            body.removeChild(/** @type {?} */ ((body.firstChild)));\n            return body;\n        }\n        catch (e) {\n            return null;\n        }\n    };\n    /**\n     * Use an HTML5 `template` element, if supported, or an inert body element created via\n     * `createHtmlDocument` to create and fill an inert DOM element.\n     * This is the default sane strategy to use if the browser does not require one of the specialised\n     * strategies above.\n     * @param {?} html\n     * @return {?}\n     */\n    InertBodyHelper.prototype.getInertBodyElement_InertDocument = /**\n     * Use an HTML5 `template` element, if supported, or an inert body element created via\n     * `createHtmlDocument` to create and fill an inert DOM element.\n     * This is the default sane strategy to use if the browser does not require one of the specialised\n     * strategies above.\n     * @param {?} html\n     * @return {?}\n     */\n    function (html) {\n        /** @type {?} */\n        var templateEl = this.inertDocument.createElement('template');\n        if ('content' in templateEl) {\n            templateEl.innerHTML = html;\n            return templateEl;\n        }\n        this.inertBodyElement.innerHTML = html;\n        // Support: IE 9-11 only\n        // strip custom-namespaced attributes on IE<=11\n        if ((/** @type {?} */ (this.defaultDoc)).documentMode) {\n            this.stripCustomNsAttrs(this.inertBodyElement);\n        }\n        return this.inertBodyElement;\n    };\n    /**\n     * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'\n     * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g.\n     * 'ns1:xlink:foo').\n     *\n     * This is undesirable since we don't want to allow any of these custom attributes. This method\n     * strips them all.\n     * @param {?} el\n     * @return {?}\n     */\n    InertBodyHelper.prototype.stripCustomNsAttrs = /**\n     * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'\n     * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g.\n     * 'ns1:xlink:foo').\n     *\n     * This is undesirable since we don't want to allow any of these custom attributes. This method\n     * strips them all.\n     * @param {?} el\n     * @return {?}\n     */\n    function (el) {\n        /** @type {?} */\n        var elAttrs = el.attributes;\n        // loop backwards so that we can support removals.\n        for (var i = elAttrs.length - 1; 0 < i; i--) {\n            /** @type {?} */\n            var attrib = elAttrs.item(i);\n            /** @type {?} */\n            var attrName = /** @type {?} */ ((attrib)).name;\n            if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {\n                el.removeAttribute(attrName);\n            }\n        }\n        /** @type {?} */\n        var childNode = /** @type {?} */ (el.firstChild);\n        while (childNode) {\n            if (childNode.nodeType === Node.ELEMENT_NODE)\n                this.stripCustomNsAttrs(/** @type {?} */ (childNode));\n            childNode = childNode.nextSibling;\n        }\n    };\n    return InertBodyHelper;\n}());\n/**\n * This helper class is used to get hold of an inert tree of DOM elements containing dirty HTML\n * that needs sanitizing.\n * Depending upon browser support we must use one of three strategies for doing this.\n * Support: Safari 10.x -> XHR strategy\n * Support: Firefox -> DomParser strategy\n * Default: InertDocument strategy\n */\nexport { InertBodyHelper };\nif (false) {\n    /** @type {?} */\n    InertBodyHelper.prototype.inertBodyElement;\n    /** @type {?} */\n    InertBodyHelper.prototype.inertDocument;\n    /**\n     * Get an inert DOM element containing DOM created from the dirty HTML string provided.\n     * The implementation of this is determined in the constructor, when the class is instantiated.\n     * @type {?}\n     */\n    InertBodyHelper.prototype.getInertBodyElement;\n    /** @type {?} */\n    InertBodyHelper.prototype.defaultDoc;\n}\n/**\n * We need to determine whether the DOMParser exists in the global context.\n * The try-catch is because, on some browsers, trying to access this property\n * on window can actually throw an error.\n *\n * @suppress {uselessCode}\n * @return {?}\n */\nfunction isDOMParserAvailable() {\n    try {\n        return !!(/** @type {?} */ (window)).DOMParser;\n    }\n    catch (e) {\n        return false;\n    }\n}\n//# sourceMappingURL=inert_body.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { isDevMode } from '../is_dev_mode';\n/** *\n * A pattern that recognizes a commonly useful subset of URLs that are safe.\n *\n * This regular expression matches a subset of URLs that will not cause script\n * execution if used in URL context within a HTML document. Specifically, this\n * regular expression matches if (comment from here on and regex copied from\n * Soy's EscapingConventions):\n * (1) Either a protocol in a whitelist (http, https, mailto or ftp).\n * (2) or no protocol.  A protocol must be followed by a colon. The below\n *     allows that by allowing colons only after one of the characters [/?#].\n *     A colon after a hash (#) must be in the fragment.\n *     Otherwise, a colon after a (?) must be in a query.\n *     Otherwise, a colon after a single solidus (/) must be in a path.\n *     Otherwise, a colon after a double solidus (//) must be in the authority\n *     (before port).\n *\n * The pattern disallows &, used in HTML entity declarations before\n * one of the characters in [/?#]. This disallows HTML entities used in the\n * protocol name, which should never happen, e.g. \"h&#116;tp\" for \"http\".\n * It also disallows HTML entities in the first path part of a relative path,\n * e.g. \"foo&lt;bar/baz\".  Our existing escaping functions should not produce\n * that. More importantly, it disallows masking of a colon,\n * e.g. \"javascript&#58;...\".\n *\n * This regular expression was taken from the Closure sanitization library.\n  @type {?} */\nvar SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;\n/** @type {?} */\nvar SAFE_SRCSET_PATTERN = /^(?:(?:https?|file):|[^&:/?#]*(?:[/?#]|$))/gi;\n/** *\n * A pattern that matches safe data URLs. Only matches image, video and audio types.\n  @type {?} */\nvar DATA_URL_PATTERN = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\\/]+=*$/i;\n/**\n * @param {?} url\n * @return {?}\n */\nexport function _sanitizeUrl(url) {\n    url = String(url);\n    if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN))\n        return url;\n    if (isDevMode()) {\n        console.warn(\"WARNING: sanitizing unsafe URL value \" + url + \" (see http://g.co/ng/security#xss)\");\n    }\n    return 'unsafe:' + url;\n}\n/**\n * @param {?} srcset\n * @return {?}\n */\nexport function sanitizeSrcset(srcset) {\n    srcset = String(srcset);\n    return srcset.split(',').map(function (srcset) { return _sanitizeUrl(srcset.trim()); }).join(', ');\n}\n//# sourceMappingURL=url_sanitizer.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { isDevMode } from '../is_dev_mode';\nimport { InertBodyHelper } from './inert_body';\nimport { _sanitizeUrl, sanitizeSrcset } from './url_sanitizer';\n/**\n * @param {?} tags\n * @return {?}\n */\nfunction tagSet(tags) {\n    /** @type {?} */\n    var res = {};\n    for (var _i = 0, _a = tags.split(','); _i < _a.length; _i++) {\n        var t = _a[_i];\n        res[t] = true;\n    }\n    return res;\n}\n/**\n * @param {...?} sets\n * @return {?}\n */\nfunction merge() {\n    var sets = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        sets[_i] = arguments[_i];\n    }\n    /** @type {?} */\n    var res = {};\n    for (var _a = 0, sets_1 = sets; _a < sets_1.length; _a++) {\n        var s = sets_1[_a];\n        for (var v in s) {\n            if (s.hasOwnProperty(v))\n                res[v] = true;\n        }\n    }\n    return res;\n}\n/** @type {?} */\nvar VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');\n/** @type {?} */\nvar OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');\n/** @type {?} */\nvar OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');\n/** @type {?} */\nvar OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);\n/** @type {?} */\nvar BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' +\n    'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +\n    'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));\n/** @type {?} */\nvar INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' +\n    'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +\n    'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));\n/** @type {?} */\nexport var VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);\n/** @type {?} */\nexport var URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');\n/** @type {?} */\nexport var SRCSET_ATTRS = tagSet('srcset');\n/** @type {?} */\nvar HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +\n    'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +\n    'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +\n    'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +\n    'valign,value,vspace,width');\n/** @type {?} */\nexport var VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);\n/**\n * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\n * attributes.\n */\nvar /**\n * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\n * attributes.\n */\nSanitizingHtmlSerializer = /** @class */ (function () {\n    function SanitizingHtmlSerializer() {\n        this.sanitizedSomething = false;\n        this.buf = [];\n    }\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    SanitizingHtmlSerializer.prototype.sanitizeChildren = /**\n     * @param {?} el\n     * @return {?}\n     */\n    function (el) {\n        /** @type {?} */\n        var current = /** @type {?} */ ((el.firstChild));\n        /** @type {?} */\n        var elementValid = true;\n        while (current) {\n            if (current.nodeType === Node.ELEMENT_NODE) {\n                elementValid = this.startElement(/** @type {?} */ (current));\n            }\n            else if (current.nodeType === Node.TEXT_NODE) {\n                this.chars(/** @type {?} */ ((current.nodeValue)));\n            }\n            else {\n                // Strip non-element, non-text nodes.\n                this.sanitizedSomething = true;\n            }\n            if (elementValid && current.firstChild) {\n                current = /** @type {?} */ ((current.firstChild));\n                continue;\n            }\n            while (current) {\n                // Leaving the element. Walk up and to the right, closing tags as we go.\n                if (current.nodeType === Node.ELEMENT_NODE) {\n                    this.endElement(/** @type {?} */ (current));\n                }\n                /** @type {?} */\n                var next = this.checkClobberedElement(current, /** @type {?} */ ((current.nextSibling)));\n                if (next) {\n                    current = next;\n                    break;\n                }\n                current = this.checkClobberedElement(current, /** @type {?} */ ((current.parentNode)));\n            }\n        }\n        return this.buf.join('');\n    };\n    /**\n     * Outputs only valid Elements.\n     *\n     * Invalid elements are skipped.\n     *\n     * @param {?} element element to sanitize\n     * Returns true if the element is valid.\n     * @return {?}\n     */\n    SanitizingHtmlSerializer.prototype.startElement = /**\n     * Outputs only valid Elements.\n     *\n     * Invalid elements are skipped.\n     *\n     * @param {?} element element to sanitize\n     * Returns true if the element is valid.\n     * @return {?}\n     */\n    function (element) {\n        /** @type {?} */\n        var tagName = element.nodeName.toLowerCase();\n        if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n            this.sanitizedSomething = true;\n            return false;\n        }\n        this.buf.push('<');\n        this.buf.push(tagName);\n        /** @type {?} */\n        var elAttrs = element.attributes;\n        for (var i = 0; i < elAttrs.length; i++) {\n            /** @type {?} */\n            var elAttr = elAttrs.item(i);\n            /** @type {?} */\n            var attrName = /** @type {?} */ ((elAttr)).name;\n            /** @type {?} */\n            var lower = attrName.toLowerCase();\n            if (!VALID_ATTRS.hasOwnProperty(lower)) {\n                this.sanitizedSomething = true;\n                continue;\n            }\n            /** @type {?} */\n            var value = /** @type {?} */ ((elAttr)).value;\n            // TODO(martinprobst): Special case image URIs for data:image/...\n            if (URI_ATTRS[lower])\n                value = _sanitizeUrl(value);\n            if (SRCSET_ATTRS[lower])\n                value = sanitizeSrcset(value);\n            this.buf.push(' ', attrName, '=\"', encodeEntities(value), '\"');\n        }\n        this.buf.push('>');\n        return true;\n    };\n    /**\n     * @param {?} current\n     * @return {?}\n     */\n    SanitizingHtmlSerializer.prototype.endElement = /**\n     * @param {?} current\n     * @return {?}\n     */\n    function (current) {\n        /** @type {?} */\n        var tagName = current.nodeName.toLowerCase();\n        if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {\n            this.buf.push('</');\n            this.buf.push(tagName);\n            this.buf.push('>');\n        }\n    };\n    /**\n     * @param {?} chars\n     * @return {?}\n     */\n    SanitizingHtmlSerializer.prototype.chars = /**\n     * @param {?} chars\n     * @return {?}\n     */\n    function (chars) { this.buf.push(encodeEntities(chars)); };\n    /**\n     * @param {?} node\n     * @param {?} nextNode\n     * @return {?}\n     */\n    SanitizingHtmlSerializer.prototype.checkClobberedElement = /**\n     * @param {?} node\n     * @param {?} nextNode\n     * @return {?}\n     */\n    function (node, nextNode) {\n        if (nextNode &&\n            (node.compareDocumentPosition(nextNode) &\n                Node.DOCUMENT_POSITION_CONTAINED_BY) === Node.DOCUMENT_POSITION_CONTAINED_BY) {\n            throw new Error(\"Failed to sanitize html because the element is clobbered: \" + ((/** @type {?} */ (node))).outerHTML);\n        }\n        return nextNode;\n    };\n    return SanitizingHtmlSerializer;\n}());\nif (false) {\n    /** @type {?} */\n    SanitizingHtmlSerializer.prototype.sanitizedSomething;\n    /** @type {?} */\n    SanitizingHtmlSerializer.prototype.buf;\n}\n/** @type {?} */\nvar SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n/** @type {?} */\nvar NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\n/**\n * Escapes all potentially dangerous characters, so that the\n * resulting string can be safely inserted into attribute or\n * element text.\n * @param {?} value\n * @return {?}\n */\nfunction encodeEntities(value) {\n    return value.replace(/&/g, '&amp;')\n        .replace(SURROGATE_PAIR_REGEXP, function (match) {\n        /** @type {?} */\n        var hi = match.charCodeAt(0);\n        /** @type {?} */\n        var low = match.charCodeAt(1);\n        return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\n    })\n        .replace(NON_ALPHANUMERIC_REGEXP, function (match) { return '&#' + match.charCodeAt(0) + ';'; })\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;');\n}\n/** @type {?} */\nvar inertBodyHelper;\n/**\n * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\n * the DOM in a browser environment.\n * @param {?} defaultDoc\n * @param {?} unsafeHtmlInput\n * @return {?}\n */\nexport function _sanitizeHtml(defaultDoc, unsafeHtmlInput) {\n    /** @type {?} */\n    var inertBodyElement = null;\n    try {\n        inertBodyHelper = inertBodyHelper || new InertBodyHelper(defaultDoc);\n        /** @type {?} */\n        var unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';\n        inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n        /** @type {?} */\n        var mXSSAttempts = 5;\n        /** @type {?} */\n        var parsedHtml = unsafeHtml;\n        do {\n            if (mXSSAttempts === 0) {\n                throw new Error('Failed to sanitize html because the input is unstable');\n            }\n            mXSSAttempts--;\n            unsafeHtml = parsedHtml;\n            parsedHtml = /** @type {?} */ ((inertBodyElement)).innerHTML;\n            inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n        } while (unsafeHtml !== parsedHtml);\n        /** @type {?} */\n        var sanitizer = new SanitizingHtmlSerializer();\n        /** @type {?} */\n        var safeHtml = sanitizer.sanitizeChildren(/** @type {?} */ (getTemplateContent(/** @type {?} */ ((inertBodyElement)))) || inertBodyElement);\n        if (isDevMode() && sanitizer.sanitizedSomething) {\n            console.warn('WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).');\n        }\n        return safeHtml;\n    }\n    finally {\n        // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.\n        if (inertBodyElement) {\n            /** @type {?} */\n            var parent_1 = getTemplateContent(inertBodyElement) || inertBodyElement;\n            while (parent_1.firstChild) {\n                parent_1.removeChild(parent_1.firstChild);\n            }\n        }\n    }\n}\n/**\n * @param {?} el\n * @return {?}\n */\nexport function getTemplateContent(el) {\n    return 'content' in (/** @type {?} */ (el /** Microsoft/TypeScript#21517 */) /** Microsoft/TypeScript#21517 */) && isTemplateElement(el) ?\n        el.content :\n        null;\n}\n/**\n * @param {?} el\n * @return {?}\n */\nfunction isTemplateElement(el) {\n    return el.nodeType === Node.ELEMENT_NODE && el.nodeName === 'TEMPLATE';\n}\n//# sourceMappingURL=html_sanitizer.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { SRCSET_ATTRS, URI_ATTRS, VALID_ATTRS, VALID_ELEMENTS, getTemplateContent } from '../sanitization/html_sanitizer';\nimport { InertBodyHelper } from '../sanitization/inert_body';\nimport { _sanitizeUrl, sanitizeSrcset } from '../sanitization/url_sanitizer';\nimport { assertDefined, assertEqual, assertGreaterThan } from './assert';\nimport { allocExpando, createNodeAtIndex, elementAttribute, load, textBinding } from './instructions';\nimport { NATIVE, RENDER_PARENT } from './interfaces/container';\nimport { COMMENT_MARKER, ELEMENT_MARKER } from './interfaces/i18n';\nimport { BINDING_INDEX, HEADER_OFFSET, HOST_NODE, RENDERER, TVIEW } from './interfaces/view';\nimport { appendChild, createTextNode, removeChild } from './node_manipulation';\nimport { getIsParent, getLView, getPreviousOrParentTNode, setIsParent, setPreviousOrParentTNode } from './state';\nimport { NO_CHANGE } from './tokens';\nimport { addAllToArray, getNativeByIndex, getNativeByTNode, getTNode, isLContainer, stringify } from './util';\n/** @type {?} */\nvar MARKER = \"\\uFFFD\";\n/** @type {?} */\nvar ICU_BLOCK_REGEX = /^\\s*(ï¿½\\d+ï¿½)\\s*,\\s*(select|plural)\\s*,/;\n/** @type {?} */\nvar SUBTEMPLATE_REGEXP = /ï¿½\\/?\\*(\\d+:\\d+)ï¿½/gi;\n/** @type {?} */\nvar PH_REGEXP = /ï¿½(\\/?[#*]\\d+):?\\d*ï¿½/gi;\n/** @type {?} */\nvar BINDING_REGEXP = /ï¿½(\\d+):?\\d*ï¿½/gi;\n/** @type {?} */\nvar ICU_REGEXP = /({\\s*ï¿½\\d+ï¿½\\s*,\\s*\\S{6}\\s*,[\\s\\S]*})/gi;\n/** @type {?} */\nvar PP_PLACEHOLDERS = /\\[(ï¿½.+?ï¿½?)\\]/g;\n/** @type {?} */\nvar PP_ICU_VARS = /({\\s*)(VAR_(PLURAL|SELECT)(_\\d+)?)(\\s*,)/g;\n/** @type {?} */\nvar PP_ICUS = /ï¿½I18N_EXP_(ICU(_\\d+)?)ï¿½/g;\n/**\n * @record\n */\nfunction IcuExpression() { }\n/** @type {?} */\nIcuExpression.prototype.type;\n/** @type {?} */\nIcuExpression.prototype.mainBinding;\n/** @type {?} */\nIcuExpression.prototype.cases;\n/** @type {?} */\nIcuExpression.prototype.values;\n/**\n * @record\n */\nfunction IcuCase() { }\n/**\n * Number of slots to allocate in expando for this case.\n *\n * This is the max number of DOM elements which will be created by this i18n + ICU blocks. When\n * the DOM elements are being created they are stored in the EXPANDO, so that update OpCodes can\n * write into them.\n * @type {?}\n */\nIcuCase.prototype.vars;\n/**\n * An optional array of child/sub ICUs.\n * @type {?}\n */\nIcuCase.prototype.childIcus;\n/**\n * A set of OpCodes to apply in order to build up the DOM render tree for the ICU\n * @type {?}\n */\nIcuCase.prototype.create;\n/**\n * A set of OpCodes to apply in order to destroy the DOM render tree for the ICU.\n * @type {?}\n */\nIcuCase.prototype.remove;\n/**\n * A set of OpCodes to apply in order to update the DOM render tree for the ICU bindings.\n * @type {?}\n */\nIcuCase.prototype.update;\n/**\n * Breaks pattern into strings and top level {...} blocks.\n * Can be used to break a message into text and ICU expressions, or to break an ICU expression into\n * keys and cases.\n * Original code from closure library, modified for Angular.\n *\n * @param {?} pattern (sub)Pattern to be broken.\n *\n * @return {?}\n */\nfunction extractParts(pattern) {\n    if (!pattern) {\n        return [];\n    }\n    /** @type {?} */\n    var prevPos = 0;\n    /** @type {?} */\n    var braceStack = [];\n    /** @type {?} */\n    var results = [];\n    /** @type {?} */\n    var braces = /[{}]/g;\n    // lastIndex doesn't get set to 0 so we have to.\n    braces.lastIndex = 0;\n    /** @type {?} */\n    var match;\n    while (match = braces.exec(pattern)) {\n        /** @type {?} */\n        var pos = match.index;\n        if (match[0] == '}') {\n            braceStack.pop();\n            if (braceStack.length == 0) {\n                /** @type {?} */\n                var block = pattern.substring(prevPos, pos);\n                if (ICU_BLOCK_REGEX.test(block)) {\n                    results.push(parseICUBlock(block));\n                }\n                else if (block) { // Don't push empty strings\n                    // Don't push empty strings\n                    results.push(block);\n                }\n                prevPos = pos + 1;\n            }\n        }\n        else {\n            if (braceStack.length == 0) {\n                /** @type {?} */\n                var substring_1 = pattern.substring(prevPos, pos);\n                results.push(substring_1);\n                prevPos = pos + 1;\n            }\n            braceStack.push('{');\n        }\n    }\n    /** @type {?} */\n    var substring = pattern.substring(prevPos);\n    if (substring != '') {\n        results.push(substring);\n    }\n    return results;\n}\n/**\n * Parses text containing an ICU expression and produces a JSON object for it.\n * Original code from closure library, modified for Angular.\n *\n * @param {?} pattern Text containing an ICU expression that needs to be parsed.\n *\n * @return {?}\n */\nfunction parseICUBlock(pattern) {\n    /** @type {?} */\n    var cases = [];\n    /** @type {?} */\n    var values = [];\n    /** @type {?} */\n    var icuType = 1 /* plural */;\n    /** @type {?} */\n    var mainBinding = 0;\n    pattern = pattern.replace(ICU_BLOCK_REGEX, function (str, binding, type) {\n        if (type === 'select') {\n            icuType = 0 /* select */;\n        }\n        else {\n            icuType = 1 /* plural */;\n        }\n        mainBinding = parseInt(binding.substr(1), 10);\n        return '';\n    });\n    /** @type {?} */\n    var parts = /** @type {?} */ (extractParts(pattern));\n    // Looking for (key block)+ sequence. One of the keys has to be \"other\".\n    for (var pos = 0; pos < parts.length;) {\n        /** @type {?} */\n        var key = parts[pos++].trim();\n        if (icuType === 1 /* plural */) {\n            // Key can be \"=x\", we just want \"x\"\n            key = key.replace(/\\s*(?:=)?(\\w+)\\s*/, '$1');\n        }\n        if (key.length) {\n            cases.push(key);\n        }\n        /** @type {?} */\n        var blocks = /** @type {?} */ (extractParts(parts[pos++]));\n        if (blocks.length) {\n            values.push(blocks);\n        }\n    }\n    assertGreaterThan(cases.indexOf('other'), -1, 'Missing key \"other\" in ICU statement.');\n    // TODO(ocombe): support ICU expressions in attributes, see #21615\n    return { type: icuType, mainBinding: mainBinding, cases: cases, values: values };\n}\n/**\n * Removes everything inside the sub-templates of a message.\n * @param {?} message\n * @return {?}\n */\nfunction removeInnerTemplateTranslation(message) {\n    /** @type {?} */\n    var match;\n    /** @type {?} */\n    var res = '';\n    /** @type {?} */\n    var index = 0;\n    /** @type {?} */\n    var inTemplate = false;\n    /** @type {?} */\n    var tagMatched;\n    while ((match = SUBTEMPLATE_REGEXP.exec(message)) !== null) {\n        if (!inTemplate) {\n            res += message.substring(index, match.index + match[0].length);\n            tagMatched = match[1];\n            inTemplate = true;\n        }\n        else {\n            if (match[0] === MARKER + \"/*\" + tagMatched + MARKER) {\n                index = match.index;\n                inTemplate = false;\n            }\n        }\n    }\n    ngDevMode &&\n        assertEqual(inTemplate, false, \"Tag mismatch: unable to find the end of the sub-template in the translation \\\"\" + message + \"\\\"\");\n    res += message.substr(index);\n    return res;\n}\n/**\n * Extracts a part of a message and removes the rest.\n *\n * This method is used for extracting a part of the message associated with a template. A translated\n * message can span multiple templates.\n *\n * Example:\n * ```\n * <div i18n>Translate <span *ngIf>me</span>!</div>\n * ```\n *\n * @param {?} message The message to crop\n * @param {?=} subTemplateIndex Index of the sub-template to extract. If undefined it returns the\n * external template and removes all sub-templates.\n * @return {?}\n */\nexport function getTranslationForTemplate(message, subTemplateIndex) {\n    if (typeof subTemplateIndex !== 'number') {\n        // We want the root template message, ignore all sub-templates\n        return removeInnerTemplateTranslation(message);\n    }\n    else {\n        /** @type {?} */\n        var start = message.indexOf(\":\" + subTemplateIndex + MARKER) + 2 + subTemplateIndex.toString().length;\n        /** @type {?} */\n        var end = message.search(new RegExp(MARKER + \"\\\\/\\\\*\\\\d+:\" + subTemplateIndex + MARKER));\n        return removeInnerTemplateTranslation(message.substring(start, end));\n    }\n}\n/**\n * Generate the OpCodes to update the bindings of a string.\n *\n * @param {?} str The string containing the bindings.\n * @param {?} destinationNode Index of the destination node which will receive the binding.\n * @param {?=} attrName Name of the attribute, if the string belongs to an attribute.\n * @param {?=} sanitizeFn Sanitization function used to sanitize the string after update, if necessary.\n * @return {?}\n */\nfunction generateBindingUpdateOpCodes(str, destinationNode, attrName, sanitizeFn) {\n    if (sanitizeFn === void 0) { sanitizeFn = null; }\n    /** @type {?} */\n    var updateOpCodes = [null, null];\n    /** @type {?} */\n    var textParts = str.split(BINDING_REGEXP);\n    /** @type {?} */\n    var mask = 0;\n    for (var j = 0; j < textParts.length; j++) {\n        /** @type {?} */\n        var textValue = textParts[j];\n        if (j & 1) {\n            /** @type {?} */\n            var bindingIndex = parseInt(textValue, 10);\n            updateOpCodes.push(-1 - bindingIndex);\n            mask = mask | toMaskBit(bindingIndex);\n        }\n        else if (textValue !== '') {\n            // Even indexes are text\n            updateOpCodes.push(textValue);\n        }\n    }\n    updateOpCodes.push(destinationNode << 2 /* SHIFT_REF */ |\n        (attrName ? 1 /* Attr */ : 0 /* Text */));\n    if (attrName) {\n        updateOpCodes.push(attrName, sanitizeFn);\n    }\n    updateOpCodes[0] = mask;\n    updateOpCodes[1] = updateOpCodes.length - 2;\n    return updateOpCodes;\n}\n/**\n * @param {?} icuExpression\n * @param {?=} mask\n * @return {?}\n */\nfunction getBindingMask(icuExpression, mask) {\n    if (mask === void 0) { mask = 0; }\n    mask = mask | toMaskBit(icuExpression.mainBinding);\n    /** @type {?} */\n    var match;\n    for (var i = 0; i < icuExpression.values.length; i++) {\n        /** @type {?} */\n        var valueArr = icuExpression.values[i];\n        for (var j = 0; j < valueArr.length; j++) {\n            /** @type {?} */\n            var value = valueArr[j];\n            if (typeof value === 'string') {\n                while (match = BINDING_REGEXP.exec(value)) {\n                    mask = mask | toMaskBit(parseInt(match[1], 10));\n                }\n            }\n            else {\n                mask = getBindingMask(/** @type {?} */ (value), mask);\n            }\n        }\n    }\n    return mask;\n}\n/** @type {?} */\nvar i18nIndexStack = [];\n/** @type {?} */\nvar i18nIndexStackPointer = -1;\n/**\n * Convert binding index to mask bit.\n *\n * Each index represents a single bit on the bit-mask. Because bit-mask only has 32 bits, we make\n * the 32nd bit share all masks for all bindings higher than 32. Since it is extremely rare to have\n * more than 32 bindings this will be hit very rarely. The downside of hitting this corner case is\n * that we will execute binding code more often than necessary. (penalty of performance)\n * @param {?} bindingIndex\n * @return {?}\n */\nfunction toMaskBit(bindingIndex) {\n    return 1 << Math.min(bindingIndex, 31);\n}\n/** @type {?} */\nvar parentIndexStack = [];\n/**\n * Marks a block of text as translatable.\n *\n * The instructions `i18nStart` and `i18nEnd` mark the translation block in the template.\n * The translation `message` is the value which is locale specific. The translation string may\n * contain placeholders which associate inner elements and sub-templates within the translation.\n *\n * The translation `message` placeholders are:\n * - `ï¿½{index}(:{block})ï¿½`: *Binding Placeholder*: Marks a location where an expression will be\n *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n *   `block` that matches the sub-template in which it was declared.\n * - `ï¿½#{index}(:{block})ï¿½`/`ï¿½/#{index}(:{block})ï¿½`: *Element Placeholder*:  Marks the beginning\n *   and end of DOM element that were embedded in the original translation block. The placeholder\n *   `index` points to the element index in the template instructions set. An optional `block` that\n *   matches the sub-template in which it was declared.\n * - `ï¿½*{index}:{block}ï¿½`/`ï¿½/*{index}:{block}ï¿½`: *Sub-template Placeholder*: Sub-templates must be\n *   split up and translated separately in each angular template function. The `index` points to the\n *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n *\n * @param {?} index A unique index of the translation in the static block.\n * @param {?} message The translation message.\n * @param {?=} subTemplateIndex Optional sub-template index in the `message`.\n * @return {?}\n */\nexport function i18nStart(index, message, subTemplateIndex) {\n    /** @type {?} */\n    var tView = getLView()[TVIEW];\n    ngDevMode && assertDefined(tView, \"tView should be defined\");\n    ngDevMode &&\n        assertEqual(tView.firstTemplatePass, true, \"You should only call i18nEnd on first template pass\");\n    if (tView.firstTemplatePass && tView.data[index + HEADER_OFFSET] === null) {\n        i18nStartFirstPass(tView, index, message, subTemplateIndex);\n    }\n}\n/**\n * See `i18nStart` above.\n * @param {?} tView\n * @param {?} index\n * @param {?} message\n * @param {?=} subTemplateIndex\n * @return {?}\n */\nfunction i18nStartFirstPass(tView, index, message, subTemplateIndex) {\n    i18nIndexStack[++i18nIndexStackPointer] = index;\n    /** @type {?} */\n    var viewData = getLView();\n    /** @type {?} */\n    var expandoStartIndex = tView.blueprint.length - HEADER_OFFSET;\n    /** @type {?} */\n    var previousOrParentTNode = getPreviousOrParentTNode();\n    /** @type {?} */\n    var parentTNode = getIsParent() ? getPreviousOrParentTNode() :\n        previousOrParentTNode && previousOrParentTNode.parent;\n    /** @type {?} */\n    var parentIndex = parentTNode && parentTNode !== viewData[HOST_NODE] ?\n        parentTNode.index - HEADER_OFFSET :\n        index;\n    /** @type {?} */\n    var parentIndexPointer = 0;\n    parentIndexStack[parentIndexPointer] = parentIndex;\n    /** @type {?} */\n    var createOpCodes = [];\n    // If the previous node wasn't the direct parent then we have a translation without top level\n    // element and we need to keep a reference of the previous element if there is one\n    if (index > 0 && previousOrParentTNode !== parentTNode) {\n        // Create an OpCode to select the previous TNode\n        createOpCodes.push(previousOrParentTNode.index << 3 /* SHIFT_REF */ | 0 /* Select */);\n    }\n    /** @type {?} */\n    var updateOpCodes = [];\n    /** @type {?} */\n    var icuExpressions = [];\n    /** @type {?} */\n    var templateTranslation = getTranslationForTemplate(message, subTemplateIndex);\n    /** @type {?} */\n    var msgParts = templateTranslation.split(PH_REGEXP);\n    for (var i = 0; i < msgParts.length; i++) {\n        /** @type {?} */\n        var value = msgParts[i];\n        if (i & 1) {\n            // Odd indexes are placeholders (elements and sub-templates)\n            if (value.charAt(0) === '/') {\n                // It is a closing tag\n                if (value.charAt(1) === '#') {\n                    /** @type {?} */\n                    var phIndex = parseInt(value.substr(2), 10);\n                    parentIndex = parentIndexStack[--parentIndexPointer];\n                    createOpCodes.push(phIndex << 3 /* SHIFT_REF */ | 5 /* ElementEnd */);\n                }\n            }\n            else {\n                /** @type {?} */\n                var phIndex = parseInt(value.substr(1), 10);\n                // The value represents a placeholder that we move to the designated index\n                createOpCodes.push(phIndex << 3 /* SHIFT_REF */ | 0 /* Select */, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                if (value.charAt(0) === '#') {\n                    parentIndexStack[++parentIndexPointer] = parentIndex = phIndex;\n                }\n            }\n        }\n        else {\n            /** @type {?} */\n            var parts = value.split(ICU_REGEXP);\n            for (var j = 0; j < parts.length; j++) {\n                value = parts[j];\n                if (j & 1) {\n                    // Odd indexes are ICU expressions\n                    // Create the comment node that will anchor the ICU expression\n                    allocExpando(viewData);\n                    /** @type {?} */\n                    var icuNodeIndex = tView.blueprint.length - 1 - HEADER_OFFSET;\n                    createOpCodes.push(COMMENT_MARKER, ngDevMode ? \"ICU \" + icuNodeIndex : '', parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                    /** @type {?} */\n                    var icuExpression = parseICUBlock(value.substr(1, value.length - 2));\n                    /** @type {?} */\n                    var mask = getBindingMask(icuExpression);\n                    icuStart(icuExpressions, icuExpression, icuNodeIndex, icuNodeIndex);\n                    /** @type {?} */\n                    var tIcuIndex = icuExpressions.length - 1;\n                    updateOpCodes.push(toMaskBit(icuExpression.mainBinding), // mask of the main binding\n                    3, // skip 3 opCodes if not changed\n                    // skip 3 opCodes if not changed\n                    -1 - icuExpression.mainBinding, icuNodeIndex << 2 /* SHIFT_REF */ | 2 /* IcuSwitch */, tIcuIndex, mask, // mask of all the bindings of this ICU expression\n                    2, // skip 2 opCodes if not changed\n                    // skip 2 opCodes if not changed\n                    icuNodeIndex << 2 /* SHIFT_REF */ | 3 /* IcuUpdate */, tIcuIndex);\n                }\n                else if (value !== '') {\n                    /** @type {?} */\n                    var hasBinding = value.match(BINDING_REGEXP);\n                    // Create text nodes\n                    allocExpando(viewData);\n                    createOpCodes.push(\n                    // If there is a binding, the value will be set during update\n                    hasBinding ? '' : value, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                    if (hasBinding) {\n                        addAllToArray(generateBindingUpdateOpCodes(value, tView.blueprint.length - 1 - HEADER_OFFSET), updateOpCodes);\n                    }\n                }\n            }\n        }\n    }\n    /** @type {?} */\n    var tI18n = {\n        vars: tView.blueprint.length - HEADER_OFFSET - expandoStartIndex,\n        expandoStartIndex: expandoStartIndex,\n        create: createOpCodes,\n        update: updateOpCodes,\n        icus: icuExpressions.length ? icuExpressions : null,\n    };\n    tView.data[index + HEADER_OFFSET] = tI18n;\n}\n/**\n * @param {?} tNode\n * @param {?} parentTNode\n * @param {?} previousTNode\n * @return {?}\n */\nfunction appendI18nNode(tNode, parentTNode, previousTNode) {\n    ngDevMode && ngDevMode.rendererMoveNode++;\n    /** @type {?} */\n    var viewData = getLView();\n    if (!previousTNode) {\n        previousTNode = parentTNode;\n    }\n    // re-organize node tree to put this node in the correct position.\n    if (previousTNode === parentTNode && tNode !== parentTNode.child) {\n        tNode.next = parentTNode.child;\n        parentTNode.child = tNode;\n    }\n    else if (previousTNode !== parentTNode && tNode !== previousTNode.next) {\n        tNode.next = previousTNode.next;\n        previousTNode.next = tNode;\n    }\n    else {\n        tNode.next = null;\n    }\n    if (parentTNode !== viewData[HOST_NODE]) {\n        tNode.parent = /** @type {?} */ (parentTNode);\n    }\n    appendChild(getNativeByTNode(tNode, viewData), tNode, viewData);\n    /** @type {?} */\n    var slotValue = viewData[tNode.index];\n    if (tNode.type !== 0 /* Container */ && isLContainer(slotValue)) {\n        // Nodes that inject ViewContainerRef also have a comment node that should be moved\n        appendChild(slotValue[NATIVE], tNode, viewData);\n    }\n    return tNode;\n}\n/**\n * Handles message string post-processing for internationalization.\n *\n * Handles message string post-processing by transforming it from intermediate\n * format (that might contain some markers that we need to replace) to the final\n * form, consumable by i18nStart instruction. Post processing steps include:\n *\n * 1. Resolve all multi-value cases (like [ï¿½*1:1ï¿½ï¿½#2:1ï¿½|ï¿½#4:1ï¿½|ï¿½5ï¿½])\n * 2. Replace all ICU vars (like \"VAR_PLURAL\")\n * 3. Replace all ICU references with corresponding values (like ï¿½ICU_EXP_ICU_1ï¿½)\n *    in case multiple ICUs have the same placeholder name\n *\n * \\@publicAPI\n * @param {?} message Raw translation string for post processing\n * @param {?} replacements Set of replacements that should be applied\n *\n * @return {?} Transformed string that can be consumed by i18nStart instruction\n *\n */\nexport function i18nPostprocess(message, replacements) {\n    /** @type {?} */\n    var matches = {};\n    /** @type {?} */\n    var result = message.replace(PP_PLACEHOLDERS, function (_match, content) {\n        if (!matches[content]) {\n            matches[content] = content.split('|');\n        }\n        if (!matches[content].length) {\n            throw new Error(\"i18n postprocess: unmatched placeholder - \" + content);\n        }\n        return /** @type {?} */ ((matches[content].shift()));\n    });\n    /** @type {?} */\n    var hasUnmatchedValues = Object.keys(matches).some(function (key) { return !!matches[key].length; });\n    if (hasUnmatchedValues) {\n        throw new Error(\"i18n postprocess: unmatched values - \" + JSON.stringify(matches));\n    }\n    // return current result if no replacements specified\n    if (!Object.keys(replacements).length) {\n        return result;\n    }\n    //\n    // Step 2: replace all ICU vars (like \"VAR_PLURAL\")\n    //\n    result = result.replace(PP_ICU_VARS, function (match, start, key, _type, _idx, end) {\n        return replacements.hasOwnProperty(key) ? \"\" + start + replacements[key] + end : match;\n    });\n    //\n    // Step 3: replace all ICU references with corresponding values (like ï¿½ICU_EXP_ICU_1ï¿½)\n    // in case multiple ICUs have the same placeholder name\n    //\n    result = result.replace(PP_ICUS, function (match, key) {\n        if (replacements.hasOwnProperty(key)) {\n            /** @type {?} */\n            var list = /** @type {?} */ (replacements[key]);\n            if (!list.length) {\n                throw new Error(\"i18n postprocess: unmatched ICU - \" + match + \" with key: \" + key);\n            }\n            return /** @type {?} */ ((list.shift()));\n        }\n        return match;\n    });\n    return result;\n}\n/**\n * Translates a translation block marked by `i18nStart` and `i18nEnd`. It inserts the text/ICU nodes\n * into the render tree, moves the placeholder nodes and removes the deleted nodes.\n * @return {?}\n */\nexport function i18nEnd() {\n    /** @type {?} */\n    var tView = getLView()[TVIEW];\n    ngDevMode && assertDefined(tView, \"tView should be defined\");\n    ngDevMode &&\n        assertEqual(tView.firstTemplatePass, true, \"You should only call i18nEnd on first template pass\");\n    if (tView.firstTemplatePass) {\n        i18nEndFirstPass(tView);\n    }\n}\n/**\n * See `i18nEnd` above.\n * @param {?} tView\n * @return {?}\n */\nfunction i18nEndFirstPass(tView) {\n    /** @type {?} */\n    var viewData = getLView();\n    ngDevMode && assertEqual(viewData[BINDING_INDEX], viewData[TVIEW].bindingStartIndex, 'i18nEnd should be called before any binding');\n    /** @type {?} */\n    var rootIndex = i18nIndexStack[i18nIndexStackPointer--];\n    /** @type {?} */\n    var tI18n = /** @type {?} */ (tView.data[rootIndex + HEADER_OFFSET]);\n    ngDevMode && assertDefined(tI18n, \"You should call i18nStart before i18nEnd\");\n    /** @type {?} */\n    var previousOrParentTNode = getPreviousOrParentTNode();\n    /** @type {?} */\n    var visitedPlaceholders = readCreateOpCodes(rootIndex, tI18n.create, tI18n.expandoStartIndex, viewData);\n    // Remove deleted placeholders\n    // The last placeholder that was added before `i18nEnd` is `previousOrParentTNode`\n    for (var i = rootIndex + 1; i <= previousOrParentTNode.index - HEADER_OFFSET; i++) {\n        if (visitedPlaceholders.indexOf(i) === -1) {\n            removeNode(i, viewData);\n        }\n    }\n}\n/**\n * @param {?} index\n * @param {?} createOpCodes\n * @param {?} expandoStartIndex\n * @param {?} viewData\n * @return {?}\n */\nfunction readCreateOpCodes(index, createOpCodes, expandoStartIndex, viewData) {\n    /** @type {?} */\n    var renderer = getLView()[RENDERER];\n    /** @type {?} */\n    var currentTNode = null;\n    /** @type {?} */\n    var previousTNode = null;\n    /** @type {?} */\n    var visitedPlaceholders = [];\n    for (var i = 0; i < createOpCodes.length; i++) {\n        /** @type {?} */\n        var opCode = createOpCodes[i];\n        if (typeof opCode == 'string') {\n            /** @type {?} */\n            var textRNode = createTextNode(opCode, renderer);\n            ngDevMode && ngDevMode.rendererCreateTextNode++;\n            previousTNode = currentTNode;\n            currentTNode =\n                createNodeAtIndex(expandoStartIndex++, 3 /* Element */, textRNode, null, null);\n            setIsParent(false);\n        }\n        else if (typeof opCode == 'number') {\n            switch (opCode & 7 /* MASK_OPCODE */) {\n                case 1 /* AppendChild */:\n                    /** @type {?} */\n                    var destinationNodeIndex = opCode >>> 17 /* SHIFT_PARENT */;\n                    /** @type {?} */\n                    var destinationTNode = void 0;\n                    if (destinationNodeIndex === index) {\n                        // If the destination node is `i18nStart`, we don't have a\n                        // top-level node and we should use the host node instead\n                        destinationTNode = /** @type {?} */ ((viewData[HOST_NODE]));\n                    }\n                    else {\n                        destinationTNode = getTNode(destinationNodeIndex, viewData);\n                    }\n                    ngDevMode &&\n                        assertDefined(/** @type {?} */ ((currentTNode)), \"You need to create or select a node before you can insert it into the DOM\");\n                    previousTNode = appendI18nNode(/** @type {?} */ ((currentTNode)), destinationTNode, previousTNode);\n                    destinationTNode.next = null;\n                    break;\n                case 0 /* Select */:\n                    /** @type {?} */\n                    var nodeIndex = opCode >>> 3 /* SHIFT_REF */;\n                    visitedPlaceholders.push(nodeIndex);\n                    previousTNode = currentTNode;\n                    currentTNode = getTNode(nodeIndex, viewData);\n                    if (currentTNode) {\n                        setPreviousOrParentTNode(currentTNode);\n                        if (currentTNode.type === 3 /* Element */) {\n                            setIsParent(true);\n                        }\n                    }\n                    break;\n                case 5 /* ElementEnd */:\n                    /** @type {?} */\n                    var elementIndex = opCode >>> 3 /* SHIFT_REF */;\n                    previousTNode = currentTNode = getTNode(elementIndex, viewData);\n                    setPreviousOrParentTNode(currentTNode);\n                    setIsParent(false);\n                    break;\n                case 4 /* Attr */:\n                    /** @type {?} */\n                    var elementNodeIndex = opCode >>> 3 /* SHIFT_REF */;\n                    /** @type {?} */\n                    var attrName = /** @type {?} */ (createOpCodes[++i]);\n                    /** @type {?} */\n                    var attrValue = /** @type {?} */ (createOpCodes[++i]);\n                    elementAttribute(elementNodeIndex, attrName, attrValue);\n                    break;\n                default:\n                    throw new Error(\"Unable to determine the type of mutate operation for \\\"\" + opCode + \"\\\"\");\n            }\n        }\n        else {\n            switch (opCode) {\n                case COMMENT_MARKER:\n                    /** @type {?} */\n                    var commentValue = /** @type {?} */ (createOpCodes[++i]);\n                    ngDevMode && assertEqual(typeof commentValue, 'string', \"Expected \\\"\" + commentValue + \"\\\" to be a comment node value\");\n                    /** @type {?} */\n                    var commentRNode = renderer.createComment(commentValue);\n                    ngDevMode && ngDevMode.rendererCreateComment++;\n                    previousTNode = currentTNode;\n                    currentTNode = createNodeAtIndex(expandoStartIndex++, 5 /* IcuContainer */, commentRNode, null, null);\n                    (/** @type {?} */ (currentTNode)).activeCaseIndex = null;\n                    // We will add the case nodes later, during the update phase\n                    setIsParent(false);\n                    break;\n                case ELEMENT_MARKER:\n                    /** @type {?} */\n                    var tagNameValue = /** @type {?} */ (createOpCodes[++i]);\n                    ngDevMode && assertEqual(typeof tagNameValue, 'string', \"Expected \\\"\" + tagNameValue + \"\\\" to be an element node tag name\");\n                    /** @type {?} */\n                    var elementRNode = renderer.createElement(tagNameValue);\n                    ngDevMode && ngDevMode.rendererCreateElement++;\n                    previousTNode = currentTNode;\n                    currentTNode = createNodeAtIndex(expandoStartIndex++, 3 /* Element */, elementRNode, tagNameValue, null);\n                    break;\n                default:\n                    throw new Error(\"Unable to determine the type of mutate operation for \\\"\" + opCode + \"\\\"\");\n            }\n        }\n    }\n    setIsParent(false);\n    return visitedPlaceholders;\n}\n/**\n * @param {?} updateOpCodes\n * @param {?} icus\n * @param {?} bindingsStartIndex\n * @param {?} changeMask\n * @param {?} viewData\n * @param {?=} bypassCheckBit\n * @return {?}\n */\nfunction readUpdateOpCodes(updateOpCodes, icus, bindingsStartIndex, changeMask, viewData, bypassCheckBit) {\n    if (bypassCheckBit === void 0) { bypassCheckBit = false; }\n    /** @type {?} */\n    var caseCreated = false;\n    for (var i = 0; i < updateOpCodes.length; i++) {\n        /** @type {?} */\n        var checkBit = /** @type {?} */ (updateOpCodes[i]);\n        /** @type {?} */\n        var skipCodes = /** @type {?} */ (updateOpCodes[++i]);\n        if (bypassCheckBit || (checkBit & changeMask)) {\n            /** @type {?} */\n            var value = '';\n            for (var j = i + 1; j <= (i + skipCodes); j++) {\n                /** @type {?} */\n                var opCode = updateOpCodes[j];\n                if (typeof opCode == 'string') {\n                    value += opCode;\n                }\n                else if (typeof opCode == 'number') {\n                    if (opCode < 0) {\n                        // It's a binding index whose value is negative\n                        value += stringify(viewData[bindingsStartIndex - opCode]);\n                    }\n                    else {\n                        /** @type {?} */\n                        var nodeIndex = opCode >>> 2 /* SHIFT_REF */;\n                        switch (opCode & 3 /* MASK_OPCODE */) {\n                            case 1 /* Attr */:\n                                /** @type {?} */\n                                var attrName = /** @type {?} */ (updateOpCodes[++j]);\n                                /** @type {?} */\n                                var sanitizeFn = /** @type {?} */ (updateOpCodes[++j]);\n                                elementAttribute(nodeIndex, attrName, value, sanitizeFn);\n                                break;\n                            case 0 /* Text */:\n                                textBinding(nodeIndex, value);\n                                break;\n                            case 2 /* IcuSwitch */:\n                                /** @type {?} */\n                                var tIcuIndex = /** @type {?} */ (updateOpCodes[++j]);\n                                /** @type {?} */\n                                var tIcu = /** @type {?} */ ((icus))[tIcuIndex];\n                                /** @type {?} */\n                                var icuTNode = /** @type {?} */ (getTNode(nodeIndex, viewData));\n                                // If there is an active case, delete the old nodes\n                                if (icuTNode.activeCaseIndex !== null) {\n                                    /** @type {?} */\n                                    var removeCodes = tIcu.remove[icuTNode.activeCaseIndex];\n                                    for (var k = 0; k < removeCodes.length; k++) {\n                                        /** @type {?} */\n                                        var removeOpCode = /** @type {?} */ (removeCodes[k]);\n                                        switch (removeOpCode & 7 /* MASK_OPCODE */) {\n                                            case 3 /* Remove */:\n                                                /** @type {?} */\n                                                var nodeIndex_1 = removeOpCode >>> 3 /* SHIFT_REF */;\n                                                removeNode(nodeIndex_1, viewData);\n                                                break;\n                                            case 6 /* RemoveNestedIcu */:\n                                                /** @type {?} */\n                                                var nestedIcuNodeIndex = /** @type {?} */ (removeCodes[k + 1]) >>> 3 /* SHIFT_REF */;\n                                                /** @type {?} */\n                                                var nestedIcuTNode = /** @type {?} */ (getTNode(nestedIcuNodeIndex, viewData));\n                                                /** @type {?} */\n                                                var activeIndex = nestedIcuTNode.activeCaseIndex;\n                                                if (activeIndex !== null) {\n                                                    /** @type {?} */\n                                                    var nestedIcuTIndex = removeOpCode >>> 3 /* SHIFT_REF */;\n                                                    /** @type {?} */\n                                                    var nestedTIcu = /** @type {?} */ ((icus))[nestedIcuTIndex];\n                                                    addAllToArray(nestedTIcu.remove[activeIndex], removeCodes);\n                                                }\n                                                break;\n                                        }\n                                    }\n                                }\n                                /** @type {?} */\n                                var caseIndex = getCaseIndex(tIcu, value);\n                                icuTNode.activeCaseIndex = caseIndex !== -1 ? caseIndex : null;\n                                // Add the nodes for the new case\n                                readCreateOpCodes(-1, tIcu.create[caseIndex], tIcu.expandoStartIndex, viewData);\n                                caseCreated = true;\n                                break;\n                            case 3 /* IcuUpdate */:\n                                tIcuIndex = /** @type {?} */ (updateOpCodes[++j]);\n                                tIcu = /** @type {?} */ ((icus))[tIcuIndex];\n                                icuTNode = /** @type {?} */ (getTNode(nodeIndex, viewData));\n                                readUpdateOpCodes(tIcu.update[/** @type {?} */ ((icuTNode.activeCaseIndex))], icus, bindingsStartIndex, changeMask, viewData, caseCreated);\n                                break;\n                        }\n                    }\n                }\n            }\n        }\n        i += skipCodes;\n    }\n}\n/**\n * @param {?} index\n * @param {?} viewData\n * @return {?}\n */\nfunction removeNode(index, viewData) {\n    /** @type {?} */\n    var removedPhTNode = getTNode(index, viewData);\n    /** @type {?} */\n    var removedPhRNode = getNativeByIndex(index, viewData);\n    removeChild(removedPhTNode, removedPhRNode || null, viewData);\n    removedPhTNode.detached = true;\n    ngDevMode && ngDevMode.rendererRemoveNode++;\n    /** @type {?} */\n    var slotValue = /** @type {?} */ (load(index));\n    if (isLContainer(slotValue)) {\n        /** @type {?} */\n        var lContainer = /** @type {?} */ (slotValue);\n        if (removedPhTNode.type !== 0 /* Container */) {\n            removeChild(removedPhTNode, lContainer[NATIVE] || null, viewData);\n        }\n        lContainer[RENDER_PARENT] = null;\n    }\n}\n/**\n *\n * Use this instruction to create a translation block that doesn't contain any placeholder.\n * It calls both {\\@link i18nStart} and {\\@link i18nEnd} in one instruction.\n *\n * The translation `message` is the value which is locale specific. The translation string may\n * contain placeholders which associate inner elements and sub-templates within the translation.\n *\n * The translation `message` placeholders are:\n * - `ï¿½{index}(:{block})ï¿½`: *Binding Placeholder*: Marks a location where an expression will be\n *   interpolated into. The placeholder `index` points to the expression binding index. An optional\n *   `block` that matches the sub-template in which it was declared.\n * - `ï¿½#{index}(:{block})ï¿½`/`ï¿½/#{index}(:{block})ï¿½`: *Element Placeholder*:  Marks the beginning\n *   and end of DOM element that were embedded in the original translation block. The placeholder\n *   `index` points to the element index in the template instructions set. An optional `block` that\n *   matches the sub-template in which it was declared.\n * - `ï¿½*{index}:{block}ï¿½`/`ï¿½/*{index}:{block}ï¿½`: *Sub-template Placeholder*: Sub-templates must be\n *   split up and translated separately in each angular template function. The `index` points to the\n *   `template` instruction index. A `block` that matches the sub-template in which it was declared.\n *\n * @param {?} index A unique index of the translation in the static block.\n * @param {?} message The translation message.\n * @param {?=} subTemplateIndex Optional sub-template index in the `message`.\n * @return {?}\n */\nexport function i18n(index, message, subTemplateIndex) {\n    i18nStart(index, message, subTemplateIndex);\n    i18nEnd();\n}\n/**\n * Marks a list of attributes as translatable.\n *\n * @param {?} index A unique index in the static block\n * @param {?} values\n * @return {?}\n */\nexport function i18nAttributes(index, values) {\n    /** @type {?} */\n    var tView = getLView()[TVIEW];\n    ngDevMode && assertDefined(tView, \"tView should be defined\");\n    ngDevMode &&\n        assertEqual(tView.firstTemplatePass, true, \"You should only call i18nEnd on first template pass\");\n    if (tView.firstTemplatePass && tView.data[index + HEADER_OFFSET] === null) {\n        i18nAttributesFirstPass(tView, index, values);\n    }\n}\n/**\n * See `i18nAttributes` above.\n * @param {?} tView\n * @param {?} index\n * @param {?} values\n * @return {?}\n */\nfunction i18nAttributesFirstPass(tView, index, values) {\n    /** @type {?} */\n    var previousElement = getPreviousOrParentTNode();\n    /** @type {?} */\n    var previousElementIndex = previousElement.index - HEADER_OFFSET;\n    /** @type {?} */\n    var updateOpCodes = [];\n    for (var i = 0; i < values.length; i += 2) {\n        /** @type {?} */\n        var attrName = values[i];\n        /** @type {?} */\n        var message = values[i + 1];\n        /** @type {?} */\n        var parts = message.split(ICU_REGEXP);\n        for (var j = 0; j < parts.length; j++) {\n            /** @type {?} */\n            var value = parts[j];\n            if (j & 1) {\n                // Odd indexes are ICU expressions\n                // TODO(ocombe): support ICU expressions in attributes\n            }\n            else if (value !== '') {\n                /** @type {?} */\n                var hasBinding = !!value.match(BINDING_REGEXP);\n                if (hasBinding) {\n                    addAllToArray(generateBindingUpdateOpCodes(value, previousElementIndex, attrName), updateOpCodes);\n                }\n                else {\n                    elementAttribute(previousElementIndex, attrName, value);\n                }\n            }\n        }\n    }\n    tView.data[index + HEADER_OFFSET] = updateOpCodes;\n}\n/** @type {?} */\nvar changeMask = 0;\n/** @type {?} */\nvar shiftsCounter = 0;\n/**\n * Stores the values of the bindings during each update cycle in order to determine if we need to\n * update the translated nodes.\n *\n * @template T\n * @param {?} expression The binding's new value or NO_CHANGE\n * @return {?}\n */\nexport function i18nExp(expression) {\n    if (expression !== NO_CHANGE) {\n        changeMask = changeMask | (1 << shiftsCounter);\n    }\n    shiftsCounter++;\n}\n/**\n * Updates a translation block or an i18n attribute when the bindings have changed.\n *\n * @param {?} index Index of either {\\@link i18nStart} (translation block) or {\\@link i18nAttributes}\n * (i18n attribute) on which it should update the content.\n * @return {?}\n */\nexport function i18nApply(index) {\n    if (shiftsCounter) {\n        /** @type {?} */\n        var lView = getLView();\n        /** @type {?} */\n        var tView = lView[TVIEW];\n        ngDevMode && assertDefined(tView, \"tView should be defined\");\n        /** @type {?} */\n        var tI18n = tView.data[index + HEADER_OFFSET];\n        /** @type {?} */\n        var updateOpCodes = void 0;\n        /** @type {?} */\n        var icus = null;\n        if (Array.isArray(tI18n)) {\n            updateOpCodes = /** @type {?} */ (tI18n);\n        }\n        else {\n            updateOpCodes = (/** @type {?} */ (tI18n)).update;\n            icus = (/** @type {?} */ (tI18n)).icus;\n        }\n        /** @type {?} */\n        var bindingsStartIndex = lView[BINDING_INDEX] - shiftsCounter - 1;\n        readUpdateOpCodes(updateOpCodes, icus, bindingsStartIndex, changeMask, lView);\n        // Reset changeMask & maskBit to default for the next update cycle\n        changeMask = 0;\n        shiftsCounter = 0;\n    }\n}\n/** @enum {number} */\nvar Plural = {\n    Zero: 0,\n    One: 1,\n    Two: 2,\n    Few: 3,\n    Many: 4,\n    Other: 5,\n};\nPlural[Plural.Zero] = 'Zero';\nPlural[Plural.One] = 'One';\nPlural[Plural.Two] = 'Two';\nPlural[Plural.Few] = 'Few';\nPlural[Plural.Many] = 'Many';\nPlural[Plural.Other] = 'Other';\n/**\n * Returns the plural case based on the locale.\n * This is a copy of the deprecated function that we used in Angular v4.\n * // TODO(ocombe): remove this once we can the real getPluralCase function\n *\n * @deprecated from v5 the plural case function is in locale data files common/locales/*.ts\n * @param {?} locale\n * @param {?} nLike\n * @return {?}\n */\nfunction getPluralCase(locale, nLike) {\n    if (typeof nLike === 'string') {\n        nLike = parseInt(/** @type {?} */ (nLike), 10);\n    }\n    /** @type {?} */\n    var n = /** @type {?} */ (nLike);\n    /** @type {?} */\n    var nDecimal = n.toString().replace(/^[^.]*\\.?/, '');\n    /** @type {?} */\n    var i = Math.floor(Math.abs(n));\n    /** @type {?} */\n    var v = nDecimal.length;\n    /** @type {?} */\n    var f = parseInt(nDecimal, 10);\n    /** @type {?} */\n    var t = parseInt(n.toString().replace(/^[^.]*\\.?|0+$/g, ''), 10) || 0;\n    /** @type {?} */\n    var lang = locale.split('-')[0].toLowerCase();\n    switch (lang) {\n        case 'af':\n        case 'asa':\n        case 'az':\n        case 'bem':\n        case 'bez':\n        case 'bg':\n        case 'brx':\n        case 'ce':\n        case 'cgg':\n        case 'chr':\n        case 'ckb':\n        case 'ee':\n        case 'el':\n        case 'eo':\n        case 'es':\n        case 'eu':\n        case 'fo':\n        case 'fur':\n        case 'gsw':\n        case 'ha':\n        case 'haw':\n        case 'hu':\n        case 'jgo':\n        case 'jmc':\n        case 'ka':\n        case 'kk':\n        case 'kkj':\n        case 'kl':\n        case 'ks':\n        case 'ksb':\n        case 'ky':\n        case 'lb':\n        case 'lg':\n        case 'mas':\n        case 'mgo':\n        case 'ml':\n        case 'mn':\n        case 'nb':\n        case 'nd':\n        case 'ne':\n        case 'nn':\n        case 'nnh':\n        case 'nyn':\n        case 'om':\n        case 'or':\n        case 'os':\n        case 'ps':\n        case 'rm':\n        case 'rof':\n        case 'rwk':\n        case 'saq':\n        case 'seh':\n        case 'sn':\n        case 'so':\n        case 'sq':\n        case 'ta':\n        case 'te':\n        case 'teo':\n        case 'tk':\n        case 'tr':\n        case 'ug':\n        case 'uz':\n        case 'vo':\n        case 'vun':\n        case 'wae':\n        case 'xog':\n            if (n === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'ak':\n        case 'ln':\n        case 'mg':\n        case 'pa':\n        case 'ti':\n            if (n === Math.floor(n) && n >= 0 && n <= 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'am':\n        case 'as':\n        case 'bn':\n        case 'fa':\n        case 'gu':\n        case 'hi':\n        case 'kn':\n        case 'mr':\n        case 'zu':\n            if (i === 0 || n === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'ar':\n            if (n === 0)\n                return Plural.Zero;\n            if (n === 1)\n                return Plural.One;\n            if (n === 2)\n                return Plural.Two;\n            if (n % 100 === Math.floor(n % 100) && n % 100 >= 3 && n % 100 <= 10)\n                return Plural.Few;\n            if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 99)\n                return Plural.Many;\n            return Plural.Other;\n        case 'ast':\n        case 'ca':\n        case 'de':\n        case 'en':\n        case 'et':\n        case 'fi':\n        case 'fy':\n        case 'gl':\n        case 'it':\n        case 'nl':\n        case 'sv':\n        case 'sw':\n        case 'ur':\n        case 'yi':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            return Plural.Other;\n        case 'be':\n            if (n % 10 === 1 && !(n % 100 === 11))\n                return Plural.One;\n            if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 4 &&\n                !(n % 100 >= 12 && n % 100 <= 14))\n                return Plural.Few;\n            if (n % 10 === 0 || n % 10 === Math.floor(n % 10) && n % 10 >= 5 && n % 10 <= 9 ||\n                n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 14)\n                return Plural.Many;\n            return Plural.Other;\n        case 'br':\n            if (n % 10 === 1 && !(n % 100 === 11 || n % 100 === 71 || n % 100 === 91))\n                return Plural.One;\n            if (n % 10 === 2 && !(n % 100 === 12 || n % 100 === 72 || n % 100 === 92))\n                return Plural.Two;\n            if (n % 10 === Math.floor(n % 10) && (n % 10 >= 3 && n % 10 <= 4 || n % 10 === 9) &&\n                !(n % 100 >= 10 && n % 100 <= 19 || n % 100 >= 70 && n % 100 <= 79 ||\n                    n % 100 >= 90 && n % 100 <= 99))\n                return Plural.Few;\n            if (!(n === 0) && n % 1e6 === 0)\n                return Plural.Many;\n            return Plural.Other;\n        case 'bs':\n        case 'hr':\n        case 'sr':\n            if (v === 0 && i % 10 === 1 && !(i % 100 === 11) || f % 10 === 1 && !(f % 100 === 11))\n                return Plural.One;\n            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n                !(i % 100 >= 12 && i % 100 <= 14) ||\n                f % 10 === Math.floor(f % 10) && f % 10 >= 2 && f % 10 <= 4 &&\n                    !(f % 100 >= 12 && f % 100 <= 14))\n                return Plural.Few;\n            return Plural.Other;\n        case 'cs':\n        case 'sk':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            if (i === Math.floor(i) && i >= 2 && i <= 4 && v === 0)\n                return Plural.Few;\n            if (!(v === 0))\n                return Plural.Many;\n            return Plural.Other;\n        case 'cy':\n            if (n === 0)\n                return Plural.Zero;\n            if (n === 1)\n                return Plural.One;\n            if (n === 2)\n                return Plural.Two;\n            if (n === 3)\n                return Plural.Few;\n            if (n === 6)\n                return Plural.Many;\n            return Plural.Other;\n        case 'da':\n            if (n === 1 || !(t === 0) && (i === 0 || i === 1))\n                return Plural.One;\n            return Plural.Other;\n        case 'dsb':\n        case 'hsb':\n            if (v === 0 && i % 100 === 1 || f % 100 === 1)\n                return Plural.One;\n            if (v === 0 && i % 100 === 2 || f % 100 === 2)\n                return Plural.Two;\n            if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 ||\n                f % 100 === Math.floor(f % 100) && f % 100 >= 3 && f % 100 <= 4)\n                return Plural.Few;\n            return Plural.Other;\n        case 'ff':\n        case 'fr':\n        case 'hy':\n        case 'kab':\n            if (i === 0 || i === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'fil':\n            if (v === 0 && (i === 1 || i === 2 || i === 3) ||\n                v === 0 && !(i % 10 === 4 || i % 10 === 6 || i % 10 === 9) ||\n                !(v === 0) && !(f % 10 === 4 || f % 10 === 6 || f % 10 === 9))\n                return Plural.One;\n            return Plural.Other;\n        case 'ga':\n            if (n === 1)\n                return Plural.One;\n            if (n === 2)\n                return Plural.Two;\n            if (n === Math.floor(n) && n >= 3 && n <= 6)\n                return Plural.Few;\n            if (n === Math.floor(n) && n >= 7 && n <= 10)\n                return Plural.Many;\n            return Plural.Other;\n        case 'gd':\n            if (n === 1 || n === 11)\n                return Plural.One;\n            if (n === 2 || n === 12)\n                return Plural.Two;\n            if (n === Math.floor(n) && (n >= 3 && n <= 10 || n >= 13 && n <= 19))\n                return Plural.Few;\n            return Plural.Other;\n        case 'gv':\n            if (v === 0 && i % 10 === 1)\n                return Plural.One;\n            if (v === 0 && i % 10 === 2)\n                return Plural.Two;\n            if (v === 0 &&\n                (i % 100 === 0 || i % 100 === 20 || i % 100 === 40 || i % 100 === 60 || i % 100 === 80))\n                return Plural.Few;\n            if (!(v === 0))\n                return Plural.Many;\n            return Plural.Other;\n        case 'he':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            if (i === 2 && v === 0)\n                return Plural.Two;\n            if (v === 0 && !(n >= 0 && n <= 10) && n % 10 === 0)\n                return Plural.Many;\n            return Plural.Other;\n        case 'is':\n            if (t === 0 && i % 10 === 1 && !(i % 100 === 11) || !(t === 0))\n                return Plural.One;\n            return Plural.Other;\n        case 'ksh':\n            if (n === 0)\n                return Plural.Zero;\n            if (n === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'kw':\n        case 'naq':\n        case 'se':\n        case 'smn':\n            if (n === 1)\n                return Plural.One;\n            if (n === 2)\n                return Plural.Two;\n            return Plural.Other;\n        case 'lag':\n            if (n === 0)\n                return Plural.Zero;\n            if ((i === 0 || i === 1) && !(n === 0))\n                return Plural.One;\n            return Plural.Other;\n        case 'lt':\n            if (n % 10 === 1 && !(n % 100 >= 11 && n % 100 <= 19))\n                return Plural.One;\n            if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 9 &&\n                !(n % 100 >= 11 && n % 100 <= 19))\n                return Plural.Few;\n            if (!(f === 0))\n                return Plural.Many;\n            return Plural.Other;\n        case 'lv':\n        case 'prg':\n            if (n % 10 === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 ||\n                v === 2 && f % 100 === Math.floor(f % 100) && f % 100 >= 11 && f % 100 <= 19)\n                return Plural.Zero;\n            if (n % 10 === 1 && !(n % 100 === 11) || v === 2 && f % 10 === 1 && !(f % 100 === 11) ||\n                !(v === 2) && f % 10 === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'mk':\n            if (v === 0 && i % 10 === 1 || f % 10 === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'mt':\n            if (n === 1)\n                return Plural.One;\n            if (n === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 2 && n % 100 <= 10)\n                return Plural.Few;\n            if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19)\n                return Plural.Many;\n            return Plural.Other;\n        case 'pl':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n                !(i % 100 >= 12 && i % 100 <= 14))\n                return Plural.Few;\n            if (v === 0 && !(i === 1) && i % 10 === Math.floor(i % 10) && i % 10 >= 0 && i % 10 <= 1 ||\n                v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||\n                v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 12 && i % 100 <= 14)\n                return Plural.Many;\n            return Plural.Other;\n        case 'pt':\n            if (n === Math.floor(n) && n >= 0 && n <= 2 && !(n === 2))\n                return Plural.One;\n            return Plural.Other;\n        case 'ro':\n            if (i === 1 && v === 0)\n                return Plural.One;\n            if (!(v === 0) || n === 0 ||\n                !(n === 1) && n % 100 === Math.floor(n % 100) && n % 100 >= 1 && n % 100 <= 19)\n                return Plural.Few;\n            return Plural.Other;\n        case 'ru':\n        case 'uk':\n            if (v === 0 && i % 10 === 1 && !(i % 100 === 11))\n                return Plural.One;\n            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n                !(i % 100 >= 12 && i % 100 <= 14))\n                return Plural.Few;\n            if (v === 0 && i % 10 === 0 ||\n                v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||\n                v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 11 && i % 100 <= 14)\n                return Plural.Many;\n            return Plural.Other;\n        case 'shi':\n            if (i === 0 || n === 1)\n                return Plural.One;\n            if (n === Math.floor(n) && n >= 2 && n <= 10)\n                return Plural.Few;\n            return Plural.Other;\n        case 'si':\n            if (n === 0 || n === 1 || i === 0 && f === 1)\n                return Plural.One;\n            return Plural.Other;\n        case 'sl':\n            if (v === 0 && i % 100 === 1)\n                return Plural.One;\n            if (v === 0 && i % 100 === 2)\n                return Plural.Two;\n            if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || !(v === 0))\n                return Plural.Few;\n            return Plural.Other;\n        case 'tzm':\n            if (n === Math.floor(n) && n >= 0 && n <= 1 || n === Math.floor(n) && n >= 11 && n <= 99)\n                return Plural.One;\n            return Plural.Other;\n        // When there is no specification, the default is always \"other\"\n        // Spec: http://cldr.unicode.org/index/cldr-spec/plural-rules\n        // > other (requiredâgeneral plural form â also used if the language only has a single form)\n        default:\n            return Plural.Other;\n    }\n}\n/**\n * @param {?} value\n * @param {?} locale\n * @return {?}\n */\nfunction getPluralCategory(value, locale) {\n    /** @type {?} */\n    var plural = getPluralCase(locale, value);\n    switch (plural) {\n        case Plural.Zero:\n            return 'zero';\n        case Plural.One:\n            return 'one';\n        case Plural.Two:\n            return 'two';\n        case Plural.Few:\n            return 'few';\n        case Plural.Many:\n            return 'many';\n        default:\n            return 'other';\n    }\n}\n/**\n * Returns the index of the current case of an ICU expression depending on the main binding value\n *\n * @param {?} icuExpression\n * @param {?} bindingValue The value of the main binding used by this ICU expression\n * @return {?}\n */\nfunction getCaseIndex(icuExpression, bindingValue) {\n    /** @type {?} */\n    var index = icuExpression.cases.indexOf(bindingValue);\n    if (index === -1) {\n        switch (icuExpression.type) {\n            case 1 /* plural */: {\n                /** @type {?} */\n                var locale = 'en-US';\n                /** @type {?} */\n                var resolvedCase = getPluralCategory(bindingValue, locale);\n                index = icuExpression.cases.indexOf(resolvedCase);\n                if (index === -1 && resolvedCase !== 'other') {\n                    index = icuExpression.cases.indexOf('other');\n                }\n                break;\n            }\n            case 0 /* select */: {\n                index = icuExpression.cases.indexOf('other');\n                break;\n            }\n        }\n    }\n    return index;\n}\n/**\n * Generate the OpCodes for ICU expressions.\n *\n * @param {?} tIcus\n * @param {?} icuExpression\n * @param {?} startIndex\n * @param {?} expandoStartIndex\n * @return {?}\n */\nfunction icuStart(tIcus, icuExpression, startIndex, expandoStartIndex) {\n    /** @type {?} */\n    var createCodes = [];\n    /** @type {?} */\n    var removeCodes = [];\n    /** @type {?} */\n    var updateCodes = [];\n    /** @type {?} */\n    var vars = [];\n    /** @type {?} */\n    var childIcus = [];\n    for (var i = 0; i < icuExpression.values.length; i++) {\n        /** @type {?} */\n        var valueArr = icuExpression.values[i];\n        /** @type {?} */\n        var nestedIcus = [];\n        for (var j = 0; j < valueArr.length; j++) {\n            /** @type {?} */\n            var value = valueArr[j];\n            if (typeof value !== 'string') {\n                /** @type {?} */\n                var icuIndex = nestedIcus.push(/** @type {?} */ (value)) - 1;\n                // Replace nested ICU expression by a comment node\n                valueArr[j] = \"<!--\\uFFFD\" + icuIndex + \"\\uFFFD-->\";\n            }\n        }\n        /** @type {?} */\n        var icuCase = parseIcuCase(valueArr.join(''), startIndex, nestedIcus, tIcus, expandoStartIndex);\n        createCodes.push(icuCase.create);\n        removeCodes.push(icuCase.remove);\n        updateCodes.push(icuCase.update);\n        vars.push(icuCase.vars);\n        childIcus.push(icuCase.childIcus);\n    }\n    /** @type {?} */\n    var tIcu = {\n        type: icuExpression.type,\n        vars: vars,\n        expandoStartIndex: expandoStartIndex + 1, childIcus: childIcus,\n        cases: icuExpression.cases,\n        create: createCodes,\n        remove: removeCodes,\n        update: updateCodes\n    };\n    tIcus.push(tIcu);\n    /** @type {?} */\n    var lView = getLView();\n    /** @type {?} */\n    var worstCaseSize = Math.max.apply(Math, vars);\n    for (var i = 0; i < worstCaseSize; i++) {\n        allocExpando(lView);\n    }\n}\n/**\n * Transforms a string template into an HTML template and a list of instructions used to update\n * attributes or nodes that contain bindings.\n *\n * @param {?} unsafeHtml The string to parse\n * @param {?} parentIndex\n * @param {?} nestedIcus\n * @param {?} tIcus\n * @param {?} expandoStartIndex\n * @return {?}\n */\nfunction parseIcuCase(unsafeHtml, parentIndex, nestedIcus, tIcus, expandoStartIndex) {\n    /** @type {?} */\n    var inertBodyHelper = new InertBodyHelper(document);\n    /** @type {?} */\n    var inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n    if (!inertBodyElement) {\n        throw new Error('Unable to generate inert body element');\n    }\n    /** @type {?} */\n    var wrapper = /** @type {?} */ (getTemplateContent(/** @type {?} */ ((inertBodyElement)))) || inertBodyElement;\n    /** @type {?} */\n    var opCodes = { vars: 0, childIcus: [], create: [], remove: [], update: [] };\n    parseNodes(wrapper.firstChild, opCodes, parentIndex, nestedIcus, tIcus, expandoStartIndex);\n    return opCodes;\n}\n/** @type {?} */\nvar NESTED_ICU = /ï¿½(\\d+)ï¿½/;\n/**\n * Parses a node, its children and its siblings, and generates the mutate & update OpCodes.\n *\n * @param {?} currentNode The first node to parse\n * @param {?} icuCase The data for the ICU expression case that contains those nodes\n * @param {?} parentIndex Index of the current node's parent\n * @param {?} nestedIcus Data for the nested ICU expressions that this case contains\n * @param {?} tIcus Data for all ICU expressions of the current message\n * @param {?} expandoStartIndex Expando start index for the current ICU expression\n * @return {?}\n */\nfunction parseNodes(currentNode, icuCase, parentIndex, nestedIcus, tIcus, expandoStartIndex) {\n    if (currentNode) {\n        /** @type {?} */\n        var nestedIcusToCreate = [];\n        while (currentNode) {\n            /** @type {?} */\n            var nextNode = currentNode.nextSibling;\n            /** @type {?} */\n            var newIndex = expandoStartIndex + ++icuCase.vars;\n            switch (currentNode.nodeType) {\n                case Node.ELEMENT_NODE:\n                    /** @type {?} */\n                    var element = /** @type {?} */ (currentNode);\n                    /** @type {?} */\n                    var tagName = element.tagName.toLowerCase();\n                    if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n                        // This isn't a valid element, we won't create an element for it\n                        icuCase.vars--;\n                    }\n                    else {\n                        icuCase.create.push(ELEMENT_MARKER, tagName, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                        /** @type {?} */\n                        var elAttrs = element.attributes;\n                        for (var i = 0; i < elAttrs.length; i++) {\n                            /** @type {?} */\n                            var attr = /** @type {?} */ ((elAttrs.item(i)));\n                            /** @type {?} */\n                            var lowerAttrName = attr.name.toLowerCase();\n                            /** @type {?} */\n                            var hasBinding_1 = !!attr.value.match(BINDING_REGEXP);\n                            // we assume the input string is safe, unless it's using a binding\n                            if (hasBinding_1) {\n                                if (VALID_ATTRS.hasOwnProperty(lowerAttrName)) {\n                                    if (URI_ATTRS[lowerAttrName]) {\n                                        addAllToArray(generateBindingUpdateOpCodes(attr.value, newIndex, attr.name, _sanitizeUrl), icuCase.update);\n                                    }\n                                    else if (SRCSET_ATTRS[lowerAttrName]) {\n                                        addAllToArray(generateBindingUpdateOpCodes(attr.value, newIndex, attr.name, sanitizeSrcset), icuCase.update);\n                                    }\n                                    else {\n                                        addAllToArray(generateBindingUpdateOpCodes(attr.value, newIndex, attr.name), icuCase.update);\n                                    }\n                                }\n                                else {\n                                    ngDevMode &&\n                                        console.warn(\"WARNING: ignoring unsafe attribute value \" + lowerAttrName + \" on element \" + tagName + \" (see http://g.co/ng/security#xss)\");\n                                }\n                            }\n                            else {\n                                icuCase.create.push(newIndex << 3 /* SHIFT_REF */ | 4 /* Attr */, attr.name, attr.value);\n                            }\n                        }\n                        // Parse the children of this node (if any)\n                        parseNodes(currentNode.firstChild, icuCase, newIndex, nestedIcus, tIcus, expandoStartIndex);\n                        // Remove the parent node after the children\n                        icuCase.remove.push(newIndex << 3 /* SHIFT_REF */ | 3 /* Remove */);\n                    }\n                    break;\n                case Node.TEXT_NODE:\n                    /** @type {?} */\n                    var value = currentNode.textContent || '';\n                    /** @type {?} */\n                    var hasBinding = value.match(BINDING_REGEXP);\n                    icuCase.create.push(hasBinding ? '' : value, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                    icuCase.remove.push(newIndex << 3 /* SHIFT_REF */ | 3 /* Remove */);\n                    if (hasBinding) {\n                        addAllToArray(generateBindingUpdateOpCodes(value, newIndex), icuCase.update);\n                    }\n                    break;\n                case Node.COMMENT_NODE:\n                    /** @type {?} */\n                    var match = NESTED_ICU.exec(currentNode.textContent || '');\n                    if (match) {\n                        /** @type {?} */\n                        var nestedIcuIndex = parseInt(match[1], 10);\n                        /** @type {?} */\n                        var newLocal = ngDevMode ? \"nested ICU \" + nestedIcuIndex : '';\n                        // Create the comment node that will anchor the ICU expression\n                        icuCase.create.push(COMMENT_MARKER, newLocal, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);\n                        /** @type {?} */\n                        var nestedIcu = nestedIcus[nestedIcuIndex];\n                        nestedIcusToCreate.push([nestedIcu, newIndex]);\n                    }\n                    else {\n                        // We do not handle any other type of comment\n                        icuCase.vars--;\n                    }\n                    break;\n                default:\n                    // We do not handle any other type of element\n                    icuCase.vars--;\n            }\n            currentNode = /** @type {?} */ ((nextNode));\n        }\n        for (var i = 0; i < nestedIcusToCreate.length; i++) {\n            /** @type {?} */\n            var nestedIcu = nestedIcusToCreate[i][0];\n            /** @type {?} */\n            var nestedIcuNodeIndex = nestedIcusToCreate[i][1];\n            icuStart(tIcus, nestedIcu, nestedIcuNodeIndex, expandoStartIndex + icuCase.vars);\n            /** @type {?} */\n            var nestTIcuIndex = tIcus.length - 1;\n            icuCase.vars += Math.max.apply(Math, tIcus[nestTIcuIndex].vars);\n            icuCase.childIcus.push(nestTIcuIndex);\n            /** @type {?} */\n            var mask = getBindingMask(nestedIcu);\n            icuCase.update.push(toMaskBit(nestedIcu.mainBinding), // mask of the main binding\n            3, // skip 3 opCodes if not changed\n            // skip 3 opCodes if not changed\n            -1 - nestedIcu.mainBinding, nestedIcuNodeIndex << 2 /* SHIFT_REF */ | 2 /* IcuSwitch */, nestTIcuIndex, mask, // mask of all the bindings of this ICU expression\n            2, // skip 2 opCodes if not changed\n            // skip 2 opCodes if not changed\n            nestedIcuNodeIndex << 2 /* SHIFT_REF */ | 3 /* IcuUpdate */, nestTIcuIndex);\n            icuCase.remove.push(nestTIcuIndex << 3 /* SHIFT_REF */ | 6 /* RemoveNestedIcu */, nestedIcuNodeIndex << 3 /* SHIFT_REF */ | 3 /* Remove */);\n        }\n    }\n}\n//# sourceMappingURL=i18n.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { createInjector } from '../di/r3_injector';\nimport { ComponentFactoryResolver as viewEngine_ComponentFactoryResolver } from '../linker/component_factory_resolver';\nimport { NgModuleFactory as viewEngine_NgModuleFactory, NgModuleRef as viewEngine_NgModuleRef } from '../linker/ng_module_factory';\nimport { stringify } from '../util';\nimport { assertDefined } from './assert';\nimport { ComponentFactoryResolver } from './component_ref';\nimport { getNgModuleDef } from './definition';\n/**\n * @record\n */\nexport function NgModuleType() { }\n/** @type {?} */\nNgModuleType.prototype.ngModuleDef;\n/** @type {?} */\nexport var COMPONENT_FACTORY_RESOLVER = {\n    provide: viewEngine_ComponentFactoryResolver,\n    useFactory: function () { return new ComponentFactoryResolver(); },\n    deps: [],\n};\n/**\n * @template T\n */\nvar /**\n * @template T\n */\nNgModuleRef = /** @class */ (function (_super) {\n    tslib_1.__extends(NgModuleRef, _super);\n    function NgModuleRef(ngModuleType, parentInjector) {\n        var _this = _super.call(this) || this;\n        // tslint:disable-next-line:require-internal-with-underscore\n        _this._bootstrapComponents = [];\n        _this.destroyCbs = [];\n        /** @type {?} */\n        /** @nocollapse */ var ngModuleDef = getNgModuleDef(ngModuleType);\n        ngDevMode && assertDefined(ngModuleDef, \"NgModule '\" + stringify(ngModuleType) + \"' is not a subtype of 'NgModuleType'.\");\n        _this._bootstrapComponents = /** @type {?} */ ((ngModuleDef)).bootstrap;\n        /** @type {?} */\n        var additionalProviders = [\n            COMPONENT_FACTORY_RESOLVER, {\n                provide: viewEngine_NgModuleRef,\n                useValue: _this,\n            }\n        ];\n        _this.injector = createInjector(ngModuleType, parentInjector, additionalProviders);\n        _this.instance = _this.injector.get(ngModuleType);\n        _this.componentFactoryResolver = new ComponentFactoryResolver();\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    NgModuleRef.prototype.destroy = /**\n     * @return {?}\n     */\n    function () {\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed'); /** @type {?} */\n        ((this.destroyCbs)).forEach(function (fn) { return fn(); });\n        this.destroyCbs = null;\n    };\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    NgModuleRef.prototype.onDestroy = /**\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) {\n        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed'); /** @type {?} */\n        ((this.destroyCbs)).push(callback);\n    };\n    return NgModuleRef;\n}(viewEngine_NgModuleRef));\n/**\n * @template T\n */\nexport { NgModuleRef };\nif (false) {\n    /** @type {?} */\n    NgModuleRef.prototype._bootstrapComponents;\n    /** @type {?} */\n    NgModuleRef.prototype.injector;\n    /** @type {?} */\n    NgModuleRef.prototype.componentFactoryResolver;\n    /** @type {?} */\n    NgModuleRef.prototype.instance;\n    /** @type {?} */\n    NgModuleRef.prototype.destroyCbs;\n}\n/**\n * @template T\n */\nvar /**\n * @template T\n */\nNgModuleFactory = /** @class */ (function (_super) {\n    tslib_1.__extends(NgModuleFactory, _super);\n    function NgModuleFactory(moduleType) {\n        var _this = _super.call(this) || this;\n        _this.moduleType = moduleType;\n        return _this;\n    }\n    /**\n     * @param {?} parentInjector\n     * @return {?}\n     */\n    NgModuleFactory.prototype.create = /**\n     * @param {?} parentInjector\n     * @return {?}\n     */\n    function (parentInjector) {\n        return new NgModuleRef(this.moduleType, parentInjector);\n    };\n    return NgModuleFactory;\n}(viewEngine_NgModuleFactory));\n/**\n * @template T\n */\nexport { NgModuleFactory };\nif (false) {\n    /** @type {?} */\n    NgModuleFactory.prototype.moduleType;\n}\n//# sourceMappingURL=ng_module_ref.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { bindingUpdated, bindingUpdated2, bindingUpdated3, bindingUpdated4, getBinding, updateBinding } from './bindings';\nimport { getBindingRoot, getCreationMode, getLView } from './state';\n/**\n * If the value hasn't been saved, calls the pure function to store and return the\n * value. If it has been saved, returns the saved value.\n *\n * @template T\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn Function that returns a value\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} value\n */\nexport function pureFunction0(slotOffset, pureFn, thisArg) {\n    /** @type {?} */\n    var bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    var lView = getLView();\n    return getCreationMode() ?\n        updateBinding(lView, bindingIndex, thisArg ? pureFn.call(thisArg) : pureFn()) :\n        getBinding(lView, bindingIndex);\n}\n/**\n * If the value of the provided exp has changed, calls the pure function to return\n * an updated value. Or if the value has not changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn Function that returns an updated value\n * @param {?} exp Updated expression value\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nexport function pureFunction1(slotOffset, pureFn, exp, thisArg) {\n    /** @type {?} */\n    var lView = getLView();\n    /** @type {?} */\n    var bindingIndex = getBindingRoot() + slotOffset;\n    return bindingUpdated(lView, bindingIndex, exp) ?\n        updateBinding(lView, bindingIndex + 1, thisArg ? pureFn.call(thisArg, exp) : pureFn(exp)) :\n        getBinding(lView, bindingIndex + 1);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nexport function pureFunction2(slotOffset, pureFn, exp1, exp2, thisArg) {\n    /** @type {?} */\n    var bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    var lView = getLView();\n    return bindingUpdated2(lView, bindingIndex, exp1, exp2) ?\n        updateBinding(lView, bindingIndex + 2, thisArg ? pureFn.call(thisArg, exp1, exp2) : pureFn(exp1, exp2)) :\n        getBinding(lView, bindingIndex + 2);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nexport function pureFunction3(slotOffset, pureFn, exp1, exp2, exp3, thisArg) {\n    /** @type {?} */\n    var bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    var lView = getLView();\n    return bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) ?\n        updateBinding(lView, bindingIndex + 3, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3) : pureFn(exp1, exp2, exp3)) :\n        getBinding(lView, bindingIndex + 3);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nexport function pureFunction4(slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {\n    /** @type {?} */\n    var bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    var lView = getLView();\n    return bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) ?\n        updateBinding(lView, bindingIndex + 4, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4) : pureFn(exp1, exp2, exp3, exp4)) :\n        getBinding(lView, bindingIndex + 4);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?} exp5\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nexport function pureFunction5(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, thisArg) {\n    /** @type {?} */\n    var bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    var lView = getLView();\n    /** @type {?} */\n    var different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated(lView, bindingIndex + 4, exp5) || different ?\n        updateBinding(lView, bindingIndex + 5, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5) :\n            pureFn(exp1, exp2, exp3, exp4, exp5)) :\n        getBinding(lView, bindingIndex + 5);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?} exp5\n * @param {?} exp6\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nexport function pureFunction6(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, thisArg) {\n    /** @type {?} */\n    var bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    var lView = getLView();\n    /** @type {?} */\n    var different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated2(lView, bindingIndex + 4, exp5, exp6) || different ?\n        updateBinding(lView, bindingIndex + 6, thisArg ?\n            pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6) :\n            pureFn(exp1, exp2, exp3, exp4, exp5, exp6)) :\n        getBinding(lView, bindingIndex + 6);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?} exp5\n * @param {?} exp6\n * @param {?} exp7\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nexport function pureFunction7(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, thisArg) {\n    /** @type {?} */\n    var bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    var lView = getLView();\n    /** @type {?} */\n    var different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated3(lView, bindingIndex + 4, exp5, exp6, exp7) || different ?\n        updateBinding(lView, bindingIndex + 7, thisArg ?\n            pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7) :\n            pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7)) :\n        getBinding(lView, bindingIndex + 7);\n}\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn\n * @param {?} exp1\n * @param {?} exp2\n * @param {?} exp3\n * @param {?} exp4\n * @param {?} exp5\n * @param {?} exp6\n * @param {?} exp7\n * @param {?} exp8\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nexport function pureFunction8(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8, thisArg) {\n    /** @type {?} */\n    var bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    var lView = getLView();\n    /** @type {?} */\n    var different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);\n    return bindingUpdated4(lView, bindingIndex + 4, exp5, exp6, exp7, exp8) || different ?\n        updateBinding(lView, bindingIndex + 8, thisArg ?\n            pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8) :\n            pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8)) :\n        getBinding(lView, bindingIndex + 8);\n}\n/**\n * pureFunction instruction that can support any number of bindings.\n *\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param {?} slotOffset the offset from binding root to the reserved slot\n * @param {?} pureFn A pure function that takes binding values and builds an object or array\n * containing those values.\n * @param {?} exps An array of binding values\n * @param {?=} thisArg Optional calling context of pureFn\n * @return {?} Updated or cached value\n */\nexport function pureFunctionV(slotOffset, pureFn, exps, thisArg) {\n    /** @type {?} */\n    var bindingIndex = getBindingRoot() + slotOffset;\n    /** @type {?} */\n    var different = false;\n    /** @type {?} */\n    var lView = getLView();\n    for (var i = 0; i < exps.length; i++) {\n        bindingUpdated(lView, bindingIndex++, exps[i]) && (different = true);\n    }\n    return different ? updateBinding(lView, bindingIndex, pureFn.apply(thisArg, exps)) :\n        getBinding(lView, bindingIndex);\n}\n//# sourceMappingURL=pure_function.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { load, store } from './instructions';\nimport { HEADER_OFFSET, TVIEW } from './interfaces/view';\nimport { pureFunction1, pureFunction2, pureFunction3, pureFunction4, pureFunctionV } from './pure_function';\nimport { getLView } from './state';\n/**\n * Create a pipe.\n *\n * @param {?} index Pipe index where the pipe will be stored.\n * @param {?} pipeName The name of the pipe\n * @return {?} T the instance of the pipe.\n */\nexport function pipe(index, pipeName) {\n    /** @type {?} */\n    var tView = getLView()[TVIEW];\n    /** @type {?} */\n    var pipeDef;\n    /** @type {?} */\n    var adjustedIndex = index + HEADER_OFFSET;\n    if (tView.firstTemplatePass) {\n        pipeDef = getPipeDef(pipeName, tView.pipeRegistry);\n        tView.data[adjustedIndex] = pipeDef;\n        if (pipeDef.onDestroy) {\n            (tView.pipeDestroyHooks || (tView.pipeDestroyHooks = [])).push(adjustedIndex, pipeDef.onDestroy);\n        }\n    }\n    else {\n        pipeDef = /** @type {?} */ (tView.data[adjustedIndex]);\n    }\n    /** @type {?} */\n    var pipeInstance = pipeDef.factory(null);\n    store(index, pipeInstance);\n    return pipeInstance;\n}\n/**\n * Searches the pipe registry for a pipe with the given name. If one is found,\n * returns the pipe. Otherwise, an error is thrown because the pipe cannot be resolved.\n *\n * @param {?} name Name of pipe to resolve\n * @param {?} registry Full list of available pipes\n * @return {?} Matching PipeDef\n */\nfunction getPipeDef(name, registry) {\n    if (registry) {\n        for (var i = 0; i < registry.length; i++) {\n            /** @type {?} */\n            var pipeDef = registry[i];\n            if (name === pipeDef.name) {\n                return pipeDef;\n            }\n        }\n    }\n    throw new Error(\"Pipe with name '\" + name + \"' not found!\");\n}\n/**\n * Invokes a pipe with 1 arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} v1 1st argument to {\\@link PipeTransform#transform}.\n * @return {?}\n */\nexport function pipeBind1(index, slotOffset, v1) {\n    /** @type {?} */\n    var pipeInstance = load(index);\n    return isPure(index) ? pureFunction1(slotOffset, pipeInstance.transform, v1, pipeInstance) :\n        pipeInstance.transform(v1);\n}\n/**\n * Invokes a pipe with 2 arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} v1 1st argument to {\\@link PipeTransform#transform}.\n * @param {?} v2 2nd argument to {\\@link PipeTransform#transform}.\n * @return {?}\n */\nexport function pipeBind2(index, slotOffset, v1, v2) {\n    /** @type {?} */\n    var pipeInstance = load(index);\n    return isPure(index) ? pureFunction2(slotOffset, pipeInstance.transform, v1, v2, pipeInstance) :\n        pipeInstance.transform(v1, v2);\n}\n/**\n * Invokes a pipe with 3 arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} v1 1st argument to {\\@link PipeTransform#transform}.\n * @param {?} v2 2nd argument to {\\@link PipeTransform#transform}.\n * @param {?} v3 4rd argument to {\\@link PipeTransform#transform}.\n * @return {?}\n */\nexport function pipeBind3(index, slotOffset, v1, v2, v3) {\n    /** @type {?} */\n    var pipeInstance = load(index);\n    return isPure(index) ?\n        pureFunction3(slotOffset, pipeInstance.transform, v1, v2, v3, pipeInstance) :\n        pipeInstance.transform(v1, v2, v3);\n}\n/**\n * Invokes a pipe with 4 arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} v1 1st argument to {\\@link PipeTransform#transform}.\n * @param {?} v2 2nd argument to {\\@link PipeTransform#transform}.\n * @param {?} v3 3rd argument to {\\@link PipeTransform#transform}.\n * @param {?} v4 4th argument to {\\@link PipeTransform#transform}.\n * @return {?}\n */\nexport function pipeBind4(index, slotOffset, v1, v2, v3, v4) {\n    /** @type {?} */\n    var pipeInstance = load(index);\n    return isPure(index) ?\n        pureFunction4(slotOffset, pipeInstance.transform, v1, v2, v3, v4, pipeInstance) :\n        pipeInstance.transform(v1, v2, v3, v4);\n}\n/**\n * Invokes a pipe with variable number of arguments.\n *\n * This instruction acts as a guard to {\\@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param {?} index Pipe index where the pipe was stored on creation.\n * @param {?} slotOffset the offset in the reserved slot space\n * @param {?} values Array of arguments to pass to {\\@link PipeTransform#transform} method.\n * @return {?}\n */\nexport function pipeBindV(index, slotOffset, values) {\n    /** @type {?} */\n    var pipeInstance = load(index);\n    return isPure(index) ? pureFunctionV(slotOffset, pipeInstance.transform, values, pipeInstance) :\n        pipeInstance.transform.apply(pipeInstance, values);\n}\n/**\n * @param {?} index\n * @return {?}\n */\nfunction isPure(index) {\n    return (/** @type {?} */ (getLView()[TVIEW].data[index + HEADER_OFFSET])).pure;\n}\n//# sourceMappingURL=pipe.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Subject, Subscription } from 'rxjs';\n/**\n * Use in directives and components to emit custom events synchronously\n * or asynchronously, and register handlers for those events by subscribing\n * to an instance.\n *\n * \\@usageNotes\n *\n * In the following example, a component defines two output properties\n * that create event emitters. When the title is clicked, the emitter\n * emits an open or close event to toggle the current visibility state.\n *\n * ```\n * \\@Component({\n *   selector: 'zippy',\n *   template: `\n *   <div class=\"zippy\">\n *     <div (click)=\"toggle()\">Toggle</div>\n *     <div [hidden]=\"!visible\">\n *       <ng-content></ng-content>\n *     </div>\n *  </div>`})\n * export class Zippy {\n *   visible: boolean = true;\n * \\@Output() open: EventEmitter<any> = new EventEmitter();\n * \\@Output() close: EventEmitter<any> = new EventEmitter();\n *\n *   toggle() {\n *     this.visible = !this.visible;\n *     if (this.visible) {\n *       this.open.emit(null);\n *     } else {\n *       this.close.emit(null);\n *     }\n *   }\n * }\n * ```\n *\n * Access the event object with the `$event` argument passed to the output event\n * handler:\n *\n * ```\n * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n * ```\n *\n * ### Notes\n *\n * Uses Rx.Observable but provides an adapter to make it work as specified here:\n * https://github.com/jhusain/observable-spec\n *\n * Once a reference implementation of the spec is available, switch to it.\n *\n * \\@publicApi\n * @template T\n */\nvar /**\n * Use in directives and components to emit custom events synchronously\n * or asynchronously, and register handlers for those events by subscribing\n * to an instance.\n *\n * \\@usageNotes\n *\n * In the following example, a component defines two output properties\n * that create event emitters. When the title is clicked, the emitter\n * emits an open or close event to toggle the current visibility state.\n *\n * ```\n * \\@Component({\n *   selector: 'zippy',\n *   template: `\n *   <div class=\"zippy\">\n *     <div (click)=\"toggle()\">Toggle</div>\n *     <div [hidden]=\"!visible\">\n *       <ng-content></ng-content>\n *     </div>\n *  </div>`})\n * export class Zippy {\n *   visible: boolean = true;\n * \\@Output() open: EventEmitter<any> = new EventEmitter();\n * \\@Output() close: EventEmitter<any> = new EventEmitter();\n *\n *   toggle() {\n *     this.visible = !this.visible;\n *     if (this.visible) {\n *       this.open.emit(null);\n *     } else {\n *       this.close.emit(null);\n *     }\n *   }\n * }\n * ```\n *\n * Access the event object with the `$event` argument passed to the output event\n * handler:\n *\n * ```\n * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n * ```\n *\n * ### Notes\n *\n * Uses Rx.Observable but provides an adapter to make it work as specified here:\n * https://github.com/jhusain/observable-spec\n *\n * Once a reference implementation of the spec is available, switch to it.\n *\n * \\@publicApi\n * @template T\n */\nEventEmitter = /** @class */ (function (_super) {\n    tslib_1.__extends(EventEmitter, _super);\n    /**\n     * Creates an instance of this class that can\n     * deliver events synchronously or asynchronously.\n     *\n     * @param isAsync When true, deliver events asynchronously.\n     *\n     */\n    function EventEmitter(isAsync) {\n        if (isAsync === void 0) { isAsync = false; }\n        var _this = _super.call(this) || this;\n        _this.__isAsync = isAsync;\n        return _this;\n    }\n    /**\n     * Emits an event containing a given value.\n     * @param value The value to emit.\n     */\n    /**\n     * Emits an event containing a given value.\n     * @param {?=} value The value to emit.\n     * @return {?}\n     */\n    EventEmitter.prototype.emit = /**\n     * Emits an event containing a given value.\n     * @param {?=} value The value to emit.\n     * @return {?}\n     */\n    function (value) { _super.prototype.next.call(this, value); };\n    /**\n     * Registers handlers for events emitted by this instance.\n     * @param generatorOrNext When supplied, a custom handler for emitted events.\n     * @param error When supplied, a custom handler for an error notification\n     * from this emitter.\n     * @param complete When supplied, a custom handler for a completion\n     * notification from this emitter.\n     */\n    /**\n     * Registers handlers for events emitted by this instance.\n     * @param {?=} generatorOrNext When supplied, a custom handler for emitted events.\n     * @param {?=} error When supplied, a custom handler for an error notification\n     * from this emitter.\n     * @param {?=} complete When supplied, a custom handler for a completion\n     * notification from this emitter.\n     * @return {?}\n     */\n    EventEmitter.prototype.subscribe = /**\n     * Registers handlers for events emitted by this instance.\n     * @param {?=} generatorOrNext When supplied, a custom handler for emitted events.\n     * @param {?=} error When supplied, a custom handler for an error notification\n     * from this emitter.\n     * @param {?=} complete When supplied, a custom handler for a completion\n     * notification from this emitter.\n     * @return {?}\n     */\n    function (generatorOrNext, error, complete) {\n        /** @type {?} */\n        var schedulerFn;\n        /** @type {?} */\n        var errorFn = function (err) { return null; };\n        /** @type {?} */\n        var completeFn = function () { return null; };\n        if (generatorOrNext && typeof generatorOrNext === 'object') {\n            schedulerFn = this.__isAsync ? function (value) {\n                setTimeout(function () { return generatorOrNext.next(value); });\n            } : function (value) { generatorOrNext.next(value); };\n            if (generatorOrNext.error) {\n                errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :\n                    function (err) { generatorOrNext.error(err); };\n            }\n            if (generatorOrNext.complete) {\n                completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :\n                    function () { generatorOrNext.complete(); };\n            }\n        }\n        else {\n            schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :\n                function (value) { generatorOrNext(value); };\n            if (error) {\n                errorFn =\n                    this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };\n            }\n            if (complete) {\n                completeFn =\n                    this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };\n            }\n        }\n        /** @type {?} */\n        var sink = _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);\n        if (generatorOrNext instanceof Subscription) {\n            generatorOrNext.add(sink);\n        }\n        return sink;\n    };\n    return EventEmitter;\n}(Subject));\n/**\n * Use in directives and components to emit custom events synchronously\n * or asynchronously, and register handlers for those events by subscribing\n * to an instance.\n *\n * \\@usageNotes\n *\n * In the following example, a component defines two output properties\n * that create event emitters. When the title is clicked, the emitter\n * emits an open or close event to toggle the current visibility state.\n *\n * ```\n * \\@Component({\n *   selector: 'zippy',\n *   template: `\n *   <div class=\"zippy\">\n *     <div (click)=\"toggle()\">Toggle</div>\n *     <div [hidden]=\"!visible\">\n *       <ng-content></ng-content>\n *     </div>\n *  </div>`})\n * export class Zippy {\n *   visible: boolean = true;\n * \\@Output() open: EventEmitter<any> = new EventEmitter();\n * \\@Output() close: EventEmitter<any> = new EventEmitter();\n *\n *   toggle() {\n *     this.visible = !this.visible;\n *     if (this.visible) {\n *       this.open.emit(null);\n *     } else {\n *       this.close.emit(null);\n *     }\n *   }\n * }\n * ```\n *\n * Access the event object with the `$event` argument passed to the output event\n * handler:\n *\n * ```\n * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n * ```\n *\n * ### Notes\n *\n * Uses Rx.Observable but provides an adapter to make it work as specified here:\n * https://github.com/jhusain/observable-spec\n *\n * Once a reference implementation of the spec is available, switch to it.\n *\n * \\@publicApi\n * @template T\n */\nexport { EventEmitter };\nif (false) {\n    /**\n     * Internal\n     * @type {?}\n     */\n    EventEmitter.prototype.__isAsync;\n}\n//# sourceMappingURL=event_emitter.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { injectTemplateRef as render3InjectTemplateRef } from '../render3/view_engine_compatibility';\nimport { noop } from '../util/noop';\nimport { ElementRef } from './element_ref';\n/**\n * Represents an embedded template that can be used to instantiate embedded views.\n * To instantiate embedded views based on a template, use the `ViewContainerRef`\n * method `createEmbeddedView()`.\n *\n * Access a `TemplateRef` instance by placing a directive on an `<ng-template>`\n * element (or directive prefixed with `*`). The `TemplateRef` for the embedded view\n * is injected into the constructor of the directive,\n * using the `TemplateRef` token.\n *\n * You can also use a `Query` to find a `TemplateRef` associated with\n * a component or a directive.\n *\n * @see `ViewContainerRef`\n * @see [Navigate the Component Tree with DI](guide/dependency-injection-navtree)\n *\n * \\@publicApi\n * @abstract\n * @template C\n */\nvar TemplateRef = /** @class */ (function () {\n    function TemplateRef() {\n    }\n    /**\n     * \\@internal\n     */\n    TemplateRef.__NG_ELEMENT_ID__ = function () { return SWITCH_TEMPLATE_REF_FACTORY(TemplateRef, ElementRef); };\n    return TemplateRef;\n}());\nexport { TemplateRef };\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    TemplateRef.__NG_ELEMENT_ID__;\n    /**\n     * The anchor element in the parent view for this embedded view.\n     *\n     * The data-binding and injection contexts of embedded views created from this `TemplateRef`\n     * inherit from the contexts of this location.\n     *\n     * Typically new embedded views are attached to the view container of this location, but in\n     * advanced use-cases, the view can be attached to a different container while keeping the\n     * data-binding and injection context from the original location.\n     *\n     * @abstract\n     * @return {?}\n     */\n    TemplateRef.prototype.elementRef = function () { };\n    /**\n     * Creates a view object and attaches it to the view container of the parent view.\n     * @abstract\n     * @param {?} context The context for the new view, inherited from the anchor element.\n     * @return {?} The new view object.\n     */\n    TemplateRef.prototype.createEmbeddedView = function (context) { };\n}\n/** @type {?} */\nexport var SWITCH_TEMPLATE_REF_FACTORY__POST_R3__ = render3InjectTemplateRef;\n/** @type {?} */\nvar SWITCH_TEMPLATE_REF_FACTORY__PRE_R3__ = noop;\n/** @type {?} */\nvar SWITCH_TEMPLATE_REF_FACTORY = SWITCH_TEMPLATE_REF_FACTORY__PRE_R3__;\n//# sourceMappingURL=template_ref.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter } from '../event_emitter';\nimport { ElementRef as ViewEngine_ElementRef } from '../linker/element_ref';\nimport { TemplateRef as ViewEngine_TemplateRef } from '../linker/template_ref';\nimport { getSymbolIterator } from '../util';\nimport { assertDefined, assertEqual, assertPreviousIsParent } from './assert';\nimport { getNodeInjectable, locateDirectiveOrProvider } from './di';\nimport { NG_ELEMENT_ID } from './fields';\nimport { store, storeCleanupWithContext } from './instructions';\nimport { unusedValueExportToPlacateAjd as unused1 } from './interfaces/definition';\nimport { unusedValueExportToPlacateAjd as unused2 } from './interfaces/injector';\nimport { unusedValueExportToPlacateAjd as unused3 } from './interfaces/node';\nimport { unusedValueExportToPlacateAjd as unused4 } from './interfaces/query';\nimport { TVIEW } from './interfaces/view';\nimport { getIsParent, getLView, getOrCreateCurrentQueries } from './state';\nimport { flatten, isContentQueryHost } from './util';\nimport { createElementRef, createTemplateRef } from './view_engine_compatibility';\n/** @type {?} */\nvar unusedValueToPlacateAjd = unused1 + unused2 + unused3 + unused4;\n/**\n * A predicate which determines if a given element/directive should be included in the query\n * results.\n * @record\n * @template T\n */\nexport function QueryPredicate() { }\n/**\n * If looking for directives then it contains the directive type.\n * @type {?}\n */\nQueryPredicate.prototype.type;\n/**\n * If selector then contains local names to query for.\n * @type {?}\n */\nQueryPredicate.prototype.selector;\n/**\n * Indicates which token should be read from DI for this query.\n * @type {?}\n */\nQueryPredicate.prototype.read;\n/**\n * An object representing a query, which is a combination of:\n * - query predicate to determines if a given element/directive should be included in the query\n * - values collected based on a predicate\n * - `QueryList` to which collected values should be reported\n * @record\n * @template T\n */\nexport function LQuery() { }\n/**\n * Next query. Used when queries are stored as a linked list in `LQueries`.\n * @type {?}\n */\nLQuery.prototype.next;\n/**\n * Destination to which the value should be added.\n * @type {?}\n */\nLQuery.prototype.list;\n/**\n * A predicate which determines if a given element/directive should be included in the query\n * results.\n * @type {?}\n */\nLQuery.prototype.predicate;\n/**\n * Values which have been located.\n *\n * This is what builds up the `QueryList._valuesTree`.\n * @type {?}\n */\nLQuery.prototype.values;\n/**\n * A pointer to an array that stores collected values from views. This is necessary so we know a\n * container into which to insert nodes collected from views.\n * @type {?}\n */\nLQuery.prototype.containerValues;\nvar LQueries_ = /** @class */ (function () {\n    function LQueries_(parent, shallow, deep) {\n        this.parent = parent;\n        this.shallow = shallow;\n        this.deep = deep;\n    }\n    /**\n     * @template T\n     * @param {?} queryList\n     * @param {?} predicate\n     * @param {?=} descend\n     * @param {?=} read\n     * @return {?}\n     */\n    LQueries_.prototype.track = /**\n     * @template T\n     * @param {?} queryList\n     * @param {?} predicate\n     * @param {?=} descend\n     * @param {?=} read\n     * @return {?}\n     */\n    function (queryList, predicate, descend, read) {\n        if (descend) {\n            this.deep = createQuery(this.deep, queryList, predicate, read != null ? read : null);\n        }\n        else {\n            this.shallow = createQuery(this.shallow, queryList, predicate, read != null ? read : null);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    LQueries_.prototype.clone = /**\n     * @return {?}\n     */\n    function () { return new LQueries_(this, null, this.deep); };\n    /**\n     * @return {?}\n     */\n    LQueries_.prototype.container = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var shallowResults = copyQueriesToContainer(this.shallow);\n        /** @type {?} */\n        var deepResults = copyQueriesToContainer(this.deep);\n        return shallowResults || deepResults ? new LQueries_(this, shallowResults, deepResults) : null;\n    };\n    /**\n     * @return {?}\n     */\n    LQueries_.prototype.createView = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var shallowResults = copyQueriesToView(this.shallow);\n        /** @type {?} */\n        var deepResults = copyQueriesToView(this.deep);\n        return shallowResults || deepResults ? new LQueries_(this, shallowResults, deepResults) : null;\n    };\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    LQueries_.prototype.insertView = /**\n     * @param {?} index\n     * @return {?}\n     */\n    function (index) {\n        insertView(index, this.shallow);\n        insertView(index, this.deep);\n    };\n    /**\n     * @param {?} tNode\n     * @return {?}\n     */\n    LQueries_.prototype.addNode = /**\n     * @param {?} tNode\n     * @return {?}\n     */\n    function (tNode) {\n        add(this.deep, tNode);\n        if (isContentQueryHost(tNode)) {\n            add(this.shallow, tNode);\n            if (tNode.parent && isContentQueryHost(tNode.parent)) {\n                // if node has a content query and parent also has a content query\n                // both queries need to check this node for shallow matches\n                add(/** @type {?} */ ((this.parent)).shallow, tNode);\n            }\n            return this.parent;\n        }\n        isRootNodeOfQuery(tNode) && add(this.shallow, tNode);\n        return this;\n    };\n    /**\n     * @return {?}\n     */\n    LQueries_.prototype.removeView = /**\n     * @return {?}\n     */\n    function () {\n        removeView(this.shallow);\n        removeView(this.deep);\n    };\n    return LQueries_;\n}());\nexport { LQueries_ };\nif (false) {\n    /** @type {?} */\n    LQueries_.prototype.parent;\n    /** @type {?} */\n    LQueries_.prototype.shallow;\n    /** @type {?} */\n    LQueries_.prototype.deep;\n}\n/**\n * @param {?} tNode\n * @return {?}\n */\nfunction isRootNodeOfQuery(tNode) {\n    return tNode.parent === null || isContentQueryHost(tNode.parent);\n}\n/**\n * @param {?} query\n * @return {?}\n */\nfunction copyQueriesToContainer(query) {\n    /** @type {?} */\n    var result = null;\n    while (query) {\n        /** @type {?} */\n        var containerValues = []; // prepare room for views\n        query.values.push(containerValues);\n        /** @type {?} */\n        var clonedQuery = {\n            next: result,\n            list: query.list,\n            predicate: query.predicate,\n            values: containerValues,\n            containerValues: null\n        };\n        result = clonedQuery;\n        query = query.next;\n    }\n    return result;\n}\n/**\n * @param {?} query\n * @return {?}\n */\nfunction copyQueriesToView(query) {\n    /** @type {?} */\n    var result = null;\n    while (query) {\n        /** @type {?} */\n        var clonedQuery = {\n            next: result,\n            list: query.list,\n            predicate: query.predicate,\n            values: [],\n            containerValues: query.values\n        };\n        result = clonedQuery;\n        query = query.next;\n    }\n    return result;\n}\n/**\n * @param {?} index\n * @param {?} query\n * @return {?}\n */\nfunction insertView(index, query) {\n    while (query) {\n        ngDevMode &&\n            assertDefined(query.containerValues, 'View queries need to have a pointer to container values.'); /** @type {?} */\n        ((query.containerValues)).splice(index, 0, query.values);\n        query = query.next;\n    }\n}\n/**\n * @param {?} query\n * @return {?}\n */\nfunction removeView(query) {\n    while (query) {\n        ngDevMode &&\n            assertDefined(query.containerValues, 'View queries need to have a pointer to container values.');\n        /** @type {?} */\n        var containerValues = /** @type {?} */ ((query.containerValues));\n        /** @type {?} */\n        var viewValuesIdx = containerValues.indexOf(query.values);\n        /** @type {?} */\n        var removed = containerValues.splice(viewValuesIdx, 1);\n        // mark a query as dirty only when removed view had matching modes\n        ngDevMode && assertEqual(removed.length, 1, 'removed.length');\n        if (removed[0].length) {\n            query.list.setDirty();\n        }\n        query = query.next;\n    }\n}\n/**\n * Iterates over local names for a given node and returns directive index\n * (or -1 if a local name points to an element).\n *\n * @param {?} tNode static data of a node to check\n * @param {?} selector selector to match\n * @return {?} directive index, -1 or null if a selector didn't match any of the local names\n */\nfunction getIdxOfMatchingSelector(tNode, selector) {\n    /** @type {?} */\n    var localNames = tNode.localNames;\n    if (localNames) {\n        for (var i = 0; i < localNames.length; i += 2) {\n            if (localNames[i] === selector) {\n                return /** @type {?} */ (localNames[i + 1]);\n            }\n        }\n    }\n    return null;\n}\n/**\n * @param {?} read\n * @param {?} tNode\n * @param {?} currentView\n * @return {?}\n */\nfunction queryByReadToken(read, tNode, currentView) {\n    /** @type {?} */\n    var factoryFn = (/** @type {?} */ (read))[NG_ELEMENT_ID];\n    if (typeof factoryFn === 'function') {\n        return factoryFn();\n    }\n    else {\n        /** @type {?} */\n        var matchingIdx = locateDirectiveOrProvider(tNode, currentView, /** @type {?} */ (read), false);\n        if (matchingIdx !== null) {\n            return getNodeInjectable(currentView[TVIEW].data, currentView, matchingIdx, /** @type {?} */ (tNode));\n        }\n    }\n    return null;\n}\n/**\n * @param {?} tNode\n * @param {?} currentView\n * @return {?}\n */\nfunction queryByTNodeType(tNode, currentView) {\n    if (tNode.type === 3 /* Element */ || tNode.type === 4 /* ElementContainer */) {\n        return createElementRef(ViewEngine_ElementRef, tNode, currentView);\n    }\n    if (tNode.type === 0 /* Container */) {\n        return createTemplateRef(ViewEngine_TemplateRef, ViewEngine_ElementRef, tNode, currentView);\n    }\n    return null;\n}\n/**\n * @param {?} templateRefToken\n * @param {?} tNode\n * @param {?} currentView\n * @param {?} read\n * @return {?}\n */\nfunction queryByTemplateRef(templateRefToken, tNode, currentView, read) {\n    /** @type {?} */\n    var templateRefResult = (/** @type {?} */ (templateRefToken))[NG_ELEMENT_ID]();\n    if (read) {\n        return templateRefResult ? queryByReadToken(read, tNode, currentView) : null;\n    }\n    return templateRefResult;\n}\n/**\n * @param {?} tNode\n * @param {?} currentView\n * @param {?} read\n * @param {?} matchingIdx\n * @return {?}\n */\nfunction queryRead(tNode, currentView, read, matchingIdx) {\n    if (read) {\n        return queryByReadToken(read, tNode, currentView);\n    }\n    if (matchingIdx > -1) {\n        return getNodeInjectable(currentView[TVIEW].data, currentView, matchingIdx, /** @type {?} */ (tNode));\n    }\n    // if read token and / or strategy is not specified,\n    // detect it using appropriate tNode type\n    return queryByTNodeType(tNode, currentView);\n}\n/**\n * @param {?} query\n * @param {?} tNode\n * @return {?}\n */\nfunction add(query, tNode) {\n    /** @type {?} */\n    var currentView = getLView();\n    while (query) {\n        /** @type {?} */\n        var predicate = query.predicate;\n        /** @type {?} */\n        var type = /** @type {?} */ (predicate.type);\n        if (type) {\n            /** @type {?} */\n            var result = null;\n            if (type === ViewEngine_TemplateRef) {\n                result = queryByTemplateRef(type, tNode, currentView, predicate.read);\n            }\n            else {\n                /** @type {?} */\n                var matchingIdx = locateDirectiveOrProvider(tNode, currentView, type, false);\n                if (matchingIdx !== null) {\n                    result = queryRead(tNode, currentView, predicate.read, matchingIdx);\n                }\n            }\n            if (result !== null) {\n                addMatch(query, result);\n            }\n        }\n        else {\n            /** @type {?} */\n            var selector = /** @type {?} */ ((predicate.selector));\n            for (var i = 0; i < selector.length; i++) {\n                /** @type {?} */\n                var matchingIdx = getIdxOfMatchingSelector(tNode, selector[i]);\n                if (matchingIdx !== null) {\n                    /** @type {?} */\n                    var result = queryRead(tNode, currentView, predicate.read, matchingIdx);\n                    if (result !== null) {\n                        addMatch(query, result);\n                    }\n                }\n            }\n        }\n        query = query.next;\n    }\n}\n/**\n * @param {?} query\n * @param {?} matchingValue\n * @return {?}\n */\nfunction addMatch(query, matchingValue) {\n    query.values.push(matchingValue);\n    query.list.setDirty();\n}\n/**\n * @template T\n * @param {?} predicate\n * @param {?} read\n * @return {?}\n */\nfunction createPredicate(predicate, read) {\n    /** @type {?} */\n    var isArray = Array.isArray(predicate);\n    return {\n        type: isArray ? null : /** @type {?} */ (predicate),\n        selector: isArray ? /** @type {?} */ (predicate) : null,\n        read: read\n    };\n}\n/**\n * @template T\n * @param {?} previous\n * @param {?} queryList\n * @param {?} predicate\n * @param {?} read\n * @return {?}\n */\nfunction createQuery(previous, queryList, predicate, read) {\n    return {\n        next: previous,\n        list: queryList,\n        predicate: createPredicate(predicate, read),\n        values: (/** @type {?} */ ((queryList)))._valuesTree,\n        containerValues: null\n    };\n}\n/**\n * @template T\n */\nvar /**\n * @template T\n */\nQueryList_ = /** @class */ (function () {\n    function QueryList_() {\n        this.dirty = true;\n        this.changes = new EventEmitter();\n        this._values = [];\n        /**\n         * \\@internal\n         */\n        this._valuesTree = [];\n    }\n    Object.defineProperty(QueryList_.prototype, \"length\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._values.length; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QueryList_.prototype, \"first\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var values = this._values;\n            return values.length ? values[0] : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(QueryList_.prototype, \"last\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var values = this._values;\n            return values.length ? values[values.length - 1] : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     */\n    /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     * @template U\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList_.prototype.map = /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     * @template U\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { return this._values.map(fn); };\n    /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     */\n    /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList_.prototype.filter = /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        return this._values.filter(fn);\n    };\n    /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     */\n    /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList_.prototype.find = /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        return this._values.find(fn);\n    };\n    /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     */\n    /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     * @template U\n     * @param {?} fn\n     * @param {?} init\n     * @return {?}\n     */\n    QueryList_.prototype.reduce = /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     * @template U\n     * @param {?} fn\n     * @param {?} init\n     * @return {?}\n     */\n    function (fn, init) {\n        return this._values.reduce(fn, init);\n    };\n    /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     */\n    /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList_.prototype.forEach = /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._values.forEach(fn); };\n    /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     */\n    /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList_.prototype.some = /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        return this._values.some(fn);\n    };\n    /**\n     * @return {?}\n     */\n    QueryList_.prototype.toArray = /**\n     * @return {?}\n     */\n    function () { return this._values.slice(0); };\n    /**\n     * @return {?}\n     */\n    QueryList_.prototype[getSymbolIterator()] = /**\n     * @return {?}\n     */\n    function () { return (/** @type {?} */ (this._values))[getSymbolIterator()](); };\n    /**\n     * @return {?}\n     */\n    QueryList_.prototype.toString = /**\n     * @return {?}\n     */\n    function () { return this._values.toString(); };\n    /**\n     * @param {?} res\n     * @return {?}\n     */\n    QueryList_.prototype.reset = /**\n     * @param {?} res\n     * @return {?}\n     */\n    function (res) {\n        this._values = flatten(res);\n        (/** @type {?} */ (this)).dirty = false;\n    };\n    /**\n     * @return {?}\n     */\n    QueryList_.prototype.notifyOnChanges = /**\n     * @return {?}\n     */\n    function () { (/** @type {?} */ (this.changes)).emit(this); };\n    /**\n     * @return {?}\n     */\n    QueryList_.prototype.setDirty = /**\n     * @return {?}\n     */\n    function () { (/** @type {?} */ (this)).dirty = true; };\n    /**\n     * @return {?}\n     */\n    QueryList_.prototype.destroy = /**\n     * @return {?}\n     */\n    function () {\n        (/** @type {?} */ (this.changes)).complete();\n        (/** @type {?} */ (this.changes)).unsubscribe();\n    };\n    return QueryList_;\n}());\nif (false) {\n    /** @type {?} */\n    QueryList_.prototype.dirty;\n    /** @type {?} */\n    QueryList_.prototype.changes;\n    /** @type {?} */\n    QueryList_.prototype._values;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    QueryList_.prototype._valuesTree;\n}\n/** @type {?} */\nexport var QueryList = /** @type {?} */ (QueryList_);\n/**\n * Creates and returns a QueryList.\n *\n * @template T\n * @param {?} memoryIndex The index in memory where the QueryList should be saved. If null,\n * this is is a content query and the QueryList will be saved later through directiveCreate.\n * @param {?} predicate The type for which the query will search\n * @param {?=} descend Whether or not to descend into children\n * @param {?=} read What to save in the query\n * @return {?} QueryList<T>\n */\nexport function query(memoryIndex, predicate, descend, \n// TODO: \"read\" should be an AbstractType (FW-486)\nread) {\n    ngDevMode && assertPreviousIsParent(getIsParent());\n    /** @type {?} */\n    var queryList = new QueryList();\n    /** @type {?} */\n    var queries = getOrCreateCurrentQueries(LQueries_);\n    queries.track(queryList, predicate, descend, read);\n    storeCleanupWithContext(getLView(), queryList, queryList.destroy);\n    if (memoryIndex != null) {\n        store(memoryIndex, queryList);\n    }\n    return queryList;\n}\n/**\n * Refreshes a query by combining matches from all active views and removing matches from deleted\n * views.\n * Returns true if a query got dirty during change detection, false otherwise.\n * @param {?} queryList\n * @return {?}\n */\nexport function queryRefresh(queryList) {\n    /** @type {?} */\n    var queryListImpl = (/** @type {?} */ ((queryList)));\n    if (queryList.dirty) {\n        queryList.reset(queryListImpl._valuesTree);\n        queryList.notifyOnChanges();\n        return true;\n    }\n    return false;\n}\n//# sourceMappingURL=query.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nvar BRAND = '__SANITIZER_TRUSTED_BRAND__';\n/** @enum {string} */\nvar BypassType = {\n    Url: 'Url',\n    Html: 'Html',\n    ResourceUrl: 'ResourceUrl',\n    Script: 'Script',\n    Style: 'Style',\n};\nexport { BypassType };\n/**\n * A branded trusted string used with sanitization.\n *\n * See: {\\@link TrustedHtmlString}, {\\@link TrustedResourceUrlString}, {\\@link TrustedScriptString},\n * {\\@link TrustedStyleString}, {\\@link TrustedUrlString}\n * @record\n */\nexport function TrustedString() { }\n/**\n * A branded trusted string used with sanitization of `html` strings.\n *\n * See: {\\@link bypassSanitizationTrustHtml} and {\\@link htmlSanitizer}.\n * @record\n */\nexport function TrustedHtmlString() { }\n/**\n * A branded trusted string used with sanitization of `style` strings.\n *\n * See: {\\@link bypassSanitizationTrustStyle} and {\\@link styleSanitizer}.\n * @record\n */\nexport function TrustedStyleString() { }\n/**\n * A branded trusted string used with sanitization of `url` strings.\n *\n * See: {\\@link bypassSanitizationTrustScript} and {\\@link scriptSanitizer}.\n * @record\n */\nexport function TrustedScriptString() { }\n/**\n * A branded trusted string used with sanitization of `url` strings.\n *\n * See: {\\@link bypassSanitizationTrustUrl} and {\\@link urlSanitizer}.\n * @record\n */\nexport function TrustedUrlString() { }\n/**\n * A branded trusted string used with sanitization of `resourceUrl` strings.\n *\n * See: {\\@link bypassSanitizationTrustResourceUrl} and {\\@link resourceUrlSanitizer}.\n * @record\n */\nexport function TrustedResourceUrlString() { }\n/**\n * @param {?} value\n * @param {?} type\n * @return {?}\n */\nexport function allowSanitizationBypass(value, type) {\n    return (value instanceof String && (/** @type {?} */ (value))[BRAND] === type);\n}\n/**\n * Mark `html` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link htmlSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedHtml `html` string which needs to be implicitly trusted.\n * @return {?} a `html` `String` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustHtml(trustedHtml) {\n    return bypassSanitizationTrustString(trustedHtml, \"Html\" /* Html */);\n}\n/**\n * Mark `style` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link styleSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedStyle `style` string which needs to be implicitly trusted.\n * @return {?} a `style` `String` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustStyle(trustedStyle) {\n    return bypassSanitizationTrustString(trustedStyle, \"Style\" /* Style */);\n}\n/**\n * Mark `script` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link scriptSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedScript `script` string which needs to be implicitly trusted.\n * @return {?} a `script` `String` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustScript(trustedScript) {\n    return bypassSanitizationTrustString(trustedScript, \"Script\" /* Script */);\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link urlSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedUrl `url` string which needs to be implicitly trusted.\n * @return {?} a `url` `String` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustUrl(trustedUrl) {\n    return bypassSanitizationTrustString(trustedUrl, \"Url\" /* Url */);\n}\n/**\n * Mark `url` string as trusted.\n *\n * This function wraps the trusted string in `String` and brands it in a way which makes it\n * recognizable to {\\@link resourceUrlSanitizer} to be trusted implicitly.\n *\n * @param {?} trustedResourceUrl `url` string which needs to be implicitly trusted.\n * @return {?} a `url` `String` which has been branded to be implicitly trusted.\n */\nexport function bypassSanitizationTrustResourceUrl(trustedResourceUrl) {\n    return bypassSanitizationTrustString(trustedResourceUrl, \"ResourceUrl\" /* ResourceUrl */);\n}\n/**\n * @param {?} trustedString\n * @param {?} mode\n * @return {?}\n */\nfunction bypassSanitizationTrustString(trustedString, mode) {\n    /** @type {?} */\n    var trusted = /** @type {?} */ (new String(trustedString));\n    trusted[BRAND] = mode;\n    return trusted;\n}\n//# sourceMappingURL=bypass.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { isDevMode } from '../is_dev_mode';\nimport { _sanitizeUrl } from './url_sanitizer';\n/** *\n * Regular expression for safe style values.\n *\n * Quotes (\" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.\n *\n * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or\n * font-family) and hence could allow multiple values to get injected, but that should pose no risk\n * of XSS.\n *\n * The function expression checks only for XSS safety, not for CSS validity.\n *\n * This regular expression was taken from the Closure sanitization library, and augmented for\n * transformation values.\n  @type {?} */\nvar VALUES = '[-,.\"\\'%_!# a-zA-Z0-9]+';\n/** @type {?} */\nvar TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';\n/** @type {?} */\nvar COLOR_FNS = '(?:rgb|hsl)a?';\n/** @type {?} */\nvar GRADIENTS = '(?:repeating-)?(?:linear|radial)-gradient';\n/** @type {?} */\nvar CSS3_FNS = '(?:calc|attr)';\n/** @type {?} */\nvar FN_ARGS = '\\\\([-0-9.%, #a-zA-Z]+\\\\)';\n/** @type {?} */\nvar SAFE_STYLE_VALUE = new RegExp(\"^(\" + VALUES + \"|\" +\n    (\"(?:\" + TRANSFORMATION_FNS + \"|\" + COLOR_FNS + \"|\" + GRADIENTS + \"|\" + CSS3_FNS + \")\") +\n    (FN_ARGS + \")$\"), 'g');\n/** *\n * Matches a `url(...)` value with an arbitrary argument as long as it does\n * not contain parentheses.\n *\n * The URL value still needs to be sanitized separately.\n *\n * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted\n * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.\n * by observing whether scroll bars are displayed, or character ranges used by a font face\n * definition.\n *\n * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that\n * binding a URL value without further cooperation from the page will cause an information leak, and\n * if so, it is just a leak, not a full blown XSS vulnerability.\n *\n * Given the common use case, low likelihood of attack vector, and low impact of an attack, this\n * code is permissive and allows URLs that sanitize otherwise.\n  @type {?} */\nvar URL_RE = /^url\\(([^)]+)\\)$/;\n/**\n * Checks that quotes (\" and ') are properly balanced inside a string. Assumes\n * that neither escape (\\) nor any other character that could result in\n * breaking out of a string parsing context are allowed;\n * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.\n *\n * This code was taken from the Closure sanitization library.\n * @param {?} value\n * @return {?}\n */\nfunction hasBalancedQuotes(value) {\n    /** @type {?} */\n    var outsideSingle = true;\n    /** @type {?} */\n    var outsideDouble = true;\n    for (var i = 0; i < value.length; i++) {\n        /** @type {?} */\n        var c = value.charAt(i);\n        if (c === '\\'' && outsideDouble) {\n            outsideSingle = !outsideSingle;\n        }\n        else if (c === '\"' && outsideSingle) {\n            outsideDouble = !outsideDouble;\n        }\n    }\n    return outsideSingle && outsideDouble;\n}\n/**\n * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single\n * value) and returns a value that is safe to use in a browser environment.\n * @param {?} value\n * @return {?}\n */\nexport function _sanitizeStyle(value) {\n    value = String(value).trim(); // Make sure it's actually a string.\n    if (!value)\n        return '';\n    /** @type {?} */\n    var urlMatch = value.match(URL_RE);\n    if ((urlMatch && _sanitizeUrl(urlMatch[1]) === urlMatch[1]) ||\n        value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {\n        return value; // Safe style values.\n    }\n    if (isDevMode()) {\n        console.warn(\"WARNING: sanitizing unsafe style value \" + value + \" (see http://g.co/ng/security#xss).\");\n    }\n    return 'unsafe';\n}\n/**\n * Used to intercept and sanitize style values before they are written to the renderer.\n *\n * This function is designed to be called in two modes. When a value is not provided\n * then the function will return a boolean whether a property will be sanitized later.\n * If a value is provided then the sanitized version of that will be returned.\n * @record\n */\nexport function StyleSanitizeFn() { }\n//# sourceMappingURL=style_sanitizer.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { SANITIZER } from '../render3/interfaces/view';\nimport { getLView } from '../render3/state';\nimport { stringify } from '../render3/util';\nimport { allowSanitizationBypass } from './bypass';\nimport { _sanitizeHtml as _sanitizeHtml } from './html_sanitizer';\nimport { SecurityContext } from './security';\nimport { _sanitizeStyle as _sanitizeStyle } from './style_sanitizer';\nimport { _sanitizeUrl as _sanitizeUrl } from './url_sanitizer';\n/**\n * An `html` sanitizer which converts untrusted `html` **string** into trusted string by removing\n * dangerous content.\n *\n * This method parses the `html` and locates potentially dangerous content (such as urls and\n * javascript) and removes it.\n *\n * It is possible to mark a string as trusted by calling {\\@link bypassSanitizationTrustHtml}.\n *\n * @param {?} unsafeHtml untrusted `html`, typically from the user.\n * @return {?} `html` string which is safe to display to user, because all of the dangerous javascript\n * and urls have been removed.\n */\nexport function sanitizeHtml(unsafeHtml) {\n    /** @type {?} */\n    var sanitizer = getLView()[SANITIZER];\n    if (sanitizer) {\n        return sanitizer.sanitize(SecurityContext.HTML, unsafeHtml) || '';\n    }\n    if (allowSanitizationBypass(unsafeHtml, \"Html\" /* Html */)) {\n        return unsafeHtml.toString();\n    }\n    return _sanitizeHtml(document, stringify(unsafeHtml));\n}\n/**\n * A `style` sanitizer which converts untrusted `style` **string** into trusted string by removing\n * dangerous content.\n *\n * This method parses the `style` and locates potentially dangerous content (such as urls and\n * javascript) and removes it.\n *\n * It is possible to mark a string as trusted by calling {\\@link bypassSanitizationTrustStyle}.\n *\n * @param {?} unsafeStyle untrusted `style`, typically from the user.\n * @return {?} `style` string which is safe to bind to the `style` properties, because all of the\n * dangerous javascript and urls have been removed.\n */\nexport function sanitizeStyle(unsafeStyle) {\n    /** @type {?} */\n    var sanitizer = getLView()[SANITIZER];\n    if (sanitizer) {\n        return sanitizer.sanitize(SecurityContext.STYLE, unsafeStyle) || '';\n    }\n    if (allowSanitizationBypass(unsafeStyle, \"Style\" /* Style */)) {\n        return unsafeStyle.toString();\n    }\n    return _sanitizeStyle(stringify(unsafeStyle));\n}\n/**\n * A `url` sanitizer which converts untrusted `url` **string** into trusted string by removing\n * dangerous\n * content.\n *\n * This method parses the `url` and locates potentially dangerous content (such as javascript) and\n * removes it.\n *\n * It is possible to mark a string as trusted by calling {\\@link bypassSanitizationTrustUrl}.\n *\n * @param {?} unsafeUrl untrusted `url`, typically from the user.\n * @return {?} `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * all of the dangerous javascript has been removed.\n */\nexport function sanitizeUrl(unsafeUrl) {\n    /** @type {?} */\n    var sanitizer = getLView()[SANITIZER];\n    if (sanitizer) {\n        return sanitizer.sanitize(SecurityContext.URL, unsafeUrl) || '';\n    }\n    if (allowSanitizationBypass(unsafeUrl, \"Url\" /* Url */)) {\n        return unsafeUrl.toString();\n    }\n    return _sanitizeUrl(stringify(unsafeUrl));\n}\n/**\n * A `url` sanitizer which only lets trusted `url`s through.\n *\n * This passes only `url`s marked trusted by calling {\\@link bypassSanitizationTrustResourceUrl}.\n *\n * @param {?} unsafeResourceUrl untrusted `url`, typically from the user.\n * @return {?} `url` string which is safe to bind to the `src` properties such as `<img src>`, because\n * only trusted `url`s have been allowed to pass.\n */\nexport function sanitizeResourceUrl(unsafeResourceUrl) {\n    /** @type {?} */\n    var sanitizer = getLView()[SANITIZER];\n    if (sanitizer) {\n        return sanitizer.sanitize(SecurityContext.RESOURCE_URL, unsafeResourceUrl) || '';\n    }\n    if (allowSanitizationBypass(unsafeResourceUrl, \"ResourceUrl\" /* ResourceUrl */)) {\n        return unsafeResourceUrl.toString();\n    }\n    throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');\n}\n/**\n * A `script` sanitizer which only lets trusted javascript through.\n *\n * This passes only `script`s marked trusted by calling {\\@link\n * bypassSanitizationTrustScript}.\n *\n * @param {?} unsafeScript untrusted `script`, typically from the user.\n * @return {?} `url` string which is safe to bind to the `<script>` element such as `<img src>`,\n * because only trusted `scripts` have been allowed to pass.\n */\nexport function sanitizeScript(unsafeScript) {\n    /** @type {?} */\n    var sanitizer = getLView()[SANITIZER];\n    if (sanitizer) {\n        return sanitizer.sanitize(SecurityContext.SCRIPT, unsafeScript) || '';\n    }\n    if (allowSanitizationBypass(unsafeScript, \"Script\" /* Script */)) {\n        return unsafeScript.toString();\n    }\n    throw new Error('unsafe value used in a script context');\n}\n/** *\n * The default style sanitizer will handle sanitization for style properties by\n * sanitizing any CSS property that can include a `url` value (usually image-based properties)\n  @type {?} */\nexport var defaultStyleSanitizer = (/** @type {?} */ (function (prop, value) {\n    if (value === undefined) {\n        return prop === 'background-image' || prop === 'background' || prop === 'border-image' ||\n            prop === 'filter' || prop === 'filter' || prop === 'list-style' ||\n            prop === 'list-style-image';\n    }\n    return sanitizeStyle(value);\n}));\n//# sourceMappingURL=sanitization.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { defineInjectable, defineInjector, } from '../../di/defs';\nimport { inject } from '../../di/injector_compatibility';\nimport * as r3 from '../index';\nimport * as sanitization from '../../sanitization/sanitization';\n/** *\n * A mapping of the \\@angular/core API surface used in generated expressions to the actual symbols.\n *\n * This should be kept up to date with the public exports of \\@angular/core.\n  @type {?} */\nexport var angularCoreEnv = {\n    'ÉµdefineBase': r3.defineBase,\n    'ÉµdefineComponent': r3.defineComponent,\n    'ÉµdefineDirective': r3.defineDirective,\n    'defineInjectable': defineInjectable,\n    'defineInjector': defineInjector,\n    'ÉµdefineNgModule': r3.defineNgModule,\n    'ÉµdefinePipe': r3.definePipe,\n    'ÉµdirectiveInject': r3.directiveInject,\n    'ÉµgetFactoryOf': r3.getFactoryOf,\n    'ÉµgetInheritedFactory': r3.getInheritedFactory,\n    'inject': inject,\n    'ÉµinjectAttribute': r3.injectAttribute,\n    'ÉµtemplateRefExtractor': r3.templateRefExtractor,\n    'ÉµNgOnChangesFeature': r3.NgOnChangesFeature,\n    'ÉµProvidersFeature': r3.ProvidersFeature,\n    'ÉµInheritDefinitionFeature': r3.InheritDefinitionFeature,\n    'ÉµelementAttribute': r3.elementAttribute,\n    'Éµbind': r3.bind,\n    'Éµcontainer': r3.container,\n    'ÉµnextContext': r3.nextContext,\n    'ÉµcontainerRefreshStart': r3.containerRefreshStart,\n    'ÉµcontainerRefreshEnd': r3.containerRefreshEnd,\n    'ÉµloadQueryList': r3.loadQueryList,\n    'ÉµnamespaceHTML': r3.namespaceHTML,\n    'ÉµnamespaceMathML': r3.namespaceMathML,\n    'ÉµnamespaceSVG': r3.namespaceSVG,\n    'ÉµenableBindings': r3.enableBindings,\n    'ÉµdisableBindings': r3.disableBindings,\n    'ÉµallocHostVars': r3.allocHostVars,\n    'ÉµelementStart': r3.elementStart,\n    'ÉµelementEnd': r3.elementEnd,\n    'Éµelement': r3.element,\n    'ÉµelementContainerStart': r3.elementContainerStart,\n    'ÉµelementContainerEnd': r3.elementContainerEnd,\n    'ÉµpureFunction0': r3.pureFunction0,\n    'ÉµpureFunction1': r3.pureFunction1,\n    'ÉµpureFunction2': r3.pureFunction2,\n    'ÉµpureFunction3': r3.pureFunction3,\n    'ÉµpureFunction4': r3.pureFunction4,\n    'ÉµpureFunction5': r3.pureFunction5,\n    'ÉµpureFunction6': r3.pureFunction6,\n    'ÉµpureFunction7': r3.pureFunction7,\n    'ÉµpureFunction8': r3.pureFunction8,\n    'ÉµpureFunctionV': r3.pureFunctionV,\n    'ÉµgetCurrentView': r3.getCurrentView,\n    'ÉµrestoreView': r3.restoreView,\n    'Éµinterpolation1': r3.interpolation1,\n    'Éµinterpolation2': r3.interpolation2,\n    'Éµinterpolation3': r3.interpolation3,\n    'Éµinterpolation4': r3.interpolation4,\n    'Éµinterpolation5': r3.interpolation5,\n    'Éµinterpolation6': r3.interpolation6,\n    'Éµinterpolation7': r3.interpolation7,\n    'Éµinterpolation8': r3.interpolation8,\n    'ÉµinterpolationV': r3.interpolationV,\n    'ÉµelementClassProp': r3.elementClassProp,\n    'Éµlistener': r3.listener,\n    'Éµload': r3.load,\n    'Éµprojection': r3.projection,\n    'ÉµelementProperty': r3.elementProperty,\n    'ÉµpipeBind1': r3.pipeBind1,\n    'ÉµpipeBind2': r3.pipeBind2,\n    'ÉµpipeBind3': r3.pipeBind3,\n    'ÉµpipeBind4': r3.pipeBind4,\n    'ÉµpipeBindV': r3.pipeBindV,\n    'ÉµprojectionDef': r3.projectionDef,\n    'Éµpipe': r3.pipe,\n    'Éµquery': r3.query,\n    'ÉµqueryRefresh': r3.queryRefresh,\n    'ÉµregisterContentQuery': r3.registerContentQuery,\n    'Éµreference': r3.reference,\n    'ÉµelementStyling': r3.elementStyling,\n    'ÉµelementStylingMap': r3.elementStylingMap,\n    'ÉµelementStyleProp': r3.elementStyleProp,\n    'ÉµelementStylingApply': r3.elementStylingApply,\n    'Éµtemplate': r3.template,\n    'Éµtext': r3.text,\n    'ÉµtextBinding': r3.textBinding,\n    'ÉµembeddedViewStart': r3.embeddedViewStart,\n    'ÉµembeddedViewEnd': r3.embeddedViewEnd,\n    'Éµi18n': r3.i18n,\n    'Éµi18nAttributes': r3.i18nAttributes,\n    'Éµi18nExp': r3.i18nExp,\n    'Éµi18nStart': r3.i18nStart,\n    'Éµi18nEnd': r3.i18nEnd,\n    'Éµi18nApply': r3.i18nApply,\n    'Éµi18nPostprocess': r3.i18nPostprocess,\n    'ÉµsanitizeHtml': sanitization.sanitizeHtml,\n    'ÉµsanitizeStyle': sanitization.sanitizeStyle,\n    'ÉµdefaultStyleSanitizer': sanitization.defaultStyleSanitizer,\n    'ÉµsanitizeResourceUrl': sanitization.sanitizeResourceUrl,\n    'ÉµsanitizeScript': sanitization.sanitizeScript,\n    'ÉµsanitizeUrl': sanitization.sanitizeUrl\n};\n//# sourceMappingURL=environment.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** *\n * \\@description\n *\n * Represents a type that a Component or other object is instances of.\n *\n * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by\n * the `MyCustomComponent` constructor function.\n *\n * \\@publicApi\n  @type {?} */\nexport var Type = Function;\n/**\n * @param {?} v\n * @return {?}\n */\nexport function isType(v) {\n    return typeof v === 'function';\n}\n/** @typedef {?} */\nvar Mutable;\nexport { Mutable };\n//# sourceMappingURL=type.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Type, isType } from '../type';\nimport { global, stringify } from '../util';\nimport { ANNOTATIONS, PARAMETERS, PROP_METADATA } from '../util/decorators';\n/** *\n * Attention: These regex has to hold even if the code is minified!\n  @type {?} */\nexport var DELEGATE_CTOR = /^function\\s+\\S+\\(\\)\\s*{[\\s\\S]+\\.apply\\(this,\\s*arguments\\)/;\n/** @type {?} */\nexport var INHERITED_CLASS = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{/;\n/** @type {?} */\nexport var INHERITED_CLASS_WITH_CTOR = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{[\\s\\S]*constructor\\s*\\(/;\nvar ReflectionCapabilities = /** @class */ (function () {\n    function ReflectionCapabilities(reflect) {\n        this._reflect = reflect || global['Reflect'];\n    }\n    /**\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.isReflectionEnabled = /**\n     * @return {?}\n     */\n    function () { return true; };\n    /**\n     * @template T\n     * @param {?} t\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.factory = /**\n     * @template T\n     * @param {?} t\n     * @return {?}\n     */\n    function (t) { return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return new (t.bind.apply(t, [void 0].concat(args)))();\n    }; };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} paramTypes\n     * @param {?} paramAnnotations\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype._zipTypesAndAnnotations = /**\n     * \\@internal\n     * @param {?} paramTypes\n     * @param {?} paramAnnotations\n     * @return {?}\n     */\n    function (paramTypes, paramAnnotations) {\n        /** @type {?} */\n        var result;\n        if (typeof paramTypes === 'undefined') {\n            result = new Array(paramAnnotations.length);\n        }\n        else {\n            result = new Array(paramTypes.length);\n        }\n        for (var i = 0; i < result.length; i++) {\n            // TS outputs Object for parameters without types, while Traceur omits\n            // the annotations. For now we preserve the Traceur behavior to aid\n            // migration, but this can be revisited.\n            if (typeof paramTypes === 'undefined') {\n                result[i] = [];\n            }\n            else if (paramTypes[i] != Object) {\n                result[i] = [paramTypes[i]];\n            }\n            else {\n                result[i] = [];\n            }\n            if (paramAnnotations && paramAnnotations[i] != null) {\n                result[i] = result[i].concat(paramAnnotations[i]);\n            }\n        }\n        return result;\n    };\n    /**\n     * @param {?} type\n     * @param {?} parentCtor\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype._ownParameters = /**\n     * @param {?} type\n     * @param {?} parentCtor\n     * @return {?}\n     */\n    function (type, parentCtor) {\n        /** @type {?} */\n        var typeStr = type.toString();\n        // If we have no decorators, we only have function.length as metadata.\n        // In that case, to detect whether a child class declared an own constructor or not,\n        // we need to look inside of that constructor to check whether it is\n        // just calling the parent.\n        // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439\n        // that sets 'design:paramtypes' to []\n        // if a class inherits from another class but has no ctor declared itself.\n        if (DELEGATE_CTOR.exec(typeStr) ||\n            (INHERITED_CLASS.exec(typeStr) && !INHERITED_CLASS_WITH_CTOR.exec(typeStr))) {\n            return null;\n        }\n        // Prefer the direct API.\n        if ((/** @type {?} */ (type)).parameters && (/** @type {?} */ (type)).parameters !== parentCtor.parameters) {\n            return (/** @type {?} */ (type)).parameters;\n        }\n        /** @type {?} */\n        var tsickleCtorParams = (/** @type {?} */ (type)).ctorParameters;\n        if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {\n            /** @type {?} */\n            var ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;\n            /** @type {?} */\n            var paramTypes_1 = ctorParameters.map(function (ctorParam) { return ctorParam && ctorParam.type; });\n            /** @type {?} */\n            var paramAnnotations_1 = ctorParameters.map(function (ctorParam) {\n                return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators);\n            });\n            return this._zipTypesAndAnnotations(paramTypes_1, paramAnnotations_1);\n        }\n        /** @type {?} */\n        var paramAnnotations = type.hasOwnProperty(PARAMETERS) && (/** @type {?} */ (type))[PARAMETERS];\n        /** @type {?} */\n        var paramTypes = this._reflect && this._reflect.getOwnMetadata &&\n            this._reflect.getOwnMetadata('design:paramtypes', type);\n        if (paramTypes || paramAnnotations) {\n            return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n        }\n        // If a class has no decorators, at least create metadata\n        // based on function.length.\n        // Note: We know that this is a real constructor as we checked\n        // the content of the constructor above.\n        return new Array((/** @type {?} */ (type.length))).fill(undefined);\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.parameters = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        // Note: only report metadata if we have at least one class decorator\n        // to stay in sync with the static reflector.\n        if (!isType(type)) {\n            return [];\n        }\n        /** @type {?} */\n        var parentCtor = getParentCtor(type);\n        /** @type {?} */\n        var parameters = this._ownParameters(type, parentCtor);\n        if (!parameters && parentCtor !== Object) {\n            parameters = this.parameters(parentCtor);\n        }\n        return parameters || [];\n    };\n    /**\n     * @param {?} typeOrFunc\n     * @param {?} parentCtor\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype._ownAnnotations = /**\n     * @param {?} typeOrFunc\n     * @param {?} parentCtor\n     * @return {?}\n     */\n    function (typeOrFunc, parentCtor) {\n        // Prefer the direct API.\n        if ((/** @type {?} */ (typeOrFunc)).annotations && (/** @type {?} */ (typeOrFunc)).annotations !== parentCtor.annotations) {\n            /** @type {?} */\n            var annotations = (/** @type {?} */ (typeOrFunc)).annotations;\n            if (typeof annotations === 'function' && annotations.annotations) {\n                annotations = annotations.annotations;\n            }\n            return annotations;\n        }\n        // API of tsickle for lowering decorators to properties on the class.\n        if ((/** @type {?} */ (typeOrFunc)).decorators && (/** @type {?} */ (typeOrFunc)).decorators !== parentCtor.decorators) {\n            return convertTsickleDecoratorIntoMetadata((/** @type {?} */ (typeOrFunc)).decorators);\n        }\n        // API for metadata created by invoking the decorators.\n        if (typeOrFunc.hasOwnProperty(ANNOTATIONS)) {\n            return (/** @type {?} */ (typeOrFunc))[ANNOTATIONS];\n        }\n        return null;\n    };\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.annotations = /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    function (typeOrFunc) {\n        if (!isType(typeOrFunc)) {\n            return [];\n        }\n        /** @type {?} */\n        var parentCtor = getParentCtor(typeOrFunc);\n        /** @type {?} */\n        var ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];\n        /** @type {?} */\n        var parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];\n        return parentAnnotations.concat(ownAnnotations);\n    };\n    /**\n     * @param {?} typeOrFunc\n     * @param {?} parentCtor\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype._ownPropMetadata = /**\n     * @param {?} typeOrFunc\n     * @param {?} parentCtor\n     * @return {?}\n     */\n    function (typeOrFunc, parentCtor) {\n        // Prefer the direct API.\n        if ((/** @type {?} */ (typeOrFunc)).propMetadata &&\n            (/** @type {?} */ (typeOrFunc)).propMetadata !== parentCtor.propMetadata) {\n            /** @type {?} */\n            var propMetadata = (/** @type {?} */ (typeOrFunc)).propMetadata;\n            if (typeof propMetadata === 'function' && propMetadata.propMetadata) {\n                propMetadata = propMetadata.propMetadata;\n            }\n            return propMetadata;\n        }\n        // API of tsickle for lowering decorators to properties on the class.\n        if ((/** @type {?} */ (typeOrFunc)).propDecorators &&\n            (/** @type {?} */ (typeOrFunc)).propDecorators !== parentCtor.propDecorators) {\n            /** @type {?} */\n            var propDecorators_1 = (/** @type {?} */ (typeOrFunc)).propDecorators;\n            /** @type {?} */\n            var propMetadata_1 = /** @type {?} */ ({});\n            Object.keys(propDecorators_1).forEach(function (prop) {\n                propMetadata_1[prop] = convertTsickleDecoratorIntoMetadata(propDecorators_1[prop]);\n            });\n            return propMetadata_1;\n        }\n        // API for metadata created by invoking the decorators.\n        if (typeOrFunc.hasOwnProperty(PROP_METADATA)) {\n            return (/** @type {?} */ (typeOrFunc))[PROP_METADATA];\n        }\n        return null;\n    };\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.propMetadata = /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    function (typeOrFunc) {\n        if (!isType(typeOrFunc)) {\n            return {};\n        }\n        /** @type {?} */\n        var parentCtor = getParentCtor(typeOrFunc);\n        /** @type {?} */\n        var propMetadata = {};\n        if (parentCtor !== Object) {\n            /** @type {?} */\n            var parentPropMetadata_1 = this.propMetadata(parentCtor);\n            Object.keys(parentPropMetadata_1).forEach(function (propName) {\n                propMetadata[propName] = parentPropMetadata_1[propName];\n            });\n        }\n        /** @type {?} */\n        var ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);\n        if (ownPropMetadata) {\n            Object.keys(ownPropMetadata).forEach(function (propName) {\n                /** @type {?} */\n                var decorators = [];\n                if (propMetadata.hasOwnProperty(propName)) {\n                    decorators.push.apply(decorators, propMetadata[propName]);\n                }\n                decorators.push.apply(decorators, ownPropMetadata[propName]);\n                propMetadata[propName] = decorators;\n            });\n        }\n        return propMetadata;\n    };\n    /**\n     * @param {?} type\n     * @param {?} lcProperty\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.hasLifecycleHook = /**\n     * @param {?} type\n     * @param {?} lcProperty\n     * @return {?}\n     */\n    function (type, lcProperty) {\n        return type instanceof Type && lcProperty in type.prototype;\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.guards = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) { return {}; };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.getter = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) { return /** @type {?} */ (new Function('o', 'return o.' + name + ';')); };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.setter = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        return /** @type {?} */ (new Function('o', 'v', 'return o.' + name + ' = v;'));\n    };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.method = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        /** @type {?} */\n        var functionBody = \"if (!o.\" + name + \") throw new Error('\\\"\" + name + \"\\\" is undefined');\\n        return o.\" + name + \".apply(o, args);\";\n        return /** @type {?} */ (new Function('o', 'args', functionBody));\n    };\n    // There is not a concept of import uri in Js, but this is useful in developing Dart applications.\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.importUri = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        // StaticSymbol\n        if (typeof type === 'object' && type['filePath']) {\n            return type['filePath'];\n        }\n        // Runtime type\n        return \"./\" + stringify(type);\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.resourceUri = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) { return \"./\" + stringify(type); };\n    /**\n     * @param {?} name\n     * @param {?} moduleUrl\n     * @param {?} members\n     * @param {?} runtime\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.resolveIdentifier = /**\n     * @param {?} name\n     * @param {?} moduleUrl\n     * @param {?} members\n     * @param {?} runtime\n     * @return {?}\n     */\n    function (name, moduleUrl, members, runtime) {\n        return runtime;\n    };\n    /**\n     * @param {?} enumIdentifier\n     * @param {?} name\n     * @return {?}\n     */\n    ReflectionCapabilities.prototype.resolveEnum = /**\n     * @param {?} enumIdentifier\n     * @param {?} name\n     * @return {?}\n     */\n    function (enumIdentifier, name) { return enumIdentifier[name]; };\n    return ReflectionCapabilities;\n}());\nexport { ReflectionCapabilities };\nif (false) {\n    /** @type {?} */\n    ReflectionCapabilities.prototype._reflect;\n}\n/**\n * @param {?} decoratorInvocations\n * @return {?}\n */\nfunction convertTsickleDecoratorIntoMetadata(decoratorInvocations) {\n    if (!decoratorInvocations) {\n        return [];\n    }\n    return decoratorInvocations.map(function (decoratorInvocation) {\n        /** @type {?} */\n        var decoratorType = decoratorInvocation.type;\n        /** @type {?} */\n        var annotationCls = decoratorType.annotationCls;\n        /** @type {?} */\n        var annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];\n        return new (annotationCls.bind.apply(annotationCls, [void 0].concat(annotationArgs)))();\n    });\n}\n/**\n * @param {?} ctor\n * @return {?}\n */\nfunction getParentCtor(ctor) {\n    /** @type {?} */\n    var parentProto = ctor.prototype ? Object.getPrototypeOf(ctor.prototype) : null;\n    /** @type {?} */\n    var parentCtor = parentProto ? parentProto.constructor : null;\n    // Note: We always use `Object` as the null value\n    // to simplify checking later on.\n    return parentCtor || Object;\n}\n//# sourceMappingURL=reflection_capabilities.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Host, Inject, Optional, Self, SkipSelf } from '../../di/metadata';\nimport { Attribute } from '../../metadata/di';\nimport { ReflectionCapabilities } from '../../reflection/reflection_capabilities';\nimport { getCompilerFacade } from './compiler_facade';\n/** @type {?} */\nvar _reflect = null;\n/**\n * @return {?}\n */\nexport function getReflect() {\n    return (_reflect = _reflect || new ReflectionCapabilities());\n}\n/**\n * @param {?} type\n * @return {?}\n */\nexport function reflectDependencies(type) {\n    return convertDependencies(getReflect().parameters(type));\n}\n/**\n * @param {?} deps\n * @return {?}\n */\nexport function convertDependencies(deps) {\n    /** @type {?} */\n    var compiler = getCompilerFacade();\n    return deps.map(function (dep) { return reflectDependency(compiler, dep); });\n}\n/**\n * @param {?} compiler\n * @param {?} dep\n * @return {?}\n */\nfunction reflectDependency(compiler, dep) {\n    /** @type {?} */\n    var meta = {\n        token: null,\n        host: false,\n        optional: false,\n        resolved: compiler.R3ResolvedDependencyType.Token,\n        self: false,\n        skipSelf: false,\n    };\n    /**\n     * @param {?} token\n     * @return {?}\n     */\n    function setTokenAndResolvedType(token) {\n        meta.resolved = compiler.R3ResolvedDependencyType.Token;\n        meta.token = token;\n    }\n    if (Array.isArray(dep)) {\n        if (dep.length === 0) {\n            throw new Error('Dependency array must have arguments.');\n        }\n        for (var j = 0; j < dep.length; j++) {\n            /** @type {?} */\n            var param = dep[j];\n            if (param === undefined) {\n                // param may be undefined if type of dep is not set by ngtsc\n                continue;\n            }\n            else if (param instanceof Optional || param.__proto__.ngMetadataName === 'Optional') {\n                meta.optional = true;\n            }\n            else if (param instanceof SkipSelf || param.__proto__.ngMetadataName === 'SkipSelf') {\n                meta.skipSelf = true;\n            }\n            else if (param instanceof Self || param.__proto__.ngMetadataName === 'Self') {\n                meta.self = true;\n            }\n            else if (param instanceof Host || param.__proto__.ngMetadataName === 'Host') {\n                meta.host = true;\n            }\n            else if (param instanceof Inject) {\n                meta.token = param.token;\n            }\n            else if (param instanceof Attribute) {\n                if (param.attributeName === undefined) {\n                    throw new Error(\"Attribute name must be defined.\");\n                }\n                meta.token = param.attributeName;\n                meta.resolved = compiler.R3ResolvedDependencyType.Attribute;\n            }\n            else {\n                setTokenAndResolvedType(param);\n            }\n        }\n    }\n    else {\n        setTokenAndResolvedType(dep);\n    }\n    return meta;\n}\n//# sourceMappingURL=util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Component } from '../../metadata/directives';\nimport { assertDefined } from '../assert';\nimport { getComponentDef, getDirectiveDef, getNgModuleDef, getPipeDef } from '../definition';\nimport { NG_COMPONENT_DEF, NG_DIRECTIVE_DEF, NG_INJECTOR_DEF, NG_MODULE_DEF, NG_PIPE_DEF } from '../fields';\nimport { stringify } from '../util';\nimport { getCompilerFacade } from './compiler_facade';\nimport { angularCoreEnv } from './environment';\nimport { getReflect, reflectDependencies } from './util';\n/** @type {?} */\nvar EMPTY_ARRAY = [];\n/**\n * Compiles a module in JIT mode.\n *\n * This function automatically gets called when a class has a `\\@NgModule` decorator.\n * @param {?} moduleType\n * @param {?=} ngModule\n * @return {?}\n */\nexport function compileNgModule(moduleType, ngModule) {\n    if (ngModule === void 0) { ngModule = {}; }\n    compileNgModuleDefs(moduleType, ngModule);\n    setScopeOnDeclaredComponents(moduleType, ngModule);\n}\n/**\n * Compiles and adds the `ngModuleDef` and `ngInjectorDef` properties to the module class.\n * @param {?} moduleType\n * @param {?} ngModule\n * @return {?}\n */\nexport function compileNgModuleDefs(moduleType, ngModule) {\n    ngDevMode && assertDefined(moduleType, 'Required value moduleType');\n    ngDevMode && assertDefined(ngModule, 'Required value ngModule');\n    /** @type {?} */\n    var declarations = flatten(ngModule.declarations || EMPTY_ARRAY);\n    /** @type {?} */\n    /** @nocollapse */ var ngModuleDef = null;\n    Object.defineProperty(moduleType, NG_MODULE_DEF, {\n        configurable: true,\n        get: function () {\n            if (ngModuleDef === null) {\n                ngModuleDef = getCompilerFacade().compileNgModule(angularCoreEnv, \"ng://\" + moduleType.name + \"/ngModuleDef.js\", {\n                    type: moduleType,\n                    bootstrap: flatten(ngModule.bootstrap || EMPTY_ARRAY),\n                    declarations: declarations,\n                    imports: flatten(ngModule.imports || EMPTY_ARRAY).map(expandModuleWithProviders),\n                    exports: flatten(ngModule.exports || EMPTY_ARRAY).map(expandModuleWithProviders),\n                    emitInline: true,\n                });\n            }\n            return ngModuleDef;\n        }\n    });\n    /** @type {?} */\n    /** @nocollapse */ var ngInjectorDef = null;\n    Object.defineProperty(moduleType, NG_INJECTOR_DEF, {\n        get: function () {\n            if (ngInjectorDef === null) {\n                /** @type {?} */\n                var meta = {\n                    name: moduleType.name,\n                    type: moduleType,\n                    deps: reflectDependencies(moduleType),\n                    providers: ngModule.providers || EMPTY_ARRAY,\n                    imports: [\n                        ngModule.imports || EMPTY_ARRAY,\n                        ngModule.exports || EMPTY_ARRAY,\n                    ],\n                };\n                ngInjectorDef = getCompilerFacade().compileInjector(angularCoreEnv, \"ng://\" + moduleType.name + \"/ngInjectorDef.js\", meta);\n            }\n            return ngInjectorDef;\n        },\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n}\n/**\n * Some declared components may be compiled asynchronously, and thus may not have their\n * ngComponentDef set yet. If this is the case, then a reference to the module is written into\n * the `ngSelectorScope` property of the declared type.\n * @param {?} moduleType\n * @param {?} ngModule\n * @return {?}\n */\nfunction setScopeOnDeclaredComponents(moduleType, ngModule) {\n    /** @type {?} */\n    var declarations = flatten(ngModule.declarations || EMPTY_ARRAY);\n    /** @type {?} */\n    var transitiveScopes = transitiveScopesFor(moduleType);\n    declarations.forEach(function (declaration) {\n        if (declaration.hasOwnProperty(NG_COMPONENT_DEF)) {\n            /** @type {?} */\n            var component = /** @type {?} */ (declaration);\n            patchComponentDefWithScope(component, transitiveScopes);\n        }\n        else if (!declaration.hasOwnProperty(NG_DIRECTIVE_DEF) && !declaration.hasOwnProperty(NG_PIPE_DEF)) {\n            // Set `ngSelectorScope` for future reference when the component compilation finishes.\n            (/** @type {?} */ (declaration)).ngSelectorScope = moduleType;\n        }\n    });\n}\n/**\n * Patch the definition of a component with directives and pipes from the compilation scope of\n * a given module.\n * @template C\n * @param {?} component\n * @param {?} transitiveScopes\n * @return {?}\n */\nexport function patchComponentDefWithScope(component, transitiveScopes) {\n    /** @type {?} */\n    var componentDef = /** @type {?} */ ((getComponentDef(component)));\n    /** @type {?} */\n    var meta = /** @type {?} */ (getReflect().annotations(component).filter(function (m) { return m instanceof Component; }).pop());\n    if (!meta) {\n        throw new Error(stringify(component) + \" has no component metadata\");\n    }\n    /** @type {?} */\n    var directives = (meta.directives || []).concat(Array.from(transitiveScopes.compilation.directives));\n    if (directives.length) {\n        componentDef.directiveDefs = function () {\n            return directives.map(function (dir) { return getDirectiveDef(dir) || /** @type {?} */ ((getComponentDef(dir))); }).filter(function (def) { return !!def; });\n        };\n    }\n    /** @type {?} */\n    var pipes = (meta.pipes || []).concat(Array.from(transitiveScopes.compilation.pipes));\n    if (pipes.length) {\n        componentDef.pipeDefs = function () { return pipes.map(function (pipe) { return ((getPipeDef(pipe))); }); };\n    }\n}\n/**\n * Compute the pair of transitive scopes (compilation scope and exported scope) for a given module.\n *\n * This operation is memoized and the result is cached on the module's definition. It can be called\n * on modules with components that have not fully compiled yet, but the result should not be used\n * until they have.\n * @template T\n * @param {?} moduleType\n * @return {?}\n */\nexport function transitiveScopesFor(moduleType) {\n    if (!isNgModule(moduleType)) {\n        throw new Error(moduleType.name + \" does not have an ngModuleDef\");\n    }\n    /** @type {?} */\n    var def = /** @type {?} */ ((getNgModuleDef(moduleType)));\n    if (def.transitiveCompileScopes !== null) {\n        return def.transitiveCompileScopes;\n    }\n    /** @type {?} */\n    var scopes = {\n        compilation: {\n            directives: new Set(),\n            pipes: new Set(),\n        },\n        exported: {\n            directives: new Set(),\n            pipes: new Set(),\n        },\n    };\n    def.declarations.forEach(function (declared) {\n        /** @type {?} */\n        var declaredWithDefs = /** @type {?} */ (declared);\n        if (getPipeDef(declaredWithDefs)) {\n            scopes.compilation.pipes.add(declared);\n        }\n        else {\n            // Either declared has an ngComponentDef or ngDirectiveDef, or it's a component which hasn't\n            // had its template compiled yet. In either case, it gets added to the compilation's\n            // directives.\n            scopes.compilation.directives.add(declared);\n        }\n    });\n    def.imports.forEach(function (imported) {\n        /** @type {?} */\n        var importedTyped = /** @type {?} */ (imported);\n        if (!isNgModule(importedTyped)) {\n            throw new Error(\"Importing \" + importedTyped.name + \" which does not have an ngModuleDef\");\n        }\n        /** @type {?} */\n        var importedScope = transitiveScopesFor(importedTyped);\n        importedScope.exported.directives.forEach(function (entry) { return scopes.compilation.directives.add(entry); });\n        importedScope.exported.pipes.forEach(function (entry) { return scopes.compilation.pipes.add(entry); });\n    });\n    def.exports.forEach(function (exported) {\n        /** @type {?} */\n        var exportedTyped = /** @type {?} */ (exported);\n        // Either the type is a module, a pipe, or a component/directive (which may not have an\n        // ngComponentDef as it might be compiled asynchronously).\n        if (isNgModule(exportedTyped)) {\n            /** @type {?} */\n            var exportedScope = transitiveScopesFor(exportedTyped);\n            exportedScope.exported.directives.forEach(function (entry) {\n                scopes.compilation.directives.add(entry);\n                scopes.exported.directives.add(entry);\n            });\n            exportedScope.exported.pipes.forEach(function (entry) {\n                scopes.compilation.pipes.add(entry);\n                scopes.exported.pipes.add(entry);\n            });\n        }\n        else if (getNgModuleDef(exportedTyped)) {\n            scopes.exported.pipes.add(exportedTyped);\n        }\n        else {\n            scopes.exported.directives.add(exportedTyped);\n        }\n    });\n    def.transitiveCompileScopes = scopes;\n    return scopes;\n}\n/**\n * @template T\n * @param {?} values\n * @return {?}\n */\nfunction flatten(values) {\n    /** @type {?} */\n    var out = [];\n    values.forEach(function (value) {\n        if (Array.isArray(value)) {\n            out.push.apply(out, flatten(value));\n        }\n        else {\n            out.push(value);\n        }\n    });\n    return out;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction expandModuleWithProviders(value) {\n    if (isModuleWithProviders(value)) {\n        return value.ngModule;\n    }\n    return value;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isModuleWithProviders(value) {\n    return (/** @type {?} */ (value)).ngModule !== undefined;\n}\n/**\n * @template T\n * @param {?} value\n * @return {?}\n */\nfunction isNgModule(value) {\n    return !!getNgModuleDef(value);\n}\n//# sourceMappingURL=module.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { componentNeedsResolution, maybeQueueResolutionOfComponentResources } from '../../metadata/resource_loading';\nimport { ViewEncapsulation } from '../../metadata/view';\nimport { stringify } from '../../util';\nimport { EMPTY_ARRAY } from '../definition';\nimport { NG_COMPONENT_DEF, NG_DIRECTIVE_DEF } from '../fields';\nimport { getCompilerFacade } from './compiler_facade';\nimport { angularCoreEnv } from './environment';\nimport { patchComponentDefWithScope, transitiveScopesFor } from './module';\nimport { getReflect, reflectDependencies } from './util';\n/**\n * Compile an Angular component according to its decorator metadata, and patch the resulting\n * ngComponentDef onto the component type.\n *\n * Compilation may be asynchronous (due to the need to resolve URLs for the component template or\n * other resources, for example). In the event that compilation is not immediate, `compileComponent`\n * will enqueue resource resolution into a global queue and will fail to return the `ngComponentDef`\n * until the global queue has been resolved with a call to `resolveComponentResources`.\n * @param {?} type\n * @param {?} metadata\n * @return {?}\n */\nexport function compileComponent(type, metadata) {\n    /** @type {?} */\n    /** @nocollapse */ var ngComponentDef = null;\n    // Metadata may have resources which need to be resolved.\n    maybeQueueResolutionOfComponentResources(metadata);\n    Object.defineProperty(type, NG_COMPONENT_DEF, {\n        get: function () {\n            /** @type {?} */\n            var compiler = getCompilerFacade();\n            if (ngComponentDef === null) {\n                if (componentNeedsResolution(metadata)) {\n                    /** @type {?} */\n                    var error = [\"Component '\" + stringify(type) + \"' is not resolved:\"];\n                    if (metadata.templateUrl) {\n                        error.push(\" - templateUrl: \" + stringify(metadata.templateUrl));\n                    }\n                    if (metadata.styleUrls && metadata.styleUrls.length) {\n                        error.push(\" - styleUrls: \" + JSON.stringify(metadata.styleUrls));\n                    }\n                    error.push(\"Did you run and wait for 'resolveComponentResources()'?\");\n                    throw new Error(error.join('\\n'));\n                }\n                /** @type {?} */\n                var meta = tslib_1.__assign({}, directiveMetadata(type, metadata), { template: metadata.template || '', preserveWhitespaces: metadata.preserveWhitespaces || false, styles: metadata.styles || EMPTY_ARRAY, animations: metadata.animations, viewQueries: extractQueriesMetadata(getReflect().propMetadata(type), isViewQuery), directives: [], pipes: new Map(), encapsulation: metadata.encapsulation || ViewEncapsulation.Emulated, viewProviders: metadata.viewProviders || null });\n                ngComponentDef = compiler.compileComponent(angularCoreEnv, \"ng://\" + stringify(type) + \"/template.html\", meta);\n                // If component compilation is async, then the @NgModule annotation which declares the\n                // component may execute and set an ngSelectorScope property on the component type. This\n                // allows the component to patch itself with directiveDefs from the module after it\n                // finishes compiling.\n                if (hasSelectorScope(type)) {\n                    /** @type {?} */\n                    var scopes = transitiveScopesFor(type.ngSelectorScope);\n                    patchComponentDefWithScope(type, scopes);\n                }\n                else {\n                    patchComponentDefWithScope(type, {\n                        compilation: {\n                            directives: new Set(),\n                            pipes: new Set(),\n                        },\n                        exported: {\n                            directives: new Set(),\n                            pipes: new Set(),\n                        },\n                    });\n                }\n            }\n            return ngComponentDef;\n        },\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n}\n/**\n * @template T\n * @param {?} component\n * @return {?}\n */\nfunction hasSelectorScope(component) {\n    return (/** @type {?} */ (component)).ngSelectorScope !== undefined;\n}\n/**\n * Compile an Angular directive according to its decorator metadata, and patch the resulting\n * ngDirectiveDef onto the component type.\n *\n * In the event that compilation is not immediate, `compileDirective` will return a `Promise` which\n * will resolve when compilation completes and the directive becomes usable.\n * @param {?} type\n * @param {?} directive\n * @return {?}\n */\nexport function compileDirective(type, directive) {\n    /** @type {?} */\n    /** @nocollapse */ var ngDirectiveDef = null;\n    Object.defineProperty(type, NG_DIRECTIVE_DEF, {\n        get: function () {\n            if (ngDirectiveDef === null) {\n                /** @type {?} */\n                var facade = directiveMetadata(type, directive);\n                ngDirectiveDef = getCompilerFacade().compileDirective(angularCoreEnv, \"ng://\" + (type && type.name) + \"/ngDirectiveDef.js\", facade);\n            }\n            return ngDirectiveDef;\n        },\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n}\n/**\n * @param {?} type\n * @return {?}\n */\nexport function extendsDirectlyFromObject(type) {\n    return Object.getPrototypeOf(type.prototype) === Object.prototype;\n}\n/**\n * Extract the `R3DirectiveMetadata` for a particular directive (either a `Directive` or a\n * `Component`).\n * @param {?} type\n * @param {?} metadata\n * @return {?}\n */\nfunction directiveMetadata(type, metadata) {\n    /** @type {?} */\n    var propMetadata = getReflect().propMetadata(type);\n    return {\n        name: type.name,\n        type: type,\n        typeArgumentCount: 0,\n        selector: /** @type {?} */ ((metadata.selector)),\n        deps: reflectDependencies(type),\n        host: metadata.host || EMPTY_OBJ,\n        propMetadata: propMetadata,\n        inputs: metadata.inputs || EMPTY_ARRAY,\n        outputs: metadata.outputs || EMPTY_ARRAY,\n        queries: extractQueriesMetadata(propMetadata, isContentQuery),\n        lifecycle: {\n            usesOnChanges: type.prototype.ngOnChanges !== undefined,\n        },\n        typeSourceSpan: /** @type {?} */ ((null)),\n        usesInheritance: !extendsDirectlyFromObject(type),\n        exportAs: metadata.exportAs || null,\n        providers: metadata.providers || null,\n    };\n}\n/** @type {?} */\nvar EMPTY_OBJ = {};\n/**\n * @param {?} selector\n * @return {?}\n */\nfunction convertToR3QueryPredicate(selector) {\n    return typeof selector === 'string' ? splitByComma(selector) : selector;\n}\n/**\n * @param {?} propertyName\n * @param {?} ann\n * @return {?}\n */\nexport function convertToR3QueryMetadata(propertyName, ann) {\n    return {\n        propertyName: propertyName,\n        predicate: convertToR3QueryPredicate(ann.selector),\n        descendants: ann.descendants,\n        first: ann.first,\n        read: ann.read ? ann.read : null\n    };\n}\n/**\n * @param {?} propMetadata\n * @param {?} isQueryAnn\n * @return {?}\n */\nfunction extractQueriesMetadata(propMetadata, isQueryAnn) {\n    /** @type {?} */\n    var queriesMeta = [];\n    var _loop_1 = function (field) {\n        if (propMetadata.hasOwnProperty(field)) {\n            propMetadata[field].forEach(function (ann) {\n                if (isQueryAnn(ann)) {\n                    queriesMeta.push(convertToR3QueryMetadata(field, ann));\n                }\n            });\n        }\n    };\n    for (var field in propMetadata) {\n        _loop_1(field);\n    }\n    return queriesMeta;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isContentQuery(value) {\n    /** @type {?} */\n    var name = value.ngMetadataName;\n    return name === 'ContentChild' || name === 'ContentChildren';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isViewQuery(value) {\n    /** @type {?} */\n    var name = value.ngMetadataName;\n    return name === 'ViewChild' || name === 'ViewChildren';\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction splitByComma(value) {\n    return value.split(',').map(function (piece) { return piece.trim(); });\n}\n//# sourceMappingURL=directive.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NG_PIPE_DEF } from '../fields';\nimport { stringify } from '../util';\nimport { getCompilerFacade } from './compiler_facade';\nimport { angularCoreEnv } from './environment';\nimport { reflectDependencies } from './util';\n/**\n * @param {?} type\n * @param {?} meta\n * @return {?}\n */\nexport function compilePipe(type, meta) {\n    /** @type {?} */\n    /** @nocollapse */ var ngPipeDef = null;\n    Object.defineProperty(type, NG_PIPE_DEF, {\n        get: function () {\n            if (ngPipeDef === null) {\n                ngPipeDef = getCompilerFacade().compilePipe(angularCoreEnv, \"ng://\" + stringify(type) + \"/ngPipeDef.js\", {\n                    type: type,\n                    name: type.name,\n                    deps: reflectDependencies(type),\n                    pipeName: meta.name,\n                    pure: meta.pure !== undefined ? meta.pure : true\n                });\n            }\n            return ngPipeDef;\n        },\n        // Make the property configurable in dev mode to allow overriding in tests\n        configurable: !!ngDevMode,\n    });\n}\n//# sourceMappingURL=pipe.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { ChangeDetectionStrategy } from '../change_detection/constants';\nimport { NG_BASE_DEF } from '../render3/fields';\nimport { compileComponent as render3CompileComponent, compileDirective as render3CompileDirective } from '../render3/jit/directive';\nimport { compilePipe as render3CompilePipe } from '../render3/jit/pipe';\nimport { makeDecorator, makePropDecorator } from '../util/decorators';\nimport { fillProperties } from '../util/property';\n/**\n * Type of the Directive decorator / constructor function.\n * \\@publicApi\n * @record\n */\nexport function DirectiveDecorator() { }\n/** *\n * Type of the Directive metadata.\n *\n * \\@publicApi\n  @type {?} */\nexport var Directive = makeDecorator('Directive', function (dir) {\n    if (dir === void 0) { dir = {}; }\n    return dir;\n}, undefined, undefined, function (type, meta) { return SWITCH_COMPILE_DIRECTIVE(type, meta); });\n/**\n * Component decorator interface\n *\n * \\@publicApi\n * @record\n */\nexport function ComponentDecorator() { }\n/** *\n * Component decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n  @type {?} */\nexport var Component = makeDecorator('Component', function (c) {\n    if (c === void 0) { c = {}; }\n    return (tslib_1.__assign({ changeDetection: ChangeDetectionStrategy.Default }, c));\n}, Directive, undefined, function (type, meta) { return SWITCH_COMPILE_COMPONENT(type, meta); });\n/**\n * Type of the Pipe decorator / constructor function.\n *\n * \\@publicApi\n * @record\n */\nexport function PipeDecorator() { }\n/** *\n * \\@Annotation\n * \\@publicApi\n  @type {?} */\nexport var Pipe = makeDecorator('Pipe', function (p) { return (tslib_1.__assign({ pure: true }, p)); }, undefined, undefined, function (type, meta) { return SWITCH_COMPILE_PIPE(type, meta); });\n/**\n * \\@publicApi\n * @record\n */\nexport function InputDecorator() { }\n/** @type {?} */\nvar initializeBaseDef = function (target) {\n    /** @type {?} */\n    var constructor = target.constructor;\n    /** @nocollapse @type {?} */\n    var inheritedBaseDef = constructor.ngBaseDef;\n    /** @type {?} */\n    var baseDef = constructor.ngBaseDef = {\n        inputs: {},\n        outputs: {},\n        declaredInputs: {},\n    };\n    if (inheritedBaseDef) {\n        fillProperties(baseDef.inputs, inheritedBaseDef.inputs);\n        fillProperties(baseDef.outputs, inheritedBaseDef.outputs);\n        fillProperties(baseDef.declaredInputs, inheritedBaseDef.declaredInputs);\n    }\n};\nvar Éµ0 = initializeBaseDef;\n/** *\n * Does the work of creating the `ngBaseDef` property for the \\@Input and \\@Output decorators.\n * \\@param key \"inputs\" or \"outputs\"\n  @type {?} */\nvar updateBaseDefFromIOProp = function (getProp) {\n    return function (target, name) {\n        var args = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            args[_i - 2] = arguments[_i];\n        }\n        /** @type {?} */\n        var constructor = target.constructor;\n        if (!constructor.hasOwnProperty(NG_BASE_DEF)) {\n            initializeBaseDef(target);\n        }\n        /** @nocollapse @type {?} */\n        var baseDef = constructor.ngBaseDef;\n        /** @type {?} */\n        var defProp = getProp(baseDef);\n        defProp[name] = args[0];\n    };\n};\nvar Éµ1 = updateBaseDefFromIOProp;\n/** *\n * \\@Annotation\n * \\@publicApi\n  @type {?} */\nexport var Input = makePropDecorator('Input', function (bindingPropertyName) { return ({ bindingPropertyName: bindingPropertyName }); }, undefined, updateBaseDefFromIOProp(function (baseDef) { return baseDef.inputs || {}; }));\n/**\n * Type of the Output decorator / constructor function.\n *\n * \\@publicApi\n * @record\n */\nexport function OutputDecorator() { }\n/** *\n * \\@Annotation\n * \\@publicApi\n  @type {?} */\nexport var Output = makePropDecorator('Output', function (bindingPropertyName) { return ({ bindingPropertyName: bindingPropertyName }); }, undefined, updateBaseDefFromIOProp(function (baseDef) { return baseDef.outputs || {}; }));\n/**\n * Type of the HostBinding decorator / constructor function.\n *\n * \\@publicApi\n * @record\n */\nexport function HostBindingDecorator() { }\n/** *\n * \\@Annotation\n * \\@publicApi\n  @type {?} */\nexport var HostBinding = makePropDecorator('HostBinding', function (hostPropertyName) { return ({ hostPropertyName: hostPropertyName }); });\n/**\n * Type of the HostListener decorator / constructor function.\n *\n * \\@publicApi\n * @record\n */\nexport function HostListenerDecorator() { }\n/** *\n * Binds a CSS event to a host listener and supplies configuration metadata.\n * Angular invokes the supplied handler method when the host element emits the specified event,\n * and updates the bound element with the result.\n * If the handler method returns false, applies `preventDefault` on the bound element.\n *\n * \\@usageNotes\n *\n * The following example declares a directive\n * that attaches a click listener to a button and counts clicks.\n *\n * ```\n * \\@Directive({selector: 'button[counting]'})\n * class CountClicks {\n *   numberOfClicks = 0;\n *\n * \\@HostListener('click', ['$event.target'])\n *   onClick(btn) {\n *     console.log('button', btn, 'number of clicks:', this.numberOfClicks++);\n *  }\n * }\n *\n * \\@Component({\n *   selector: 'app',\n *   template: '<button counting>Increment</button>',\n * })\n * class App {}\n * ```\n *\n * \\@Annotation\n * \\@publicApi\n  @type {?} */\nexport var HostListener = makePropDecorator('HostListener', function (eventName, args) { return ({ eventName: eventName, args: args }); });\n/** @type {?} */\nexport var SWITCH_COMPILE_COMPONENT__POST_R3__ = render3CompileComponent;\n/** @type {?} */\nexport var SWITCH_COMPILE_DIRECTIVE__POST_R3__ = render3CompileDirective;\n/** @type {?} */\nexport var SWITCH_COMPILE_PIPE__POST_R3__ = render3CompilePipe;\n/** @type {?} */\nvar SWITCH_COMPILE_COMPONENT = SWITCH_COMPILE_COMPONENT__POST_R3__;\n/** @type {?} */\nvar SWITCH_COMPILE_DIRECTIVE = SWITCH_COMPILE_DIRECTIVE__POST_R3__;\n/** @type {?} */\nvar SWITCH_COMPILE_PIPE = SWITCH_COMPILE_PIPE__POST_R3__;\nexport { Éµ0, Éµ1 };\n//# sourceMappingURL=directives.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ReflectionCapabilities } from '../reflection/reflection_capabilities';\nimport { getClosureSafeProperty } from '../util/property';\nimport { inject, injectArgs } from './injector_compatibility';\nvar Éµ0 = getClosureSafeProperty;\n/** @type {?} */\nvar USE_VALUE = getClosureSafeProperty({ provide: String, useValue: Éµ0 });\n/** @type {?} */\nvar EMPTY_ARRAY = [];\n/**\n * @param {?} type\n * @param {?=} provider\n * @return {?}\n */\nexport function convertInjectableProviderToFactory(type, provider) {\n    if (!provider) {\n        /** @type {?} */\n        var reflectionCapabilities = new ReflectionCapabilities();\n        /** @type {?} */\n        var deps_1 = reflectionCapabilities.parameters(type);\n        // TODO - convert to flags.\n        return function () { return new (type.bind.apply(type, [void 0].concat(injectArgs(/** @type {?} */ (deps_1)))))(); };\n    }\n    if (USE_VALUE in provider) {\n        /** @type {?} */\n        var valueProvider_1 = (/** @type {?} */ (provider));\n        return function () { return valueProvider_1.useValue; };\n    }\n    else if ((/** @type {?} */ (provider)).useExisting) {\n        /** @type {?} */\n        var existingProvider_1 = (/** @type {?} */ (provider));\n        return function () { return inject(existingProvider_1.useExisting); };\n    }\n    else if ((/** @type {?} */ (provider)).useFactory) {\n        /** @type {?} */\n        var factoryProvider_1 = (/** @type {?} */ (provider));\n        return function () { return factoryProvider_1.useFactory.apply(factoryProvider_1, injectArgs(factoryProvider_1.deps || EMPTY_ARRAY)); };\n    }\n    else if ((/** @type {?} */ (provider)).useClass) {\n        /** @type {?} */\n        var classProvider_1 = (/** @type {?} */ (provider));\n        /** @type {?} */\n        var deps_2 = (/** @type {?} */ (provider)).deps;\n        if (!deps_2) {\n            /** @type {?} */\n            var reflectionCapabilities = new ReflectionCapabilities();\n            deps_2 = reflectionCapabilities.parameters(type);\n        }\n        return function () {\n            var _a;\n            return new ((_a = classProvider_1.useClass).bind.apply(_a, [void 0].concat(injectArgs(deps_2))))();\n        };\n    }\n    else {\n        /** @type {?} */\n        var deps_3 = (/** @type {?} */ (provider)).deps;\n        if (!deps_3) {\n            /** @type {?} */\n            var reflectionCapabilities = new ReflectionCapabilities();\n            deps_3 = reflectionCapabilities.parameters(type);\n        }\n        return function () { return new (type.bind.apply(type, [void 0].concat(injectArgs(/** @type {?} */ ((deps_3))))))(); };\n    }\n}\nexport { Éµ0 };\n//# sourceMappingURL=util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { defineInjector } from '../di/defs';\nimport { convertInjectableProviderToFactory } from '../di/util';\nimport { compileNgModule as render3CompileNgModule } from '../render3/jit/module';\nimport { makeDecorator } from '../util/decorators';\n/**\n * Represents the expansion of an `NgModule` into its scopes.\n *\n * A scope is a set of directives and pipes that are visible in a particular context. Each\n * `NgModule` has two scopes. The `compilation` scope is the set of directives and pipes that will\n * be recognized in the templates of components declared by the module. The `exported` scope is the\n * set of directives and pipes exported by a module (that is, module B's exported scope gets added\n * to module A's compilation scope when module A imports B).\n * @record\n */\nexport function NgModuleTransitiveScopes() { }\n/** @type {?} */\nNgModuleTransitiveScopes.prototype.compilation;\n/** @type {?} */\nNgModuleTransitiveScopes.prototype.exported;\n/** @typedef {?} */\nvar NgModuleDefWithMeta;\nexport { NgModuleDefWithMeta };\n/**\n * Runtime link information for NgModules.\n *\n * This is the internal data structure used by the runtime to assemble components, directives,\n * pipes, and injectors.\n *\n * NOTE: Always use `defineNgModule` function to create this object,\n * never create the object directly since the shape of this object\n * can change between versions.\n * @record\n * @template T\n */\nexport function NgModuleDef() { }\n/**\n * Token representing the module. Used by DI.\n * @type {?}\n */\nNgModuleDef.prototype.type;\n/**\n * List of components to bootstrap.\n * @type {?}\n */\nNgModuleDef.prototype.bootstrap;\n/**\n * List of components, directives, and pipes declared by this module.\n * @type {?}\n */\nNgModuleDef.prototype.declarations;\n/**\n * List of modules or `ModuleWithProviders` imported by this module.\n * @type {?}\n */\nNgModuleDef.prototype.imports;\n/**\n * List of modules, `ModuleWithProviders`, components, directives, or pipes exported by this\n * module.\n * @type {?}\n */\nNgModuleDef.prototype.exports;\n/**\n * Cached value of computed `transitiveCompileScopes` for this module.\n *\n * This should never be read directly, but accessed via `transitiveScopesFor`.\n * @type {?}\n */\nNgModuleDef.prototype.transitiveCompileScopes;\n/**\n * A wrapper around an NgModule that associates it with the providers.\n *\n * @param T the module type. In Ivy applications, this must be explicitly\n * provided.\n *\n * \\@publicApi\n * @record\n * @template T\n */\nexport function ModuleWithProviders() { }\n/** @type {?} */\nModuleWithProviders.prototype.ngModule;\n/** @type {?|undefined} */\nModuleWithProviders.prototype.providers;\n/**\n * A schema definition associated with an NgModule.\n *\n * @see `\\@NgModule`, `CUSTOM_ELEMENTS_SCHEMA`, `NO_ERRORS_SCHEMA`\n *\n * @param name The name of a defined schema.\n *\n * \\@publicApi\n * @record\n */\nexport function SchemaMetadata() { }\n/** @type {?} */\nSchemaMetadata.prototype.name;\n/** *\n * Defines a schema that allows an NgModule to contain the following:\n * - Non-Angular elements named with dash case (`-`).\n * - Element properties named with dash case (`-`).\n * Dash case is the naming convention for custom elements.\n *\n * \\@publicApi\n  @type {?} */\nexport var CUSTOM_ELEMENTS_SCHEMA = {\n    name: 'custom-elements'\n};\n/** *\n * Defines a schema that allows any property on any element.\n *\n * \\@publicApi\n  @type {?} */\nexport var NO_ERRORS_SCHEMA = {\n    name: 'no-errors-schema'\n};\n/**\n * Type of the NgModule decorator / constructor function.\n * @record\n */\nexport function NgModuleDecorator() { }\n/** *\n * \\@Annotation\n * \\@publicApi\n  @type {?} */\nexport var NgModule = makeDecorator('NgModule', function (ngModule) { return ngModule; }, undefined, undefined, \n/**\n * Decorator that marks the following class as an NgModule, and supplies\n * configuration metadata for it.\n *\n * * The `declarations` and `entryComponents` options configure the compiler\n * with information about what belongs to the NgModule.\n * * The `providers` options configures the NgModule's injector to provide\n * dependencies the NgModule members.\n * * The `imports` and `exports` options bring in members from other modules, and make\n * this module's members available to others.\n */\n/**\n     * Decorator that marks the following class as an NgModule, and supplies\n     * configuration metadata for it.\n     *\n     * * The `declarations` and `entryComponents` options configure the compiler\n     * with information about what belongs to the NgModule.\n     * * The `providers` options configures the NgModule's injector to provide\n     * dependencies the NgModule members.\n     * * The `imports` and `exports` options bring in members from other modules, and make\n     * this module's members available to others.\n     */\nfunction (type, meta) { return SWITCH_COMPILE_NGMODULE(type, meta); });\n/**\n * \\@description\n * Hook for manual bootstrapping of the application instead of using bootstrap array in \\@NgModule\n * annotation.\n *\n * Reference to the current application is provided as a parameter.\n *\n * See [\"Bootstrapping\"](guide/bootstrapping) and [\"Entry components\"](guide/entry-components).\n *\n * \\@usageNotes\n * ```typescript\n * class AppModule implements DoBootstrap {\n *   ngDoBootstrap(appRef: ApplicationRef) {\n *     appRef.bootstrap(AppComponent); // Or some other component\n *   }\n * }\n * ```\n *\n * \\@publicApi\n * @record\n */\nexport function DoBootstrap() { }\n/** @type {?} */\nDoBootstrap.prototype.ngDoBootstrap;\n/**\n * @param {?} moduleType\n * @param {?} metadata\n * @return {?}\n */\nfunction preR3NgModuleCompile(moduleType, metadata) {\n    /** @type {?} */\n    var imports = (metadata && metadata.imports) || [];\n    if (metadata && metadata.exports) {\n        imports = imports.concat([metadata.exports]);\n    }\n    /** @nocollapse */ moduleType.ngInjectorDef = defineInjector({\n        factory: convertInjectableProviderToFactory(moduleType, { useClass: moduleType }),\n        providers: metadata && metadata.providers,\n        imports: imports,\n    });\n}\n/** @type {?} */\nexport var SWITCH_COMPILE_NGMODULE__POST_R3__ = render3CompileNgModule;\n/** @type {?} */\nvar SWITCH_COMPILE_NGMODULE__PRE_R3__ = preR3NgModuleCompile;\n/** @type {?} */\nvar SWITCH_COMPILE_NGMODULE = SWITCH_COMPILE_NGMODULE__PRE_R3__;\n//# sourceMappingURL=ng_module.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getClosureSafeProperty } from '../../util/property';\nimport { NG_INJECTABLE_DEF } from '../fields';\nimport { getCompilerFacade } from './compiler_facade';\nimport { angularCoreEnv } from './environment';\nimport { convertDependencies, reflectDependencies } from './util';\n/**\n * Compile an Angular injectable according to its `Injectable` metadata, and patch the resulting\n * `ngInjectableDef` onto the injectable type.\n * @param {?} type\n * @param {?=} srcMeta\n * @return {?}\n */\nexport function compileInjectable(type, srcMeta) {\n    /** @type {?} */\n    var meta = srcMeta || { providedIn: null };\n    /** @type {?} */\n    var def = null;\n    // if NG_INJECTABLE_DEF is already defined on this class then don't overwrite it\n    if (type.hasOwnProperty(NG_INJECTABLE_DEF))\n        return;\n    Object.defineProperty(type, NG_INJECTABLE_DEF, {\n        get: function () {\n            if (def === null) {\n                /** @type {?} */\n                var meta_1 = srcMeta || { providedIn: null };\n                /** @type {?} */\n                var hasAProvider = isUseClassProvider(meta_1) || isUseFactoryProvider(meta_1) ||\n                    isUseValueProvider(meta_1) || isUseExistingProvider(meta_1);\n                /** @type {?} */\n                var compilerMeta = {\n                    name: type.name,\n                    type: type,\n                    providedIn: meta_1.providedIn,\n                    ctorDeps: reflectDependencies(type),\n                    userDeps: undefined\n                };\n                if ((isUseClassProvider(meta_1) || isUseFactoryProvider(meta_1)) && meta_1.deps !== undefined) {\n                    compilerMeta.userDeps = convertDependencies(meta_1.deps);\n                }\n                if (!hasAProvider) {\n                    // In the case the user specifies a type provider, treat it as {provide: X, useClass: X}.\n                    // The deps will have been reflected above, causing the factory to create the class by\n                    // calling\n                    // its constructor with injected deps.\n                    compilerMeta.useClass = type;\n                }\n                else if (isUseClassProvider(meta_1)) {\n                    // The user explicitly specified useClass, and may or may not have provided deps.\n                    compilerMeta.useClass = meta_1.useClass;\n                }\n                else if (isUseValueProvider(meta_1)) {\n                    // The user explicitly specified useValue.\n                    compilerMeta.useValue = meta_1.useValue;\n                }\n                else if (isUseFactoryProvider(meta_1)) {\n                    // The user explicitly specified useFactory.\n                    compilerMeta.useFactory = meta_1.useFactory;\n                }\n                else if (isUseExistingProvider(meta_1)) {\n                    // The user explicitly specified useExisting.\n                    compilerMeta.useExisting = meta_1.useExisting;\n                }\n                else {\n                    // Can't happen - either hasAProvider will be false, or one of the providers will be set.\n                    throw new Error(\"Unreachable state.\");\n                }\n                def = getCompilerFacade().compileInjectable(angularCoreEnv, \"ng://\" + type.name + \"/ngInjectableDef.js\", compilerMeta);\n            }\n            return def;\n        },\n    });\n}\n/** @typedef {?} */\nvar UseClassProvider;\nvar Éµ0 = getClosureSafeProperty;\n/** @type {?} */\nvar USE_VALUE = getClosureSafeProperty({ provide: String, useValue: Éµ0 });\n/**\n * @param {?} meta\n * @return {?}\n */\nfunction isUseClassProvider(meta) {\n    return (/** @type {?} */ (meta)).useClass !== undefined;\n}\n/**\n * @param {?} meta\n * @return {?}\n */\nfunction isUseValueProvider(meta) {\n    return USE_VALUE in meta;\n}\n/**\n * @param {?} meta\n * @return {?}\n */\nfunction isUseFactoryProvider(meta) {\n    return (/** @type {?} */ (meta)).useFactory !== undefined;\n}\n/**\n * @param {?} meta\n * @return {?}\n */\nfunction isUseExistingProvider(meta) {\n    return (/** @type {?} */ (meta)).useExisting !== undefined;\n}\nexport { Éµ0 };\n//# sourceMappingURL=injectable.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { compileInjectable as render3CompileInjectable } from '../render3/jit/injectable';\nimport { makeDecorator } from '../util/decorators';\nimport { defineInjectable, getInjectableDef } from './defs';\nimport { convertInjectableProviderToFactory } from './util';\n/** @typedef {?} */\nvar InjectableProvider;\nexport { InjectableProvider };\n/**\n * Type of the Injectable decorator / constructor function.\n *\n * \\@publicApi\n * @record\n */\nexport function InjectableDecorator() { }\n/** *\n * Injectable decorator and metadata.\n *\n * \\@Annotation\n * \\@publicApi\n  @type {?} */\nexport var Injectable = makeDecorator('Injectable', undefined, undefined, undefined, function (type, meta) { return SWITCH_COMPILE_INJECTABLE(/** @type {?} */ (type), meta); });\n/**\n * Type representing injectable service.\n *\n * \\@publicApi\n * @record\n * @template T\n */\nexport function InjectableType() { }\n/** @type {?} */\nInjectableType.prototype.ngInjectableDef;\n/**\n * Supports \\@Injectable() in JIT mode for Render2.\n * @param {?} injectableType\n * @param {?} options\n * @return {?}\n */\nfunction render2CompileInjectable(injectableType, options) {\n    if (options && options.providedIn !== undefined && !getInjectableDef(injectableType)) {\n        /** @nocollapse */ injectableType.ngInjectableDef = defineInjectable({\n            providedIn: options.providedIn,\n            factory: convertInjectableProviderToFactory(injectableType, options),\n        });\n    }\n}\n/** @type {?} */\nexport var SWITCH_COMPILE_INJECTABLE__POST_R3__ = render3CompileInjectable;\n/** @type {?} */\nvar SWITCH_COMPILE_INJECTABLE__PRE_R3__ = render2CompileInjectable;\n/** @type {?} */\nvar SWITCH_COMPILE_INJECTABLE = SWITCH_COMPILE_INJECTABLE__PRE_R3__;\n//# sourceMappingURL=injectable.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nexport var ERROR_TYPE = 'ngType';\n/** @type {?} */\nexport var ERROR_DEBUG_CONTEXT = 'ngDebugContext';\n/** @type {?} */\nexport var ERROR_ORIGINAL_ERROR = 'ngOriginalError';\n/** @type {?} */\nexport var ERROR_LOGGER = 'ngErrorLogger';\n/**\n * @param {?} error\n * @return {?}\n */\nexport function getType(error) {\n    return (/** @type {?} */ (error))[ERROR_TYPE];\n}\n/**\n * @param {?} error\n * @return {?}\n */\nexport function getDebugContext(error) {\n    return (/** @type {?} */ (error))[ERROR_DEBUG_CONTEXT];\n}\n/**\n * @param {?} error\n * @return {?}\n */\nexport function getOriginalError(error) {\n    return (/** @type {?} */ (error))[ERROR_ORIGINAL_ERROR];\n}\n/**\n * @param {?} error\n * @return {?}\n */\nexport function getErrorLogger(error) {\n    return (/** @type {?} */ (error))[ERROR_LOGGER] || defaultErrorLogger;\n}\n/**\n * @param {?} console\n * @param {...?} values\n * @return {?}\n */\nfunction defaultErrorLogger(console) {\n    var values = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        values[_i - 1] = arguments[_i];\n    }\n    console.error.apply(console, values);\n}\n//# sourceMappingURL=errors.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ERROR_ORIGINAL_ERROR, getDebugContext, getErrorLogger, getOriginalError } from './errors';\n/**\n * Provides a hook for centralized exception handling.\n *\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n *\n * \\@NgModule({\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n *\n * \\@publicApi\n */\nvar /**\n * Provides a hook for centralized exception handling.\n *\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n *\n * \\@NgModule({\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n *\n * \\@publicApi\n */\nErrorHandler = /** @class */ (function () {\n    function ErrorHandler() {\n        /**\n         * \\@internal\n         */\n        this._console = console;\n    }\n    /**\n     * @param {?} error\n     * @return {?}\n     */\n    ErrorHandler.prototype.handleError = /**\n     * @param {?} error\n     * @return {?}\n     */\n    function (error) {\n        /** @type {?} */\n        var originalError = this._findOriginalError(error);\n        /** @type {?} */\n        var context = this._findContext(error);\n        /** @type {?} */\n        var errorLogger = getErrorLogger(error);\n        errorLogger(this._console, \"ERROR\", error);\n        if (originalError) {\n            errorLogger(this._console, \"ORIGINAL ERROR\", originalError);\n        }\n        if (context) {\n            errorLogger(this._console, 'ERROR CONTEXT', context);\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} error\n     * @return {?}\n     */\n    ErrorHandler.prototype._findContext = /**\n     * \\@internal\n     * @param {?} error\n     * @return {?}\n     */\n    function (error) {\n        if (error) {\n            return getDebugContext(error) ? getDebugContext(error) :\n                this._findContext(getOriginalError(error));\n        }\n        return null;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} error\n     * @return {?}\n     */\n    ErrorHandler.prototype._findOriginalError = /**\n     * \\@internal\n     * @param {?} error\n     * @return {?}\n     */\n    function (error) {\n        /** @type {?} */\n        var e = getOriginalError(error);\n        while (e && getOriginalError(e)) {\n            e = getOriginalError(e);\n        }\n        return e;\n    };\n    return ErrorHandler;\n}());\n/**\n * Provides a hook for centralized exception handling.\n *\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n *\n * \\@NgModule({\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n *\n * \\@publicApi\n */\nexport { ErrorHandler };\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ErrorHandler.prototype._console;\n}\n/**\n * @param {?} message\n * @param {?} originalError\n * @return {?}\n */\nexport function wrappedError(message, originalError) {\n    /** @type {?} */\n    var msg = message + \" caused by: \" + (originalError instanceof Error ? originalError.message : originalError);\n    /** @type {?} */\n    var error = Error(msg);\n    (/** @type {?} */ (error))[ERROR_ORIGINAL_ERROR] = originalError;\n    return error;\n}\n//# sourceMappingURL=error_handler.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { wrappedError } from '../error_handler';\nimport { ERROR_ORIGINAL_ERROR } from '../errors';\nimport { stringify } from '../util';\n/**\n * @param {?} keys\n * @return {?}\n */\nfunction findFirstClosedCycle(keys) {\n    /** @type {?} */\n    var res = [];\n    for (var i = 0; i < keys.length; ++i) {\n        if (res.indexOf(keys[i]) > -1) {\n            res.push(keys[i]);\n            return res;\n        }\n        res.push(keys[i]);\n    }\n    return res;\n}\n/**\n * @param {?} keys\n * @return {?}\n */\nfunction constructResolvingPath(keys) {\n    if (keys.length > 1) {\n        /** @type {?} */\n        var reversed = findFirstClosedCycle(keys.slice().reverse());\n        /** @type {?} */\n        var tokenStrs = reversed.map(function (k) { return stringify(k.token); });\n        return ' (' + tokenStrs.join(' -> ') + ')';\n    }\n    return '';\n}\n/**\n * @record\n */\nexport function InjectionError() { }\n/** @type {?} */\nInjectionError.prototype.keys;\n/** @type {?} */\nInjectionError.prototype.injectors;\n/** @type {?} */\nInjectionError.prototype.constructResolvingMessage;\n/** @type {?} */\nInjectionError.prototype.addKey;\n/**\n * @param {?} injector\n * @param {?} key\n * @param {?} constructResolvingMessage\n * @param {?=} originalError\n * @return {?}\n */\nfunction injectionError(injector, key, constructResolvingMessage, originalError) {\n    /** @type {?} */\n    var keys = [key];\n    /** @type {?} */\n    var errMsg = constructResolvingMessage(keys);\n    /** @type {?} */\n    var error = /** @type {?} */ ((originalError ? wrappedError(errMsg, originalError) : Error(errMsg)));\n    error.addKey = addKey;\n    error.keys = keys;\n    error.injectors = [injector];\n    error.constructResolvingMessage = constructResolvingMessage;\n    (/** @type {?} */ (error))[ERROR_ORIGINAL_ERROR] = originalError;\n    return error;\n}\n/**\n * @this {?}\n * @param {?} injector\n * @param {?} key\n * @return {?}\n */\nfunction addKey(injector, key) {\n    this.injectors.push(injector);\n    this.keys.push(key);\n    // Note: This updated message won't be reflected in the `.stack` property\n    this.message = this.constructResolvingMessage(this.keys);\n}\n/**\n * Thrown when trying to retrieve a dependency by key from {\\@link Injector}, but the\n * {\\@link Injector} does not have a {\\@link Provider} for the given key.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor(b:B) {}\n * }\n *\n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n * ```\n * @param {?} injector\n * @param {?} key\n * @return {?}\n */\nexport function noProviderError(injector, key) {\n    return injectionError(injector, key, function (keys) {\n        /** @type {?} */\n        var first = stringify(keys[0].token);\n        return \"No provider for \" + first + \"!\" + constructResolvingPath(keys);\n    });\n}\n/**\n * Thrown when dependencies form a cycle.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * var injector = Injector.resolveAndCreate([\n *   {provide: \"one\", useFactory: (two) => \"two\", deps: [[new Inject(\"two\")]]},\n *   {provide: \"two\", useFactory: (one) => \"one\", deps: [[new Inject(\"one\")]]}\n * ]);\n *\n * expect(() => injector.get(\"one\")).toThrowError();\n * ```\n *\n * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.\n * @param {?} injector\n * @param {?} key\n * @return {?}\n */\nexport function cyclicDependencyError(injector, key) {\n    return injectionError(injector, key, function (keys) {\n        return \"Cannot instantiate cyclic dependency!\" + constructResolvingPath(keys);\n    });\n}\n/**\n * Thrown when a constructing type returns with an Error.\n *\n * The `InstantiationError` class contains the original error plus the dependency graph which caused\n * this object to be instantiated.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor() {\n *     throw new Error('message');\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([A]);\n * try {\n *   injector.get(A);\n * } catch (e) {\n *   expect(e instanceof InstantiationError).toBe(true);\n *   expect(e.originalException.message).toEqual(\"message\");\n *   expect(e.originalStack).toBeDefined();\n * }\n * ```\n * @param {?} injector\n * @param {?} originalException\n * @param {?} originalStack\n * @param {?} key\n * @return {?}\n */\nexport function instantiationError(injector, originalException, originalStack, key) {\n    return injectionError(injector, key, function (keys) {\n        /** @type {?} */\n        var first = stringify(keys[0].token);\n        return originalException.message + \": Error during instantiation of \" + first + \"!\" + constructResolvingPath(keys) + \".\";\n    }, originalException);\n}\n/**\n * Thrown when an object other then {\\@link Provider} (or `Type`) is passed to {\\@link Injector}\n * creation.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * expect(() => Injector.resolveAndCreate([\"not a type\"])).toThrowError();\n * ```\n * @param {?} provider\n * @return {?}\n */\nexport function invalidProviderError(provider) {\n    return Error(\"Invalid provider - only instances of Provider and Type are allowed, got: \" + provider);\n}\n/**\n * Thrown when the class has no annotation information.\n *\n * Lack of annotation information prevents the {\\@link Injector} from determining which dependencies\n * need to be injected into the constructor.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * class A {\n *   constructor(b) {}\n * }\n *\n * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n * ```\n *\n * This error is also thrown when the class not marked with {\\@link Injectable} has parameter types.\n *\n * ```typescript\n * class B {}\n *\n * class A {\n *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.\n * }\n *\n * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();\n * ```\n *\n * @param {?} typeOrFunc\n * @param {?} params\n * @return {?}\n */\nexport function noAnnotationError(typeOrFunc, params) {\n    /** @type {?} */\n    var signature = [];\n    for (var i = 0, ii = params.length; i < ii; i++) {\n        /** @type {?} */\n        var parameter = params[i];\n        if (!parameter || parameter.length == 0) {\n            signature.push('?');\n        }\n        else {\n            signature.push(parameter.map(stringify).join(' '));\n        }\n    }\n    return Error('Cannot resolve all parameters for \\'' + stringify(typeOrFunc) + '\\'(' +\n        signature.join(', ') + '). ' +\n        'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \\'' +\n        stringify(typeOrFunc) + '\\' is decorated with Injectable.');\n}\n/**\n * Thrown when getting an object by index.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * class A {}\n *\n * var injector = Injector.resolveAndCreate([A]);\n *\n * expect(() => injector.getAt(100)).toThrowError();\n * ```\n *\n * @param {?} index\n * @return {?}\n */\nexport function outOfBoundsError(index) {\n    return Error(\"Index \" + index + \" is out-of-bounds.\");\n}\n/**\n * Thrown when a multi provider and a regular provider are bound to the same token.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * expect(() => Injector.resolveAndCreate([\n *   { provide: \"Strings\", useValue: \"string1\", multi: true},\n *   { provide: \"Strings\", useValue: \"string2\", multi: false}\n * ])).toThrowError();\n * ```\n * @param {?} provider1\n * @param {?} provider2\n * @return {?}\n */\nexport function mixingMultiProvidersWithRegularProvidersError(provider1, provider2) {\n    return Error(\"Cannot mix multi providers and regular providers, got: \" + provider1 + \" \" + provider2);\n}\n//# sourceMappingURL=reflective_errors.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { stringify } from '../util';\nimport { resolveForwardRef } from './forward_ref';\n/**\n * A unique object used for retrieving items from the {\\@link ReflectiveInjector}.\n *\n * Keys have:\n * - a system-wide unique `id`.\n * - a `token`.\n *\n * `Key` is used internally by {\\@link ReflectiveInjector} because its system-wide unique `id` allows\n * the\n * injector to store created objects in a more efficient way.\n *\n * `Key` should not be created directly. {\\@link ReflectiveInjector} creates keys automatically when\n * resolving\n * providers.\n *\n * @deprecated No replacement\n * \\@publicApi\n */\nvar /**\n * A unique object used for retrieving items from the {\\@link ReflectiveInjector}.\n *\n * Keys have:\n * - a system-wide unique `id`.\n * - a `token`.\n *\n * `Key` is used internally by {\\@link ReflectiveInjector} because its system-wide unique `id` allows\n * the\n * injector to store created objects in a more efficient way.\n *\n * `Key` should not be created directly. {\\@link ReflectiveInjector} creates keys automatically when\n * resolving\n * providers.\n *\n * @deprecated No replacement\n * \\@publicApi\n */\nReflectiveKey = /** @class */ (function () {\n    /**\n     * Private\n     */\n    function ReflectiveKey(token, id) {\n        this.token = token;\n        this.id = id;\n        if (!token) {\n            throw new Error('Token must be defined!');\n        }\n        this.displayName = stringify(this.token);\n    }\n    /**\n     * Retrieves a `Key` for a token.\n     */\n    /**\n     * Retrieves a `Key` for a token.\n     * @param {?} token\n     * @return {?}\n     */\n    ReflectiveKey.get = /**\n     * Retrieves a `Key` for a token.\n     * @param {?} token\n     * @return {?}\n     */\n    function (token) {\n        return _globalKeyRegistry.get(resolveForwardRef(token));\n    };\n    Object.defineProperty(ReflectiveKey, \"numberOfKeys\", {\n        /**\n         * @returns the number of keys registered in the system.\n         */\n        get: /**\n         * @return {?} the number of keys registered in the system.\n         */\n        function () { return _globalKeyRegistry.numberOfKeys; },\n        enumerable: true,\n        configurable: true\n    });\n    return ReflectiveKey;\n}());\n/**\n * A unique object used for retrieving items from the {\\@link ReflectiveInjector}.\n *\n * Keys have:\n * - a system-wide unique `id`.\n * - a `token`.\n *\n * `Key` is used internally by {\\@link ReflectiveInjector} because its system-wide unique `id` allows\n * the\n * injector to store created objects in a more efficient way.\n *\n * `Key` should not be created directly. {\\@link ReflectiveInjector} creates keys automatically when\n * resolving\n * providers.\n *\n * @deprecated No replacement\n * \\@publicApi\n */\nexport { ReflectiveKey };\nif (false) {\n    /** @type {?} */\n    ReflectiveKey.prototype.displayName;\n    /** @type {?} */\n    ReflectiveKey.prototype.token;\n    /** @type {?} */\n    ReflectiveKey.prototype.id;\n}\nvar KeyRegistry = /** @class */ (function () {\n    function KeyRegistry() {\n        this._allKeys = new Map();\n    }\n    /**\n     * @param {?} token\n     * @return {?}\n     */\n    KeyRegistry.prototype.get = /**\n     * @param {?} token\n     * @return {?}\n     */\n    function (token) {\n        if (token instanceof ReflectiveKey)\n            return token;\n        if (this._allKeys.has(token)) {\n            return /** @type {?} */ ((this._allKeys.get(token)));\n        }\n        /** @type {?} */\n        var newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);\n        this._allKeys.set(token, newKey);\n        return newKey;\n    };\n    Object.defineProperty(KeyRegistry.prototype, \"numberOfKeys\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._allKeys.size; },\n        enumerable: true,\n        configurable: true\n    });\n    return KeyRegistry;\n}());\nexport { KeyRegistry };\nif (false) {\n    /** @type {?} */\n    KeyRegistry.prototype._allKeys;\n}\n/** @type {?} */\nvar _globalKeyRegistry = new KeyRegistry();\n//# sourceMappingURL=reflective_key.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Provides access to reflection data about symbols. Used internally by Angular\n * to power dependency injection and compilation.\n */\nvar /**\n * Provides access to reflection data about symbols. Used internally by Angular\n * to power dependency injection and compilation.\n */\nReflector = /** @class */ (function () {\n    function Reflector(reflectionCapabilities) {\n        this.reflectionCapabilities = reflectionCapabilities;\n    }\n    /**\n     * @param {?} caps\n     * @return {?}\n     */\n    Reflector.prototype.updateCapabilities = /**\n     * @param {?} caps\n     * @return {?}\n     */\n    function (caps) { this.reflectionCapabilities = caps; };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    Reflector.prototype.factory = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) { return this.reflectionCapabilities.factory(type); };\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    Reflector.prototype.parameters = /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    function (typeOrFunc) {\n        return this.reflectionCapabilities.parameters(typeOrFunc);\n    };\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    Reflector.prototype.annotations = /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    function (typeOrFunc) {\n        return this.reflectionCapabilities.annotations(typeOrFunc);\n    };\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    Reflector.prototype.propMetadata = /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    function (typeOrFunc) {\n        return this.reflectionCapabilities.propMetadata(typeOrFunc);\n    };\n    /**\n     * @param {?} type\n     * @param {?} lcProperty\n     * @return {?}\n     */\n    Reflector.prototype.hasLifecycleHook = /**\n     * @param {?} type\n     * @param {?} lcProperty\n     * @return {?}\n     */\n    function (type, lcProperty) {\n        return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);\n    };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    Reflector.prototype.getter = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) { return this.reflectionCapabilities.getter(name); };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    Reflector.prototype.setter = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) { return this.reflectionCapabilities.setter(name); };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    Reflector.prototype.method = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) { return this.reflectionCapabilities.method(name); };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    Reflector.prototype.importUri = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) { return this.reflectionCapabilities.importUri(type); };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    Reflector.prototype.resourceUri = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) { return this.reflectionCapabilities.resourceUri(type); };\n    /**\n     * @param {?} name\n     * @param {?} moduleUrl\n     * @param {?} members\n     * @param {?} runtime\n     * @return {?}\n     */\n    Reflector.prototype.resolveIdentifier = /**\n     * @param {?} name\n     * @param {?} moduleUrl\n     * @param {?} members\n     * @param {?} runtime\n     * @return {?}\n     */\n    function (name, moduleUrl, members, runtime) {\n        return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, members, runtime);\n    };\n    /**\n     * @param {?} identifier\n     * @param {?} name\n     * @return {?}\n     */\n    Reflector.prototype.resolveEnum = /**\n     * @param {?} identifier\n     * @param {?} name\n     * @return {?}\n     */\n    function (identifier, name) {\n        return this.reflectionCapabilities.resolveEnum(identifier, name);\n    };\n    return Reflector;\n}());\n/**\n * Provides access to reflection data about symbols. Used internally by Angular\n * to power dependency injection and compilation.\n */\nexport { Reflector };\nif (false) {\n    /** @type {?} */\n    Reflector.prototype.reflectionCapabilities;\n}\n//# sourceMappingURL=reflector.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { reflector } from '../reflection/reflection';\nimport { Type } from '../type';\nimport { resolveForwardRef } from './forward_ref';\nimport { InjectionToken } from './injection_token';\nimport { Inject, Optional, Self, SkipSelf } from './metadata';\nimport { invalidProviderError, mixingMultiProvidersWithRegularProvidersError, noAnnotationError } from './reflective_errors';\nimport { ReflectiveKey } from './reflective_key';\n/**\n * @record\n */\nfunction NormalizedProvider() { }\n/**\n * `Dependency` is used by the framework to extend DI.\n * This is internal to Angular and should not be used directly.\n */\nvar /**\n * `Dependency` is used by the framework to extend DI.\n * This is internal to Angular and should not be used directly.\n */\nReflectiveDependency = /** @class */ (function () {\n    function ReflectiveDependency(key, optional, visibility) {\n        this.key = key;\n        this.optional = optional;\n        this.visibility = visibility;\n    }\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    ReflectiveDependency.fromKey = /**\n     * @param {?} key\n     * @return {?}\n     */\n    function (key) {\n        return new ReflectiveDependency(key, false, null);\n    };\n    return ReflectiveDependency;\n}());\n/**\n * `Dependency` is used by the framework to extend DI.\n * This is internal to Angular and should not be used directly.\n */\nexport { ReflectiveDependency };\nif (false) {\n    /** @type {?} */\n    ReflectiveDependency.prototype.key;\n    /** @type {?} */\n    ReflectiveDependency.prototype.optional;\n    /** @type {?} */\n    ReflectiveDependency.prototype.visibility;\n}\n/** @type {?} */\nvar _EMPTY_LIST = [];\n/**\n * An internal resolved representation of a `Provider` used by the `Injector`.\n *\n * \\@usageNotes\n * This is usually created automatically by `Injector.resolveAndCreate`.\n *\n * It can be created manually, as follows:\n *\n * ### Example\n *\n * ```typescript\n * var resolvedProviders = Injector.resolve([{ provide: 'message', useValue: 'Hello' }]);\n * var injector = Injector.fromResolvedProviders(resolvedProviders);\n *\n * expect(injector.get('message')).toEqual('Hello');\n * ```\n *\n * \\@publicApi\n * @record\n */\nexport function ResolvedReflectiveProvider() { }\n/**\n * A key, usually a `Type<any>`.\n * @type {?}\n */\nResolvedReflectiveProvider.prototype.key;\n/**\n * Factory function which can return an instance of an object represented by a key.\n * @type {?}\n */\nResolvedReflectiveProvider.prototype.resolvedFactories;\n/**\n * Indicates if the provider is a multi-provider or a regular provider.\n * @type {?}\n */\nResolvedReflectiveProvider.prototype.multiProvider;\nvar ResolvedReflectiveProvider_ = /** @class */ (function () {\n    function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {\n        this.key = key;\n        this.resolvedFactories = resolvedFactories;\n        this.multiProvider = multiProvider;\n        this.resolvedFactory = this.resolvedFactories[0];\n    }\n    return ResolvedReflectiveProvider_;\n}());\nexport { ResolvedReflectiveProvider_ };\nif (false) {\n    /** @type {?} */\n    ResolvedReflectiveProvider_.prototype.resolvedFactory;\n    /** @type {?} */\n    ResolvedReflectiveProvider_.prototype.key;\n    /** @type {?} */\n    ResolvedReflectiveProvider_.prototype.resolvedFactories;\n    /** @type {?} */\n    ResolvedReflectiveProvider_.prototype.multiProvider;\n}\n/**\n * An internal resolved representation of a factory function created by resolving `Provider`.\n * \\@publicApi\n */\nvar /**\n * An internal resolved representation of a factory function created by resolving `Provider`.\n * \\@publicApi\n */\nResolvedReflectiveFactory = /** @class */ (function () {\n    function ResolvedReflectiveFactory(factory, dependencies) {\n        this.factory = factory;\n        this.dependencies = dependencies;\n    }\n    return ResolvedReflectiveFactory;\n}());\n/**\n * An internal resolved representation of a factory function created by resolving `Provider`.\n * \\@publicApi\n */\nexport { ResolvedReflectiveFactory };\nif (false) {\n    /**\n     * Factory function which can return an instance of an object represented by a key.\n     * @type {?}\n     */\n    ResolvedReflectiveFactory.prototype.factory;\n    /**\n     * Arguments (dependencies) to the `factory` function.\n     * @type {?}\n     */\n    ResolvedReflectiveFactory.prototype.dependencies;\n}\n/**\n * Resolve a single provider.\n * @param {?} provider\n * @return {?}\n */\nfunction resolveReflectiveFactory(provider) {\n    /** @type {?} */\n    var factoryFn;\n    /** @type {?} */\n    var resolvedDeps;\n    if (provider.useClass) {\n        /** @type {?} */\n        var useClass = resolveForwardRef(provider.useClass);\n        factoryFn = reflector.factory(useClass);\n        resolvedDeps = _dependenciesFor(useClass);\n    }\n    else if (provider.useExisting) {\n        factoryFn = function (aliasInstance) { return aliasInstance; };\n        resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];\n    }\n    else if (provider.useFactory) {\n        factoryFn = provider.useFactory;\n        resolvedDeps = constructDependencies(provider.useFactory, provider.deps);\n    }\n    else {\n        factoryFn = function () { return provider.useValue; };\n        resolvedDeps = _EMPTY_LIST;\n    }\n    return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);\n}\n/**\n * Converts the `Provider` into `ResolvedProvider`.\n *\n * `Injector` internally only uses `ResolvedProvider`, `Provider` contains convenience provider\n * syntax.\n * @param {?} provider\n * @return {?}\n */\nfunction resolveReflectiveProvider(provider) {\n    return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi || false);\n}\n/**\n * Resolve a list of Providers.\n * @param {?} providers\n * @return {?}\n */\nexport function resolveReflectiveProviders(providers) {\n    /** @type {?} */\n    var normalized = _normalizeProviders(providers, []);\n    /** @type {?} */\n    var resolved = normalized.map(resolveReflectiveProvider);\n    /** @type {?} */\n    var resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());\n    return Array.from(resolvedProviderMap.values());\n}\n/**\n * Merges a list of ResolvedProviders into a list where each key is contained exactly once and\n * multi providers have been merged.\n * @param {?} providers\n * @param {?} normalizedProvidersMap\n * @return {?}\n */\nexport function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {\n    for (var i = 0; i < providers.length; i++) {\n        /** @type {?} */\n        var provider = providers[i];\n        /** @type {?} */\n        var existing = normalizedProvidersMap.get(provider.key.id);\n        if (existing) {\n            if (provider.multiProvider !== existing.multiProvider) {\n                throw mixingMultiProvidersWithRegularProvidersError(existing, provider);\n            }\n            if (provider.multiProvider) {\n                for (var j = 0; j < provider.resolvedFactories.length; j++) {\n                    existing.resolvedFactories.push(provider.resolvedFactories[j]);\n                }\n            }\n            else {\n                normalizedProvidersMap.set(provider.key.id, provider);\n            }\n        }\n        else {\n            /** @type {?} */\n            var resolvedProvider = void 0;\n            if (provider.multiProvider) {\n                resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);\n            }\n            else {\n                resolvedProvider = provider;\n            }\n            normalizedProvidersMap.set(provider.key.id, resolvedProvider);\n        }\n    }\n    return normalizedProvidersMap;\n}\n/**\n * @param {?} providers\n * @param {?} res\n * @return {?}\n */\nfunction _normalizeProviders(providers, res) {\n    providers.forEach(function (b) {\n        if (b instanceof Type) {\n            res.push({ provide: b, useClass: b });\n        }\n        else if (b && typeof b == 'object' && (/** @type {?} */ (b)).provide !== undefined) {\n            res.push(/** @type {?} */ (b));\n        }\n        else if (b instanceof Array) {\n            _normalizeProviders(b, res);\n        }\n        else {\n            throw invalidProviderError(b);\n        }\n    });\n    return res;\n}\n/**\n * @param {?} typeOrFunc\n * @param {?=} dependencies\n * @return {?}\n */\nexport function constructDependencies(typeOrFunc, dependencies) {\n    if (!dependencies) {\n        return _dependenciesFor(typeOrFunc);\n    }\n    else {\n        /** @type {?} */\n        var params_1 = dependencies.map(function (t) { return [t]; });\n        return dependencies.map(function (t) { return _extractToken(typeOrFunc, t, params_1); });\n    }\n}\n/**\n * @param {?} typeOrFunc\n * @return {?}\n */\nfunction _dependenciesFor(typeOrFunc) {\n    /** @type {?} */\n    var params = reflector.parameters(typeOrFunc);\n    if (!params)\n        return [];\n    if (params.some(function (p) { return p == null; })) {\n        throw noAnnotationError(typeOrFunc, params);\n    }\n    return params.map(function (p) { return _extractToken(typeOrFunc, p, params); });\n}\n/**\n * @param {?} typeOrFunc\n * @param {?} metadata\n * @param {?} params\n * @return {?}\n */\nfunction _extractToken(typeOrFunc, metadata, params) {\n    /** @type {?} */\n    var token = null;\n    /** @type {?} */\n    var optional = false;\n    if (!Array.isArray(metadata)) {\n        if (metadata instanceof Inject) {\n            return _createDependency(metadata.token, optional, null);\n        }\n        else {\n            return _createDependency(metadata, optional, null);\n        }\n    }\n    /** @type {?} */\n    var visibility = null;\n    for (var i = 0; i < metadata.length; ++i) {\n        /** @type {?} */\n        var paramMetadata = metadata[i];\n        if (paramMetadata instanceof Type) {\n            token = paramMetadata;\n        }\n        else if (paramMetadata instanceof Inject) {\n            token = paramMetadata.token;\n        }\n        else if (paramMetadata instanceof Optional) {\n            optional = true;\n        }\n        else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {\n            visibility = paramMetadata;\n        }\n        else if (paramMetadata instanceof InjectionToken) {\n            token = paramMetadata;\n        }\n    }\n    token = resolveForwardRef(token);\n    if (token != null) {\n        return _createDependency(token, optional, visibility);\n    }\n    else {\n        throw noAnnotationError(typeOrFunc, params);\n    }\n}\n/**\n * @param {?} token\n * @param {?} optional\n * @param {?} visibility\n * @return {?}\n */\nfunction _createDependency(token, optional, visibility) {\n    return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);\n}\n//# sourceMappingURL=reflective_provider.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injector, THROW_IF_NOT_FOUND } from './injector';\nimport { Self, SkipSelf } from './metadata';\nimport { cyclicDependencyError, instantiationError, noProviderError, outOfBoundsError } from './reflective_errors';\nimport { ReflectiveKey } from './reflective_key';\nimport { resolveReflectiveProviders } from './reflective_provider';\n/** @type {?} */\nvar UNDEFINED = new Object();\n/**\n * A ReflectiveDependency injection container used for instantiating objects and resolving\n * dependencies.\n *\n * An `Injector` is a replacement for a `new` operator, which can automatically resolve the\n * constructor dependencies.\n *\n * In typical use, application code asks for the dependencies in the constructor and they are\n * resolved by the `Injector`.\n *\n * \\@usageNotes\n * ### Example\n *\n * The following example creates an `Injector` configured to create `Engine` and `Car`.\n *\n * ```typescript\n * \\@Injectable()\n * class Engine {\n * }\n *\n * \\@Injectable()\n * class Car {\n *   constructor(public engine:Engine) {}\n * }\n *\n * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n * var car = injector.get(Car);\n * expect(car instanceof Car).toBe(true);\n * expect(car.engine instanceof Engine).toBe(true);\n * ```\n *\n * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`\n * resolve all of the object's dependencies automatically.\n *\n * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.\n * \\@publicApi\n * @abstract\n */\nvar /**\n * A ReflectiveDependency injection container used for instantiating objects and resolving\n * dependencies.\n *\n * An `Injector` is a replacement for a `new` operator, which can automatically resolve the\n * constructor dependencies.\n *\n * In typical use, application code asks for the dependencies in the constructor and they are\n * resolved by the `Injector`.\n *\n * \\@usageNotes\n * ### Example\n *\n * The following example creates an `Injector` configured to create `Engine` and `Car`.\n *\n * ```typescript\n * \\@Injectable()\n * class Engine {\n * }\n *\n * \\@Injectable()\n * class Car {\n *   constructor(public engine:Engine) {}\n * }\n *\n * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n * var car = injector.get(Car);\n * expect(car instanceof Car).toBe(true);\n * expect(car.engine instanceof Engine).toBe(true);\n * ```\n *\n * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`\n * resolve all of the object's dependencies automatically.\n *\n * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.\n * \\@publicApi\n * @abstract\n */\nReflectiveInjector = /** @class */ (function () {\n    function ReflectiveInjector() {\n    }\n    /**\n     * Turns an array of provider definitions into an array of resolved providers.\n     *\n     * A resolution is a process of flattening multiple nested arrays and converting individual\n     * providers into an array of `ResolvedReflectiveProvider`s.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * @Injectable()\n     * class Engine {\n     * }\n     *\n     * @Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n     *\n     * expect(providers.length).toEqual(2);\n     *\n     * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\n     * expect(providers[0].key.displayName).toBe(\"Car\");\n     * expect(providers[0].dependencies.length).toEqual(1);\n     * expect(providers[0].factory).toBeDefined();\n     *\n     * expect(providers[1].key.displayName).toBe(\"Engine\");\n     * });\n     * ```\n     *\n     */\n    /**\n     * Turns an array of provider definitions into an array of resolved providers.\n     *\n     * A resolution is a process of flattening multiple nested arrays and converting individual\n     * providers into an array of `ResolvedReflectiveProvider`s.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n     *\n     * expect(providers.length).toEqual(2);\n     *\n     * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\n     * expect(providers[0].key.displayName).toBe(\"Car\");\n     * expect(providers[0].dependencies.length).toEqual(1);\n     * expect(providers[0].factory).toBeDefined();\n     *\n     * expect(providers[1].key.displayName).toBe(\"Engine\");\n     * });\n     * ```\n     *\n     * @param {?} providers\n     * @return {?}\n     */\n    ReflectiveInjector.resolve = /**\n     * Turns an array of provider definitions into an array of resolved providers.\n     *\n     * A resolution is a process of flattening multiple nested arrays and converting individual\n     * providers into an array of `ResolvedReflectiveProvider`s.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n     *\n     * expect(providers.length).toEqual(2);\n     *\n     * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\n     * expect(providers[0].key.displayName).toBe(\"Car\");\n     * expect(providers[0].dependencies.length).toEqual(1);\n     * expect(providers[0].factory).toBeDefined();\n     *\n     * expect(providers[1].key.displayName).toBe(\"Engine\");\n     * });\n     * ```\n     *\n     * @param {?} providers\n     * @return {?}\n     */\n    function (providers) {\n        return resolveReflectiveProviders(providers);\n    };\n    /**\n     * Resolves an array of providers and creates an injector from those providers.\n     *\n     * The passed-in providers can be an array of `Type`, `Provider`,\n     * or a recursive array of more providers.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * @Injectable()\n     * class Engine {\n     * }\n     *\n     * @Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     */\n    /**\n     * Resolves an array of providers and creates an injector from those providers.\n     *\n     * The passed-in providers can be an array of `Type`, `Provider`,\n     * or a recursive array of more providers.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     * @param {?} providers\n     * @param {?=} parent\n     * @return {?}\n     */\n    ReflectiveInjector.resolveAndCreate = /**\n     * Resolves an array of providers and creates an injector from those providers.\n     *\n     * The passed-in providers can be an array of `Type`, `Provider`,\n     * or a recursive array of more providers.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     * @param {?} providers\n     * @param {?=} parent\n     * @return {?}\n     */\n    function (providers, parent) {\n        /** @type {?} */\n        var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n        return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);\n    };\n    /**\n     * Creates an injector from previously resolved providers.\n     *\n     * This API is the recommended way to construct injectors in performance-sensitive parts.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * @Injectable()\n     * class Engine {\n     * }\n     *\n     * @Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, Engine]);\n     * var injector = ReflectiveInjector.fromResolvedProviders(providers);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     */\n    /**\n     * Creates an injector from previously resolved providers.\n     *\n     * This API is the recommended way to construct injectors in performance-sensitive parts.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, Engine]);\n     * var injector = ReflectiveInjector.fromResolvedProviders(providers);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     * @param {?} providers\n     * @param {?=} parent\n     * @return {?}\n     */\n    ReflectiveInjector.fromResolvedProviders = /**\n     * Creates an injector from previously resolved providers.\n     *\n     * This API is the recommended way to construct injectors in performance-sensitive parts.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var providers = ReflectiveInjector.resolve([Car, Engine]);\n     * var injector = ReflectiveInjector.fromResolvedProviders(providers);\n     * expect(injector.get(Car) instanceof Car).toBe(true);\n     * ```\n     * @param {?} providers\n     * @param {?=} parent\n     * @return {?}\n     */\n    function (providers, parent) {\n        return new ReflectiveInjector_(providers, parent);\n    };\n    return ReflectiveInjector;\n}());\n/**\n * A ReflectiveDependency injection container used for instantiating objects and resolving\n * dependencies.\n *\n * An `Injector` is a replacement for a `new` operator, which can automatically resolve the\n * constructor dependencies.\n *\n * In typical use, application code asks for the dependencies in the constructor and they are\n * resolved by the `Injector`.\n *\n * \\@usageNotes\n * ### Example\n *\n * The following example creates an `Injector` configured to create `Engine` and `Car`.\n *\n * ```typescript\n * \\@Injectable()\n * class Engine {\n * }\n *\n * \\@Injectable()\n * class Car {\n *   constructor(public engine:Engine) {}\n * }\n *\n * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n * var car = injector.get(Car);\n * expect(car instanceof Car).toBe(true);\n * expect(car.engine instanceof Engine).toBe(true);\n * ```\n *\n * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`\n * resolve all of the object's dependencies automatically.\n *\n * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.\n * \\@publicApi\n * @abstract\n */\nexport { ReflectiveInjector };\nif (false) {\n    /**\n     * Parent of this injector.\n     *\n     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n     * -->\n     * @abstract\n     * @return {?}\n     */\n    ReflectiveInjector.prototype.parent = function () { };\n    /**\n     * Resolves an array of providers and creates a child injector from those providers.\n     *\n     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n     * -->\n     *\n     * The passed-in providers can be an array of `Type`, `Provider`,\n     * or a recursive array of more providers.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * class ParentProvider {}\n     * class ChildProvider {}\n     *\n     * var parent = ReflectiveInjector.resolveAndCreate([ParentProvider]);\n     * var child = parent.resolveAndCreateChild([ChildProvider]);\n     *\n     * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);\n     * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);\n     * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));\n     * ```\n     * @abstract\n     * @param {?} providers\n     * @return {?}\n     */\n    ReflectiveInjector.prototype.resolveAndCreateChild = function (providers) { };\n    /**\n     * Creates a child injector from previously resolved providers.\n     *\n     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n     * -->\n     *\n     * This API is the recommended way to construct injectors in performance-sensitive parts.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * class ParentProvider {}\n     * class ChildProvider {}\n     *\n     * var parentProviders = ReflectiveInjector.resolve([ParentProvider]);\n     * var childProviders = ReflectiveInjector.resolve([ChildProvider]);\n     *\n     * var parent = ReflectiveInjector.fromResolvedProviders(parentProviders);\n     * var child = parent.createChildFromResolved(childProviders);\n     *\n     * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);\n     * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);\n     * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));\n     * ```\n     * @abstract\n     * @param {?} providers\n     * @return {?}\n     */\n    ReflectiveInjector.prototype.createChildFromResolved = function (providers) { };\n    /**\n     * Resolves a provider and instantiates an object in the context of the injector.\n     *\n     * The created object does not get cached by the injector.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Engine]);\n     *\n     * var car = injector.resolveAndInstantiate(Car);\n     * expect(car.engine).toBe(injector.get(Engine));\n     * expect(car).not.toBe(injector.resolveAndInstantiate(Car));\n     * ```\n     * @abstract\n     * @param {?} provider\n     * @return {?}\n     */\n    ReflectiveInjector.prototype.resolveAndInstantiate = function (provider) { };\n    /**\n     * Instantiates an object using a resolved provider in the context of the injector.\n     *\n     * The created object does not get cached by the injector.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Engine]);\n     * var carProvider = ReflectiveInjector.resolve([Car])[0];\n     * var car = injector.instantiateResolved(carProvider);\n     * expect(car.engine).toBe(injector.get(Engine));\n     * expect(car).not.toBe(injector.instantiateResolved(carProvider));\n     * ```\n     * @abstract\n     * @param {?} provider\n     * @return {?}\n     */\n    ReflectiveInjector.prototype.instantiateResolved = function (provider) { };\n    /**\n     * @abstract\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    ReflectiveInjector.prototype.get = function (token, notFoundValue) { };\n}\nvar ReflectiveInjector_ = /** @class */ (function () {\n    /**\n     * Private\n     */\n    function ReflectiveInjector_(_providers, _parent) {\n        /**\n         * \\@internal\n         */\n        this._constructionCounter = 0;\n        this._providers = _providers;\n        this.parent = _parent || null;\n        /** @type {?} */\n        var len = _providers.length;\n        this.keyIds = new Array(len);\n        this.objs = new Array(len);\n        for (var i = 0; i < len; i++) {\n            this.keyIds[i] = _providers[i].key.id;\n            this.objs[i] = UNDEFINED;\n        }\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype.get = /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    function (token, notFoundValue) {\n        if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }\n        return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);\n    };\n    /**\n     * @param {?} providers\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype.resolveAndCreateChild = /**\n     * @param {?} providers\n     * @return {?}\n     */\n    function (providers) {\n        /** @type {?} */\n        var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n        return this.createChildFromResolved(ResolvedReflectiveProviders);\n    };\n    /**\n     * @param {?} providers\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype.createChildFromResolved = /**\n     * @param {?} providers\n     * @return {?}\n     */\n    function (providers) {\n        /** @type {?} */\n        var inj = new ReflectiveInjector_(providers);\n        (/** @type {?} */ (inj)).parent = this;\n        return inj;\n    };\n    /**\n     * @param {?} provider\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype.resolveAndInstantiate = /**\n     * @param {?} provider\n     * @return {?}\n     */\n    function (provider) {\n        return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);\n    };\n    /**\n     * @param {?} provider\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype.instantiateResolved = /**\n     * @param {?} provider\n     * @return {?}\n     */\n    function (provider) {\n        return this._instantiateProvider(provider);\n    };\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype.getProviderAtIndex = /**\n     * @param {?} index\n     * @return {?}\n     */\n    function (index) {\n        if (index < 0 || index >= this._providers.length) {\n            throw outOfBoundsError(index);\n        }\n        return this._providers[index];\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} provider\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._new = /**\n     * \\@internal\n     * @param {?} provider\n     * @return {?}\n     */\n    function (provider) {\n        if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {\n            throw cyclicDependencyError(this, provider.key);\n        }\n        return this._instantiateProvider(provider);\n    };\n    /**\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._getMaxNumberOfObjects = /**\n     * @return {?}\n     */\n    function () { return this.objs.length; };\n    /**\n     * @param {?} provider\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._instantiateProvider = /**\n     * @param {?} provider\n     * @return {?}\n     */\n    function (provider) {\n        if (provider.multiProvider) {\n            /** @type {?} */\n            var res = new Array(provider.resolvedFactories.length);\n            for (var i = 0; i < provider.resolvedFactories.length; ++i) {\n                res[i] = this._instantiate(provider, provider.resolvedFactories[i]);\n            }\n            return res;\n        }\n        else {\n            return this._instantiate(provider, provider.resolvedFactories[0]);\n        }\n    };\n    /**\n     * @param {?} provider\n     * @param {?} ResolvedReflectiveFactory\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._instantiate = /**\n     * @param {?} provider\n     * @param {?} ResolvedReflectiveFactory\n     * @return {?}\n     */\n    function (provider, ResolvedReflectiveFactory) {\n        var _this = this;\n        /** @type {?} */\n        var factory = ResolvedReflectiveFactory.factory;\n        /** @type {?} */\n        var deps;\n        try {\n            deps =\n                ResolvedReflectiveFactory.dependencies.map(function (dep) { return _this._getByReflectiveDependency(dep); });\n        }\n        catch (e) {\n            if (e.addKey) {\n                e.addKey(this, provider.key);\n            }\n            throw e;\n        }\n        /** @type {?} */\n        var obj;\n        try {\n            obj = factory.apply(void 0, deps);\n        }\n        catch (e) {\n            throw instantiationError(this, e, e.stack, provider.key);\n        }\n        return obj;\n    };\n    /**\n     * @param {?} dep\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._getByReflectiveDependency = /**\n     * @param {?} dep\n     * @return {?}\n     */\n    function (dep) {\n        return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);\n    };\n    /**\n     * @param {?} key\n     * @param {?} visibility\n     * @param {?} notFoundValue\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._getByKey = /**\n     * @param {?} key\n     * @param {?} visibility\n     * @param {?} notFoundValue\n     * @return {?}\n     */\n    function (key, visibility, notFoundValue) {\n        if (key === ReflectiveInjector_.INJECTOR_KEY) {\n            return this;\n        }\n        if (visibility instanceof Self) {\n            return this._getByKeySelf(key, notFoundValue);\n        }\n        else {\n            return this._getByKeyDefault(key, notFoundValue, visibility);\n        }\n    };\n    /**\n     * @param {?} keyId\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._getObjByKeyId = /**\n     * @param {?} keyId\n     * @return {?}\n     */\n    function (keyId) {\n        for (var i = 0; i < this.keyIds.length; i++) {\n            if (this.keyIds[i] === keyId) {\n                if (this.objs[i] === UNDEFINED) {\n                    this.objs[i] = this._new(this._providers[i]);\n                }\n                return this.objs[i];\n            }\n        }\n        return UNDEFINED;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} key\n     * @param {?} notFoundValue\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._throwOrNull = /**\n     * \\@internal\n     * @param {?} key\n     * @param {?} notFoundValue\n     * @return {?}\n     */\n    function (key, notFoundValue) {\n        if (notFoundValue !== THROW_IF_NOT_FOUND) {\n            return notFoundValue;\n        }\n        else {\n            throw noProviderError(this, key);\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} key\n     * @param {?} notFoundValue\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._getByKeySelf = /**\n     * \\@internal\n     * @param {?} key\n     * @param {?} notFoundValue\n     * @return {?}\n     */\n    function (key, notFoundValue) {\n        /** @type {?} */\n        var obj = this._getObjByKeyId(key.id);\n        return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} key\n     * @param {?} notFoundValue\n     * @param {?} visibility\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype._getByKeyDefault = /**\n     * \\@internal\n     * @param {?} key\n     * @param {?} notFoundValue\n     * @param {?} visibility\n     * @return {?}\n     */\n    function (key, notFoundValue, visibility) {\n        /** @type {?} */\n        var inj;\n        if (visibility instanceof SkipSelf) {\n            inj = this.parent;\n        }\n        else {\n            inj = this;\n        }\n        while (inj instanceof ReflectiveInjector_) {\n            /** @type {?} */\n            var inj_ = /** @type {?} */ (inj);\n            /** @type {?} */\n            var obj = inj_._getObjByKeyId(key.id);\n            if (obj !== UNDEFINED)\n                return obj;\n            inj = inj_.parent;\n        }\n        if (inj !== null) {\n            return inj.get(key.token, notFoundValue);\n        }\n        else {\n            return this._throwOrNull(key, notFoundValue);\n        }\n    };\n    Object.defineProperty(ReflectiveInjector_.prototype, \"displayName\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var providers = _mapProviders(this, function (b) { return ' \"' + b.key.displayName + '\" '; })\n                .join(', ');\n            return \"ReflectiveInjector(providers: [\" + providers + \"])\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    ReflectiveInjector_.prototype.toString = /**\n     * @return {?}\n     */\n    function () { return this.displayName; };\n    ReflectiveInjector_.INJECTOR_KEY = ReflectiveKey.get(Injector);\n    return ReflectiveInjector_;\n}());\nexport { ReflectiveInjector_ };\nif (false) {\n    /** @type {?} */\n    ReflectiveInjector_.INJECTOR_KEY;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ReflectiveInjector_.prototype._constructionCounter;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ReflectiveInjector_.prototype._providers;\n    /** @type {?} */\n    ReflectiveInjector_.prototype.parent;\n    /** @type {?} */\n    ReflectiveInjector_.prototype.keyIds;\n    /** @type {?} */\n    ReflectiveInjector_.prototype.objs;\n}\n/**\n * @param {?} injector\n * @param {?} fn\n * @return {?}\n */\nfunction _mapProviders(injector, fn) {\n    /** @type {?} */\n    var res = new Array(injector._providers.length);\n    for (var i = 0; i < injector._providers.length; ++i) {\n        res[i] = fn(injector.getProviderAtIndex(i));\n    }\n    return res;\n}\n//# sourceMappingURL=reflective_injector.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { isPromise } from '../src/util/lang';\nimport { Inject, Injectable, InjectionToken, Optional } from './di';\n/** *\n * A function that will be executed when an application is initialized.\n *\n * \\@publicApi\n  @type {?} */\nexport var APP_INITIALIZER = new InjectionToken('Application Initializer');\n/**\n * A class that reflects the state of running {\\@link APP_INITIALIZER}s.\n *\n * \\@publicApi\n */\nvar ApplicationInitStatus = /** @class */ (function () {\n    function ApplicationInitStatus(appInits) {\n        var _this = this;\n        this.appInits = appInits;\n        this.initialized = false;\n        this.done = false;\n        this.donePromise = new Promise(function (res, rej) {\n            _this.resolve = res;\n            _this.reject = rej;\n        });\n    }\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    ApplicationInitStatus.prototype.runInitializers = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this.initialized) {\n            return;\n        }\n        /** @type {?} */\n        var asyncInitPromises = [];\n        /** @type {?} */\n        var complete = function () {\n            (/** @type {?} */ (_this)).done = true;\n            _this.resolve();\n        };\n        if (this.appInits) {\n            for (var i = 0; i < this.appInits.length; i++) {\n                /** @type {?} */\n                var initResult = this.appInits[i]();\n                if (isPromise(initResult)) {\n                    asyncInitPromises.push(initResult);\n                }\n            }\n        }\n        Promise.all(asyncInitPromises).then(function () { complete(); }).catch(function (e) { _this.reject(e); });\n        if (asyncInitPromises.length === 0) {\n            complete();\n        }\n        this.initialized = true;\n    };\n    ApplicationInitStatus.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    ApplicationInitStatus.ctorParameters = function () { return [\n        { type: Array, decorators: [{ type: Inject, args: [APP_INITIALIZER,] }, { type: Optional }] }\n    ]; };\n    return ApplicationInitStatus;\n}());\nexport { ApplicationInitStatus };\nif (false) {\n    /** @type {?} */\n    ApplicationInitStatus.prototype.resolve;\n    /** @type {?} */\n    ApplicationInitStatus.prototype.reject;\n    /** @type {?} */\n    ApplicationInitStatus.prototype.initialized;\n    /** @type {?} */\n    ApplicationInitStatus.prototype.donePromise;\n    /** @type {?} */\n    ApplicationInitStatus.prototype.done;\n    /** @type {?} */\n    ApplicationInitStatus.prototype.appInits;\n}\n//# sourceMappingURL=application_init.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from './di';\n/** *\n * A DI Token representing a unique string id assigned to the application by Angular and used\n * primarily for prefixing application attributes and CSS styles when\n * {\\@link ViewEncapsulation#Emulated ViewEncapsulation.Emulated} is being used.\n *\n * If you need to avoid randomly generated value to be used as an application id, you can provide\n * a custom value via a DI provider <!-- TODO: provider --> configuring the root {\\@link Injector}\n * using this token.\n * \\@publicApi\n  @type {?} */\nexport var APP_ID = new InjectionToken('AppId');\n/**\n * @return {?}\n */\nexport function _appIdRandomProviderFactory() {\n    return \"\" + _randomChar() + _randomChar() + _randomChar();\n}\n/** *\n * Providers that will generate a random APP_ID_TOKEN.\n * \\@publicApi\n  @type {?} */\nexport var APP_ID_RANDOM_PROVIDER = {\n    provide: APP_ID,\n    useFactory: _appIdRandomProviderFactory,\n    deps: /** @type {?} */ ([]),\n};\n/**\n * @return {?}\n */\nfunction _randomChar() {\n    return String.fromCharCode(97 + Math.floor(Math.random() * 25));\n}\n/** *\n * A function that will be executed when a platform is initialized.\n * \\@publicApi\n  @type {?} */\nexport var PLATFORM_INITIALIZER = new InjectionToken('Platform Initializer');\n/** *\n * A token that indicates an opaque platform id.\n * \\@publicApi\n  @type {?} */\nexport var PLATFORM_ID = new InjectionToken('Platform ID');\n/** *\n * All callbacks provided via this token will be called for every component that is bootstrapped.\n * Signature of the callback:\n *\n * `(componentRef: ComponentRef) => void`.\n *\n * \\@publicApi\n  @type {?} */\nexport var APP_BOOTSTRAP_LISTENER = new InjectionToken('appBootstrapListener');\n/** *\n * A token which indicates the root directory of the application\n * \\@publicApi\n  @type {?} */\nexport var PACKAGE_ROOT_URL = new InjectionToken('Application Packages Root URL');\n//# sourceMappingURL=application_tokens.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable } from './di';\nvar Console = /** @class */ (function () {\n    function Console() {\n    }\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    Console.prototype.log = /**\n     * @param {?} message\n     * @return {?}\n     */\n    function (message) {\n        // tslint:disable-next-line:no-console\n        console.log(message);\n    };\n    // Note: for reporting errors use `DOM.logError()` as it is platform specific\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    Console.prototype.warn = /**\n     * @param {?} message\n     * @return {?}\n     */\n    function (message) {\n        // tslint:disable-next-line:no-console\n        console.warn(message);\n    };\n    Console.decorators = [\n        { type: Injectable },\n    ];\n    return Console;\n}());\nexport { Console };\n//# sourceMappingURL=console.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable } from '../di/injectable';\nimport { InjectionToken } from '../di/injection_token';\nimport { NgModuleFactory as NgModuleFactoryR3 } from '../render3/ng_module_ref';\n/**\n * Combination of NgModuleFactory and ComponentFactorys.\n *\n * \\@publicApi\n * @template T\n */\nvar /**\n * Combination of NgModuleFactory and ComponentFactorys.\n *\n * \\@publicApi\n * @template T\n */\nModuleWithComponentFactories = /** @class */ (function () {\n    function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {\n        this.ngModuleFactory = ngModuleFactory;\n        this.componentFactories = componentFactories;\n    }\n    return ModuleWithComponentFactories;\n}());\n/**\n * Combination of NgModuleFactory and ComponentFactorys.\n *\n * \\@publicApi\n * @template T\n */\nexport { ModuleWithComponentFactories };\nif (false) {\n    /** @type {?} */\n    ModuleWithComponentFactories.prototype.ngModuleFactory;\n    /** @type {?} */\n    ModuleWithComponentFactories.prototype.componentFactories;\n}\n/**\n * @return {?}\n */\nfunction _throwError() {\n    throw new Error(\"Runtime compiler is not loaded\");\n}\n/** @type {?} */\nvar Compiler_compileModuleSync__PRE_R3__ = /** @type {?} */ (_throwError);\n/** @type {?} */\nexport var Compiler_compileModuleSync__POST_R3__ = function (moduleType) {\n    return new NgModuleFactoryR3(moduleType);\n};\n/** @type {?} */\nvar Compiler_compileModuleSync = Compiler_compileModuleSync__PRE_R3__;\n/** @type {?} */\nvar Compiler_compileModuleAsync__PRE_R3__ = /** @type {?} */ (_throwError);\n/** @type {?} */\nexport var Compiler_compileModuleAsync__POST_R3__ = function (moduleType) {\n    return Promise.resolve(Compiler_compileModuleSync__POST_R3__(moduleType));\n};\n/** @type {?} */\nvar Compiler_compileModuleAsync = Compiler_compileModuleAsync__PRE_R3__;\n/** @type {?} */\nvar Compiler_compileModuleAndAllComponentsSync__PRE_R3__ = /** @type {?} */ (_throwError);\n/** @type {?} */\nexport var Compiler_compileModuleAndAllComponentsSync__POST_R3__ = function (moduleType) {\n    return new ModuleWithComponentFactories(Compiler_compileModuleSync__POST_R3__(moduleType), []);\n};\n/** @type {?} */\nvar Compiler_compileModuleAndAllComponentsSync = Compiler_compileModuleAndAllComponentsSync__PRE_R3__;\n/** @type {?} */\nvar Compiler_compileModuleAndAllComponentsAsync__PRE_R3__ = /** @type {?} */ (_throwError);\n/** @type {?} */\nexport var Compiler_compileModuleAndAllComponentsAsync__POST_R3__ = function (moduleType) {\n    return Promise.resolve(Compiler_compileModuleAndAllComponentsSync__POST_R3__(moduleType));\n};\n/** @type {?} */\nvar Compiler_compileModuleAndAllComponentsAsync = Compiler_compileModuleAndAllComponentsAsync__PRE_R3__;\n/**\n * Low-level service for running the angular compiler during runtime\n * to create {\\@link ComponentFactory}s, which\n * can later be used to create and render a Component instance.\n *\n * Each `\\@NgModule` provides an own `Compiler` to its injector,\n * that will use the directives/pipes of the ng module for compilation\n * of components.\n *\n * \\@publicApi\n */\nvar Compiler = /** @class */ (function () {\n    function Compiler() {\n        /**\n         * Compiles the given NgModule and all of its components. All templates of the components listed\n         * in `entryComponents` have to be inlined.\n         */\n        this.compileModuleSync = Compiler_compileModuleSync;\n        /**\n         * Compiles the given NgModule and all of its components\n         */\n        this.compileModuleAsync = Compiler_compileModuleAsync;\n        /**\n         * Same as {\\@link #compileModuleSync} but also creates ComponentFactories for all components.\n         */\n        this.compileModuleAndAllComponentsSync = Compiler_compileModuleAndAllComponentsSync;\n        /**\n         * Same as {\\@link #compileModuleAsync} but also creates ComponentFactories for all components.\n         */\n        this.compileModuleAndAllComponentsAsync = Compiler_compileModuleAndAllComponentsAsync;\n    }\n    /**\n     * Clears all caches.\n     */\n    /**\n     * Clears all caches.\n     * @return {?}\n     */\n    Compiler.prototype.clearCache = /**\n     * Clears all caches.\n     * @return {?}\n     */\n    function () { };\n    /**\n     * Clears the cache for the given component/ngModule.\n     */\n    /**\n     * Clears the cache for the given component/ngModule.\n     * @param {?} type\n     * @return {?}\n     */\n    Compiler.prototype.clearCacheFor = /**\n     * Clears the cache for the given component/ngModule.\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) { };\n    /**\n     * Returns the id for a given NgModule, if one is defined and known to the compiler.\n     */\n    /**\n     * Returns the id for a given NgModule, if one is defined and known to the compiler.\n     * @param {?} moduleType\n     * @return {?}\n     */\n    Compiler.prototype.getModuleId = /**\n     * Returns the id for a given NgModule, if one is defined and known to the compiler.\n     * @param {?} moduleType\n     * @return {?}\n     */\n    function (moduleType) { return undefined; };\n    Compiler.decorators = [\n        { type: Injectable },\n    ];\n    return Compiler;\n}());\nexport { Compiler };\nif (false) {\n    /**\n     * Compiles the given NgModule and all of its components. All templates of the components listed\n     * in `entryComponents` have to be inlined.\n     * @type {?}\n     */\n    Compiler.prototype.compileModuleSync;\n    /**\n     * Compiles the given NgModule and all of its components\n     * @type {?}\n     */\n    Compiler.prototype.compileModuleAsync;\n    /**\n     * Same as {\\@link #compileModuleSync} but also creates ComponentFactories for all components.\n     * @type {?}\n     */\n    Compiler.prototype.compileModuleAndAllComponentsSync;\n    /**\n     * Same as {\\@link #compileModuleAsync} but also creates ComponentFactories for all components.\n     * @type {?}\n     */\n    Compiler.prototype.compileModuleAndAllComponentsAsync;\n}\n/** @typedef {?} */\nvar CompilerOptions;\nexport { CompilerOptions };\n/** *\n * Token to provide CompilerOptions in the platform injector.\n *\n * \\@publicApi\n  @type {?} */\nexport var COMPILER_OPTIONS = new InjectionToken('compilerOptions');\n/**\n * A factory for creating a Compiler\n *\n * \\@publicApi\n * @abstract\n */\nvar /**\n * A factory for creating a Compiler\n *\n * \\@publicApi\n * @abstract\n */\nCompilerFactory = /** @class */ (function () {\n    function CompilerFactory() {\n    }\n    return CompilerFactory;\n}());\n/**\n * A factory for creating a Compiler\n *\n * \\@publicApi\n * @abstract\n */\nexport { CompilerFactory };\nif (false) {\n    /**\n     * @abstract\n     * @param {?=} options\n     * @return {?}\n     */\n    CompilerFactory.prototype.createCompiler = function (options) { };\n}\n//# sourceMappingURL=compiler.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { global } from '../util';\n/**\n * A scope function for the Web Tracing Framework (WTF).\n *\n * \\@publicApi\n * @record\n */\nexport function WtfScopeFn() { }\n/**\n * @record\n */\nfunction WTF() { }\n/** @type {?} */\nWTF.prototype.trace;\n/**\n * @record\n */\nfunction Trace() { }\n/** @type {?} */\nTrace.prototype.events;\n/** @type {?} */\nTrace.prototype.leaveScope;\n/** @type {?} */\nTrace.prototype.beginTimeRange;\n/** @type {?} */\nTrace.prototype.endTimeRange;\n/**\n * @record\n */\nexport function Range() { }\n/**\n * @record\n */\nfunction Events() { }\n/** @type {?} */\nEvents.prototype.createScope;\n/**\n * @record\n */\nexport function Scope() { }\n/** @type {?} */\nvar trace;\n/** @type {?} */\nvar events;\n/**\n * @return {?}\n */\nexport function detectWTF() {\n    /** @type {?} */\n    var wtf = (/** @type {?} */ (global /** TODO #9100 */) /** TODO #9100 */)['wtf'];\n    if (wtf) {\n        trace = wtf['trace'];\n        if (trace) {\n            events = trace['events'];\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * @param {?} signature\n * @param {?=} flags\n * @return {?}\n */\nexport function createScope(signature, flags) {\n    if (flags === void 0) { flags = null; }\n    return events.createScope(signature, flags);\n}\n/**\n * @template T\n * @param {?} scope\n * @param {?=} returnValue\n * @return {?}\n */\nexport function leave(scope, returnValue) {\n    trace.leaveScope(scope, returnValue);\n    return returnValue;\n}\n/**\n * @param {?} rangeType\n * @param {?} action\n * @return {?}\n */\nexport function startTimeRange(rangeType, action) {\n    return trace.beginTimeRange(rangeType, action);\n}\n/**\n * @param {?} range\n * @return {?}\n */\nexport function endTimeRange(range) {\n    trace.endTimeRange(range);\n}\n//# sourceMappingURL=wtf_impl.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter } from '../event_emitter';\n/**\n * An injectable service for executing work inside or outside of the Angular zone.\n *\n * The most common use of this service is to optimize performance when starting a work consisting of\n * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n * Angular. Such tasks can be kicked off via {\\@link #runOutsideAngular} and if needed, these tasks\n * can reenter the Angular zone via {\\@link #run}.\n *\n * <!-- TODO: add/fix links to:\n *   - docs explaining zones and the use of zones in Angular and change-detection\n *   - link to runOutsideAngular/run (throughout this file!)\n *   -->\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * import {Component, NgZone} from '\\@angular/core';\n * import {NgIf} from '\\@angular/common';\n *\n * \\@Component({\n *   selector: 'ng-zone-demo',\n *   template: `\n *     <h2>Demo: NgZone</h2>\n *\n *     <p>Progress: {{progress}}%</p>\n *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n *\n *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n *   `,\n * })\n * export class NgZoneDemo {\n *   progress: number = 0;\n *   label: string;\n *\n *   constructor(private _ngZone: NgZone) {}\n *\n *   // Loop inside the Angular zone\n *   // so the UI DOES refresh after each setTimeout cycle\n *   processWithinAngularZone() {\n *     this.label = 'inside';\n *     this.progress = 0;\n *     this._increaseProgress(() => console.log('Inside Done!'));\n *   }\n *\n *   // Loop outside of the Angular zone\n *   // so the UI DOES NOT refresh after each setTimeout cycle\n *   processOutsideOfAngularZone() {\n *     this.label = 'outside';\n *     this.progress = 0;\n *     this._ngZone.runOutsideAngular(() => {\n *       this._increaseProgress(() => {\n *         // reenter the Angular zone and display done\n *         this._ngZone.run(() => { console.log('Outside Done!'); });\n *       });\n *     });\n *   }\n *\n *   _increaseProgress(doneCallback: () => void) {\n *     this.progress += 1;\n *     console.log(`Current progress: ${this.progress}%`);\n *\n *     if (this.progress < 100) {\n *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);\n *     } else {\n *       doneCallback();\n *     }\n *   }\n * }\n * ```\n *\n * \\@publicApi\n */\nvar /**\n * An injectable service for executing work inside or outside of the Angular zone.\n *\n * The most common use of this service is to optimize performance when starting a work consisting of\n * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n * Angular. Such tasks can be kicked off via {\\@link #runOutsideAngular} and if needed, these tasks\n * can reenter the Angular zone via {\\@link #run}.\n *\n * <!-- TODO: add/fix links to:\n *   - docs explaining zones and the use of zones in Angular and change-detection\n *   - link to runOutsideAngular/run (throughout this file!)\n *   -->\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * import {Component, NgZone} from '\\@angular/core';\n * import {NgIf} from '\\@angular/common';\n *\n * \\@Component({\n *   selector: 'ng-zone-demo',\n *   template: `\n *     <h2>Demo: NgZone</h2>\n *\n *     <p>Progress: {{progress}}%</p>\n *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n *\n *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n *   `,\n * })\n * export class NgZoneDemo {\n *   progress: number = 0;\n *   label: string;\n *\n *   constructor(private _ngZone: NgZone) {}\n *\n *   // Loop inside the Angular zone\n *   // so the UI DOES refresh after each setTimeout cycle\n *   processWithinAngularZone() {\n *     this.label = 'inside';\n *     this.progress = 0;\n *     this._increaseProgress(() => console.log('Inside Done!'));\n *   }\n *\n *   // Loop outside of the Angular zone\n *   // so the UI DOES NOT refresh after each setTimeout cycle\n *   processOutsideOfAngularZone() {\n *     this.label = 'outside';\n *     this.progress = 0;\n *     this._ngZone.runOutsideAngular(() => {\n *       this._increaseProgress(() => {\n *         // reenter the Angular zone and display done\n *         this._ngZone.run(() => { console.log('Outside Done!'); });\n *       });\n *     });\n *   }\n *\n *   _increaseProgress(doneCallback: () => void) {\n *     this.progress += 1;\n *     console.log(`Current progress: ${this.progress}%`);\n *\n *     if (this.progress < 100) {\n *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);\n *     } else {\n *       doneCallback();\n *     }\n *   }\n * }\n * ```\n *\n * \\@publicApi\n */\nNgZone = /** @class */ (function () {\n    function NgZone(_a) {\n        var _b = _a.enableLongStackTrace, enableLongStackTrace = _b === void 0 ? false : _b;\n        this.hasPendingMicrotasks = false;\n        this.hasPendingMacrotasks = false;\n        /**\n         * Whether there are no outstanding microtasks or macrotasks.\n         */\n        this.isStable = true;\n        /**\n         * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\n         */\n        this.onUnstable = new EventEmitter(false);\n        /**\n         * Notifies when there is no more microtasks enqueued in the current VM Turn.\n         * This is a hint for Angular to do change detection, which may enqueue more microtasks.\n         * For this reason this event can fire multiple times per VM Turn.\n         */\n        this.onMicrotaskEmpty = new EventEmitter(false);\n        /**\n         * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\n         * implies we are about to relinquish VM turn.\n         * This event gets called just once.\n         */\n        this.onStable = new EventEmitter(false);\n        /**\n         * Notifies that an error has been delivered.\n         */\n        this.onError = new EventEmitter(false);\n        if (typeof Zone == 'undefined') {\n            throw new Error(\"In this configuration Angular requires Zone.js\");\n        }\n        Zone.assertZonePatched();\n        /** @type {?} */\n        var self = /** @type {?} */ ((this));\n        self._nesting = 0;\n        self._outer = self._inner = Zone.current;\n        if ((/** @type {?} */ (Zone))['wtfZoneSpec']) {\n            self._inner = self._inner.fork((/** @type {?} */ (Zone))['wtfZoneSpec']);\n        }\n        if ((/** @type {?} */ (Zone))['TaskTrackingZoneSpec']) {\n            self._inner = self._inner.fork(new (/** @type {?} */ ((/** @type {?} */ (Zone))['TaskTrackingZoneSpec'])));\n        }\n        if (enableLongStackTrace && (/** @type {?} */ (Zone))['longStackTraceZoneSpec']) {\n            self._inner = self._inner.fork((/** @type {?} */ (Zone))['longStackTraceZoneSpec']);\n        }\n        forkInnerZoneWithAngularBehavior(self);\n    }\n    /**\n     * @return {?}\n     */\n    NgZone.isInAngularZone = /**\n     * @return {?}\n     */\n    function () { return Zone.current.get('isAngularZone') === true; };\n    /**\n     * @return {?}\n     */\n    NgZone.assertInAngularZone = /**\n     * @return {?}\n     */\n    function () {\n        if (!NgZone.isInAngularZone()) {\n            throw new Error('Expected to be in Angular Zone, but it is not!');\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgZone.assertNotInAngularZone = /**\n     * @return {?}\n     */\n    function () {\n        if (NgZone.isInAngularZone()) {\n            throw new Error('Expected to not be in Angular Zone, but it is!');\n        }\n    };\n    /**\n     * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n     * the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     */\n    /**\n     * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n     * the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {\\@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     * @template T\n     * @param {?} fn\n     * @param {?=} applyThis\n     * @param {?=} applyArgs\n     * @return {?}\n     */\n    NgZone.prototype.run = /**\n     * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n     * the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {\\@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     * @template T\n     * @param {?} fn\n     * @param {?=} applyThis\n     * @param {?=} applyArgs\n     * @return {?}\n     */\n    function (fn, applyThis, applyArgs) {\n        return /** @type {?} */ ((/** @type {?} */ ((this)))._inner.run(fn, applyThis, applyArgs));\n    };\n    /**\n     * Executes the `fn` function synchronously within the Angular zone as a task and returns value\n     * returned by the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     */\n    /**\n     * Executes the `fn` function synchronously within the Angular zone as a task and returns value\n     * returned by the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {\\@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     * @template T\n     * @param {?} fn\n     * @param {?=} applyThis\n     * @param {?=} applyArgs\n     * @param {?=} name\n     * @return {?}\n     */\n    NgZone.prototype.runTask = /**\n     * Executes the `fn` function synchronously within the Angular zone as a task and returns value\n     * returned by the function.\n     *\n     * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n     * outside of the Angular zone (typically started via {\\@link #runOutsideAngular}).\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * within the Angular zone.\n     *\n     * If a synchronous error happens it will be rethrown and not reported via `onError`.\n     * @template T\n     * @param {?} fn\n     * @param {?=} applyThis\n     * @param {?=} applyArgs\n     * @param {?=} name\n     * @return {?}\n     */\n    function (fn, applyThis, applyArgs, name) {\n        /** @type {?} */\n        var zone = (/** @type {?} */ ((this)))._inner;\n        /** @type {?} */\n        var task = zone.scheduleEventTask('NgZoneEvent: ' + name, fn, EMPTY_PAYLOAD, noop, noop);\n        try {\n            return /** @type {?} */ (zone.runTask(task, applyThis, applyArgs));\n        }\n        finally {\n            zone.cancelTask(task);\n        }\n    };\n    /**\n     * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n     * rethrown.\n     */\n    /**\n     * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n     * rethrown.\n     * @template T\n     * @param {?} fn\n     * @param {?=} applyThis\n     * @param {?=} applyArgs\n     * @return {?}\n     */\n    NgZone.prototype.runGuarded = /**\n     * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n     * rethrown.\n     * @template T\n     * @param {?} fn\n     * @param {?=} applyThis\n     * @param {?=} applyArgs\n     * @return {?}\n     */\n    function (fn, applyThis, applyArgs) {\n        return /** @type {?} */ ((/** @type {?} */ ((this)))._inner.runGuarded(fn, applyThis, applyArgs));\n    };\n    /**\n     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n     * the function.\n     *\n     * Running functions via {@link #runOutsideAngular} allows you to escape Angular's zone and do\n     * work that\n     * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * outside of the Angular zone.\n     *\n     * Use {@link #run} to reenter the Angular zone and do work that updates the application model.\n     */\n    /**\n     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n     * the function.\n     *\n     * Running functions via {\\@link #runOutsideAngular} allows you to escape Angular's zone and do\n     * work that\n     * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * outside of the Angular zone.\n     *\n     * Use {\\@link #run} to reenter the Angular zone and do work that updates the application model.\n     * @template T\n     * @param {?} fn\n     * @return {?}\n     */\n    NgZone.prototype.runOutsideAngular = /**\n     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n     * the function.\n     *\n     * Running functions via {\\@link #runOutsideAngular} allows you to escape Angular's zone and do\n     * work that\n     * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n     *\n     * Any future tasks or microtasks scheduled from within this function will continue executing from\n     * outside of the Angular zone.\n     *\n     * Use {\\@link #run} to reenter the Angular zone and do work that updates the application model.\n     * @template T\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        return /** @type {?} */ ((/** @type {?} */ ((this)))._outer.run(fn));\n    };\n    return NgZone;\n}());\n/**\n * An injectable service for executing work inside or outside of the Angular zone.\n *\n * The most common use of this service is to optimize performance when starting a work consisting of\n * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n * Angular. Such tasks can be kicked off via {\\@link #runOutsideAngular} and if needed, these tasks\n * can reenter the Angular zone via {\\@link #run}.\n *\n * <!-- TODO: add/fix links to:\n *   - docs explaining zones and the use of zones in Angular and change-detection\n *   - link to runOutsideAngular/run (throughout this file!)\n *   -->\n *\n * \\@usageNotes\n * ### Example\n *\n * ```\n * import {Component, NgZone} from '\\@angular/core';\n * import {NgIf} from '\\@angular/common';\n *\n * \\@Component({\n *   selector: 'ng-zone-demo',\n *   template: `\n *     <h2>Demo: NgZone</h2>\n *\n *     <p>Progress: {{progress}}%</p>\n *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n *\n *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n *   `,\n * })\n * export class NgZoneDemo {\n *   progress: number = 0;\n *   label: string;\n *\n *   constructor(private _ngZone: NgZone) {}\n *\n *   // Loop inside the Angular zone\n *   // so the UI DOES refresh after each setTimeout cycle\n *   processWithinAngularZone() {\n *     this.label = 'inside';\n *     this.progress = 0;\n *     this._increaseProgress(() => console.log('Inside Done!'));\n *   }\n *\n *   // Loop outside of the Angular zone\n *   // so the UI DOES NOT refresh after each setTimeout cycle\n *   processOutsideOfAngularZone() {\n *     this.label = 'outside';\n *     this.progress = 0;\n *     this._ngZone.runOutsideAngular(() => {\n *       this._increaseProgress(() => {\n *         // reenter the Angular zone and display done\n *         this._ngZone.run(() => { console.log('Outside Done!'); });\n *       });\n *     });\n *   }\n *\n *   _increaseProgress(doneCallback: () => void) {\n *     this.progress += 1;\n *     console.log(`Current progress: ${this.progress}%`);\n *\n *     if (this.progress < 100) {\n *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);\n *     } else {\n *       doneCallback();\n *     }\n *   }\n * }\n * ```\n *\n * \\@publicApi\n */\nexport { NgZone };\nif (false) {\n    /** @type {?} */\n    NgZone.prototype.hasPendingMicrotasks;\n    /** @type {?} */\n    NgZone.prototype.hasPendingMacrotasks;\n    /**\n     * Whether there are no outstanding microtasks or macrotasks.\n     * @type {?}\n     */\n    NgZone.prototype.isStable;\n    /**\n     * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\n     * @type {?}\n     */\n    NgZone.prototype.onUnstable;\n    /**\n     * Notifies when there is no more microtasks enqueued in the current VM Turn.\n     * This is a hint for Angular to do change detection, which may enqueue more microtasks.\n     * For this reason this event can fire multiple times per VM Turn.\n     * @type {?}\n     */\n    NgZone.prototype.onMicrotaskEmpty;\n    /**\n     * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\n     * implies we are about to relinquish VM turn.\n     * This event gets called just once.\n     * @type {?}\n     */\n    NgZone.prototype.onStable;\n    /**\n     * Notifies that an error has been delivered.\n     * @type {?}\n     */\n    NgZone.prototype.onError;\n}\n/**\n * @return {?}\n */\nfunction noop() { }\n/** @type {?} */\nvar EMPTY_PAYLOAD = {};\n/**\n * @record\n */\nfunction NgZonePrivate() { }\n/** @type {?} */\nNgZonePrivate.prototype._outer;\n/** @type {?} */\nNgZonePrivate.prototype._inner;\n/** @type {?} */\nNgZonePrivate.prototype._nesting;\n/** @type {?} */\nNgZonePrivate.prototype.hasPendingMicrotasks;\n/** @type {?} */\nNgZonePrivate.prototype.hasPendingMacrotasks;\n/** @type {?} */\nNgZonePrivate.prototype.isStable;\n/**\n * @param {?} zone\n * @return {?}\n */\nfunction checkStable(zone) {\n    if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {\n        try {\n            zone._nesting++;\n            zone.onMicrotaskEmpty.emit(null);\n        }\n        finally {\n            zone._nesting--;\n            if (!zone.hasPendingMicrotasks) {\n                try {\n                    zone.runOutsideAngular(function () { return zone.onStable.emit(null); });\n                }\n                finally {\n                    zone.isStable = true;\n                }\n            }\n        }\n    }\n}\n/**\n * @param {?} zone\n * @return {?}\n */\nfunction forkInnerZoneWithAngularBehavior(zone) {\n    zone._inner = zone._inner.fork({\n        name: 'angular',\n        properties: /** @type {?} */ ({ 'isAngularZone': true }),\n        onInvokeTask: function (delegate, current, target, task, applyThis, applyArgs) {\n            try {\n                onEnter(zone);\n                return delegate.invokeTask(target, task, applyThis, applyArgs);\n            }\n            finally {\n                onLeave(zone);\n            }\n        },\n        onInvoke: function (delegate, current, target, callback, applyThis, applyArgs, source) {\n            try {\n                onEnter(zone);\n                return delegate.invoke(target, callback, applyThis, applyArgs, source);\n            }\n            finally {\n                onLeave(zone);\n            }\n        },\n        onHasTask: function (delegate, current, target, hasTaskState) {\n            delegate.hasTask(target, hasTaskState);\n            if (current === target) {\n                // We are only interested in hasTask events which originate from our zone\n                // (A child hasTask event is not interesting to us)\n                if (hasTaskState.change == 'microTask') {\n                    zone.hasPendingMicrotasks = hasTaskState.microTask;\n                    checkStable(zone);\n                }\n                else if (hasTaskState.change == 'macroTask') {\n                    zone.hasPendingMacrotasks = hasTaskState.macroTask;\n                }\n            }\n        },\n        onHandleError: function (delegate, current, target, error) {\n            delegate.handleError(target, error);\n            zone.runOutsideAngular(function () { return zone.onError.emit(error); });\n            return false;\n        }\n    });\n}\n/**\n * @param {?} zone\n * @return {?}\n */\nfunction onEnter(zone) {\n    zone._nesting++;\n    if (zone.isStable) {\n        zone.isStable = false;\n        zone.onUnstable.emit(null);\n    }\n}\n/**\n * @param {?} zone\n * @return {?}\n */\nfunction onLeave(zone) {\n    zone._nesting--;\n    checkStable(zone);\n}\n/**\n * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls\n * to framework to perform rendering.\n */\nvar /**\n * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls\n * to framework to perform rendering.\n */\nNoopNgZone = /** @class */ (function () {\n    function NoopNgZone() {\n        this.hasPendingMicrotasks = false;\n        this.hasPendingMacrotasks = false;\n        this.isStable = true;\n        this.onUnstable = new EventEmitter();\n        this.onMicrotaskEmpty = new EventEmitter();\n        this.onStable = new EventEmitter();\n        this.onError = new EventEmitter();\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NoopNgZone.prototype.run = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { return fn(); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NoopNgZone.prototype.runGuarded = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { return fn(); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NoopNgZone.prototype.runOutsideAngular = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { return fn(); };\n    /**\n     * @template T\n     * @param {?} fn\n     * @return {?}\n     */\n    NoopNgZone.prototype.runTask = /**\n     * @template T\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { return fn(); };\n    return NoopNgZone;\n}());\n/**\n * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls\n * to framework to perform rendering.\n */\nexport { NoopNgZone };\nif (false) {\n    /** @type {?} */\n    NoopNgZone.prototype.hasPendingMicrotasks;\n    /** @type {?} */\n    NoopNgZone.prototype.hasPendingMacrotasks;\n    /** @type {?} */\n    NoopNgZone.prototype.isStable;\n    /** @type {?} */\n    NoopNgZone.prototype.onUnstable;\n    /** @type {?} */\n    NoopNgZone.prototype.onMicrotaskEmpty;\n    /** @type {?} */\n    NoopNgZone.prototype.onStable;\n    /** @type {?} */\n    NoopNgZone.prototype.onError;\n}\n//# sourceMappingURL=ng_zone.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable } from '../di';\nimport { scheduleMicroTask } from '../util';\nimport { NgZone } from '../zone/ng_zone';\n/**\n * @record\n */\nexport function PendingMacrotask() { }\n/** @type {?} */\nPendingMacrotask.prototype.source;\n/** @type {?} */\nPendingMacrotask.prototype.creationLocation;\n/** @type {?|undefined} */\nPendingMacrotask.prototype.runCount;\n/** @type {?} */\nPendingMacrotask.prototype.data;\n/**\n * @record\n */\nexport function TaskData() { }\n/** @type {?|undefined} */\nTaskData.prototype.target;\n/** @type {?|undefined} */\nTaskData.prototype.delay;\n/** @type {?|undefined} */\nTaskData.prototype.isPeriodic;\n/** @typedef {?} */\nvar DoneCallback;\nexport { DoneCallback };\n/** @typedef {?} */\nvar UpdateCallback;\nexport { UpdateCallback };\n/**\n * @record\n */\nfunction WaitCallback() { }\n/** @type {?} */\nWaitCallback.prototype.timeoutId;\n/** @type {?} */\nWaitCallback.prototype.doneCb;\n/** @type {?|undefined} */\nWaitCallback.prototype.updateCb;\n/**\n * The Testability service provides testing hooks that can be accessed from\n * the browser and by services such as Protractor. Each bootstrapped Angular\n * application on the page will have an instance of Testability.\n * \\@publicApi\n */\nvar Testability = /** @class */ (function () {\n    function Testability(_ngZone) {\n        var _this = this;\n        this._ngZone = _ngZone;\n        this._pendingCount = 0;\n        this._isZoneStable = true;\n        /**\n         * Whether any work was done since the last 'whenStable' callback. This is\n         * useful to detect if this could have potentially destabilized another\n         * component while it is stabilizing.\n         * \\@internal\n         */\n        this._didWork = false;\n        this._callbacks = [];\n        this.taskTrackingZone = null;\n        this._watchAngularEvents();\n        _ngZone.run(function () {\n            _this.taskTrackingZone =\n                typeof Zone == 'undefined' ? null : Zone.current.get('TaskTrackingZone');\n        });\n    }\n    /**\n     * @return {?}\n     */\n    Testability.prototype._watchAngularEvents = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._ngZone.onUnstable.subscribe({\n            next: function () {\n                _this._didWork = true;\n                _this._isZoneStable = false;\n            }\n        });\n        this._ngZone.runOutsideAngular(function () {\n            _this._ngZone.onStable.subscribe({\n                next: function () {\n                    NgZone.assertNotInAngularZone();\n                    scheduleMicroTask(function () {\n                        _this._isZoneStable = true;\n                        _this._runCallbacksIfReady();\n                    });\n                }\n            });\n        });\n    };\n    /**\n     * Increases the number of pending request\n     * @deprecated pending requests are now tracked with zones.\n     */\n    /**\n     * Increases the number of pending request\n     * @deprecated pending requests are now tracked with zones.\n     * @return {?}\n     */\n    Testability.prototype.increasePendingRequestCount = /**\n     * Increases the number of pending request\n     * @deprecated pending requests are now tracked with zones.\n     * @return {?}\n     */\n    function () {\n        this._pendingCount += 1;\n        this._didWork = true;\n        return this._pendingCount;\n    };\n    /**\n     * Decreases the number of pending request\n     * @deprecated pending requests are now tracked with zones\n     */\n    /**\n     * Decreases the number of pending request\n     * @deprecated pending requests are now tracked with zones\n     * @return {?}\n     */\n    Testability.prototype.decreasePendingRequestCount = /**\n     * Decreases the number of pending request\n     * @deprecated pending requests are now tracked with zones\n     * @return {?}\n     */\n    function () {\n        this._pendingCount -= 1;\n        if (this._pendingCount < 0) {\n            throw new Error('pending async requests below zero');\n        }\n        this._runCallbacksIfReady();\n        return this._pendingCount;\n    };\n    /**\n     * Whether an associated application is stable\n     */\n    /**\n     * Whether an associated application is stable\n     * @return {?}\n     */\n    Testability.prototype.isStable = /**\n     * Whether an associated application is stable\n     * @return {?}\n     */\n    function () {\n        return this._isZoneStable && this._pendingCount === 0 && !this._ngZone.hasPendingMacrotasks;\n    };\n    /**\n     * @return {?}\n     */\n    Testability.prototype._runCallbacksIfReady = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this.isStable()) {\n            // Schedules the call backs in a new frame so that it is always async.\n            scheduleMicroTask(function () {\n                while (_this._callbacks.length !== 0) {\n                    /** @type {?} */\n                    var cb = /** @type {?} */ ((_this._callbacks.pop()));\n                    clearTimeout(cb.timeoutId);\n                    cb.doneCb(_this._didWork);\n                }\n                _this._didWork = false;\n            });\n        }\n        else {\n            /** @type {?} */\n            var pending_1 = this.getPendingTasks();\n            this._callbacks = this._callbacks.filter(function (cb) {\n                if (cb.updateCb && cb.updateCb(pending_1)) {\n                    clearTimeout(cb.timeoutId);\n                    return false;\n                }\n                return true;\n            });\n            this._didWork = true;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    Testability.prototype.getPendingTasks = /**\n     * @return {?}\n     */\n    function () {\n        if (!this.taskTrackingZone) {\n            return [];\n        }\n        // Copy the tasks data so that we don't leak tasks.\n        return this.taskTrackingZone.macroTasks.map(function (t) {\n            return {\n                source: t.source,\n                // From TaskTrackingZone:\n                // https://github.com/angular/zone.js/blob/master/lib/zone-spec/task-tracking.ts#L40\n                creationLocation: /** @type {?} */ ((/** @type {?} */ (t)).creationLocation),\n                data: t.data\n            };\n        });\n    };\n    /**\n     * @param {?} cb\n     * @param {?=} timeout\n     * @param {?=} updateCb\n     * @return {?}\n     */\n    Testability.prototype.addCallback = /**\n     * @param {?} cb\n     * @param {?=} timeout\n     * @param {?=} updateCb\n     * @return {?}\n     */\n    function (cb, timeout, updateCb) {\n        var _this = this;\n        /** @type {?} */\n        var timeoutId = -1;\n        if (timeout && timeout > 0) {\n            timeoutId = setTimeout(function () {\n                _this._callbacks = _this._callbacks.filter(function (cb) { return cb.timeoutId !== timeoutId; });\n                cb(_this._didWork, _this.getPendingTasks());\n            }, timeout);\n        }\n        this._callbacks.push(/** @type {?} */ ({ doneCb: cb, timeoutId: timeoutId, updateCb: updateCb }));\n    };\n    /**\n     * Wait for the application to be stable with a timeout. If the timeout is reached before that\n     * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\n     *\n     * @param doneCb The callback to invoke when Angular is stable or the timeout expires\n     *    whichever comes first.\n     * @param timeout Optional. The maximum time to wait for Angular to become stable. If not\n     *    specified, whenStable() will wait forever.\n     * @param updateCb Optional. If specified, this callback will be invoked whenever the set of\n     *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\n     *    and no further updates will be issued.\n     */\n    /**\n     * Wait for the application to be stable with a timeout. If the timeout is reached before that\n     * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\n     *\n     * @param {?} doneCb The callback to invoke when Angular is stable or the timeout expires\n     *    whichever comes first.\n     * @param {?=} timeout Optional. The maximum time to wait for Angular to become stable. If not\n     *    specified, whenStable() will wait forever.\n     * @param {?=} updateCb Optional. If specified, this callback will be invoked whenever the set of\n     *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\n     *    and no further updates will be issued.\n     * @return {?}\n     */\n    Testability.prototype.whenStable = /**\n     * Wait for the application to be stable with a timeout. If the timeout is reached before that\n     * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\n     *\n     * @param {?} doneCb The callback to invoke when Angular is stable or the timeout expires\n     *    whichever comes first.\n     * @param {?=} timeout Optional. The maximum time to wait for Angular to become stable. If not\n     *    specified, whenStable() will wait forever.\n     * @param {?=} updateCb Optional. If specified, this callback will be invoked whenever the set of\n     *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\n     *    and no further updates will be issued.\n     * @return {?}\n     */\n    function (doneCb, timeout, updateCb) {\n        if (updateCb && !this.taskTrackingZone) {\n            throw new Error('Task tracking zone is required when passing an update callback to ' +\n                'whenStable(). Is \"zone.js/dist/task-tracking.js\" loaded?');\n        }\n        // These arguments are 'Function' above to keep the public API simple.\n        this.addCallback(/** @type {?} */ (doneCb), timeout, /** @type {?} */ (updateCb));\n        this._runCallbacksIfReady();\n    };\n    /**\n     * Get the number of pending requests\n     * @deprecated pending requests are now tracked with zones\n     */\n    /**\n     * Get the number of pending requests\n     * @deprecated pending requests are now tracked with zones\n     * @return {?}\n     */\n    Testability.prototype.getPendingRequestCount = /**\n     * Get the number of pending requests\n     * @deprecated pending requests are now tracked with zones\n     * @return {?}\n     */\n    function () { return this._pendingCount; };\n    /**\n     * Find providers by name\n     * @param using The root element to search from\n     * @param provider The name of binding variable\n     * @param exactMatch Whether using exactMatch\n     */\n    /**\n     * Find providers by name\n     * @param {?} using The root element to search from\n     * @param {?} provider The name of binding variable\n     * @param {?} exactMatch Whether using exactMatch\n     * @return {?}\n     */\n    Testability.prototype.findProviders = /**\n     * Find providers by name\n     * @param {?} using The root element to search from\n     * @param {?} provider The name of binding variable\n     * @param {?} exactMatch Whether using exactMatch\n     * @return {?}\n     */\n    function (using, provider, exactMatch) {\n        // TODO(juliemr): implement.\n        return [];\n    };\n    Testability.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    Testability.ctorParameters = function () { return [\n        { type: NgZone }\n    ]; };\n    return Testability;\n}());\nexport { Testability };\nif (false) {\n    /** @type {?} */\n    Testability.prototype._pendingCount;\n    /** @type {?} */\n    Testability.prototype._isZoneStable;\n    /**\n     * Whether any work was done since the last 'whenStable' callback. This is\n     * useful to detect if this could have potentially destabilized another\n     * component while it is stabilizing.\n     * \\@internal\n     * @type {?}\n     */\n    Testability.prototype._didWork;\n    /** @type {?} */\n    Testability.prototype._callbacks;\n    /** @type {?} */\n    Testability.prototype.taskTrackingZone;\n    /** @type {?} */\n    Testability.prototype._ngZone;\n}\n/**\n * A global registry of {\\@link Testability} instances for specific elements.\n * \\@publicApi\n */\nvar TestabilityRegistry = /** @class */ (function () {\n    function TestabilityRegistry() {\n        /**\n         * \\@internal\n         */\n        this._applications = new Map();\n        _testabilityGetter.addToWindow(this);\n    }\n    /**\n     * Registers an application with a testability hook so that it can be tracked\n     * @param token token of application, root element\n     * @param testability Testability hook\n     */\n    /**\n     * Registers an application with a testability hook so that it can be tracked\n     * @param {?} token token of application, root element\n     * @param {?} testability Testability hook\n     * @return {?}\n     */\n    TestabilityRegistry.prototype.registerApplication = /**\n     * Registers an application with a testability hook so that it can be tracked\n     * @param {?} token token of application, root element\n     * @param {?} testability Testability hook\n     * @return {?}\n     */\n    function (token, testability) {\n        this._applications.set(token, testability);\n    };\n    /**\n     * Unregisters an application.\n     * @param token token of application, root element\n     */\n    /**\n     * Unregisters an application.\n     * @param {?} token token of application, root element\n     * @return {?}\n     */\n    TestabilityRegistry.prototype.unregisterApplication = /**\n     * Unregisters an application.\n     * @param {?} token token of application, root element\n     * @return {?}\n     */\n    function (token) { this._applications.delete(token); };\n    /**\n     * Unregisters all applications\n     */\n    /**\n     * Unregisters all applications\n     * @return {?}\n     */\n    TestabilityRegistry.prototype.unregisterAllApplications = /**\n     * Unregisters all applications\n     * @return {?}\n     */\n    function () { this._applications.clear(); };\n    /**\n     * Get a testability hook associated with the application\n     * @param elem root element\n     */\n    /**\n     * Get a testability hook associated with the application\n     * @param {?} elem root element\n     * @return {?}\n     */\n    TestabilityRegistry.prototype.getTestability = /**\n     * Get a testability hook associated with the application\n     * @param {?} elem root element\n     * @return {?}\n     */\n    function (elem) { return this._applications.get(elem) || null; };\n    /**\n     * Get all registered testabilities\n     */\n    /**\n     * Get all registered testabilities\n     * @return {?}\n     */\n    TestabilityRegistry.prototype.getAllTestabilities = /**\n     * Get all registered testabilities\n     * @return {?}\n     */\n    function () { return Array.from(this._applications.values()); };\n    /**\n     * Get all registered applications(root elements)\n     */\n    /**\n     * Get all registered applications(root elements)\n     * @return {?}\n     */\n    TestabilityRegistry.prototype.getAllRootElements = /**\n     * Get all registered applications(root elements)\n     * @return {?}\n     */\n    function () { return Array.from(this._applications.keys()); };\n    /**\n     * Find testability of a node in the Tree\n     * @param elem node\n     * @param findInAncestors whether finding testability in ancestors if testability was not found in\n     * current node\n     */\n    /**\n     * Find testability of a node in the Tree\n     * @param {?} elem node\n     * @param {?=} findInAncestors whether finding testability in ancestors if testability was not found in\n     * current node\n     * @return {?}\n     */\n    TestabilityRegistry.prototype.findTestabilityInTree = /**\n     * Find testability of a node in the Tree\n     * @param {?} elem node\n     * @param {?=} findInAncestors whether finding testability in ancestors if testability was not found in\n     * current node\n     * @return {?}\n     */\n    function (elem, findInAncestors) {\n        if (findInAncestors === void 0) { findInAncestors = true; }\n        return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);\n    };\n    TestabilityRegistry.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    TestabilityRegistry.ctorParameters = function () { return []; };\n    return TestabilityRegistry;\n}());\nexport { TestabilityRegistry };\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    TestabilityRegistry.prototype._applications;\n}\n/**\n * Adapter interface for retrieving the `Testability` service associated for a\n * particular context.\n *\n * \\@publicApi\n * @record\n */\nexport function GetTestability() { }\n/** @type {?} */\nGetTestability.prototype.addToWindow;\n/** @type {?} */\nGetTestability.prototype.findTestabilityInTree;\nvar _NoopGetTestability = /** @class */ (function () {\n    function _NoopGetTestability() {\n    }\n    /**\n     * @param {?} registry\n     * @return {?}\n     */\n    _NoopGetTestability.prototype.addToWindow = /**\n     * @param {?} registry\n     * @return {?}\n     */\n    function (registry) { };\n    /**\n     * @param {?} registry\n     * @param {?} elem\n     * @param {?} findInAncestors\n     * @return {?}\n     */\n    _NoopGetTestability.prototype.findTestabilityInTree = /**\n     * @param {?} registry\n     * @param {?} elem\n     * @param {?} findInAncestors\n     * @return {?}\n     */\n    function (registry, elem, findInAncestors) {\n        return null;\n    };\n    return _NoopGetTestability;\n}());\n/**\n * Set the {\\@link GetTestability} implementation used by the Angular testing framework.\n * \\@publicApi\n * @param {?} getter\n * @return {?}\n */\nexport function setTestabilityGetter(getter) {\n    _testabilityGetter = getter;\n}\n/** @type {?} */\nvar _testabilityGetter = new _NoopGetTestability();\n//# sourceMappingURL=testability.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Observable, merge } from 'rxjs';\nimport { share } from 'rxjs/operators';\nimport { ApplicationInitStatus } from './application_init';\nimport { APP_BOOTSTRAP_LISTENER, PLATFORM_INITIALIZER } from './application_tokens';\nimport { Console } from './console';\nimport { Injectable, InjectionToken, Injector } from './di';\nimport { ErrorHandler } from './error_handler';\nimport { isDevMode } from './is_dev_mode';\nimport { CompilerFactory } from './linker/compiler';\nimport { ComponentFactory } from './linker/component_factory';\nimport { ComponentFactoryBoundToModule, ComponentFactoryResolver } from './linker/component_factory_resolver';\nimport { NgModuleRef } from './linker/ng_module_factory';\nimport { wtfCreateScope, wtfLeave } from './profile/profile';\nimport { assertNgModuleType } from './render3/assert';\nimport { NgModuleFactory as R3NgModuleFactory } from './render3/ng_module_ref';\nimport { Testability, TestabilityRegistry } from './testability/testability';\nimport { scheduleMicroTask, stringify } from './util';\nimport { isPromise } from './util/lang';\nimport { NgZone, NoopNgZone } from './zone/ng_zone';\n/** @type {?} */\nvar _platform;\n/** @type {?} */\nvar compileNgModuleFactory = compileNgModuleFactory__PRE_R3__;\n/**\n * @template M\n * @param {?} injector\n * @param {?} options\n * @param {?} moduleType\n * @return {?}\n */\nfunction compileNgModuleFactory__PRE_R3__(injector, options, moduleType) {\n    /** @type {?} */\n    var compilerFactory = injector.get(CompilerFactory);\n    /** @type {?} */\n    var compiler = compilerFactory.createCompiler([options]);\n    return compiler.compileModuleAsync(moduleType);\n}\n/**\n * @template M\n * @param {?} injector\n * @param {?} options\n * @param {?} moduleType\n * @return {?}\n */\nexport function compileNgModuleFactory__POST_R3__(injector, options, moduleType) {\n    ngDevMode && assertNgModuleType(moduleType);\n    return Promise.resolve(new R3NgModuleFactory(moduleType));\n}\n/** @type {?} */\nexport var ALLOW_MULTIPLE_PLATFORMS = new InjectionToken('AllowMultipleToken');\n/**\n * A token for third-party components that can register themselves with NgProbe.\n *\n * \\@publicApi\n */\nvar /**\n * A token for third-party components that can register themselves with NgProbe.\n *\n * \\@publicApi\n */\nNgProbeToken = /** @class */ (function () {\n    function NgProbeToken(name, token) {\n        this.name = name;\n        this.token = token;\n    }\n    return NgProbeToken;\n}());\n/**\n * A token for third-party components that can register themselves with NgProbe.\n *\n * \\@publicApi\n */\nexport { NgProbeToken };\nif (false) {\n    /** @type {?} */\n    NgProbeToken.prototype.name;\n    /** @type {?} */\n    NgProbeToken.prototype.token;\n}\n/**\n * Creates a platform.\n * Platforms have to be eagerly created via this function.\n *\n * \\@publicApi\n * @param {?} injector\n * @return {?}\n */\nexport function createPlatform(injector) {\n    if (_platform && !_platform.destroyed &&\n        !_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n        throw new Error('There can be only one platform. Destroy the previous one to create a new one.');\n    }\n    _platform = injector.get(PlatformRef);\n    /** @type {?} */\n    var inits = injector.get(PLATFORM_INITIALIZER, null);\n    if (inits)\n        inits.forEach(function (init) { return init(); });\n    return _platform;\n}\n/**\n * Creates a factory for a platform\n *\n * \\@publicApi\n * @param {?} parentPlatformFactory\n * @param {?} name\n * @param {?=} providers\n * @return {?}\n */\nexport function createPlatformFactory(parentPlatformFactory, name, providers) {\n    if (providers === void 0) { providers = []; }\n    /** @type {?} */\n    var desc = \"Platform: \" + name;\n    /** @type {?} */\n    var marker = new InjectionToken(desc);\n    return function (extraProviders) {\n        if (extraProviders === void 0) { extraProviders = []; }\n        /** @type {?} */\n        var platform = getPlatform();\n        if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n            if (parentPlatformFactory) {\n                parentPlatformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: true }));\n            }\n            else {\n                /** @type {?} */\n                var injectedProviders = providers.concat(extraProviders).concat({ provide: marker, useValue: true });\n                createPlatform(Injector.create({ providers: injectedProviders, name: desc }));\n            }\n        }\n        return assertPlatform(marker);\n    };\n}\n/**\n * Checks that there currently is a platform which contains the given token as a provider.\n *\n * \\@publicApi\n * @param {?} requiredToken\n * @return {?}\n */\nexport function assertPlatform(requiredToken) {\n    /** @type {?} */\n    var platform = getPlatform();\n    if (!platform) {\n        throw new Error('No platform exists!');\n    }\n    if (!platform.injector.get(requiredToken, null)) {\n        throw new Error('A platform with a different configuration has been created. Please destroy it first.');\n    }\n    return platform;\n}\n/**\n * Destroy the existing platform.\n *\n * \\@publicApi\n * @return {?}\n */\nexport function destroyPlatform() {\n    if (_platform && !_platform.destroyed) {\n        _platform.destroy();\n    }\n}\n/**\n * Returns the current platform.\n *\n * \\@publicApi\n * @return {?}\n */\nexport function getPlatform() {\n    return _platform && !_platform.destroyed ? _platform : null;\n}\n/**\n * Provides additional options to the bootstraping process.\n *\n *\n * @record\n */\nexport function BootstrapOptions() { }\n/**\n * Optionally specify which `NgZone` should be used.\n *\n * - Provide your own `NgZone` instance.\n * - `zone.js` - Use default `NgZone` which requires `Zone.js`.\n * - `noop` - Use `NoopNgZone` which does nothing.\n * @type {?|undefined}\n */\nBootstrapOptions.prototype.ngZone;\n/**\n * The Angular platform is the entry point for Angular on a web page. Each page\n * has exactly one platform, and services (such as reflection) which are common\n * to every Angular application running on the page are bound in its scope.\n *\n * A page's platform is initialized implicitly when a platform is created via a platform factory\n * (e.g. {\\@link platformBrowser}), or explicitly by calling the {\\@link createPlatform} function.\n *\n * \\@publicApi\n */\nvar PlatformRef = /** @class */ (function () {\n    /** @internal */\n    function PlatformRef(_injector) {\n        this._injector = _injector;\n        this._modules = [];\n        this._destroyListeners = [];\n        this._destroyed = false;\n    }\n    /**\n     * Creates an instance of an `@NgModule` for the given platform\n     * for offline compilation.\n     *\n     * @usageNotes\n     * ### Simple Example\n     *\n     * ```typescript\n     * my_module.ts:\n     *\n     * @NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * main.ts:\n     * import {MyModuleNgFactory} from './my_module.ngfactory';\n     * import {platformBrowser} from '@angular/platform-browser';\n     *\n     * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n     * ```\n     */\n    /**\n     * Creates an instance of an `\\@NgModule` for the given platform\n     * for offline compilation.\n     *\n     * \\@usageNotes\n     * ### Simple Example\n     *\n     * ```typescript\n     * my_module.ts:\n     *\n     * \\@NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * main.ts:\n     * import {MyModuleNgFactory} from './my_module.ngfactory';\n     * import {platformBrowser} from '\\@angular/platform-browser';\n     *\n     * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n     * ```\n     * @template M\n     * @param {?} moduleFactory\n     * @param {?=} options\n     * @return {?}\n     */\n    PlatformRef.prototype.bootstrapModuleFactory = /**\n     * Creates an instance of an `\\@NgModule` for the given platform\n     * for offline compilation.\n     *\n     * \\@usageNotes\n     * ### Simple Example\n     *\n     * ```typescript\n     * my_module.ts:\n     *\n     * \\@NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * main.ts:\n     * import {MyModuleNgFactory} from './my_module.ngfactory';\n     * import {platformBrowser} from '\\@angular/platform-browser';\n     *\n     * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n     * ```\n     * @template M\n     * @param {?} moduleFactory\n     * @param {?=} options\n     * @return {?}\n     */\n    function (moduleFactory, options) {\n        var _this = this;\n        /** @type {?} */\n        var ngZoneOption = options ? options.ngZone : undefined;\n        /** @type {?} */\n        var ngZone = getNgZone(ngZoneOption);\n        /** @type {?} */\n        var providers = [{ provide: NgZone, useValue: ngZone }];\n        // Attention: Don't use ApplicationRef.run here,\n        // as we want to be sure that all possible constructor calls are inside `ngZone.run`!\n        return ngZone.run(function () {\n            /** @type {?} */\n            var ngZoneInjector = Injector.create({ providers: providers, parent: _this.injector, name: moduleFactory.moduleType.name });\n            /** @type {?} */\n            var moduleRef = /** @type {?} */ (moduleFactory.create(ngZoneInjector));\n            /** @type {?} */\n            var exceptionHandler = moduleRef.injector.get(ErrorHandler, null);\n            if (!exceptionHandler) {\n                throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');\n            }\n            moduleRef.onDestroy(function () { return remove(_this._modules, moduleRef); }); /** @type {?} */\n            ((ngZone)).runOutsideAngular(function () { return ((ngZone)).onError.subscribe({ next: function (error) { exceptionHandler.handleError(error); } }); });\n            return _callAndReportToErrorHandler(exceptionHandler, /** @type {?} */ ((ngZone)), function () {\n                /** @type {?} */\n                var initStatus = moduleRef.injector.get(ApplicationInitStatus);\n                initStatus.runInitializers();\n                return initStatus.donePromise.then(function () {\n                    _this._moduleDoBootstrap(moduleRef);\n                    return moduleRef;\n                });\n            });\n        });\n    };\n    /**\n     * Creates an instance of an `@NgModule` for a given platform using the given runtime compiler.\n     *\n     * @usageNotes\n     * ### Simple Example\n     *\n     * ```typescript\n     * @NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n     * ```\n     *\n     */\n    /**\n     * Creates an instance of an `\\@NgModule` for a given platform using the given runtime compiler.\n     *\n     * \\@usageNotes\n     * ### Simple Example\n     *\n     * ```typescript\n     * \\@NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n     * ```\n     *\n     * @template M\n     * @param {?} moduleType\n     * @param {?=} compilerOptions\n     * @return {?}\n     */\n    PlatformRef.prototype.bootstrapModule = /**\n     * Creates an instance of an `\\@NgModule` for a given platform using the given runtime compiler.\n     *\n     * \\@usageNotes\n     * ### Simple Example\n     *\n     * ```typescript\n     * \\@NgModule({\n     *   imports: [BrowserModule]\n     * })\n     * class MyModule {}\n     *\n     * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n     * ```\n     *\n     * @template M\n     * @param {?} moduleType\n     * @param {?=} compilerOptions\n     * @return {?}\n     */\n    function (moduleType, compilerOptions) {\n        var _this = this;\n        if (compilerOptions === void 0) { compilerOptions = []; }\n        /** @type {?} */\n        var options = optionsReducer({}, compilerOptions);\n        return compileNgModuleFactory(this.injector, options, moduleType)\n            .then(function (moduleFactory) { return _this.bootstrapModuleFactory(moduleFactory, options); });\n    };\n    /**\n     * @param {?} moduleRef\n     * @return {?}\n     */\n    PlatformRef.prototype._moduleDoBootstrap = /**\n     * @param {?} moduleRef\n     * @return {?}\n     */\n    function (moduleRef) {\n        /** @type {?} */\n        var appRef = /** @type {?} */ (moduleRef.injector.get(ApplicationRef));\n        if (moduleRef._bootstrapComponents.length > 0) {\n            moduleRef._bootstrapComponents.forEach(function (f) { return appRef.bootstrap(f); });\n        }\n        else if (moduleRef.instance.ngDoBootstrap) {\n            moduleRef.instance.ngDoBootstrap(appRef);\n        }\n        else {\n            throw new Error(\"The module \" + stringify(moduleRef.instance.constructor) + \" was bootstrapped, but it does not declare \\\"@NgModule.bootstrap\\\" components nor a \\\"ngDoBootstrap\\\" method. \" +\n                \"Please define one of these.\");\n        }\n        this._modules.push(moduleRef);\n    };\n    /**\n     * Register a listener to be called when the platform is disposed.\n     */\n    /**\n     * Register a listener to be called when the platform is disposed.\n     * @param {?} callback\n     * @return {?}\n     */\n    PlatformRef.prototype.onDestroy = /**\n     * Register a listener to be called when the platform is disposed.\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) { this._destroyListeners.push(callback); };\n    Object.defineProperty(PlatformRef.prototype, \"injector\", {\n        /**\n         * Retrieve the platform {@link Injector}, which is the parent injector for\n         * every Angular application on the page and provides singleton providers.\n         */\n        get: /**\n         * Retrieve the platform {\\@link Injector}, which is the parent injector for\n         * every Angular application on the page and provides singleton providers.\n         * @return {?}\n         */\n        function () { return this._injector; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Destroy the Angular platform and all Angular applications on the page.\n     */\n    /**\n     * Destroy the Angular platform and all Angular applications on the page.\n     * @return {?}\n     */\n    PlatformRef.prototype.destroy = /**\n     * Destroy the Angular platform and all Angular applications on the page.\n     * @return {?}\n     */\n    function () {\n        if (this._destroyed) {\n            throw new Error('The platform has already been destroyed!');\n        }\n        this._modules.slice().forEach(function (module) { return module.destroy(); });\n        this._destroyListeners.forEach(function (listener) { return listener(); });\n        this._destroyed = true;\n    };\n    Object.defineProperty(PlatformRef.prototype, \"destroyed\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._destroyed; },\n        enumerable: true,\n        configurable: true\n    });\n    PlatformRef.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    PlatformRef.ctorParameters = function () { return [\n        { type: Injector }\n    ]; };\n    return PlatformRef;\n}());\nexport { PlatformRef };\nif (false) {\n    /** @type {?} */\n    PlatformRef.prototype._modules;\n    /** @type {?} */\n    PlatformRef.prototype._destroyListeners;\n    /** @type {?} */\n    PlatformRef.prototype._destroyed;\n    /** @type {?} */\n    PlatformRef.prototype._injector;\n}\n/**\n * @param {?=} ngZoneOption\n * @return {?}\n */\nfunction getNgZone(ngZoneOption) {\n    /** @type {?} */\n    var ngZone;\n    if (ngZoneOption === 'noop') {\n        ngZone = new NoopNgZone();\n    }\n    else {\n        ngZone = (ngZoneOption === 'zone.js' ? undefined : ngZoneOption) ||\n            new NgZone({ enableLongStackTrace: isDevMode() });\n    }\n    return ngZone;\n}\n/**\n * @param {?} errorHandler\n * @param {?} ngZone\n * @param {?} callback\n * @return {?}\n */\nfunction _callAndReportToErrorHandler(errorHandler, ngZone, callback) {\n    try {\n        /** @type {?} */\n        var result = callback();\n        if (isPromise(result)) {\n            return result.catch(function (e) {\n                ngZone.runOutsideAngular(function () { return errorHandler.handleError(e); });\n                // rethrow as the exception handler might not do it\n                throw e;\n            });\n        }\n        return result;\n    }\n    catch (e) {\n        ngZone.runOutsideAngular(function () { return errorHandler.handleError(e); });\n        // rethrow as the exception handler might not do it\n        throw e;\n    }\n}\n/**\n * @template T\n * @param {?} dst\n * @param {?} objs\n * @return {?}\n */\nfunction optionsReducer(dst, objs) {\n    if (Array.isArray(objs)) {\n        dst = objs.reduce(optionsReducer, dst);\n    }\n    else {\n        dst = tslib_1.__assign({}, dst, (/** @type {?} */ (objs)));\n    }\n    return dst;\n}\n/**\n * A reference to an Angular application running on a page.\n *\n * \\@publicApi\n */\nvar ApplicationRef = /** @class */ (function () {\n    /** @internal */\n    function ApplicationRef(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus) {\n        var _this = this;\n        this._zone = _zone;\n        this._console = _console;\n        this._injector = _injector;\n        this._exceptionHandler = _exceptionHandler;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._initStatus = _initStatus;\n        this._bootstrapListeners = [];\n        this._views = [];\n        this._runningTick = false;\n        this._enforceNoNewChanges = false;\n        this._stable = true;\n        /**\n         * Get a list of component types registered to this application.\n         * This list is populated even before the component is created.\n         */\n        this.componentTypes = [];\n        /**\n         * Get a list of components registered to this application.\n         */\n        this.components = [];\n        this._enforceNoNewChanges = isDevMode();\n        this._zone.onMicrotaskEmpty.subscribe({ next: function () { _this._zone.run(function () { _this.tick(); }); } });\n        /** @type {?} */\n        var isCurrentlyStable = new Observable(function (observer) {\n            _this._stable = _this._zone.isStable && !_this._zone.hasPendingMacrotasks &&\n                !_this._zone.hasPendingMicrotasks;\n            _this._zone.runOutsideAngular(function () {\n                observer.next(_this._stable);\n                observer.complete();\n            });\n        });\n        /** @type {?} */\n        var isStable = new Observable(function (observer) {\n            /** @type {?} */\n            var stableSub;\n            _this._zone.runOutsideAngular(function () {\n                stableSub = _this._zone.onStable.subscribe(function () {\n                    NgZone.assertNotInAngularZone();\n                    // Check whether there are no pending macro/micro tasks in the next tick\n                    // to allow for NgZone to update the state.\n                    scheduleMicroTask(function () {\n                        if (!_this._stable && !_this._zone.hasPendingMacrotasks &&\n                            !_this._zone.hasPendingMicrotasks) {\n                            _this._stable = true;\n                            observer.next(true);\n                        }\n                    });\n                });\n            });\n            /** @type {?} */\n            var unstableSub = _this._zone.onUnstable.subscribe(function () {\n                NgZone.assertInAngularZone();\n                if (_this._stable) {\n                    _this._stable = false;\n                    _this._zone.runOutsideAngular(function () { observer.next(false); });\n                }\n            });\n            return function () {\n                stableSub.unsubscribe();\n                unstableSub.unsubscribe();\n            };\n        });\n        (/** @type {?} */ (this)).isStable =\n            merge(isCurrentlyStable, isStable.pipe(share()));\n    }\n    /**\n     * Bootstrap a new component at the root level of the application.\n     *\n     * @usageNotes\n     * ### Bootstrap process\n     *\n     * When bootstrapping a new root component into an application, Angular mounts the\n     * specified application component onto DOM elements identified by the componentType's\n     * selector and kicks off automatic change detection to finish initializing the component.\n     *\n     * Optionally, a component can be mounted onto a DOM element that does not match the\n     * componentType's selector.\n     *\n     * ### Example\n     * {@example core/ts/platform/platform.ts region='longform'}\n     */\n    /**\n     * Bootstrap a new component at the root level of the application.\n     *\n     * \\@usageNotes\n     * ### Bootstrap process\n     *\n     * When bootstrapping a new root component into an application, Angular mounts the\n     * specified application component onto DOM elements identified by the componentType's\n     * selector and kicks off automatic change detection to finish initializing the component.\n     *\n     * Optionally, a component can be mounted onto a DOM element that does not match the\n     * componentType's selector.\n     *\n     * ### Example\n     * {\\@example core/ts/platform/platform.ts region='longform'}\n     * @template C\n     * @param {?} componentOrFactory\n     * @param {?=} rootSelectorOrNode\n     * @return {?}\n     */\n    ApplicationRef.prototype.bootstrap = /**\n     * Bootstrap a new component at the root level of the application.\n     *\n     * \\@usageNotes\n     * ### Bootstrap process\n     *\n     * When bootstrapping a new root component into an application, Angular mounts the\n     * specified application component onto DOM elements identified by the componentType's\n     * selector and kicks off automatic change detection to finish initializing the component.\n     *\n     * Optionally, a component can be mounted onto a DOM element that does not match the\n     * componentType's selector.\n     *\n     * ### Example\n     * {\\@example core/ts/platform/platform.ts region='longform'}\n     * @template C\n     * @param {?} componentOrFactory\n     * @param {?=} rootSelectorOrNode\n     * @return {?}\n     */\n    function (componentOrFactory, rootSelectorOrNode) {\n        var _this = this;\n        if (!this._initStatus.done) {\n            throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');\n        }\n        /** @type {?} */\n        var componentFactory;\n        if (componentOrFactory instanceof ComponentFactory) {\n            componentFactory = componentOrFactory;\n        }\n        else {\n            componentFactory =\n                /** @type {?} */ ((this._componentFactoryResolver.resolveComponentFactory(componentOrFactory)));\n        }\n        this.componentTypes.push(componentFactory.componentType);\n        /** @type {?} */\n        var ngModule = componentFactory instanceof ComponentFactoryBoundToModule ?\n            null :\n            this._injector.get(NgModuleRef);\n        /** @type {?} */\n        var selectorOrNode = rootSelectorOrNode || componentFactory.selector;\n        /** @type {?} */\n        var compRef = componentFactory.create(Injector.NULL, [], selectorOrNode, ngModule);\n        compRef.onDestroy(function () { _this._unloadComponent(compRef); });\n        /** @type {?} */\n        var testability = compRef.injector.get(Testability, null);\n        if (testability) {\n            compRef.injector.get(TestabilityRegistry)\n                .registerApplication(compRef.location.nativeElement, testability);\n        }\n        this._loadComponent(compRef);\n        if (isDevMode()) {\n            this._console.log(\"Angular is running in the development mode. Call enableProdMode() to enable the production mode.\");\n        }\n        return compRef;\n    };\n    /**\n     * Invoke this method to explicitly process change detection and its side-effects.\n     *\n     * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n     * further changes are detected. If additional changes are picked up during this second cycle,\n     * bindings in the app have side-effects that cannot be resolved in a single change detection\n     * pass.\n     * In this case, Angular throws an error, since an Angular application can only have one change\n     * detection pass during which all change detection must complete.\n     */\n    /**\n     * Invoke this method to explicitly process change detection and its side-effects.\n     *\n     * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n     * further changes are detected. If additional changes are picked up during this second cycle,\n     * bindings in the app have side-effects that cannot be resolved in a single change detection\n     * pass.\n     * In this case, Angular throws an error, since an Angular application can only have one change\n     * detection pass during which all change detection must complete.\n     * @return {?}\n     */\n    ApplicationRef.prototype.tick = /**\n     * Invoke this method to explicitly process change detection and its side-effects.\n     *\n     * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n     * further changes are detected. If additional changes are picked up during this second cycle,\n     * bindings in the app have side-effects that cannot be resolved in a single change detection\n     * pass.\n     * In this case, Angular throws an error, since an Angular application can only have one change\n     * detection pass during which all change detection must complete.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this._runningTick) {\n            throw new Error('ApplicationRef.tick is called recursively');\n        }\n        /** @type {?} */\n        var scope = ApplicationRef._tickScope();\n        try {\n            this._runningTick = true;\n            this._views.forEach(function (view) { return view.detectChanges(); });\n            if (this._enforceNoNewChanges) {\n                this._views.forEach(function (view) { return view.checkNoChanges(); });\n            }\n        }\n        catch (e) {\n            // Attention: Don't rethrow as it could cancel subscriptions to Observables!\n            this._zone.runOutsideAngular(function () { return _this._exceptionHandler.handleError(e); });\n        }\n        finally {\n            this._runningTick = false;\n            wtfLeave(scope);\n        }\n    };\n    /**\n     * Attaches a view so that it will be dirty checked.\n     * The view will be automatically detached when it is destroyed.\n     * This will throw if the view is already attached to a ViewContainer.\n     */\n    /**\n     * Attaches a view so that it will be dirty checked.\n     * The view will be automatically detached when it is destroyed.\n     * This will throw if the view is already attached to a ViewContainer.\n     * @param {?} viewRef\n     * @return {?}\n     */\n    ApplicationRef.prototype.attachView = /**\n     * Attaches a view so that it will be dirty checked.\n     * The view will be automatically detached when it is destroyed.\n     * This will throw if the view is already attached to a ViewContainer.\n     * @param {?} viewRef\n     * @return {?}\n     */\n    function (viewRef) {\n        /** @type {?} */\n        var view = (/** @type {?} */ (viewRef));\n        this._views.push(view);\n        view.attachToAppRef(this);\n    };\n    /**\n     * Detaches a view from dirty checking again.\n     */\n    /**\n     * Detaches a view from dirty checking again.\n     * @param {?} viewRef\n     * @return {?}\n     */\n    ApplicationRef.prototype.detachView = /**\n     * Detaches a view from dirty checking again.\n     * @param {?} viewRef\n     * @return {?}\n     */\n    function (viewRef) {\n        /** @type {?} */\n        var view = (/** @type {?} */ (viewRef));\n        remove(this._views, view);\n        view.detachFromAppRef();\n    };\n    /**\n     * @param {?} componentRef\n     * @return {?}\n     */\n    ApplicationRef.prototype._loadComponent = /**\n     * @param {?} componentRef\n     * @return {?}\n     */\n    function (componentRef) {\n        this.attachView(componentRef.hostView);\n        this.tick();\n        this.components.push(componentRef);\n        /** @type {?} */\n        var listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);\n        listeners.forEach(function (listener) { return listener(componentRef); });\n    };\n    /**\n     * @param {?} componentRef\n     * @return {?}\n     */\n    ApplicationRef.prototype._unloadComponent = /**\n     * @param {?} componentRef\n     * @return {?}\n     */\n    function (componentRef) {\n        this.detachView(componentRef.hostView);\n        remove(this.components, componentRef);\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    ApplicationRef.prototype.ngOnDestroy = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        // TODO(alxhub): Dispose of the NgZone.\n        this._views.slice().forEach(function (view) { return view.destroy(); });\n    };\n    Object.defineProperty(ApplicationRef.prototype, \"viewCount\", {\n        /**\n         * Returns the number of attached views.\n         */\n        get: /**\n         * Returns the number of attached views.\n         * @return {?}\n         */\n        function () { return this._views.length; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * \\@internal\n     */\n    ApplicationRef._tickScope = wtfCreateScope('ApplicationRef#tick()');\n    ApplicationRef.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    ApplicationRef.ctorParameters = function () { return [\n        { type: NgZone },\n        { type: Console },\n        { type: Injector },\n        { type: ErrorHandler },\n        { type: ComponentFactoryResolver },\n        { type: ApplicationInitStatus }\n    ]; };\n    return ApplicationRef;\n}());\nexport { ApplicationRef };\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ApplicationRef._tickScope;\n    /** @type {?} */\n    ApplicationRef.prototype._bootstrapListeners;\n    /** @type {?} */\n    ApplicationRef.prototype._views;\n    /** @type {?} */\n    ApplicationRef.prototype._runningTick;\n    /** @type {?} */\n    ApplicationRef.prototype._enforceNoNewChanges;\n    /** @type {?} */\n    ApplicationRef.prototype._stable;\n    /**\n     * Get a list of component types registered to this application.\n     * This list is populated even before the component is created.\n     * @type {?}\n     */\n    ApplicationRef.prototype.componentTypes;\n    /**\n     * Get a list of components registered to this application.\n     * @type {?}\n     */\n    ApplicationRef.prototype.components;\n    /**\n     * Returns an Observable that indicates when the application is stable or unstable.\n     * @type {?}\n     */\n    ApplicationRef.prototype.isStable;\n    /** @type {?} */\n    ApplicationRef.prototype._zone;\n    /** @type {?} */\n    ApplicationRef.prototype._console;\n    /** @type {?} */\n    ApplicationRef.prototype._injector;\n    /** @type {?} */\n    ApplicationRef.prototype._exceptionHandler;\n    /** @type {?} */\n    ApplicationRef.prototype._componentFactoryResolver;\n    /** @type {?} */\n    ApplicationRef.prototype._initStatus;\n}\n/**\n * @template T\n * @param {?} list\n * @param {?} el\n * @return {?}\n */\nfunction remove(list, el) {\n    /** @type {?} */\n    var index = list.indexOf(el);\n    if (index > -1) {\n        list.splice(index, 1);\n    }\n}\n//# sourceMappingURL=application_ref.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Used to load ng module factories.\n *\n * \\@publicApi\n * @abstract\n */\nvar /**\n * Used to load ng module factories.\n *\n * \\@publicApi\n * @abstract\n */\nNgModuleFactoryLoader = /** @class */ (function () {\n    function NgModuleFactoryLoader() {\n    }\n    return NgModuleFactoryLoader;\n}());\n/**\n * Used to load ng module factories.\n *\n * \\@publicApi\n * @abstract\n */\nexport { NgModuleFactoryLoader };\nif (false) {\n    /**\n     * @abstract\n     * @param {?} path\n     * @return {?}\n     */\n    NgModuleFactoryLoader.prototype.load = function (path) { };\n}\n/** @type {?} */\nvar moduleFactories = new Map();\n/**\n * Registers a loaded module. Should only be called from generated NgModuleFactory code.\n * \\@publicApi\n * @param {?} id\n * @param {?} factory\n * @return {?}\n */\nexport function registerModuleFactory(id, factory) {\n    /** @type {?} */\n    var existing = moduleFactories.get(id);\n    if (existing) {\n        throw new Error(\"Duplicate module registered for \" + id + \" - \" + existing.moduleType.name + \" vs \" + factory.moduleType.name);\n    }\n    moduleFactories.set(id, factory);\n}\n/**\n * @return {?}\n */\nexport function clearModulesForTest() {\n    moduleFactories = new Map();\n}\n/**\n * Returns the NgModuleFactory with the given id, if it exists and has been loaded.\n * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module\n * cannot be found.\n * \\@publicApi\n * @param {?} id\n * @return {?}\n */\nexport function getModuleFactory(id) {\n    /** @type {?} */\n    var factory = moduleFactories.get(id);\n    if (!factory)\n        throw new Error(\"No module with ID \" + id + \" loaded\");\n    return factory;\n}\n//# sourceMappingURL=ng_module_factory_loader.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter } from '../event_emitter';\nimport { getSymbolIterator } from '../util';\n/**\n * An unmodifiable list of items that Angular keeps up to date when the state\n * of the application changes.\n *\n * The type of object that {\\@link ViewChildren}, {\\@link ContentChildren}, and {\\@link QueryList}\n * provide.\n *\n * Implements an iterable interface, therefore it can be used in both ES6\n * javascript `for (var i of items)` loops as well as in Angular templates with\n * `*ngFor=\"let i of myList\"`.\n *\n * Changes can be observed by subscribing to the changes `Observable`.\n *\n * NOTE: In the future this class will implement an `Observable` interface.\n *\n * \\@usageNotes\n * ### Example\n * ```typescript\n * \\@Component({...})\n * class Container {\n * \\@ViewChildren(Item) items:QueryList<Item>;\n * }\n * ```\n *\n * \\@publicApi\n * @template T\n */\nvar /**\n * An unmodifiable list of items that Angular keeps up to date when the state\n * of the application changes.\n *\n * The type of object that {\\@link ViewChildren}, {\\@link ContentChildren}, and {\\@link QueryList}\n * provide.\n *\n * Implements an iterable interface, therefore it can be used in both ES6\n * javascript `for (var i of items)` loops as well as in Angular templates with\n * `*ngFor=\"let i of myList\"`.\n *\n * Changes can be observed by subscribing to the changes `Observable`.\n *\n * NOTE: In the future this class will implement an `Observable` interface.\n *\n * \\@usageNotes\n * ### Example\n * ```typescript\n * \\@Component({...})\n * class Container {\n * \\@ViewChildren(Item) items:QueryList<Item>;\n * }\n * ```\n *\n * \\@publicApi\n * @template T\n */\nQueryList = /** @class */ (function () {\n    function QueryList() {\n        this.dirty = true;\n        this._results = [];\n        this.changes = new EventEmitter();\n        this.length = 0;\n    }\n    /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     */\n    /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     * @template U\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList.prototype.map = /**\n     * See\n     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n     * @template U\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { return this._results.map(fn); };\n    /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     */\n    /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList.prototype.filter = /**\n     * See\n     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        return this._results.filter(fn);\n    };\n    /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     */\n    /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList.prototype.find = /**\n     * See\n     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        return this._results.find(fn);\n    };\n    /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     */\n    /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     * @template U\n     * @param {?} fn\n     * @param {?} init\n     * @return {?}\n     */\n    QueryList.prototype.reduce = /**\n     * See\n     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n     * @template U\n     * @param {?} fn\n     * @param {?} init\n     * @return {?}\n     */\n    function (fn, init) {\n        return this._results.reduce(fn, init);\n    };\n    /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     */\n    /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList.prototype.forEach = /**\n     * See\n     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._results.forEach(fn); };\n    /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     */\n    /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     * @param {?} fn\n     * @return {?}\n     */\n    QueryList.prototype.some = /**\n     * See\n     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        return this._results.some(fn);\n    };\n    /**\n     * @return {?}\n     */\n    QueryList.prototype.toArray = /**\n     * @return {?}\n     */\n    function () { return this._results.slice(); };\n    /**\n     * @return {?}\n     */\n    QueryList.prototype[getSymbolIterator()] = /**\n     * @return {?}\n     */\n    function () { return (/** @type {?} */ (this._results))[getSymbolIterator()](); };\n    /**\n     * @return {?}\n     */\n    QueryList.prototype.toString = /**\n     * @return {?}\n     */\n    function () { return this._results.toString(); };\n    /**\n     * @param {?} res\n     * @return {?}\n     */\n    QueryList.prototype.reset = /**\n     * @param {?} res\n     * @return {?}\n     */\n    function (res) {\n        this._results = flatten(res);\n        (/** @type {?} */ (this)).dirty = false;\n        (/** @type {?} */ (this)).length = this._results.length;\n        (/** @type {?} */ (this)).last = this._results[this.length - 1];\n        (/** @type {?} */ (this)).first = this._results[0];\n    };\n    /**\n     * @return {?}\n     */\n    QueryList.prototype.notifyOnChanges = /**\n     * @return {?}\n     */\n    function () { (/** @type {?} */ (this.changes)).emit(this); };\n    /** internal */\n    /**\n     * internal\n     * @return {?}\n     */\n    QueryList.prototype.setDirty = /**\n     * internal\n     * @return {?}\n     */\n    function () { (/** @type {?} */ (this)).dirty = true; };\n    /** internal */\n    /**\n     * internal\n     * @return {?}\n     */\n    QueryList.prototype.destroy = /**\n     * internal\n     * @return {?}\n     */\n    function () {\n        (/** @type {?} */ (this.changes)).complete();\n        (/** @type {?} */ (this.changes)).unsubscribe();\n    };\n    return QueryList;\n}());\n/**\n * An unmodifiable list of items that Angular keeps up to date when the state\n * of the application changes.\n *\n * The type of object that {\\@link ViewChildren}, {\\@link ContentChildren}, and {\\@link QueryList}\n * provide.\n *\n * Implements an iterable interface, therefore it can be used in both ES6\n * javascript `for (var i of items)` loops as well as in Angular templates with\n * `*ngFor=\"let i of myList\"`.\n *\n * Changes can be observed by subscribing to the changes `Observable`.\n *\n * NOTE: In the future this class will implement an `Observable` interface.\n *\n * \\@usageNotes\n * ### Example\n * ```typescript\n * \\@Component({...})\n * class Container {\n * \\@ViewChildren(Item) items:QueryList<Item>;\n * }\n * ```\n *\n * \\@publicApi\n * @template T\n */\nexport { QueryList };\nif (false) {\n    /** @type {?} */\n    QueryList.prototype.dirty;\n    /** @type {?} */\n    QueryList.prototype._results;\n    /** @type {?} */\n    QueryList.prototype.changes;\n    /** @type {?} */\n    QueryList.prototype.length;\n    /** @type {?} */\n    QueryList.prototype.first;\n    /** @type {?} */\n    QueryList.prototype.last;\n}\n/**\n * @template T\n * @param {?} list\n * @return {?}\n */\nfunction flatten(list) {\n    return list.reduce(function (flat, item) {\n        /** @type {?} */\n        var flatItem = Array.isArray(item) ? flatten(item) : item;\n        return (/** @type {?} */ (flat)).concat(flatItem);\n    }, []);\n}\n//# sourceMappingURL=query_list.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Injectable, Optional } from '../di';\nimport { Compiler } from './compiler';\n/** @type {?} */\nvar _SEPARATOR = '#';\n/** @type {?} */\nvar FACTORY_CLASS_SUFFIX = 'NgFactory';\n/**\n * Configuration for SystemJsNgModuleLoader.\n * token.\n *\n * \\@publicApi\n * @abstract\n */\nvar /**\n * Configuration for SystemJsNgModuleLoader.\n * token.\n *\n * \\@publicApi\n * @abstract\n */\nSystemJsNgModuleLoaderConfig = /** @class */ (function () {\n    function SystemJsNgModuleLoaderConfig() {\n    }\n    return SystemJsNgModuleLoaderConfig;\n}());\n/**\n * Configuration for SystemJsNgModuleLoader.\n * token.\n *\n * \\@publicApi\n * @abstract\n */\nexport { SystemJsNgModuleLoaderConfig };\nif (false) {\n    /**\n     * Prefix to add when computing the name of the factory module for a given module name.\n     * @type {?}\n     */\n    SystemJsNgModuleLoaderConfig.prototype.factoryPathPrefix;\n    /**\n     * Suffix to add when computing the name of the factory module for a given module name.\n     * @type {?}\n     */\n    SystemJsNgModuleLoaderConfig.prototype.factoryPathSuffix;\n}\n/** @type {?} */\nvar DEFAULT_CONFIG = {\n    factoryPathPrefix: '',\n    factoryPathSuffix: '.ngfactory',\n};\n/**\n * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory\n * \\@publicApi\n */\nvar SystemJsNgModuleLoader = /** @class */ (function () {\n    function SystemJsNgModuleLoader(_compiler, config) {\n        this._compiler = _compiler;\n        this._config = config || DEFAULT_CONFIG;\n    }\n    /**\n     * @param {?} path\n     * @return {?}\n     */\n    SystemJsNgModuleLoader.prototype.load = /**\n     * @param {?} path\n     * @return {?}\n     */\n    function (path) {\n        /** @type {?} */\n        var offlineMode = this._compiler instanceof Compiler;\n        return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);\n    };\n    /**\n     * @param {?} path\n     * @return {?}\n     */\n    SystemJsNgModuleLoader.prototype.loadAndCompile = /**\n     * @param {?} path\n     * @return {?}\n     */\n    function (path) {\n        var _this = this;\n        var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];\n        if (exportName === undefined) {\n            exportName = 'default';\n        }\n        return System.import(module)\n            .then(function (module) { return module[exportName]; })\n            .then(function (type) { return checkNotEmpty(type, module, exportName); })\n            .then(function (type) { return _this._compiler.compileModuleAsync(type); });\n    };\n    /**\n     * @param {?} path\n     * @return {?}\n     */\n    SystemJsNgModuleLoader.prototype.loadFactory = /**\n     * @param {?} path\n     * @return {?}\n     */\n    function (path) {\n        var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];\n        /** @type {?} */\n        var factoryClassSuffix = FACTORY_CLASS_SUFFIX;\n        if (exportName === undefined) {\n            exportName = 'default';\n            factoryClassSuffix = '';\n        }\n        return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix)\n            .then(function (module) { return module[exportName + factoryClassSuffix]; })\n            .then(function (factory) { return checkNotEmpty(factory, module, exportName); });\n    };\n    SystemJsNgModuleLoader.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    SystemJsNgModuleLoader.ctorParameters = function () { return [\n        { type: Compiler },\n        { type: SystemJsNgModuleLoaderConfig, decorators: [{ type: Optional }] }\n    ]; };\n    return SystemJsNgModuleLoader;\n}());\nexport { SystemJsNgModuleLoader };\nif (false) {\n    /** @type {?} */\n    SystemJsNgModuleLoader.prototype._config;\n    /** @type {?} */\n    SystemJsNgModuleLoader.prototype._compiler;\n}\n/**\n * @param {?} value\n * @param {?} modulePath\n * @param {?} exportName\n * @return {?}\n */\nfunction checkNotEmpty(value, modulePath, exportName) {\n    if (!value) {\n        throw new Error(\"Cannot find '\" + exportName + \"' in '\" + modulePath + \"'\");\n    }\n    return value;\n}\n//# sourceMappingURL=system_js_ng_module_factory_loader.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { injectViewContainerRef as render3InjectViewContainerRef } from '../render3/view_engine_compatibility';\nimport { noop } from '../util/noop';\nimport { ElementRef } from './element_ref';\n/**\n * Represents a container where one or more views can be attached to a component.\n *\n * Can contain *host views* (created by instantiating a\n * component with the `createComponent()` method), and *embedded views*\n * (created by instantiating a `TemplateRef` with the `createEmbeddedView()` method).\n *\n * A view container instance can contain other view containers,\n * creating a [view hierarchy](guide/glossary#view-tree).\n *\n * @see `ComponentRef`\n * @see `EmbeddedViewRef`\n *\n * \\@publicApi\n * @abstract\n */\nvar ViewContainerRef = /** @class */ (function () {\n    function ViewContainerRef() {\n    }\n    /**\n     * \\@internal\n     */\n    ViewContainerRef.__NG_ELEMENT_ID__ = function () { return SWITCH_VIEW_CONTAINER_REF_FACTORY(ViewContainerRef, ElementRef); };\n    return ViewContainerRef;\n}());\nexport { ViewContainerRef };\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ViewContainerRef.__NG_ELEMENT_ID__;\n    /**\n     * Anchor element that specifies the location of this container in the containing view.\n     * Each view container can have only one anchor element, and each anchor element\n     * can have only a single view container.\n     *\n     * Root elements of views attached to this container become siblings of the anchor element in\n     * the rendered view.\n     *\n     * Access the `ViewContainerRef` of an element by placing a `Directive` injected\n     * with `ViewContainerRef` on the element, or use a `ViewChild` query.\n     *\n     * <!-- TODO: rename to anchorElement -->\n     * @abstract\n     * @return {?}\n     */\n    ViewContainerRef.prototype.element = function () { };\n    /**\n     * The [dependency injector](guide/glossary#injector) for this view container.\n     * @abstract\n     * @return {?}\n     */\n    ViewContainerRef.prototype.injector = function () { };\n    /**\n     * @deprecated No replacement\n     * @abstract\n     * @return {?}\n     */\n    ViewContainerRef.prototype.parentInjector = function () { };\n    /**\n     * Destroys all views in this container.\n     * @abstract\n     * @return {?}\n     */\n    ViewContainerRef.prototype.clear = function () { };\n    /**\n     * Retrieves a view from this container.\n     * @abstract\n     * @param {?} index The 0-based index of the view to retrieve.\n     * @return {?} The `ViewRef` instance, or null if the index is out of range.\n     */\n    ViewContainerRef.prototype.get = function (index) { };\n    /**\n     * Reports how many views are currently attached to this container.\n     * @abstract\n     * @return {?} The number of views.\n     */\n    ViewContainerRef.prototype.length = function () { };\n    /**\n     * Instantiates an embedded view and inserts it\n     * into this container.\n     * @abstract\n     * @template C\n     * @param {?} templateRef The HTML template that defines the view.\n     * @param {?=} context\n     * @param {?=} index The 0-based index at which to insert the new view into this container.\n     * If not specified, appends the new view as the last entry.\n     *\n     * @return {?} The `ViewRef` instance for the newly created view.\n     */\n    ViewContainerRef.prototype.createEmbeddedView = function (templateRef, context, index) { };\n    /**\n     * Instantiates a single component and inserts its host view into this container.\n     *\n     * @abstract\n     * @template C\n     * @param {?} componentFactory The factory to use.\n     * @param {?=} index The index at which to insert the new component's host view into this container.\n     * If not specified, appends the new view as the last entry.\n     * @param {?=} injector The injector to use as the parent for the new component.\n     * @param {?=} projectableNodes\n     * @param {?=} ngModule\n     *\n     * @return {?} The new component instance, containing the host view.\n     *\n     */\n    ViewContainerRef.prototype.createComponent = function (componentFactory, index, injector, projectableNodes, ngModule) { };\n    /**\n     * Inserts a view into this container.\n     * @abstract\n     * @param {?} viewRef The view to insert.\n     * @param {?=} index The 0-based index at which to insert the view.\n     * If not specified, appends the new view as the last entry.\n     * @return {?} The inserted `ViewRef` instance.\n     *\n     */\n    ViewContainerRef.prototype.insert = function (viewRef, index) { };\n    /**\n     * Moves a view to a new location in this container.\n     * @abstract\n     * @param {?} viewRef The view to move.\n     * @param {?} currentIndex\n     * @return {?} The moved `ViewRef` instance.\n     */\n    ViewContainerRef.prototype.move = function (viewRef, currentIndex) { };\n    /**\n     * Returns the index of a view within the current container.\n     * @abstract\n     * @param {?} viewRef The view to query.\n     * @return {?} The 0-based index of the view's position in this container,\n     * or `-1` if this container doesn't contain the view.\n     */\n    ViewContainerRef.prototype.indexOf = function (viewRef) { };\n    /**\n     * Destroys a view attached to this container\n     * @abstract\n     * @param {?=} index The 0-based index of the view to destroy.\n     * If not specified, the last view in the container is removed.\n     * @return {?}\n     */\n    ViewContainerRef.prototype.remove = function (index) { };\n    /**\n     * Detaches a view from this container without destroying it.\n     * Use along with `insert()` to move a view within the current container.\n     * @abstract\n     * @param {?=} index The 0-based index of the view to detach.\n     * If not specified, the last view in the container is detached.\n     * @return {?}\n     */\n    ViewContainerRef.prototype.detach = function (index) { };\n}\n/** @type {?} */\nexport var SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__ = render3InjectViewContainerRef;\n/** @type {?} */\nvar SWITCH_VIEW_CONTAINER_REF_FACTORY__PRE_R3__ = noop;\n/** @type {?} */\nvar SWITCH_VIEW_CONTAINER_REF_FACTORY = SWITCH_VIEW_CONTAINER_REF_FACTORY__PRE_R3__;\n//# sourceMappingURL=view_container_ref.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { injectChangeDetectorRef as render3InjectChangeDetectorRef } from '../render3/view_engine_compatibility';\n/**\n * Base class for Angular Views, provides change detection functionality.\n * A change-detection tree collects all views that are to be checked for changes.\n * Use the methods to add and remove views from the tree, initiate change-detection,\n * and explicitly mark views as _dirty_, meaning that they have changed and need to be rerendered.\n *\n * \\@usageNotes\n *\n * The following examples demonstrate how to modify default change-detection behavior\n * to perform explicit detection when needed.\n *\n * ### Use `markForCheck()` with `CheckOnce` strategy\n *\n * The following example sets the `OnPush` change-detection strategy for a component\n * (`CheckOnce`, rather than the default `CheckAlways`), then forces a second check\n * after an interval. See [live demo](http://plnkr.co/edit/GC512b?p=preview).\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\"\n * region=\"mark-for-check\"></code-example>\n *\n * ### Detach change detector to limit how often check occurs\n *\n * The following example defines a component with a large list of read-only data\n * that is expected to change constantly, many times per second.\n * To improve performance, we want to check and update the list\n * less often than the changes actually occur. To do that, we detach\n * the component's change detector and perform an explicit local check every five seconds.\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"detach\"></code-example>\n *\n *\n * ### Reattaching a detached component\n *\n * The following example creates a component displaying live data.\n * The component detaches its change detector from the main change detector tree\n * when the `live` property is set to false, and reattaches it when the property\n * becomes true.\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"reattach\"></code-example>\n *\n * \\@publicApi\n * @abstract\n */\nvar ChangeDetectorRef = /** @class */ (function () {\n    function ChangeDetectorRef() {\n    }\n    /**\n     * \\@internal\n     */\n    ChangeDetectorRef.__NG_ELEMENT_ID__ = function () { return SWITCH_CHANGE_DETECTOR_REF_FACTORY(); };\n    return ChangeDetectorRef;\n}());\nexport { ChangeDetectorRef };\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ChangeDetectorRef.__NG_ELEMENT_ID__;\n    /**\n     * When a view uses the {\\@link ChangeDetectionStrategy#OnPush OnPush} (checkOnce)\n     * change detection strategy, explicitly marks the view as changed so that\n     * it can be checked again.\n     *\n     * Components are normally marked as dirty (in need of rerendering) when inputs\n     * have changed or events have fired in the view. Call this method to ensure that\n     * a component is checked even if these triggers have not occured.\n     *\n     * <!-- TODO: Add a link to a chapter on OnPush components -->\n     *\n     * @abstract\n     * @return {?}\n     */\n    ChangeDetectorRef.prototype.markForCheck = function () { };\n    /**\n     * Detaches this view from the change-detection tree.\n     * A detached view is  not checked until it is reattached.\n     * Use in combination with `detectChanges()` to implement local change detection checks.\n     *\n     * Detached views are not checked during change detection runs until they are\n     * re-attached, even if they are marked as dirty.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * @abstract\n     * @return {?}\n     */\n    ChangeDetectorRef.prototype.detach = function () { };\n    /**\n     * Checks this view and its children. Use in combination with {\\@link ChangeDetectorRef#detach\n     * detach}\n     * to implement local change detection checks.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n     *\n     * @abstract\n     * @return {?}\n     */\n    ChangeDetectorRef.prototype.detectChanges = function () { };\n    /**\n     * Checks the change detector and its children, and throws if any changes are detected.\n     *\n     * Use in development mode to verify that running change detection doesn't introduce\n     * other changes.\n     * @abstract\n     * @return {?}\n     */\n    ChangeDetectorRef.prototype.checkNoChanges = function () { };\n    /**\n     * Re-attaches the previously detached view to the change detection tree.\n     * Views are attached to the tree by default.\n     *\n     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n     *\n     * @abstract\n     * @return {?}\n     */\n    ChangeDetectorRef.prototype.reattach = function () { };\n}\n/** @type {?} */\nexport var SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__ = render3InjectChangeDetectorRef;\n/** @type {?} */\nvar SWITCH_CHANGE_DETECTOR_REF_FACTORY__PRE_R3__ = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n};\nvar Éµ0 = SWITCH_CHANGE_DETECTOR_REF_FACTORY__PRE_R3__;\n/** @type {?} */\nvar SWITCH_CHANGE_DETECTOR_REF_FACTORY = SWITCH_CHANGE_DETECTOR_REF_FACTORY__PRE_R3__;\nexport { Éµ0 };\n//# sourceMappingURL=change_detector_ref.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { ChangeDetectorRef } from '../change_detection/change_detector_ref';\n/**\n * Represents an Angular [view](guide/glossary#view),\n * specifically the [host view](guide/glossary#view-tree) that is defined by a component.\n * Also serves as the base class\n * that adds destroy methods for [embedded views](guide/glossary#view-tree).\n *\n * @see `EmbeddedViewRef`\n *\n * \\@publicApi\n * @abstract\n */\nvar /**\n * Represents an Angular [view](guide/glossary#view),\n * specifically the [host view](guide/glossary#view-tree) that is defined by a component.\n * Also serves as the base class\n * that adds destroy methods for [embedded views](guide/glossary#view-tree).\n *\n * @see `EmbeddedViewRef`\n *\n * \\@publicApi\n * @abstract\n */\nViewRef = /** @class */ (function (_super) {\n    tslib_1.__extends(ViewRef, _super);\n    function ViewRef() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return ViewRef;\n}(ChangeDetectorRef));\n/**\n * Represents an Angular [view](guide/glossary#view),\n * specifically the [host view](guide/glossary#view-tree) that is defined by a component.\n * Also serves as the base class\n * that adds destroy methods for [embedded views](guide/glossary#view-tree).\n *\n * @see `EmbeddedViewRef`\n *\n * \\@publicApi\n * @abstract\n */\nexport { ViewRef };\nif (false) {\n    /**\n     * Destroys this view and all of the data structures associated with it.\n     * @abstract\n     * @return {?}\n     */\n    ViewRef.prototype.destroy = function () { };\n    /**\n     * Reports whether this view has been destroyed.\n     * @abstract\n     * @return {?} True after the `destroy()` method has been called, false otherwise.\n     */\n    ViewRef.prototype.destroyed = function () { };\n    /**\n     * A lifecycle hook that provides additional developer-defined cleanup\n     * functionality for views.\n     * @abstract\n     * @param {?} callback A handler function that cleans up developer-defined data\n     * associated with a view. Called when the `destroy()` method is invoked.\n     * @return {?}\n     */\n    ViewRef.prototype.onDestroy = function (callback) { };\n}\n/**\n * Represents an Angular [view](guide/glossary#view) in a view container.\n * An [embedded view](guide/glossary#view-tree) can be referenced from a component\n * other than the hosting component whose template defines it, or it can be defined\n * independently by a `TemplateRef`.\n *\n * Properties of elements in a view can change, but the structure (number and order) of elements in\n * a view cannot. Change the structure of elements by inserting, moving, or\n * removing nested views in a view container.\n *\n * @see `ViewContainerRef`\n *\n * \\@usageNotes\n *\n * The following template breaks down into two separate `TemplateRef` instances,\n * an outer one and an inner one.\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <li *ngFor=\"let  item of items\">{{item}}</li>\n * </ul>\n * ```\n *\n * This is the outer `TemplateRef`:\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <ng-template ngFor let-item [ngForOf]=\"items\"></ng-template>\n * </ul>\n * ```\n *\n * This is the inner `TemplateRef`:\n *\n * ```\n *   <li>{{item}}</li>\n * ```\n *\n * The outer and inner `TemplateRef` instances are assembled into views as follows:\n *\n * ```\n * <!-- ViewRef: outer-0 -->\n * Count: 2\n * <ul>\n *   <ng-template view-container-ref></ng-template>\n *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n * </ul>\n * <!-- /ViewRef: outer-0 -->\n * ```\n * \\@publicApi\n * @abstract\n * @template C\n */\nvar /**\n * Represents an Angular [view](guide/glossary#view) in a view container.\n * An [embedded view](guide/glossary#view-tree) can be referenced from a component\n * other than the hosting component whose template defines it, or it can be defined\n * independently by a `TemplateRef`.\n *\n * Properties of elements in a view can change, but the structure (number and order) of elements in\n * a view cannot. Change the structure of elements by inserting, moving, or\n * removing nested views in a view container.\n *\n * @see `ViewContainerRef`\n *\n * \\@usageNotes\n *\n * The following template breaks down into two separate `TemplateRef` instances,\n * an outer one and an inner one.\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <li *ngFor=\"let  item of items\">{{item}}</li>\n * </ul>\n * ```\n *\n * This is the outer `TemplateRef`:\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <ng-template ngFor let-item [ngForOf]=\"items\"></ng-template>\n * </ul>\n * ```\n *\n * This is the inner `TemplateRef`:\n *\n * ```\n *   <li>{{item}}</li>\n * ```\n *\n * The outer and inner `TemplateRef` instances are assembled into views as follows:\n *\n * ```\n * <!-- ViewRef: outer-0 -->\n * Count: 2\n * <ul>\n *   <ng-template view-container-ref></ng-template>\n *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n * </ul>\n * <!-- /ViewRef: outer-0 -->\n * ```\n * \\@publicApi\n * @abstract\n * @template C\n */\nEmbeddedViewRef = /** @class */ (function (_super) {\n    tslib_1.__extends(EmbeddedViewRef, _super);\n    function EmbeddedViewRef() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return EmbeddedViewRef;\n}(ViewRef));\n/**\n * Represents an Angular [view](guide/glossary#view) in a view container.\n * An [embedded view](guide/glossary#view-tree) can be referenced from a component\n * other than the hosting component whose template defines it, or it can be defined\n * independently by a `TemplateRef`.\n *\n * Properties of elements in a view can change, but the structure (number and order) of elements in\n * a view cannot. Change the structure of elements by inserting, moving, or\n * removing nested views in a view container.\n *\n * @see `ViewContainerRef`\n *\n * \\@usageNotes\n *\n * The following template breaks down into two separate `TemplateRef` instances,\n * an outer one and an inner one.\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <li *ngFor=\"let  item of items\">{{item}}</li>\n * </ul>\n * ```\n *\n * This is the outer `TemplateRef`:\n *\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <ng-template ngFor let-item [ngForOf]=\"items\"></ng-template>\n * </ul>\n * ```\n *\n * This is the inner `TemplateRef`:\n *\n * ```\n *   <li>{{item}}</li>\n * ```\n *\n * The outer and inner `TemplateRef` instances are assembled into views as follows:\n *\n * ```\n * <!-- ViewRef: outer-0 -->\n * Count: 2\n * <ul>\n *   <ng-template view-container-ref></ng-template>\n *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n * </ul>\n * <!-- /ViewRef: outer-0 -->\n * ```\n * \\@publicApi\n * @abstract\n * @template C\n */\nexport { EmbeddedViewRef };\nif (false) {\n    /**\n     * The context for this view, inherited from the anchor element.\n     * @abstract\n     * @return {?}\n     */\n    EmbeddedViewRef.prototype.context = function () { };\n    /**\n     * The root nodes for this embedded view.\n     * @abstract\n     * @return {?}\n     */\n    EmbeddedViewRef.prototype.rootNodes = function () { };\n}\n/**\n * @record\n */\nexport function InternalViewRef() { }\n/** @type {?} */\nInternalViewRef.prototype.detachFromAppRef;\n/** @type {?} */\nInternalViewRef.prototype.attachToAppRef;\n//# sourceMappingURL=view_ref.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { assertDomNode } from '../render3/assert';\nimport { getComponent, getInjector, getLocalRefs, loadContext } from '../render3/discovery_utils';\nimport { TVIEW } from '../render3/interfaces/view';\nvar EventListener = /** @class */ (function () {\n    function EventListener(name, callback) {\n        this.name = name;\n        this.callback = callback;\n    }\n    return EventListener;\n}());\nexport { EventListener };\nif (false) {\n    /** @type {?} */\n    EventListener.prototype.name;\n    /** @type {?} */\n    EventListener.prototype.callback;\n}\nvar DebugNode__PRE_R3__ = /** @class */ (function () {\n    function DebugNode__PRE_R3__(nativeNode, parent, _debugContext) {\n        this.listeners = [];\n        this.parent = null;\n        this._debugContext = _debugContext;\n        this.nativeNode = nativeNode;\n        if (parent && parent instanceof DebugElement__PRE_R3__) {\n            parent.addChild(this);\n        }\n    }\n    Object.defineProperty(DebugNode__PRE_R3__.prototype, \"injector\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._debugContext.injector; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode__PRE_R3__.prototype, \"componentInstance\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._debugContext.component; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode__PRE_R3__.prototype, \"context\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._debugContext.context; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode__PRE_R3__.prototype, \"references\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._debugContext.references; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode__PRE_R3__.prototype, \"providerTokens\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._debugContext.providerTokens; },\n        enumerable: true,\n        configurable: true\n    });\n    return DebugNode__PRE_R3__;\n}());\nexport { DebugNode__PRE_R3__ };\nif (false) {\n    /** @type {?} */\n    DebugNode__PRE_R3__.prototype.listeners;\n    /** @type {?} */\n    DebugNode__PRE_R3__.prototype.parent;\n    /** @type {?} */\n    DebugNode__PRE_R3__.prototype.nativeNode;\n    /** @type {?} */\n    DebugNode__PRE_R3__.prototype._debugContext;\n}\nvar DebugElement__PRE_R3__ = /** @class */ (function (_super) {\n    tslib_1.__extends(DebugElement__PRE_R3__, _super);\n    function DebugElement__PRE_R3__(nativeNode, parent, _debugContext) {\n        var _this = _super.call(this, nativeNode, parent, _debugContext) || this;\n        _this.properties = {};\n        _this.attributes = {};\n        _this.classes = {};\n        _this.styles = {};\n        _this.childNodes = [];\n        _this.nativeElement = nativeNode;\n        return _this;\n    }\n    /**\n     * @param {?} child\n     * @return {?}\n     */\n    DebugElement__PRE_R3__.prototype.addChild = /**\n     * @param {?} child\n     * @return {?}\n     */\n    function (child) {\n        if (child) {\n            this.childNodes.push(child);\n            (/** @type {?} */ (child)).parent = this;\n        }\n    };\n    /**\n     * @param {?} child\n     * @return {?}\n     */\n    DebugElement__PRE_R3__.prototype.removeChild = /**\n     * @param {?} child\n     * @return {?}\n     */\n    function (child) {\n        /** @type {?} */\n        var childIndex = this.childNodes.indexOf(child);\n        if (childIndex !== -1) {\n            (/** @type {?} */ (child)).parent = null;\n            this.childNodes.splice(childIndex, 1);\n        }\n    };\n    /**\n     * @param {?} child\n     * @param {?} newChildren\n     * @return {?}\n     */\n    DebugElement__PRE_R3__.prototype.insertChildrenAfter = /**\n     * @param {?} child\n     * @param {?} newChildren\n     * @return {?}\n     */\n    function (child, newChildren) {\n        var _this = this;\n        var _a;\n        /** @type {?} */\n        var siblingIndex = this.childNodes.indexOf(child);\n        if (siblingIndex !== -1) {\n            (_a = this.childNodes).splice.apply(_a, [siblingIndex + 1, 0].concat(newChildren));\n            newChildren.forEach(function (c) {\n                if (c.parent) {\n                    (/** @type {?} */ (c.parent)).removeChild(c);\n                }\n                (/** @type {?} */ (child)).parent = _this;\n            });\n        }\n    };\n    /**\n     * @param {?} refChild\n     * @param {?} newChild\n     * @return {?}\n     */\n    DebugElement__PRE_R3__.prototype.insertBefore = /**\n     * @param {?} refChild\n     * @param {?} newChild\n     * @return {?}\n     */\n    function (refChild, newChild) {\n        /** @type {?} */\n        var refIndex = this.childNodes.indexOf(refChild);\n        if (refIndex === -1) {\n            this.addChild(newChild);\n        }\n        else {\n            if (newChild.parent) {\n                (/** @type {?} */ (newChild.parent)).removeChild(newChild);\n            }\n            (/** @type {?} */ (newChild)).parent = this;\n            this.childNodes.splice(refIndex, 0, newChild);\n        }\n    };\n    /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    DebugElement__PRE_R3__.prototype.query = /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    function (predicate) {\n        /** @type {?} */\n        var results = this.queryAll(predicate);\n        return results[0] || null;\n    };\n    /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    DebugElement__PRE_R3__.prototype.queryAll = /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    function (predicate) {\n        /** @type {?} */\n        var matches = [];\n        _queryElementChildren(this, predicate, matches);\n        return matches;\n    };\n    /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    DebugElement__PRE_R3__.prototype.queryAllNodes = /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    function (predicate) {\n        /** @type {?} */\n        var matches = [];\n        _queryNodeChildren(this, predicate, matches);\n        return matches;\n    };\n    Object.defineProperty(DebugElement__PRE_R3__.prototype, \"children\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return /** @type {?} */ (this\n                .childNodes //\n                .filter(function (node) { return node instanceof DebugElement__PRE_R3__; }));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} eventName\n     * @param {?} eventObj\n     * @return {?}\n     */\n    DebugElement__PRE_R3__.prototype.triggerEventHandler = /**\n     * @param {?} eventName\n     * @param {?} eventObj\n     * @return {?}\n     */\n    function (eventName, eventObj) {\n        this.listeners.forEach(function (listener) {\n            if (listener.name == eventName) {\n                listener.callback(eventObj);\n            }\n        });\n    };\n    return DebugElement__PRE_R3__;\n}(DebugNode__PRE_R3__));\nexport { DebugElement__PRE_R3__ };\nif (false) {\n    /** @type {?} */\n    DebugElement__PRE_R3__.prototype.name;\n    /** @type {?} */\n    DebugElement__PRE_R3__.prototype.properties;\n    /** @type {?} */\n    DebugElement__PRE_R3__.prototype.attributes;\n    /** @type {?} */\n    DebugElement__PRE_R3__.prototype.classes;\n    /** @type {?} */\n    DebugElement__PRE_R3__.prototype.styles;\n    /** @type {?} */\n    DebugElement__PRE_R3__.prototype.childNodes;\n    /** @type {?} */\n    DebugElement__PRE_R3__.prototype.nativeElement;\n}\n/**\n * \\@publicApi\n * @param {?} debugEls\n * @return {?}\n */\nexport function asNativeElements(debugEls) {\n    return debugEls.map(function (el) { return el.nativeElement; });\n}\n/**\n * @param {?} element\n * @param {?} predicate\n * @param {?} matches\n * @return {?}\n */\nfunction _queryElementChildren(element, predicate, matches) {\n    element.childNodes.forEach(function (node) {\n        if (node instanceof DebugElement__PRE_R3__) {\n            if (predicate(node)) {\n                matches.push(node);\n            }\n            _queryElementChildren(node, predicate, matches);\n        }\n    });\n}\n/**\n * @param {?} parentNode\n * @param {?} predicate\n * @param {?} matches\n * @return {?}\n */\nfunction _queryNodeChildren(parentNode, predicate, matches) {\n    if (parentNode instanceof DebugElement__PRE_R3__) {\n        parentNode.childNodes.forEach(function (node) {\n            if (predicate(node)) {\n                matches.push(node);\n            }\n            if (node instanceof DebugElement__PRE_R3__) {\n                _queryNodeChildren(node, predicate, matches);\n            }\n        });\n    }\n}\n/**\n * @return {?}\n */\nfunction notImplemented() {\n    throw new Error('Missing proper ivy implementation.');\n}\nvar DebugNode__POST_R3__ = /** @class */ (function () {\n    function DebugNode__POST_R3__(nativeNode) {\n        this.nativeNode = nativeNode;\n    }\n    Object.defineProperty(DebugNode__POST_R3__.prototype, \"parent\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var parent = /** @type {?} */ (this.nativeNode.parentNode);\n            return parent ? new DebugElement__POST_R3__(parent) : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode__POST_R3__.prototype, \"injector\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return getInjector(this.nativeNode); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode__POST_R3__.prototype, \"componentInstance\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var nativeElement = this.nativeNode;\n            return nativeElement && getComponent(/** @type {?} */ (nativeElement));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode__POST_R3__.prototype, \"context\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            // https://angular-team.atlassian.net/browse/FW-719\n            throw notImplemented();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode__POST_R3__.prototype, \"listeners\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            // TODO: add real implementation;\n            // https://angular-team.atlassian.net/browse/FW-719\n            return [];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode__POST_R3__.prototype, \"references\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return getLocalRefs(this.nativeNode); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugNode__POST_R3__.prototype, \"providerTokens\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var context = /** @type {?} */ ((loadContext(/** @type {?} */ (this.nativeNode), false)));\n            if (!context)\n                return [];\n            /** @type {?} */\n            var lView = context.lView;\n            /** @type {?} */\n            var tView = lView[TVIEW];\n            /** @type {?} */\n            var tNode = /** @type {?} */ (tView.data[context.nodeIndex]);\n            /** @type {?} */\n            var providerTokens = [];\n            /** @type {?} */\n            var nodeFlags = tNode.flags;\n            /** @type {?} */\n            var startIndex = nodeFlags >> 16 /* DirectiveStartingIndexShift */;\n            /** @type {?} */\n            var directiveCount = nodeFlags & 4095 /* DirectiveCountMask */;\n            /** @type {?} */\n            var endIndex = startIndex + directiveCount;\n            for (var i = startIndex; i < endIndex; i++) {\n                /** @type {?} */\n                var value = tView.data[i];\n                if (isDirectiveDefHack(value)) {\n                    // The fact that we sometimes store Type and sometimes DirectiveDef in this location is a\n                    // design flaw.  We should always store same type so that we can be monomorphic. The issue\n                    // is that for Components/Directives we store the def instead the type. The correct behavior\n                    // is that we should always be storing injectable type in this location.\n                    value = value.type;\n                }\n                providerTokens.push(value);\n            }\n            return providerTokens;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return DebugNode__POST_R3__;\n}());\nif (false) {\n    /** @type {?} */\n    DebugNode__POST_R3__.prototype.nativeNode;\n}\nvar DebugElement__POST_R3__ = /** @class */ (function (_super) {\n    tslib_1.__extends(DebugElement__POST_R3__, _super);\n    function DebugElement__POST_R3__(nativeNode) {\n        var _this = this;\n        ngDevMode && assertDomNode(nativeNode);\n        _this = _super.call(this, nativeNode) || this;\n        return _this;\n    }\n    Object.defineProperty(DebugElement__POST_R3__.prototype, \"nativeElement\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this.nativeNode.nodeType == Node.ELEMENT_NODE ? /** @type {?} */ (this.nativeNode) : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugElement__POST_R3__.prototype, \"name\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return (/** @type {?} */ (this.nativeElement)).nodeName; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugElement__POST_R3__.prototype, \"properties\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var context = /** @type {?} */ ((loadContext(this.nativeNode)));\n            /** @type {?} */\n            var lView = context.lView;\n            /** @type {?} */\n            var tView = lView[TVIEW];\n            /** @type {?} */\n            var tNode = /** @type {?} */ (tView.data[context.nodeIndex]);\n            /** @type {?} */\n            var properties = {};\n            // TODO: https://angular-team.atlassian.net/browse/FW-681\n            // Missing implementation here...\n            return properties;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugElement__POST_R3__.prototype, \"attributes\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            // https://angular-team.atlassian.net/browse/FW-719\n            throw notImplemented();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugElement__POST_R3__.prototype, \"classes\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            // https://angular-team.atlassian.net/browse/FW-719\n            throw notImplemented();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugElement__POST_R3__.prototype, \"styles\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            // https://angular-team.atlassian.net/browse/FW-719\n            throw notImplemented();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugElement__POST_R3__.prototype, \"childNodes\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var childNodes = this.nativeNode.childNodes;\n            /** @type {?} */\n            var children = [];\n            for (var i = 0; i < childNodes.length; i++) {\n                /** @type {?} */\n                var element = childNodes[i];\n                children.push(getDebugNode__POST_R3__(element));\n            }\n            return children;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugElement__POST_R3__.prototype, \"children\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var nativeElement = this.nativeElement;\n            if (!nativeElement)\n                return [];\n            /** @type {?} */\n            var childNodes = nativeElement.children;\n            /** @type {?} */\n            var children = [];\n            for (var i = 0; i < childNodes.length; i++) {\n                /** @type {?} */\n                var element = childNodes[i];\n                children.push(getDebugNode__POST_R3__(element));\n            }\n            return children;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    DebugElement__POST_R3__.prototype.query = /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    function (predicate) {\n        /** @type {?} */\n        var results = this.queryAll(predicate);\n        return results[0] || null;\n    };\n    /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    DebugElement__POST_R3__.prototype.queryAll = /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    function (predicate) {\n        /** @type {?} */\n        var matches = [];\n        _queryNodeChildrenR3(this, predicate, matches, true);\n        return matches;\n    };\n    /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    DebugElement__POST_R3__.prototype.queryAllNodes = /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    function (predicate) {\n        /** @type {?} */\n        var matches = [];\n        _queryNodeChildrenR3(this, predicate, matches, false);\n        return matches;\n    };\n    /**\n     * @param {?} eventName\n     * @param {?} eventObj\n     * @return {?}\n     */\n    DebugElement__POST_R3__.prototype.triggerEventHandler = /**\n     * @param {?} eventName\n     * @param {?} eventObj\n     * @return {?}\n     */\n    function (eventName, eventObj) {\n        /** @type {?} */\n        var event = document.createEvent('MouseEvent');\n        event.initEvent(eventName, true, true);\n        (/** @type {?} */ (this.nativeElement)).dispatchEvent(event);\n    };\n    return DebugElement__POST_R3__;\n}(DebugNode__POST_R3__));\n/**\n * This function should not exist because it is megamorphic and only mostly correct.\n *\n * See call site for more info.\n * @param {?} obj\n * @return {?}\n */\nfunction isDirectiveDefHack(obj) {\n    return obj.type !== undefined && obj.template !== undefined && obj.declaredInputs !== undefined;\n}\n/**\n * @param {?} parentNode\n * @param {?} predicate\n * @param {?} matches\n * @param {?} elementsOnly\n * @return {?}\n */\nfunction _queryNodeChildrenR3(parentNode, predicate, matches, elementsOnly) {\n    if (parentNode instanceof DebugElement__POST_R3__) {\n        parentNode.childNodes.forEach(function (node) {\n            if (predicate(node)) {\n                matches.push(node);\n            }\n            if (node instanceof DebugElement__POST_R3__) {\n                if (elementsOnly ? node.nativeElement : true) {\n                    _queryNodeChildrenR3(node, predicate, matches, elementsOnly);\n                }\n            }\n        });\n    }\n}\n/** @type {?} */\nvar _nativeNodeToDebugNode = new Map();\n/**\n * @param {?} nativeNode\n * @return {?}\n */\nfunction getDebugNode__PRE_R3__(nativeNode) {\n    return _nativeNodeToDebugNode.get(nativeNode) || null;\n}\n/**\n * @param {?} nativeNode\n * @return {?}\n */\nexport function getDebugNode__POST_R3__(nativeNode) {\n    if (nativeNode instanceof Node) {\n        return nativeNode.nodeType == Node.ELEMENT_NODE ?\n            new DebugElement__POST_R3__(/** @type {?} */ (nativeNode)) :\n            new DebugNode__POST_R3__(nativeNode);\n    }\n    return null;\n}\n/** *\n * \\@publicApi\n  @type {?} */\nexport var getDebugNode = getDebugNode__PRE_R3__;\n/**\n * @return {?}\n */\nexport function getAllDebugNodes() {\n    return Array.from(_nativeNodeToDebugNode.values());\n}\n/**\n * @param {?} node\n * @return {?}\n */\nexport function indexDebugNode(node) {\n    _nativeNodeToDebugNode.set(node.nativeNode, node);\n}\n/**\n * @param {?} node\n * @return {?}\n */\nexport function removeDebugNodeFromIndex(node) {\n    _nativeNodeToDebugNode.delete(node.nativeNode);\n}\n/**\n * A boolean-valued function over a value, possibly including context information\n * regarding that value's position in an array.\n *\n * \\@publicApi\n * @record\n * @template T\n */\nexport function Predicate() { }\n/** *\n * \\@publicApi\n  @type {?} */\nexport var DebugNode = /** @type {?} */ (DebugNode__PRE_R3__);\n/** *\n * \\@publicApi\n  @type {?} */\nexport var DebugElement = /** @type {?} */ (DebugElement__PRE_R3__);\n//# sourceMappingURL=debug_node.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { looseIdentical, stringify } from '../../util';\nimport { isListLikeIterable, iterateListLike } from '../change_detection_util';\nvar DefaultIterableDifferFactory = /** @class */ (function () {\n    function DefaultIterableDifferFactory() {\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    DefaultIterableDifferFactory.prototype.supports = /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function (obj) { return isListLikeIterable(obj); };\n    /**\n     * @template V\n     * @param {?=} trackByFn\n     * @return {?}\n     */\n    DefaultIterableDifferFactory.prototype.create = /**\n     * @template V\n     * @param {?=} trackByFn\n     * @return {?}\n     */\n    function (trackByFn) {\n        return new DefaultIterableDiffer(trackByFn);\n    };\n    return DefaultIterableDifferFactory;\n}());\nexport { DefaultIterableDifferFactory };\n/** @type {?} */\nvar trackByIdentity = function (index, item) { return item; };\nvar Éµ0 = trackByIdentity;\n/**\n * @deprecated v4.0.0 - Should not be part of public API.\n * \\@publicApi\n * @template V\n */\nvar /**\n * @deprecated v4.0.0 - Should not be part of public API.\n * \\@publicApi\n * @template V\n */\nDefaultIterableDiffer = /** @class */ (function () {\n    function DefaultIterableDiffer(trackByFn) {\n        this.length = 0;\n        this._linkedRecords = null;\n        this._unlinkedRecords = null;\n        this._previousItHead = null;\n        this._itHead = null;\n        this._itTail = null;\n        this._additionsHead = null;\n        this._additionsTail = null;\n        this._movesHead = null;\n        this._movesTail = null;\n        this._removalsHead = null;\n        this._removalsTail = null;\n        this._identityChangesHead = null;\n        this._identityChangesTail = null;\n        this._trackByFn = trackByFn || trackByIdentity;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.forEachItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var record;\n        for (record = this._itHead; record !== null; record = record._next) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.forEachOperation = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var nextIt = this._itHead;\n        /** @type {?} */\n        var nextRemove = this._removalsHead;\n        /** @type {?} */\n        var addRemoveOffset = 0;\n        /** @type {?} */\n        var moveOffsets = null;\n        while (nextIt || nextRemove) {\n            /** @type {?} */\n            var record = !nextRemove ||\n                nextIt && /** @type {?} */ ((nextIt.currentIndex)) < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ? /** @type {?} */\n                ((nextIt)) :\n                nextRemove;\n            /** @type {?} */\n            var adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);\n            /** @type {?} */\n            var currentIndex = record.currentIndex;\n            // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary\n            if (record === nextRemove) {\n                addRemoveOffset--;\n                nextRemove = nextRemove._nextRemoved;\n            }\n            else {\n                nextIt = /** @type {?} */ ((nextIt))._next;\n                if (record.previousIndex == null) {\n                    addRemoveOffset++;\n                }\n                else {\n                    // INVARIANT:  currentIndex < previousIndex\n                    if (!moveOffsets)\n                        moveOffsets = [];\n                    /** @type {?} */\n                    var localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;\n                    /** @type {?} */\n                    var localCurrentIndex = /** @type {?} */ ((currentIndex)) - addRemoveOffset;\n                    if (localMovePreviousIndex != localCurrentIndex) {\n                        for (var i = 0; i < localMovePreviousIndex; i++) {\n                            /** @type {?} */\n                            var offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);\n                            /** @type {?} */\n                            var index = offset + i;\n                            if (localCurrentIndex <= index && index < localMovePreviousIndex) {\n                                moveOffsets[i] = offset + 1;\n                            }\n                        }\n                        /** @type {?} */\n                        var previousIndex = record.previousIndex;\n                        moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;\n                    }\n                }\n            }\n            if (adjPreviousIndex !== currentIndex) {\n                fn(record, adjPreviousIndex, currentIndex);\n            }\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.forEachPreviousItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var record;\n        for (record = this._previousItHead; record !== null; record = record._nextPrevious) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.forEachAddedItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var record;\n        for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.forEachMovedItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var record;\n        for (record = this._movesHead; record !== null; record = record._nextMoved) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.forEachRemovedItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var record;\n        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.forEachIdentityChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var record;\n        for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} collection\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.diff = /**\n     * @param {?} collection\n     * @return {?}\n     */\n    function (collection) {\n        if (collection == null)\n            collection = [];\n        if (!isListLikeIterable(collection)) {\n            throw new Error(\"Error trying to diff '\" + stringify(collection) + \"'. Only arrays and iterables are allowed\");\n        }\n        if (this.check(collection)) {\n            return this;\n        }\n        else {\n            return null;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.onDestroy = /**\n     * @return {?}\n     */\n    function () { };\n    /**\n     * @param {?} collection\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype.check = /**\n     * @param {?} collection\n     * @return {?}\n     */\n    function (collection) {\n        var _this = this;\n        this._reset();\n        /** @type {?} */\n        var record = this._itHead;\n        /** @type {?} */\n        var mayBeDirty = false;\n        /** @type {?} */\n        var index;\n        /** @type {?} */\n        var item;\n        /** @type {?} */\n        var itemTrackBy;\n        if (Array.isArray(collection)) {\n            (/** @type {?} */ (this)).length = collection.length;\n            for (var index_1 = 0; index_1 < this.length; index_1++) {\n                item = collection[index_1];\n                itemTrackBy = this._trackByFn(index_1, item);\n                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n                    record = this._mismatch(record, item, itemTrackBy, index_1);\n                    mayBeDirty = true;\n                }\n                else {\n                    if (mayBeDirty) {\n                        // TODO(misko): can we limit this to duplicates only?\n                        record = this._verifyReinsertion(record, item, itemTrackBy, index_1);\n                    }\n                    if (!looseIdentical(record.item, item))\n                        this._addIdentityChange(record, item);\n                }\n                record = record._next;\n            }\n        }\n        else {\n            index = 0;\n            iterateListLike(collection, function (item) {\n                itemTrackBy = _this._trackByFn(index, item);\n                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n                    record = _this._mismatch(record, item, itemTrackBy, index);\n                    mayBeDirty = true;\n                }\n                else {\n                    if (mayBeDirty) {\n                        // TODO(misko): can we limit this to duplicates only?\n                        record = _this._verifyReinsertion(record, item, itemTrackBy, index);\n                    }\n                    if (!looseIdentical(record.item, item))\n                        _this._addIdentityChange(record, item);\n                }\n                record = record._next;\n                index++;\n            });\n            (/** @type {?} */ (this)).length = index;\n        }\n        this._truncate(record);\n        (/** @type {?} */ (this)).collection = collection;\n        return this.isDirty;\n    };\n    Object.defineProperty(DefaultIterableDiffer.prototype, \"isDirty\", {\n        /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity\n         * changes.\n         */\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._additionsHead !== null || this._movesHead !== null ||\n                this._removalsHead !== null || this._identityChangesHead !== null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Reset the state of the change objects to show no changes. This means set previousKey to\n     * currentKey, and clear all of the queues (additions, moves, removals).\n     * Set the previousIndexes of moved and added items to their currentIndexes\n     * Reset the list of additions, moves and removals\n     *\n     * @internal\n     */\n    /**\n     * Reset the state of the change objects to show no changes. This means set previousKey to\n     * currentKey, and clear all of the queues (additions, moves, removals).\n     * Set the previousIndexes of moved and added items to their currentIndexes\n     * Reset the list of additions, moves and removals\n     *\n     * \\@internal\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._reset = /**\n     * Reset the state of the change objects to show no changes. This means set previousKey to\n     * currentKey, and clear all of the queues (additions, moves, removals).\n     * Set the previousIndexes of moved and added items to their currentIndexes\n     * Reset the list of additions, moves and removals\n     *\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        if (this.isDirty) {\n            /** @type {?} */\n            var record = void 0;\n            /** @type {?} */\n            var nextRecord = void 0;\n            for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {\n                record._nextPrevious = record._next;\n            }\n            for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n                record.previousIndex = record.currentIndex;\n            }\n            this._additionsHead = this._additionsTail = null;\n            for (record = this._movesHead; record !== null; record = nextRecord) {\n                record.previousIndex = record.currentIndex;\n                nextRecord = record._nextMoved;\n            }\n            this._movesHead = this._movesTail = null;\n            this._removalsHead = this._removalsTail = null;\n            this._identityChangesHead = this._identityChangesTail = null;\n            // TODO(vicb): when assert gets supported\n            // assert(!this.isDirty);\n        }\n    };\n    /**\n     * This is the core function which handles differences between collections.\n     *\n     * - `record` is the record which we saw at this position last time. If null then it is a new\n     *   item.\n     * - `item` is the current item in the collection\n     * - `index` is the position of the item in the collection\n     *\n     * @internal\n     */\n    /**\n     * This is the core function which handles differences between collections.\n     *\n     * - `record` is the record which we saw at this position last time. If null then it is a new\n     *   item.\n     * - `item` is the current item in the collection\n     * - `index` is the position of the item in the collection\n     *\n     * \\@internal\n     * @param {?} record\n     * @param {?} item\n     * @param {?} itemTrackBy\n     * @param {?} index\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._mismatch = /**\n     * This is the core function which handles differences between collections.\n     *\n     * - `record` is the record which we saw at this position last time. If null then it is a new\n     *   item.\n     * - `item` is the current item in the collection\n     * - `index` is the position of the item in the collection\n     *\n     * \\@internal\n     * @param {?} record\n     * @param {?} item\n     * @param {?} itemTrackBy\n     * @param {?} index\n     * @return {?}\n     */\n    function (record, item, itemTrackBy, index) {\n        /** @type {?} */\n        var previousRecord;\n        if (record === null) {\n            previousRecord = this._itTail;\n        }\n        else {\n            previousRecord = record._prev;\n            // Remove the record from the collection since we know it does not match the item.\n            this._remove(record);\n        }\n        // Attempt to see if we have seen the item before.\n        record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);\n        if (record !== null) {\n            // We have seen this before, we need to move it forward in the collection.\n            // But first we need to check if identity changed, so we can update in view if necessary\n            if (!looseIdentical(record.item, item))\n                this._addIdentityChange(record, item);\n            this._moveAfter(record, previousRecord, index);\n        }\n        else {\n            // Never seen it, check evicted list.\n            record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n            if (record !== null) {\n                // It is an item which we have evicted earlier: reinsert it back into the list.\n                // But first we need to check if identity changed, so we can update in view if necessary\n                if (!looseIdentical(record.item, item))\n                    this._addIdentityChange(record, item);\n                this._reinsertAfter(record, previousRecord, index);\n            }\n            else {\n                // It is a new item: add it.\n                record =\n                    this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);\n            }\n        }\n        return record;\n    };\n    /**\n     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n     *\n     * Use case: `[a, a]` => `[b, a, a]`\n     *\n     * If we did not have this check then the insertion of `b` would:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) leave `a` at index `1` as is. <-- this is wrong!\n     *   3) reinsert `a` at index 2. <-- this is wrong!\n     *\n     * The correct behavior is:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) reinsert `a` at index 1.\n     *   3) move `a` at from `1` to `2`.\n     *\n     *\n     * Double check that we have not evicted a duplicate item. We need to check if the item type may\n     * have already been removed:\n     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n     * at the end.\n     *\n     * @internal\n     */\n    /**\n     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n     *\n     * Use case: `[a, a]` => `[b, a, a]`\n     *\n     * If we did not have this check then the insertion of `b` would:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) leave `a` at index `1` as is. <-- this is wrong!\n     *   3) reinsert `a` at index 2. <-- this is wrong!\n     *\n     * The correct behavior is:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) reinsert `a` at index 1.\n     *   3) move `a` at from `1` to `2`.\n     *\n     *\n     * Double check that we have not evicted a duplicate item. We need to check if the item type may\n     * have already been removed:\n     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n     * at the end.\n     *\n     * \\@internal\n     * @param {?} record\n     * @param {?} item\n     * @param {?} itemTrackBy\n     * @param {?} index\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._verifyReinsertion = /**\n     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n     *\n     * Use case: `[a, a]` => `[b, a, a]`\n     *\n     * If we did not have this check then the insertion of `b` would:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) leave `a` at index `1` as is. <-- this is wrong!\n     *   3) reinsert `a` at index 2. <-- this is wrong!\n     *\n     * The correct behavior is:\n     *   1) evict first `a`\n     *   2) insert `b` at `0` index.\n     *   3) reinsert `a` at index 1.\n     *   3) move `a` at from `1` to `2`.\n     *\n     *\n     * Double check that we have not evicted a duplicate item. We need to check if the item type may\n     * have already been removed:\n     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n     * at the end.\n     *\n     * \\@internal\n     * @param {?} record\n     * @param {?} item\n     * @param {?} itemTrackBy\n     * @param {?} index\n     * @return {?}\n     */\n    function (record, item, itemTrackBy, index) {\n        /** @type {?} */\n        var reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n        if (reinsertRecord !== null) {\n            record = this._reinsertAfter(reinsertRecord, /** @type {?} */ ((record._prev)), index);\n        }\n        else if (record.currentIndex != index) {\n            record.currentIndex = index;\n            this._addToMoves(record, index);\n        }\n        return record;\n    };\n    /**\n     * Get rid of any excess {@link IterableChangeRecord_}s from the previous collection\n     *\n     * - `record` The first excess {@link IterableChangeRecord_}.\n     *\n     * @internal\n     */\n    /**\n     * Get rid of any excess {\\@link IterableChangeRecord_}s from the previous collection\n     *\n     * - `record` The first excess {\\@link IterableChangeRecord_}.\n     *\n     * \\@internal\n     * @param {?} record\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._truncate = /**\n     * Get rid of any excess {\\@link IterableChangeRecord_}s from the previous collection\n     *\n     * - `record` The first excess {\\@link IterableChangeRecord_}.\n     *\n     * \\@internal\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        // Anything after that needs to be removed;\n        while (record !== null) {\n            /** @type {?} */\n            var nextRecord = record._next;\n            this._addToRemovals(this._unlink(record));\n            record = nextRecord;\n        }\n        if (this._unlinkedRecords !== null) {\n            this._unlinkedRecords.clear();\n        }\n        if (this._additionsTail !== null) {\n            this._additionsTail._nextAdded = null;\n        }\n        if (this._movesTail !== null) {\n            this._movesTail._nextMoved = null;\n        }\n        if (this._itTail !== null) {\n            this._itTail._next = null;\n        }\n        if (this._removalsTail !== null) {\n            this._removalsTail._nextRemoved = null;\n        }\n        if (this._identityChangesTail !== null) {\n            this._identityChangesTail._nextIdentityChange = null;\n        }\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._reinsertAfter = /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    function (record, prevRecord, index) {\n        if (this._unlinkedRecords !== null) {\n            this._unlinkedRecords.remove(record);\n        }\n        /** @type {?} */\n        var prev = record._prevRemoved;\n        /** @type {?} */\n        var next = record._nextRemoved;\n        if (prev === null) {\n            this._removalsHead = next;\n        }\n        else {\n            prev._nextRemoved = next;\n        }\n        if (next === null) {\n            this._removalsTail = prev;\n        }\n        else {\n            next._prevRemoved = prev;\n        }\n        this._insertAfter(record, prevRecord, index);\n        this._addToMoves(record, index);\n        return record;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._moveAfter = /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    function (record, prevRecord, index) {\n        this._unlink(record);\n        this._insertAfter(record, prevRecord, index);\n        this._addToMoves(record, index);\n        return record;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._addAfter = /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    function (record, prevRecord, index) {\n        this._insertAfter(record, prevRecord, index);\n        if (this._additionsTail === null) {\n            // TODO(vicb):\n            // assert(this._additionsHead === null);\n            this._additionsTail = this._additionsHead = record;\n        }\n        else {\n            // TODO(vicb):\n            // assert(_additionsTail._nextAdded === null);\n            // assert(record._nextAdded === null);\n            this._additionsTail = this._additionsTail._nextAdded = record;\n        }\n        return record;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._insertAfter = /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} prevRecord\n     * @param {?} index\n     * @return {?}\n     */\n    function (record, prevRecord, index) {\n        /** @type {?} */\n        var next = prevRecord === null ? this._itHead : prevRecord._next;\n        // TODO(vicb):\n        // assert(next != record);\n        // assert(prevRecord != record);\n        record._next = next;\n        record._prev = prevRecord;\n        if (next === null) {\n            this._itTail = record;\n        }\n        else {\n            next._prev = record;\n        }\n        if (prevRecord === null) {\n            this._itHead = record;\n        }\n        else {\n            prevRecord._next = record;\n        }\n        if (this._linkedRecords === null) {\n            this._linkedRecords = new _DuplicateMap();\n        }\n        this._linkedRecords.put(record);\n        record.currentIndex = index;\n        return record;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} record\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._remove = /**\n     * \\@internal\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        return this._addToRemovals(this._unlink(record));\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} record\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._unlink = /**\n     * \\@internal\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        if (this._linkedRecords !== null) {\n            this._linkedRecords.remove(record);\n        }\n        /** @type {?} */\n        var prev = record._prev;\n        /** @type {?} */\n        var next = record._next;\n        // TODO(vicb):\n        // assert((record._prev = null) === null);\n        // assert((record._next = null) === null);\n        if (prev === null) {\n            this._itHead = next;\n        }\n        else {\n            prev._next = next;\n        }\n        if (next === null) {\n            this._itTail = prev;\n        }\n        else {\n            next._prev = prev;\n        }\n        return record;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} toIndex\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._addToMoves = /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} toIndex\n     * @return {?}\n     */\n    function (record, toIndex) {\n        // TODO(vicb):\n        // assert(record._nextMoved === null);\n        if (record.previousIndex === toIndex) {\n            return record;\n        }\n        if (this._movesTail === null) {\n            // TODO(vicb):\n            // assert(_movesHead === null);\n            this._movesTail = this._movesHead = record;\n        }\n        else {\n            // TODO(vicb):\n            // assert(_movesTail._nextMoved === null);\n            this._movesTail = this._movesTail._nextMoved = record;\n        }\n        return record;\n    };\n    /**\n     * @param {?} record\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._addToRemovals = /**\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        if (this._unlinkedRecords === null) {\n            this._unlinkedRecords = new _DuplicateMap();\n        }\n        this._unlinkedRecords.put(record);\n        record.currentIndex = null;\n        record._nextRemoved = null;\n        if (this._removalsTail === null) {\n            // TODO(vicb):\n            // assert(_removalsHead === null);\n            this._removalsTail = this._removalsHead = record;\n            record._prevRemoved = null;\n        }\n        else {\n            // TODO(vicb):\n            // assert(_removalsTail._nextRemoved === null);\n            // assert(record._nextRemoved === null);\n            record._prevRemoved = this._removalsTail;\n            this._removalsTail = this._removalsTail._nextRemoved = record;\n        }\n        return record;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} item\n     * @return {?}\n     */\n    DefaultIterableDiffer.prototype._addIdentityChange = /**\n     * \\@internal\n     * @param {?} record\n     * @param {?} item\n     * @return {?}\n     */\n    function (record, item) {\n        record.item = item;\n        if (this._identityChangesTail === null) {\n            this._identityChangesTail = this._identityChangesHead = record;\n        }\n        else {\n            this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;\n        }\n        return record;\n    };\n    return DefaultIterableDiffer;\n}());\n/**\n * @deprecated v4.0.0 - Should not be part of public API.\n * \\@publicApi\n * @template V\n */\nexport { DefaultIterableDiffer };\nif (false) {\n    /** @type {?} */\n    DefaultIterableDiffer.prototype.length;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype.collection;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._linkedRecords;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._unlinkedRecords;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._previousItHead;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._itHead;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._itTail;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._additionsHead;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._additionsTail;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._movesHead;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._movesTail;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._removalsHead;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._removalsTail;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._identityChangesHead;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._identityChangesTail;\n    /** @type {?} */\n    DefaultIterableDiffer.prototype._trackByFn;\n}\n/**\n * @template V\n */\nvar /**\n * @template V\n */\nIterableChangeRecord_ = /** @class */ (function () {\n    function IterableChangeRecord_(item, trackById) {\n        this.item = item;\n        this.trackById = trackById;\n        this.currentIndex = null;\n        this.previousIndex = null;\n        /**\n         * \\@internal\n         */\n        this._nextPrevious = null;\n        /**\n         * \\@internal\n         */\n        this._prev = null;\n        /**\n         * \\@internal\n         */\n        this._next = null;\n        /**\n         * \\@internal\n         */\n        this._prevDup = null;\n        /**\n         * \\@internal\n         */\n        this._nextDup = null;\n        /**\n         * \\@internal\n         */\n        this._prevRemoved = null;\n        /**\n         * \\@internal\n         */\n        this._nextRemoved = null;\n        /**\n         * \\@internal\n         */\n        this._nextAdded = null;\n        /**\n         * \\@internal\n         */\n        this._nextMoved = null;\n        /**\n         * \\@internal\n         */\n        this._nextIdentityChange = null;\n    }\n    return IterableChangeRecord_;\n}());\n/**\n * @template V\n */\nexport { IterableChangeRecord_ };\nif (false) {\n    /** @type {?} */\n    IterableChangeRecord_.prototype.currentIndex;\n    /** @type {?} */\n    IterableChangeRecord_.prototype.previousIndex;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._nextPrevious;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._prev;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._next;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._prevDup;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._nextDup;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._prevRemoved;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._nextRemoved;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._nextAdded;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._nextMoved;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    IterableChangeRecord_.prototype._nextIdentityChange;\n    /** @type {?} */\n    IterableChangeRecord_.prototype.item;\n    /** @type {?} */\n    IterableChangeRecord_.prototype.trackById;\n}\n/**\n * @template V\n */\nvar /**\n * @template V\n */\n_DuplicateItemRecordList = /** @class */ (function () {\n    function _DuplicateItemRecordList() {\n        /**\n         * \\@internal\n         */\n        this._head = null;\n        /**\n         * \\@internal\n         */\n        this._tail = null;\n    }\n    /**\n     * Append the record to the list of duplicates.\n     *\n     * Note: by design all records in the list of duplicates hold the same value in record.item.\n     */\n    /**\n     * Append the record to the list of duplicates.\n     *\n     * Note: by design all records in the list of duplicates hold the same value in record.item.\n     * @param {?} record\n     * @return {?}\n     */\n    _DuplicateItemRecordList.prototype.add = /**\n     * Append the record to the list of duplicates.\n     *\n     * Note: by design all records in the list of duplicates hold the same value in record.item.\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        if (this._head === null) {\n            this._head = this._tail = record;\n            record._nextDup = null;\n            record._prevDup = null;\n        }\n        else {\n            /** @type {?} */ ((\n            // TODO(vicb):\n            // assert(record.item ==  _head.item ||\n            //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);\n            this._tail))._nextDup = record;\n            record._prevDup = this._tail;\n            record._nextDup = null;\n            this._tail = record;\n        }\n    };\n    // Returns a IterableChangeRecord_ having IterableChangeRecord_.trackById == trackById and\n    // IterableChangeRecord_.currentIndex >= atOrAfterIndex\n    /**\n     * @param {?} trackById\n     * @param {?} atOrAfterIndex\n     * @return {?}\n     */\n    _DuplicateItemRecordList.prototype.get = /**\n     * @param {?} trackById\n     * @param {?} atOrAfterIndex\n     * @return {?}\n     */\n    function (trackById, atOrAfterIndex) {\n        /** @type {?} */\n        var record;\n        for (record = this._head; record !== null; record = record._nextDup) {\n            if ((atOrAfterIndex === null || atOrAfterIndex <= /** @type {?} */ ((record.currentIndex))) &&\n                looseIdentical(record.trackById, trackById)) {\n                return record;\n            }\n        }\n        return null;\n    };\n    /**\n     * Remove one {@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * Returns whether the list of duplicates is empty.\n     */\n    /**\n     * Remove one {\\@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * Returns whether the list of duplicates is empty.\n     * @param {?} record\n     * @return {?}\n     */\n    _DuplicateItemRecordList.prototype.remove = /**\n     * Remove one {\\@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * Returns whether the list of duplicates is empty.\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        /** @type {?} */\n        var prev = record._prevDup;\n        /** @type {?} */\n        var next = record._nextDup;\n        if (prev === null) {\n            this._head = next;\n        }\n        else {\n            prev._nextDup = next;\n        }\n        if (next === null) {\n            this._tail = prev;\n        }\n        else {\n            next._prevDup = prev;\n        }\n        return this._head === null;\n    };\n    return _DuplicateItemRecordList;\n}());\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    _DuplicateItemRecordList.prototype._head;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    _DuplicateItemRecordList.prototype._tail;\n}\n/**\n * @template V\n */\nvar /**\n * @template V\n */\n_DuplicateMap = /** @class */ (function () {\n    function _DuplicateMap() {\n        this.map = new Map();\n    }\n    /**\n     * @param {?} record\n     * @return {?}\n     */\n    _DuplicateMap.prototype.put = /**\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        /** @type {?} */\n        var key = record.trackById;\n        /** @type {?} */\n        var duplicates = this.map.get(key);\n        if (!duplicates) {\n            duplicates = new _DuplicateItemRecordList();\n            this.map.set(key, duplicates);\n        }\n        duplicates.add(record);\n    };\n    /**\n     * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\n     * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\n     *\n     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n     * have any more `a`s needs to return the second `a`.\n     */\n    /**\n     * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\n     * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\n     *\n     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n     * have any more `a`s needs to return the second `a`.\n     * @param {?} trackById\n     * @param {?} atOrAfterIndex\n     * @return {?}\n     */\n    _DuplicateMap.prototype.get = /**\n     * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\n     * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\n     *\n     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n     * have any more `a`s needs to return the second `a`.\n     * @param {?} trackById\n     * @param {?} atOrAfterIndex\n     * @return {?}\n     */\n    function (trackById, atOrAfterIndex) {\n        /** @type {?} */\n        var key = trackById;\n        /** @type {?} */\n        var recordList = this.map.get(key);\n        return recordList ? recordList.get(trackById, atOrAfterIndex) : null;\n    };\n    /**\n     * Removes a {@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * The list of duplicates also is removed from the map if it gets empty.\n     */\n    /**\n     * Removes a {\\@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * The list of duplicates also is removed from the map if it gets empty.\n     * @param {?} record\n     * @return {?}\n     */\n    _DuplicateMap.prototype.remove = /**\n     * Removes a {\\@link IterableChangeRecord_} from the list of duplicates.\n     *\n     * The list of duplicates also is removed from the map if it gets empty.\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        /** @type {?} */\n        var key = record.trackById;\n        /** @type {?} */\n        var recordList = /** @type {?} */ ((this.map.get(key)));\n        // Remove the list of duplicates when it gets empty\n        if (recordList.remove(record)) {\n            this.map.delete(key);\n        }\n        return record;\n    };\n    Object.defineProperty(_DuplicateMap.prototype, \"isEmpty\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.map.size === 0; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    _DuplicateMap.prototype.clear = /**\n     * @return {?}\n     */\n    function () { this.map.clear(); };\n    return _DuplicateMap;\n}());\nif (false) {\n    /** @type {?} */\n    _DuplicateMap.prototype.map;\n}\n/**\n * @param {?} item\n * @param {?} addRemoveOffset\n * @param {?} moveOffsets\n * @return {?}\n */\nfunction getPreviousIndex(item, addRemoveOffset, moveOffsets) {\n    /** @type {?} */\n    var previousIndex = item.previousIndex;\n    if (previousIndex === null)\n        return previousIndex;\n    /** @type {?} */\n    var moveOffset = 0;\n    if (moveOffsets && previousIndex < moveOffsets.length) {\n        moveOffset = moveOffsets[previousIndex];\n    }\n    return previousIndex + addRemoveOffset + moveOffset;\n}\nexport { Éµ0 };\n//# sourceMappingURL=default_iterable_differ.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { looseIdentical, stringify } from '../../util';\nimport { isJsObject } from '../change_detection_util';\n/**\n * @template K, V\n */\nvar /**\n * @template K, V\n */\nDefaultKeyValueDifferFactory = /** @class */ (function () {\n    function DefaultKeyValueDifferFactory() {\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    DefaultKeyValueDifferFactory.prototype.supports = /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function (obj) { return obj instanceof Map || isJsObject(obj); };\n    /**\n     * @template K, V\n     * @return {?}\n     */\n    DefaultKeyValueDifferFactory.prototype.create = /**\n     * @template K, V\n     * @return {?}\n     */\n    function () { return new DefaultKeyValueDiffer(); };\n    return DefaultKeyValueDifferFactory;\n}());\n/**\n * @template K, V\n */\nexport { DefaultKeyValueDifferFactory };\n/**\n * @template K, V\n */\nvar /**\n * @template K, V\n */\nDefaultKeyValueDiffer = /** @class */ (function () {\n    function DefaultKeyValueDiffer() {\n        this._records = new Map();\n        this._mapHead = null;\n        this._appendAfter = null;\n        this._previousMapHead = null;\n        this._changesHead = null;\n        this._changesTail = null;\n        this._additionsHead = null;\n        this._additionsTail = null;\n        this._removalsHead = null;\n        this._removalsTail = null;\n    }\n    Object.defineProperty(DefaultKeyValueDiffer.prototype, \"isDirty\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._additionsHead !== null || this._changesHead !== null ||\n                this._removalsHead !== null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype.forEachItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var record;\n        for (record = this._mapHead; record !== null; record = record._next) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype.forEachPreviousItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var record;\n        for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype.forEachChangedItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var record;\n        for (record = this._changesHead; record !== null; record = record._nextChanged) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype.forEachAddedItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var record;\n        for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype.forEachRemovedItem = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var record;\n        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n            fn(record);\n        }\n    };\n    /**\n     * @param {?=} map\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype.diff = /**\n     * @param {?=} map\n     * @return {?}\n     */\n    function (map) {\n        if (!map) {\n            map = new Map();\n        }\n        else if (!(map instanceof Map || isJsObject(map))) {\n            throw new Error(\"Error trying to diff '\" + stringify(map) + \"'. Only maps and objects are allowed\");\n        }\n        return this.check(map) ? this : null;\n    };\n    /**\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype.onDestroy = /**\n     * @return {?}\n     */\n    function () { };\n    /**\n     * Check the current state of the map vs the previous.\n     * The algorithm is optimised for when the keys do no change.\n     */\n    /**\n     * Check the current state of the map vs the previous.\n     * The algorithm is optimised for when the keys do no change.\n     * @param {?} map\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype.check = /**\n     * Check the current state of the map vs the previous.\n     * The algorithm is optimised for when the keys do no change.\n     * @param {?} map\n     * @return {?}\n     */\n    function (map) {\n        var _this = this;\n        this._reset();\n        /** @type {?} */\n        var insertBefore = this._mapHead;\n        this._appendAfter = null;\n        this._forEach(map, function (value, key) {\n            if (insertBefore && insertBefore.key === key) {\n                _this._maybeAddToChanges(insertBefore, value);\n                _this._appendAfter = insertBefore;\n                insertBefore = insertBefore._next;\n            }\n            else {\n                /** @type {?} */\n                var record = _this._getOrCreateRecordForKey(key, value);\n                insertBefore = _this._insertBeforeOrAppend(insertBefore, record);\n            }\n        });\n        // Items remaining at the end of the list have been deleted\n        if (insertBefore) {\n            if (insertBefore._prev) {\n                insertBefore._prev._next = null;\n            }\n            this._removalsHead = insertBefore;\n            for (var record = insertBefore; record !== null; record = record._nextRemoved) {\n                if (record === this._mapHead) {\n                    this._mapHead = null;\n                }\n                this._records.delete(record.key);\n                record._nextRemoved = record._next;\n                record.previousValue = record.currentValue;\n                record.currentValue = null;\n                record._prev = null;\n                record._next = null;\n            }\n        }\n        // Make sure tails have no next records from previous runs\n        if (this._changesTail)\n            this._changesTail._nextChanged = null;\n        if (this._additionsTail)\n            this._additionsTail._nextAdded = null;\n        return this.isDirty;\n    };\n    /**\n     * Inserts a record before `before` or append at the end of the list when `before` is null.\n     *\n     * Notes:\n     * - This method appends at `this._appendAfter`,\n     * - This method updates `this._appendAfter`,\n     * - The return value is the new value for the insertion pointer.\n     * @param {?} before\n     * @param {?} record\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype._insertBeforeOrAppend = /**\n     * Inserts a record before `before` or append at the end of the list when `before` is null.\n     *\n     * Notes:\n     * - This method appends at `this._appendAfter`,\n     * - This method updates `this._appendAfter`,\n     * - The return value is the new value for the insertion pointer.\n     * @param {?} before\n     * @param {?} record\n     * @return {?}\n     */\n    function (before, record) {\n        if (before) {\n            /** @type {?} */\n            var prev = before._prev;\n            record._next = before;\n            record._prev = prev;\n            before._prev = record;\n            if (prev) {\n                prev._next = record;\n            }\n            if (before === this._mapHead) {\n                this._mapHead = record;\n            }\n            this._appendAfter = before;\n            return before;\n        }\n        if (this._appendAfter) {\n            this._appendAfter._next = record;\n            record._prev = this._appendAfter;\n        }\n        else {\n            this._mapHead = record;\n        }\n        this._appendAfter = record;\n        return null;\n    };\n    /**\n     * @param {?} key\n     * @param {?} value\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype._getOrCreateRecordForKey = /**\n     * @param {?} key\n     * @param {?} value\n     * @return {?}\n     */\n    function (key, value) {\n        if (this._records.has(key)) {\n            /** @type {?} */\n            var record_1 = /** @type {?} */ ((this._records.get(key)));\n            this._maybeAddToChanges(record_1, value);\n            /** @type {?} */\n            var prev = record_1._prev;\n            /** @type {?} */\n            var next = record_1._next;\n            if (prev) {\n                prev._next = next;\n            }\n            if (next) {\n                next._prev = prev;\n            }\n            record_1._next = null;\n            record_1._prev = null;\n            return record_1;\n        }\n        /** @type {?} */\n        var record = new KeyValueChangeRecord_(key);\n        this._records.set(key, record);\n        record.currentValue = value;\n        this._addToAdditions(record);\n        return record;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype._reset = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        if (this.isDirty) {\n            /** @type {?} */\n            var record = void 0;\n            // let `_previousMapHead` contain the state of the map before the changes\n            this._previousMapHead = this._mapHead;\n            for (record = this._previousMapHead; record !== null; record = record._next) {\n                record._nextPrevious = record._next;\n            }\n            // Update `record.previousValue` with the value of the item before the changes\n            // We need to update all changed items (that's those which have been added and changed)\n            for (record = this._changesHead; record !== null; record = record._nextChanged) {\n                record.previousValue = record.currentValue;\n            }\n            for (record = this._additionsHead; record != null; record = record._nextAdded) {\n                record.previousValue = record.currentValue;\n            }\n            this._changesHead = this._changesTail = null;\n            this._additionsHead = this._additionsTail = null;\n            this._removalsHead = null;\n        }\n    };\n    /**\n     * @param {?} record\n     * @param {?} newValue\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype._maybeAddToChanges = /**\n     * @param {?} record\n     * @param {?} newValue\n     * @return {?}\n     */\n    function (record, newValue) {\n        if (!looseIdentical(newValue, record.currentValue)) {\n            record.previousValue = record.currentValue;\n            record.currentValue = newValue;\n            this._addToChanges(record);\n        }\n    };\n    /**\n     * @param {?} record\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype._addToAdditions = /**\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        if (this._additionsHead === null) {\n            this._additionsHead = this._additionsTail = record;\n        }\n        else {\n            /** @type {?} */ ((this._additionsTail))._nextAdded = record;\n            this._additionsTail = record;\n        }\n    };\n    /**\n     * @param {?} record\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype._addToChanges = /**\n     * @param {?} record\n     * @return {?}\n     */\n    function (record) {\n        if (this._changesHead === null) {\n            this._changesHead = this._changesTail = record;\n        }\n        else {\n            /** @type {?} */ ((this._changesTail))._nextChanged = record;\n            this._changesTail = record;\n        }\n    };\n    /**\n     * \\@internal\n     * @template K, V\n     * @param {?} obj\n     * @param {?} fn\n     * @return {?}\n     */\n    DefaultKeyValueDiffer.prototype._forEach = /**\n     * \\@internal\n     * @template K, V\n     * @param {?} obj\n     * @param {?} fn\n     * @return {?}\n     */\n    function (obj, fn) {\n        if (obj instanceof Map) {\n            obj.forEach(fn);\n        }\n        else {\n            Object.keys(obj).forEach(function (k) { return fn(obj[k], k); });\n        }\n    };\n    return DefaultKeyValueDiffer;\n}());\n/**\n * @template K, V\n */\nexport { DefaultKeyValueDiffer };\nif (false) {\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._records;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._mapHead;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._appendAfter;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._previousMapHead;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._changesHead;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._changesTail;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._additionsHead;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._additionsTail;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._removalsHead;\n    /** @type {?} */\n    DefaultKeyValueDiffer.prototype._removalsTail;\n}\n/**\n * @template K, V\n */\nvar /**\n * @template K, V\n */\nKeyValueChangeRecord_ = /** @class */ (function () {\n    function KeyValueChangeRecord_(key) {\n        this.key = key;\n        this.previousValue = null;\n        this.currentValue = null;\n        /**\n         * \\@internal\n         */\n        this._nextPrevious = null;\n        /**\n         * \\@internal\n         */\n        this._next = null;\n        /**\n         * \\@internal\n         */\n        this._prev = null;\n        /**\n         * \\@internal\n         */\n        this._nextAdded = null;\n        /**\n         * \\@internal\n         */\n        this._nextRemoved = null;\n        /**\n         * \\@internal\n         */\n        this._nextChanged = null;\n    }\n    return KeyValueChangeRecord_;\n}());\nif (false) {\n    /** @type {?} */\n    KeyValueChangeRecord_.prototype.previousValue;\n    /** @type {?} */\n    KeyValueChangeRecord_.prototype.currentValue;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    KeyValueChangeRecord_.prototype._nextPrevious;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    KeyValueChangeRecord_.prototype._next;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    KeyValueChangeRecord_.prototype._prev;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    KeyValueChangeRecord_.prototype._nextAdded;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    KeyValueChangeRecord_.prototype._nextRemoved;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    KeyValueChangeRecord_.prototype._nextChanged;\n    /** @type {?} */\n    KeyValueChangeRecord_.prototype.key;\n}\n//# sourceMappingURL=default_keyvalue_differ.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { defineInjectable } from '../../di/defs';\nimport { Optional, SkipSelf } from '../../di/metadata';\nimport { DefaultIterableDifferFactory } from '../differs/default_iterable_differ';\n/** @typedef {?} */\nvar NgIterable;\nexport { NgIterable };\n/**\n * A strategy for tracking changes over time to an iterable. Used by {\\@link NgForOf} to\n * respond to changes in an iterable by effecting equivalent changes in the DOM.\n *\n * \\@publicApi\n * @record\n * @template V\n */\nexport function IterableDiffer() { }\n/**\n * Compute a difference between the previous state and the new `object` state.\n *\n * \\@param object containing the new value.\n * \\@return an object describing the difference. The return value is only valid until the next\n * `diff()` invocation.\n * @type {?}\n */\nIterableDiffer.prototype.diff;\n/**\n * An object describing the changes in the `Iterable` collection since last time\n * `IterableDiffer#diff()` was invoked.\n *\n * \\@publicApi\n * @record\n * @template V\n */\nexport function IterableChanges() { }\n/**\n * Iterate over all changes. `IterableChangeRecord` will contain information about changes\n * to each item.\n * @type {?}\n */\nIterableChanges.prototype.forEachItem;\n/**\n * Iterate over a set of operations which when applied to the original `Iterable` will produce the\n * new `Iterable`.\n *\n * NOTE: These are not necessarily the actual operations which were applied to the original\n * `Iterable`, rather these are a set of computed operations which may not be the same as the\n * ones applied.\n *\n * \\@param record A change which needs to be applied\n * \\@param previousIndex The `IterableChangeRecord#previousIndex` of the `record` refers to the\n *        original `Iterable` location, where as `previousIndex` refers to the transient location\n *        of the item, after applying the operations up to this point.\n * \\@param currentIndex The `IterableChangeRecord#currentIndex` of the `record` refers to the\n *        original `Iterable` location, where as `currentIndex` refers to the transient location\n *        of the item, after applying the operations up to this point.\n * @type {?}\n */\nIterableChanges.prototype.forEachOperation;\n/**\n * Iterate over changes in the order of original `Iterable` showing where the original items\n * have moved.\n * @type {?}\n */\nIterableChanges.prototype.forEachPreviousItem;\n/**\n * Iterate over all added items.\n * @type {?}\n */\nIterableChanges.prototype.forEachAddedItem;\n/**\n * Iterate over all moved items.\n * @type {?}\n */\nIterableChanges.prototype.forEachMovedItem;\n/**\n * Iterate over all removed items.\n * @type {?}\n */\nIterableChanges.prototype.forEachRemovedItem;\n/**\n * Iterate over all items which had their identity (as computed by the `TrackByFunction`)\n * changed.\n * @type {?}\n */\nIterableChanges.prototype.forEachIdentityChange;\n/**\n * Record representing the item change information.\n *\n * \\@publicApi\n * @record\n * @template V\n */\nexport function IterableChangeRecord() { }\n/**\n * Current index of the item in `Iterable` or null if removed.\n * @type {?}\n */\nIterableChangeRecord.prototype.currentIndex;\n/**\n * Previous index of the item in `Iterable` or null if added.\n * @type {?}\n */\nIterableChangeRecord.prototype.previousIndex;\n/**\n * The item.\n * @type {?}\n */\nIterableChangeRecord.prototype.item;\n/**\n * Track by identity as computed by the `TrackByFunction`.\n * @type {?}\n */\nIterableChangeRecord.prototype.trackById;\n/**\n * @deprecated v4.0.0 - Use IterableChangeRecord instead.\n * \\@publicApi\n * @record\n * @template V\n */\nexport function CollectionChangeRecord() { }\n/**\n * An optional function passed into {\\@link NgForOf} that defines how to track\n * items in an iterable (e.g. fby index or id)\n *\n * \\@publicApi\n * @record\n * @template T\n */\nexport function TrackByFunction() { }\n/**\n * Provides a factory for {\\@link IterableDiffer}.\n *\n * \\@publicApi\n * @record\n */\nexport function IterableDifferFactory() { }\n/** @type {?} */\nIterableDifferFactory.prototype.supports;\n/** @type {?} */\nIterableDifferFactory.prototype.create;\n/**\n * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.\n *\n * \\@publicApi\n */\nvar IterableDiffers = /** @class */ (function () {\n    function IterableDiffers(factories) {\n        this.factories = factories;\n    }\n    /**\n     * @param {?} factories\n     * @param {?=} parent\n     * @return {?}\n     */\n    IterableDiffers.create = /**\n     * @param {?} factories\n     * @param {?=} parent\n     * @return {?}\n     */\n    function (factories, parent) {\n        if (parent != null) {\n            /** @type {?} */\n            var copied = parent.factories.slice();\n            factories = factories.concat(copied);\n        }\n        return new IterableDiffers(factories);\n    };\n    /**\n     * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the\n     * inherited {@link IterableDiffers} instance with the provided factories and return a new\n     * {@link IterableDiffers} instance.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {@link IterableDiffer} available.\n     *\n     * ```\n     * @Component({\n     *   viewProviders: [\n     *     IterableDiffers.extend([new ImmutableListDiffer()])\n     *   ]\n     * })\n     * ```\n     */\n    /**\n     * Takes an array of {\\@link IterableDifferFactory} and returns a provider used to extend the\n     * inherited {\\@link IterableDiffers} instance with the provided factories and return a new\n     * {\\@link IterableDiffers} instance.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {\\@link IterableDiffer} available.\n     *\n     * ```\n     * \\@Component({\n     *   viewProviders: [\n     *     IterableDiffers.extend([new ImmutableListDiffer()])\n     *   ]\n     * })\n     * ```\n     * @param {?} factories\n     * @return {?}\n     */\n    IterableDiffers.extend = /**\n     * Takes an array of {\\@link IterableDifferFactory} and returns a provider used to extend the\n     * inherited {\\@link IterableDiffers} instance with the provided factories and return a new\n     * {\\@link IterableDiffers} instance.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {\\@link IterableDiffer} available.\n     *\n     * ```\n     * \\@Component({\n     *   viewProviders: [\n     *     IterableDiffers.extend([new ImmutableListDiffer()])\n     *   ]\n     * })\n     * ```\n     * @param {?} factories\n     * @return {?}\n     */\n    function (factories) {\n        return {\n            provide: IterableDiffers,\n            useFactory: function (parent) {\n                if (!parent) {\n                    // Typically would occur when calling IterableDiffers.extend inside of dependencies passed\n                    // to\n                    // bootstrap(), which would override default pipes instead of extending them.\n                    throw new Error('Cannot extend IterableDiffers without a parent injector');\n                }\n                return IterableDiffers.create(factories, parent);\n            },\n            // Dependency technically isn't optional, but we can provide a better error message this way.\n            deps: [[IterableDiffers, new SkipSelf(), new Optional()]]\n        };\n    };\n    /**\n     * @param {?} iterable\n     * @return {?}\n     */\n    IterableDiffers.prototype.find = /**\n     * @param {?} iterable\n     * @return {?}\n     */\n    function (iterable) {\n        /** @type {?} */\n        var factory = this.factories.find(function (f) { return f.supports(iterable); });\n        if (factory != null) {\n            return factory;\n        }\n        else {\n            throw new Error(\"Cannot find a differ supporting object '\" + iterable + \"' of type '\" + getTypeNameForDebugging(iterable) + \"'\");\n        }\n    };\n    /** @nocollapse */\n    /** @nocollapse */ IterableDiffers.ngInjectableDef = defineInjectable({\n        providedIn: 'root',\n        factory: function () { return new IterableDiffers([new DefaultIterableDifferFactory()]); }\n    });\n    return IterableDiffers;\n}());\nexport { IterableDiffers };\nif (false) {\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    IterableDiffers.ngInjectableDef;\n    /**\n     * @deprecated v4.0.0 - Should be private\n     * @type {?}\n     */\n    IterableDiffers.prototype.factories;\n}\n/**\n * @param {?} type\n * @return {?}\n */\nexport function getTypeNameForDebugging(type) {\n    return type['name'] || typeof type;\n}\n//# sourceMappingURL=iterable_differs.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Optional, SkipSelf, defineInjectable } from '../../di';\nimport { DefaultKeyValueDifferFactory } from './default_keyvalue_differ';\n/**\n * A differ that tracks changes made to an object over time.\n *\n * \\@publicApi\n * @record\n * @template K, V\n */\nexport function KeyValueDiffer() { }\n/**\n * Compute a difference between the previous state and the new `object` state.\n *\n * \\@param object containing the new value.\n * \\@return an object describing the difference. The return value is only valid until the next\n * `diff()` invocation.\n * @type {?}\n */\nKeyValueDiffer.prototype.diff;\n/**\n * Compute a difference between the previous state and the new `object` state.\n *\n * \\@param object containing the new value.\n * \\@return an object describing the difference. The return value is only valid until the next\n * `diff()` invocation.\n * @type {?}\n */\nKeyValueDiffer.prototype.diff;\n/**\n * An object describing the changes in the `Map` or `{[k:string]: string}` since last time\n * `KeyValueDiffer#diff()` was invoked.\n *\n * \\@publicApi\n * @record\n * @template K, V\n */\nexport function KeyValueChanges() { }\n/**\n * Iterate over all changes. `KeyValueChangeRecord` will contain information about changes\n * to each item.\n * @type {?}\n */\nKeyValueChanges.prototype.forEachItem;\n/**\n * Iterate over changes in the order of original Map showing where the original items\n * have moved.\n * @type {?}\n */\nKeyValueChanges.prototype.forEachPreviousItem;\n/**\n * Iterate over all keys for which values have changed.\n * @type {?}\n */\nKeyValueChanges.prototype.forEachChangedItem;\n/**\n * Iterate over all added items.\n * @type {?}\n */\nKeyValueChanges.prototype.forEachAddedItem;\n/**\n * Iterate over all removed items.\n * @type {?}\n */\nKeyValueChanges.prototype.forEachRemovedItem;\n/**\n * Record representing the item change information.\n *\n * \\@publicApi\n * @record\n * @template K, V\n */\nexport function KeyValueChangeRecord() { }\n/**\n * Current key in the Map.\n * @type {?}\n */\nKeyValueChangeRecord.prototype.key;\n/**\n * Current value for the key or `null` if removed.\n * @type {?}\n */\nKeyValueChangeRecord.prototype.currentValue;\n/**\n * Previous value for the key or `null` if added.\n * @type {?}\n */\nKeyValueChangeRecord.prototype.previousValue;\n/**\n * Provides a factory for {\\@link KeyValueDiffer}.\n *\n * \\@publicApi\n * @record\n */\nexport function KeyValueDifferFactory() { }\n/**\n * Test to see if the differ knows how to diff this kind of object.\n * @type {?}\n */\nKeyValueDifferFactory.prototype.supports;\n/**\n * Create a `KeyValueDiffer`.\n * @type {?}\n */\nKeyValueDifferFactory.prototype.create;\n/**\n * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n *\n * \\@publicApi\n */\nvar KeyValueDiffers = /** @class */ (function () {\n    function KeyValueDiffers(factories) {\n        this.factories = factories;\n    }\n    /**\n     * @template S\n     * @param {?} factories\n     * @param {?=} parent\n     * @return {?}\n     */\n    KeyValueDiffers.create = /**\n     * @template S\n     * @param {?} factories\n     * @param {?=} parent\n     * @return {?}\n     */\n    function (factories, parent) {\n        if (parent) {\n            /** @type {?} */\n            var copied = parent.factories.slice();\n            factories = factories.concat(copied);\n        }\n        return new KeyValueDiffers(factories);\n    };\n    /**\n     * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the\n     * inherited {@link KeyValueDiffers} instance with the provided factories and return a new\n     * {@link KeyValueDiffers} instance.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {@link KeyValueDiffer} available.\n     *\n     * ```\n     * @Component({\n     *   viewProviders: [\n     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n     *   ]\n     * })\n     * ```\n     */\n    /**\n     * Takes an array of {\\@link KeyValueDifferFactory} and returns a provider used to extend the\n     * inherited {\\@link KeyValueDiffers} instance with the provided factories and return a new\n     * {\\@link KeyValueDiffers} instance.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {\\@link KeyValueDiffer} available.\n     *\n     * ```\n     * \\@Component({\n     *   viewProviders: [\n     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n     *   ]\n     * })\n     * ```\n     * @template S\n     * @param {?} factories\n     * @return {?}\n     */\n    KeyValueDiffers.extend = /**\n     * Takes an array of {\\@link KeyValueDifferFactory} and returns a provider used to extend the\n     * inherited {\\@link KeyValueDiffers} instance with the provided factories and return a new\n     * {\\@link KeyValueDiffers} instance.\n     *\n     * \\@usageNotes\n     * ### Example\n     *\n     * The following example shows how to extend an existing list of factories,\n     * which will only be applied to the injector for this component and its children.\n     * This step is all that's required to make a new {\\@link KeyValueDiffer} available.\n     *\n     * ```\n     * \\@Component({\n     *   viewProviders: [\n     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n     *   ]\n     * })\n     * ```\n     * @template S\n     * @param {?} factories\n     * @return {?}\n     */\n    function (factories) {\n        return {\n            provide: KeyValueDiffers,\n            useFactory: function (parent) {\n                if (!parent) {\n                    // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed\n                    // to bootstrap(), which would override default pipes instead of extending them.\n                    throw new Error('Cannot extend KeyValueDiffers without a parent injector');\n                }\n                return KeyValueDiffers.create(factories, parent);\n            },\n            // Dependency technically isn't optional, but we can provide a better error message this way.\n            deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]\n        };\n    };\n    /**\n     * @param {?} kv\n     * @return {?}\n     */\n    KeyValueDiffers.prototype.find = /**\n     * @param {?} kv\n     * @return {?}\n     */\n    function (kv) {\n        /** @type {?} */\n        var factory = this.factories.find(function (f) { return f.supports(kv); });\n        if (factory) {\n            return factory;\n        }\n        throw new Error(\"Cannot find a differ supporting object '\" + kv + \"'\");\n    };\n    /** @nocollapse */\n    /** @nocollapse */ KeyValueDiffers.ngInjectableDef = defineInjectable({\n        providedIn: 'root',\n        factory: function () { return new KeyValueDiffers([new DefaultKeyValueDifferFactory()]); }\n    });\n    return KeyValueDiffers;\n}());\nexport { KeyValueDiffers };\nif (false) {\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    KeyValueDiffers.ngInjectableDef;\n    /**\n     * @deprecated v4.0.0 - Should be private.\n     * @type {?}\n     */\n    KeyValueDiffers.prototype.factories;\n}\n//# sourceMappingURL=keyvalue_differs.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken } from '../di/injection_token';\n/** *\n * Provide this token to set the locale of your application.\n * It is used for i18n extraction, by i18n pipes (DatePipe, I18nPluralPipe, CurrencyPipe,\n * DecimalPipe and PercentPipe) and by ICU expressions.\n *\n * See the [i18n guide](guide/i18n#setting-up-locale) for more information.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import { LOCALE_ID } from '\\@angular/core';\n * import { platformBrowserDynamic } from '\\@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]\n * });\n * ```\n *\n * \\@publicApi\n  @type {?} */\nexport var LOCALE_ID = new InjectionToken('LocaleId');\n/** *\n * Use this token at bootstrap to provide the content of your translation file (`xtb`,\n * `xlf` or `xlf2`) when you want to translate your application in another language.\n *\n * See the [i18n guide](guide/i18n#merge) for more information.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import { TRANSLATIONS } from '\\@angular/core';\n * import { platformBrowserDynamic } from '\\@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * // content of your translation file\n * const translations = '....';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS, useValue: translations }]\n * });\n * ```\n *\n * \\@publicApi\n  @type {?} */\nexport var TRANSLATIONS = new InjectionToken('Translations');\n/** *\n * Provide this token at bootstrap to set the format of your {\\@link TRANSLATIONS}: `xtb`,\n * `xlf` or `xlf2`.\n *\n * See the [i18n guide](guide/i18n#merge) for more information.\n *\n * \\@usageNotes\n * ### Example\n *\n * ```typescript\n * import { TRANSLATIONS_FORMAT } from '\\@angular/core';\n * import { platformBrowserDynamic } from '\\@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]\n * });\n * ```\n *\n * \\@publicApi\n  @type {?} */\nexport var TRANSLATIONS_FORMAT = new InjectionToken('TranslationsFormat');\n/** @enum {number} */\nvar MissingTranslationStrategy = {\n    Error: 0,\n    Warning: 1,\n    Ignore: 2,\n};\nexport { MissingTranslationStrategy };\nMissingTranslationStrategy[MissingTranslationStrategy.Error] = 'Error';\nMissingTranslationStrategy[MissingTranslationStrategy.Warning] = 'Warning';\nMissingTranslationStrategy[MissingTranslationStrategy.Ignore] = 'Ignore';\n//# sourceMappingURL=tokens.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { APP_INITIALIZER, ApplicationInitStatus } from './application_init';\nimport { ApplicationRef } from './application_ref';\nimport { APP_ID_RANDOM_PROVIDER } from './application_tokens';\nimport { IterableDiffers, KeyValueDiffers, defaultIterableDiffers, defaultKeyValueDiffers } from './change_detection/change_detection';\nimport { Console } from './console';\nimport { Injector } from './di';\nimport { Inject, Optional, SkipSelf } from './di/metadata';\nimport { ErrorHandler } from './error_handler';\nimport { LOCALE_ID } from './i18n/tokens';\nimport { ComponentFactoryResolver } from './linker';\nimport { Compiler } from './linker/compiler';\nimport { NgModule } from './metadata';\nimport { NgZone } from './zone';\n/**\n * @return {?}\n */\nexport function _iterableDiffersFactory() {\n    return defaultIterableDiffers;\n}\n/**\n * @return {?}\n */\nexport function _keyValueDiffersFactory() {\n    return defaultKeyValueDiffers;\n}\n/**\n * @param {?=} locale\n * @return {?}\n */\nexport function _localeFactory(locale) {\n    return locale || 'en-US';\n}\n/** *\n * A built-in [dependency injection token](guide/glossary#di-token)\n * that is used to configure the root injector for bootstrapping.\n  @type {?} */\nexport var APPLICATION_MODULE_PROVIDERS = [\n    {\n        provide: ApplicationRef,\n        useClass: ApplicationRef,\n        deps: [NgZone, Console, Injector, ErrorHandler, ComponentFactoryResolver, ApplicationInitStatus]\n    },\n    {\n        provide: ApplicationInitStatus,\n        useClass: ApplicationInitStatus,\n        deps: [[new Optional(), APP_INITIALIZER]]\n    },\n    { provide: Compiler, useClass: Compiler, deps: [] },\n    APP_ID_RANDOM_PROVIDER,\n    { provide: IterableDiffers, useFactory: _iterableDiffersFactory, deps: [] },\n    { provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory, deps: [] },\n    {\n        provide: LOCALE_ID,\n        useFactory: _localeFactory,\n        deps: [[new Inject(LOCALE_ID), new Optional(), new SkipSelf()]]\n    },\n];\n/**\n * Configures the root injector for an app with\n * providers of `\\@angular/core` dependencies that `ApplicationRef` needs\n * to bootstrap components.\n *\n * Re-exported by `BrowserModule`, which is included automatically in the root\n * `AppModule` when you create a new app with the CLI `new` command.\n *\n * \\@publicApi\n */\nvar ApplicationModule = /** @class */ (function () {\n    // Inject ApplicationRef to make it eager...\n    function ApplicationModule(appRef) {\n    }\n    ApplicationModule.decorators = [\n        { type: NgModule, args: [{ providers: APPLICATION_MODULE_PROVIDERS },] },\n    ];\n    /** @nocollapse */\n    ApplicationModule.ctorParameters = function () { return [\n        { type: ApplicationRef }\n    ]; };\n    return ApplicationModule;\n}());\nexport { ApplicationModule };\n//# sourceMappingURL=application_module.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// unsupported: template constraints.\n/**\n * Factory for ViewDefinitions/NgModuleDefinitions.\n * We use a function so we can reexeute it in case an error happens and use the given logger\n * function to log the error from the definition of the node, which is shown in all browser\n * logs.\n * @record\n * @template D\n */\nexport function DefinitionFactory() { }\n/**\n * Function to call console.error at the right source location. This is an indirection\n * via another function as browser will log the location that actually called\n * `console.error`.\n * @record\n */\nexport function NodeLogger() { }\n// unsupported: template constraints.\n/**\n * @record\n * @template DF\n */\nexport function Definition() { }\n/** @type {?} */\nDefinition.prototype.factory;\n/**\n * @record\n */\nexport function NgModuleDefinition() { }\n/** @type {?} */\nNgModuleDefinition.prototype.providers;\n/** @type {?} */\nNgModuleDefinition.prototype.providersByKey;\n/** @type {?} */\nNgModuleDefinition.prototype.modules;\n/** @type {?} */\nNgModuleDefinition.prototype.isRoot;\n/**\n * @record\n */\nexport function NgModuleDefinitionFactory() { }\n/**\n * @record\n */\nexport function ViewDefinition() { }\n/** @type {?} */\nViewDefinition.prototype.flags;\n/** @type {?} */\nViewDefinition.prototype.updateDirectives;\n/** @type {?} */\nViewDefinition.prototype.updateRenderer;\n/** @type {?} */\nViewDefinition.prototype.handleEvent;\n/**\n * Order: Depth first.\n * Especially providers are before elements / anchors.\n * @type {?}\n */\nViewDefinition.prototype.nodes;\n/**\n * aggregated NodeFlags for all nodes *\n * @type {?}\n */\nViewDefinition.prototype.nodeFlags;\n/** @type {?} */\nViewDefinition.prototype.rootNodeFlags;\n/** @type {?} */\nViewDefinition.prototype.lastRenderRootNode;\n/** @type {?} */\nViewDefinition.prototype.bindingCount;\n/** @type {?} */\nViewDefinition.prototype.outputCount;\n/**\n * Binary or of all query ids that are matched by one of the nodes.\n * This includes query ids from templates as well.\n * Used as a bloom filter.\n * @type {?}\n */\nViewDefinition.prototype.nodeMatchedQueries;\n/**\n * @record\n */\nexport function ViewDefinitionFactory() { }\n/**\n * @record\n */\nexport function ViewUpdateFn() { }\n/**\n * @record\n */\nexport function NodeCheckFn() { }\n/** @enum {number} */\nvar ArgumentType = {\n    Inline: 0, Dynamic: 1,\n};\nexport { ArgumentType };\n/**\n * @record\n */\nexport function ViewHandleEventFn() { }\n/** @enum {number} */\nvar ViewFlags = {\n    None: 0,\n    OnPush: 2,\n};\nexport { ViewFlags };\n/**\n * A node definition in the view.\n *\n * Note: We use one type for all nodes so that loops that loop over all nodes\n * of a ViewDefinition stay monomorphic!\n * @record\n */\nexport function NodeDef() { }\n/** @type {?} */\nNodeDef.prototype.flags;\n/** @type {?} */\nNodeDef.prototype.nodeIndex;\n/** @type {?} */\nNodeDef.prototype.checkIndex;\n/** @type {?} */\nNodeDef.prototype.parent;\n/** @type {?} */\nNodeDef.prototype.renderParent;\n/**\n * this is checked against NgContentDef.index to find matched nodes\n * @type {?}\n */\nNodeDef.prototype.ngContentIndex;\n/**\n * number of transitive children\n * @type {?}\n */\nNodeDef.prototype.childCount;\n/**\n * aggregated NodeFlags for all transitive children (does not include self) *\n * @type {?}\n */\nNodeDef.prototype.childFlags;\n/**\n * aggregated NodeFlags for all direct children (does not include self) *\n * @type {?}\n */\nNodeDef.prototype.directChildFlags;\n/** @type {?} */\nNodeDef.prototype.bindingIndex;\n/** @type {?} */\nNodeDef.prototype.bindings;\n/** @type {?} */\nNodeDef.prototype.bindingFlags;\n/** @type {?} */\nNodeDef.prototype.outputIndex;\n/** @type {?} */\nNodeDef.prototype.outputs;\n/**\n * references that the user placed on the element\n * @type {?}\n */\nNodeDef.prototype.references;\n/**\n * ids and value types of all queries that are matched by this node.\n * @type {?}\n */\nNodeDef.prototype.matchedQueries;\n/**\n * Binary or of all matched query ids of this node.\n * @type {?}\n */\nNodeDef.prototype.matchedQueryIds;\n/**\n * Binary or of all query ids that are matched by one of the children.\n * This includes query ids from templates as well.\n * Used as a bloom filter.\n * @type {?}\n */\nNodeDef.prototype.childMatchedQueries;\n/** @type {?} */\nNodeDef.prototype.element;\n/** @type {?} */\nNodeDef.prototype.provider;\n/** @type {?} */\nNodeDef.prototype.text;\n/** @type {?} */\nNodeDef.prototype.query;\n/** @type {?} */\nNodeDef.prototype.ngContent;\n/** @enum {number} */\nvar NodeFlags = {\n    None: 0,\n    TypeElement: 1,\n    TypeText: 2,\n    ProjectedTemplate: 4,\n    CatRenderNode: 3,\n    TypeNgContent: 8,\n    TypePipe: 16,\n    TypePureArray: 32,\n    TypePureObject: 64,\n    TypePurePipe: 128,\n    CatPureExpression: 224,\n    TypeValueProvider: 256,\n    TypeClassProvider: 512,\n    TypeFactoryProvider: 1024,\n    TypeUseExistingProvider: 2048,\n    LazyProvider: 4096,\n    PrivateProvider: 8192,\n    TypeDirective: 16384,\n    Component: 32768,\n    CatProviderNoDirective: 3840,\n    CatProvider: 20224,\n    OnInit: 65536,\n    OnDestroy: 131072,\n    DoCheck: 262144,\n    OnChanges: 524288,\n    AfterContentInit: 1048576,\n    AfterContentChecked: 2097152,\n    AfterViewInit: 4194304,\n    AfterViewChecked: 8388608,\n    EmbeddedViews: 16777216,\n    ComponentView: 33554432,\n    TypeContentQuery: 67108864,\n    TypeViewQuery: 134217728,\n    StaticQuery: 268435456,\n    DynamicQuery: 536870912,\n    TypeNgModule: 1073741824,\n    CatQuery: 201326592,\n    // mutually exclusive values...\n    Types: 201347067,\n};\nexport { NodeFlags };\n/**\n * @record\n */\nexport function BindingDef() { }\n/** @type {?} */\nBindingDef.prototype.flags;\n/** @type {?} */\nBindingDef.prototype.ns;\n/** @type {?} */\nBindingDef.prototype.name;\n/** @type {?} */\nBindingDef.prototype.nonMinifiedName;\n/** @type {?} */\nBindingDef.prototype.securityContext;\n/** @type {?} */\nBindingDef.prototype.suffix;\n/** @enum {number} */\nvar BindingFlags = {\n    TypeElementAttribute: 1,\n    TypeElementClass: 2,\n    TypeElementStyle: 4,\n    TypeProperty: 8,\n    SyntheticProperty: 16,\n    SyntheticHostProperty: 32,\n    CatSyntheticProperty: 48,\n    // mutually exclusive values...\n    Types: 15,\n};\nexport { BindingFlags };\n/**\n * @record\n */\nexport function OutputDef() { }\n/** @type {?} */\nOutputDef.prototype.type;\n/** @type {?} */\nOutputDef.prototype.target;\n/** @type {?} */\nOutputDef.prototype.eventName;\n/** @type {?} */\nOutputDef.prototype.propName;\n/** @enum {number} */\nvar OutputType = {\n    ElementOutput: 0, DirectiveOutput: 1,\n};\nexport { OutputType };\n/** @enum {number} */\nvar QueryValueType = {\n    ElementRef: 0,\n    RenderElement: 1,\n    TemplateRef: 2,\n    ViewContainerRef: 3,\n    Provider: 4,\n};\nexport { QueryValueType };\n/**\n * @record\n */\nexport function ElementDef() { }\n/** @type {?} */\nElementDef.prototype.name;\n/** @type {?} */\nElementDef.prototype.ns;\n/**\n * ns, name, value\n * @type {?}\n */\nElementDef.prototype.attrs;\n/** @type {?} */\nElementDef.prototype.template;\n/** @type {?} */\nElementDef.prototype.componentProvider;\n/** @type {?} */\nElementDef.prototype.componentRendererType;\n/** @type {?} */\nElementDef.prototype.componentView;\n/**\n * visible public providers for DI in the view,\n * as see from this element. This does not include private providers.\n * @type {?}\n */\nElementDef.prototype.publicProviders;\n/**\n * same as visiblePublicProviders, but also includes private providers\n * that are located on this element.\n * @type {?}\n */\nElementDef.prototype.allProviders;\n/** @type {?} */\nElementDef.prototype.handleEvent;\n/**\n * @record\n */\nexport function ElementHandleEventFn() { }\n/**\n * @record\n */\nexport function ProviderDef() { }\n/** @type {?} */\nProviderDef.prototype.token;\n/** @type {?} */\nProviderDef.prototype.value;\n/** @type {?} */\nProviderDef.prototype.deps;\n/**\n * @record\n */\nexport function NgModuleProviderDef() { }\n/** @type {?} */\nNgModuleProviderDef.prototype.flags;\n/** @type {?} */\nNgModuleProviderDef.prototype.index;\n/** @type {?} */\nNgModuleProviderDef.prototype.token;\n/** @type {?} */\nNgModuleProviderDef.prototype.value;\n/** @type {?} */\nNgModuleProviderDef.prototype.deps;\n/**\n * @record\n */\nexport function DepDef() { }\n/** @type {?} */\nDepDef.prototype.flags;\n/** @type {?} */\nDepDef.prototype.token;\n/** @type {?} */\nDepDef.prototype.tokenKey;\n/** @enum {number} */\nvar DepFlags = {\n    None: 0,\n    SkipSelf: 1,\n    Optional: 2,\n    Self: 4,\n    Value: 8,\n};\nexport { DepFlags };\n/**\n * @record\n */\nexport function TextDef() { }\n/** @type {?} */\nTextDef.prototype.prefix;\n/**\n * @record\n */\nexport function QueryDef() { }\n/** @type {?} */\nQueryDef.prototype.id;\n/** @type {?} */\nQueryDef.prototype.filterId;\n/** @type {?} */\nQueryDef.prototype.bindings;\n/**\n * @record\n */\nexport function QueryBindingDef() { }\n/** @type {?} */\nQueryBindingDef.prototype.propName;\n/** @type {?} */\nQueryBindingDef.prototype.bindingType;\n/** @enum {number} */\nvar QueryBindingType = {\n    First: 0, All: 1,\n};\nexport { QueryBindingType };\n/**\n * @record\n */\nexport function NgContentDef() { }\n/**\n * this index is checked against NodeDef.ngContentIndex to find the nodes\n * that are matched by this ng-content.\n * Note that a NodeDef with an ng-content can be reprojected, i.e.\n * have a ngContentIndex on its own.\n * @type {?}\n */\nNgContentDef.prototype.index;\n/**\n * @record\n */\nexport function NgModuleData() { }\n/** @type {?} */\nNgModuleData.prototype._def;\n/** @type {?} */\nNgModuleData.prototype._parent;\n/** @type {?} */\nNgModuleData.prototype._providers;\n/**\n * View instance data.\n * Attention: Adding fields to this is performance sensitive!\n * @record\n */\nexport function ViewData() { }\n/** @type {?} */\nViewData.prototype.def;\n/** @type {?} */\nViewData.prototype.root;\n/** @type {?} */\nViewData.prototype.renderer;\n/** @type {?} */\nViewData.prototype.parentNodeDef;\n/** @type {?} */\nViewData.prototype.parent;\n/** @type {?} */\nViewData.prototype.viewContainerParent;\n/** @type {?} */\nViewData.prototype.component;\n/** @type {?} */\nViewData.prototype.context;\n/** @type {?} */\nViewData.prototype.nodes;\n/** @type {?} */\nViewData.prototype.state;\n/** @type {?} */\nViewData.prototype.oldValues;\n/** @type {?} */\nViewData.prototype.disposables;\n/** @type {?} */\nViewData.prototype.initIndex;\n/** @enum {number} */\nvar ViewState = {\n    BeforeFirstCheck: 1,\n    FirstCheck: 2,\n    Attached: 4,\n    ChecksEnabled: 8,\n    IsProjectedView: 16,\n    CheckProjectedView: 32,\n    CheckProjectedViews: 64,\n    Destroyed: 128,\n    // InitState Uses 3 bits\n    InitState_Mask: 1792,\n    InitState_BeforeInit: 0,\n    InitState_CallingOnInit: 256,\n    InitState_CallingAfterContentInit: 512,\n    InitState_CallingAfterViewInit: 768,\n    InitState_AfterInit: 1024,\n    CatDetectChanges: 12,\n    CatInit: 13,\n};\nexport { ViewState };\n/**\n * @param {?} view\n * @param {?} priorInitState\n * @param {?} newInitState\n * @return {?}\n */\nexport function shiftInitState(view, priorInitState, newInitState) {\n    /** @type {?} */\n    var state = view.state;\n    /** @type {?} */\n    var initState = state & 1792 /* InitState_Mask */;\n    if (initState === priorInitState) {\n        view.state = (state & ~1792 /* InitState_Mask */) | newInitState;\n        view.initIndex = -1;\n        return true;\n    }\n    return initState === newInitState;\n}\n/**\n * @param {?} view\n * @param {?} initState\n * @param {?} index\n * @return {?}\n */\nexport function shouldCallLifecycleInitHook(view, initState, index) {\n    if ((view.state & 1792 /* InitState_Mask */) === initState && view.initIndex <= index) {\n        view.initIndex = index + 1;\n        return true;\n    }\n    return false;\n}\n/**\n * @record\n */\nexport function DisposableFn() { }\n/**\n * Node instance data.\n *\n * We have a separate type per NodeType to save memory\n * (TextData | ElementData | ProviderData | PureExpressionData | QueryList<any>)\n *\n * To keep our code monomorphic,\n * we prohibit using `NodeData` directly but enforce the use of accessors (`asElementData`, ...).\n * This way, no usage site can get a `NodeData` from view.nodes and then use it for different\n * purposes.\n */\nvar /**\n * Node instance data.\n *\n * We have a separate type per NodeType to save memory\n * (TextData | ElementData | ProviderData | PureExpressionData | QueryList<any>)\n *\n * To keep our code monomorphic,\n * we prohibit using `NodeData` directly but enforce the use of accessors (`asElementData`, ...).\n * This way, no usage site can get a `NodeData` from view.nodes and then use it for different\n * purposes.\n */\nNodeData = /** @class */ (function () {\n    function NodeData() {\n    }\n    return NodeData;\n}());\n/**\n * Node instance data.\n *\n * We have a separate type per NodeType to save memory\n * (TextData | ElementData | ProviderData | PureExpressionData | QueryList<any>)\n *\n * To keep our code monomorphic,\n * we prohibit using `NodeData` directly but enforce the use of accessors (`asElementData`, ...).\n * This way, no usage site can get a `NodeData` from view.nodes and then use it for different\n * purposes.\n */\nexport { NodeData };\nif (false) {\n    /** @type {?} */\n    NodeData.prototype.__brand;\n}\n/**\n * Data for an instantiated NodeType.Text.\n *\n * Attention: Adding fields to this is performance sensitive!\n * @record\n */\nexport function TextData() { }\n/** @type {?} */\nTextData.prototype.renderText;\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nexport function asTextData(view, index) {\n    return /** @type {?} */ (view.nodes[index]);\n}\n/**\n * Data for an instantiated NodeType.Element.\n *\n * Attention: Adding fields to this is performance sensitive!\n * @record\n */\nexport function ElementData() { }\n/** @type {?} */\nElementData.prototype.renderElement;\n/** @type {?} */\nElementData.prototype.componentView;\n/** @type {?} */\nElementData.prototype.viewContainer;\n/** @type {?} */\nElementData.prototype.template;\n/**\n * @record\n */\nexport function ViewContainerData() { }\n/** @type {?} */\nViewContainerData.prototype._embeddedViews;\n/**\n * @record\n */\nexport function TemplateData() { }\n/** @type {?} */\nTemplateData.prototype._projectedViews;\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nexport function asElementData(view, index) {\n    return /** @type {?} */ (view.nodes[index]);\n}\n/**\n * Data for an instantiated NodeType.Provider.\n *\n * Attention: Adding fields to this is performance sensitive!\n * @record\n */\nexport function ProviderData() { }\n/** @type {?} */\nProviderData.prototype.instance;\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nexport function asProviderData(view, index) {\n    return /** @type {?} */ (view.nodes[index]);\n}\n/**\n * Data for an instantiated NodeType.PureExpression.\n *\n * Attention: Adding fields to this is performance sensitive!\n * @record\n */\nexport function PureExpressionData() { }\n/** @type {?} */\nPureExpressionData.prototype.value;\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nexport function asPureExpressionData(view, index) {\n    return /** @type {?} */ (view.nodes[index]);\n}\n/**\n * Accessor for view.nodes, enforcing that every usage site stays monomorphic.\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nexport function asQueryList(view, index) {\n    return /** @type {?} */ (view.nodes[index]);\n}\n/**\n * @record\n */\nexport function RootData() { }\n/** @type {?} */\nRootData.prototype.injector;\n/** @type {?} */\nRootData.prototype.ngModule;\n/** @type {?} */\nRootData.prototype.projectableNodes;\n/** @type {?} */\nRootData.prototype.selectorOrNode;\n/** @type {?} */\nRootData.prototype.renderer;\n/** @type {?} */\nRootData.prototype.rendererFactory;\n/** @type {?} */\nRootData.prototype.errorHandler;\n/** @type {?} */\nRootData.prototype.sanitizer;\n/**\n * @abstract\n */\nvar /**\n * @abstract\n */\nDebugContext = /** @class */ (function () {\n    function DebugContext() {\n    }\n    return DebugContext;\n}());\n/**\n * @abstract\n */\nexport { DebugContext };\nif (false) {\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.view = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.nodeIndex = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.injector = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.component = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.providerTokens = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.references = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.context = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.componentRenderElement = function () { };\n    /**\n     * @abstract\n     * @return {?}\n     */\n    DebugContext.prototype.renderNode = function () { };\n    /**\n     * @abstract\n     * @param {?} console\n     * @param {...?} values\n     * @return {?}\n     */\n    DebugContext.prototype.logError = function (console, values) { };\n}\n/** @enum {number} */\nvar CheckType = {\n    CheckAndUpdate: 0, CheckNoChanges: 1,\n};\nexport { CheckType };\n/**\n * @record\n */\nexport function ProviderOverride() { }\n/** @type {?} */\nProviderOverride.prototype.token;\n/** @type {?} */\nProviderOverride.prototype.flags;\n/** @type {?} */\nProviderOverride.prototype.value;\n/** @type {?} */\nProviderOverride.prototype.deps;\n/** @type {?} */\nProviderOverride.prototype.deprecatedBehavior;\n/** *\n * This object is used to prevent cycles in the source files and to have a place where\n * debug mode can hook it. It is lazily filled when `isDevMode` is known.\n  @type {?} */\nexport var Services = {\n    setCurrentNode: /** @type {?} */ ((undefined)),\n    createRootView: /** @type {?} */ ((undefined)),\n    createEmbeddedView: /** @type {?} */ ((undefined)),\n    createComponentView: /** @type {?} */ ((undefined)),\n    createNgModuleRef: /** @type {?} */ ((undefined)),\n    overrideProvider: /** @type {?} */ ((undefined)),\n    overrideComponentView: /** @type {?} */ ((undefined)),\n    clearOverrides: /** @type {?} */ ((undefined)),\n    checkAndUpdateView: /** @type {?} */ ((undefined)),\n    checkNoChangesView: /** @type {?} */ ((undefined)),\n    destroyView: /** @type {?} */ ((undefined)),\n    resolveDep: /** @type {?} */ ((undefined)),\n    createDebugContext: /** @type {?} */ ((undefined)),\n    handleEvent: /** @type {?} */ ((undefined)),\n    updateDirectives: /** @type {?} */ ((undefined)),\n    updateRenderer: /** @type {?} */ ((undefined)),\n    dirtyParentQueries: /** @type {?} */ ((undefined)),\n};\n//# sourceMappingURL=types.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ERROR_DEBUG_CONTEXT, ERROR_LOGGER, getDebugContext } from '../errors';\n/**\n * @param {?} context\n * @param {?} oldValue\n * @param {?} currValue\n * @param {?} isFirstCheck\n * @return {?}\n */\nexport function expressionChangedAfterItHasBeenCheckedError(context, oldValue, currValue, isFirstCheck) {\n    /** @type {?} */\n    var msg = \"ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '\" + oldValue + \"'. Current value: '\" + currValue + \"'.\";\n    if (isFirstCheck) {\n        msg +=\n            \" It seems like the view has been created after its parent and its children have been dirty checked.\" +\n                \" Has it been created in a change detection hook ?\";\n    }\n    return viewDebugError(msg, context);\n}\n/**\n * @param {?} err\n * @param {?} context\n * @return {?}\n */\nexport function viewWrappedDebugError(err, context) {\n    if (!(err instanceof Error)) {\n        // errors that are not Error instances don't have a stack,\n        // so it is ok to wrap them into a new Error object...\n        err = new Error(err.toString());\n    }\n    _addDebugContext(err, context);\n    return err;\n}\n/**\n * @param {?} msg\n * @param {?} context\n * @return {?}\n */\nexport function viewDebugError(msg, context) {\n    /** @type {?} */\n    var err = new Error(msg);\n    _addDebugContext(err, context);\n    return err;\n}\n/**\n * @param {?} err\n * @param {?} context\n * @return {?}\n */\nfunction _addDebugContext(err, context) {\n    (/** @type {?} */ (err))[ERROR_DEBUG_CONTEXT] = context;\n    (/** @type {?} */ (err))[ERROR_LOGGER] = context.logError.bind(context);\n}\n/**\n * @param {?} err\n * @return {?}\n */\nexport function isViewDebugError(err) {\n    return !!getDebugContext(err);\n}\n/**\n * @param {?} action\n * @return {?}\n */\nexport function viewDestroyedError(action) {\n    return new Error(\"ViewDestroyedError: Attempt to use a destroyed view: \" + action);\n}\n//# sourceMappingURL=errors.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { WrappedValue, devModeEqual } from '../change_detection/change_detection';\nimport { SOURCE } from '../di/injector';\nimport { ViewEncapsulation } from '../metadata/view';\nimport { looseIdentical, stringify } from '../util';\nimport { expressionChangedAfterItHasBeenCheckedError } from './errors';\nimport { Services, asElementData, asTextData } from './types';\n/** @type {?} */\nexport var NOOP = function () { };\n/** @type {?} */\nvar _tokenKeyCache = new Map();\n/**\n * @param {?} token\n * @return {?}\n */\nexport function tokenKey(token) {\n    /** @type {?} */\n    var key = _tokenKeyCache.get(token);\n    if (!key) {\n        key = stringify(token) + '_' + _tokenKeyCache.size;\n        _tokenKeyCache.set(token, key);\n    }\n    return key;\n}\n/**\n * @param {?} view\n * @param {?} nodeIdx\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nexport function unwrapValue(view, nodeIdx, bindingIdx, value) {\n    if (WrappedValue.isWrapped(value)) {\n        value = WrappedValue.unwrap(value);\n        /** @type {?} */\n        var globalBindingIdx = view.def.nodes[nodeIdx].bindingIndex + bindingIdx;\n        /** @type {?} */\n        var oldValue = WrappedValue.unwrap(view.oldValues[globalBindingIdx]);\n        view.oldValues[globalBindingIdx] = new WrappedValue(oldValue);\n    }\n    return value;\n}\n/** @type {?} */\nvar UNDEFINED_RENDERER_TYPE_ID = '$$undefined';\n/** @type {?} */\nvar EMPTY_RENDERER_TYPE_ID = '$$empty';\n/**\n * @param {?} values\n * @return {?}\n */\nexport function createRendererType2(values) {\n    return {\n        id: UNDEFINED_RENDERER_TYPE_ID,\n        styles: values.styles,\n        encapsulation: values.encapsulation,\n        data: values.data\n    };\n}\n/** @type {?} */\nvar _renderCompCount = 0;\n/**\n * @param {?=} type\n * @return {?}\n */\nexport function resolveRendererType2(type) {\n    if (type && type.id === UNDEFINED_RENDERER_TYPE_ID) {\n        /** @type {?} */\n        var isFilled = ((type.encapsulation != null && type.encapsulation !== ViewEncapsulation.None) ||\n            type.styles.length || Object.keys(type.data).length);\n        if (isFilled) {\n            type.id = \"c\" + _renderCompCount++;\n        }\n        else {\n            type.id = EMPTY_RENDERER_TYPE_ID;\n        }\n    }\n    if (type && type.id === EMPTY_RENDERER_TYPE_ID) {\n        type = null;\n    }\n    return type || null;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nexport function checkBinding(view, def, bindingIdx, value) {\n    /** @type {?} */\n    var oldValues = view.oldValues;\n    if ((view.state & 2 /* FirstCheck */) ||\n        !looseIdentical(oldValues[def.bindingIndex + bindingIdx], value)) {\n        return true;\n    }\n    return false;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nexport function checkAndUpdateBinding(view, def, bindingIdx, value) {\n    if (checkBinding(view, def, bindingIdx, value)) {\n        view.oldValues[def.bindingIndex + bindingIdx] = value;\n        return true;\n    }\n    return false;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nexport function checkBindingNoChanges(view, def, bindingIdx, value) {\n    /** @type {?} */\n    var oldValue = view.oldValues[def.bindingIndex + bindingIdx];\n    if ((view.state & 1 /* BeforeFirstCheck */) || !devModeEqual(oldValue, value)) {\n        /** @type {?} */\n        var bindingName = def.bindings[bindingIdx].name;\n        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, def.nodeIndex), bindingName + \": \" + oldValue, bindingName + \": \" + value, (view.state & 1 /* BeforeFirstCheck */) !== 0);\n    }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function markParentViewsForCheck(view) {\n    /** @type {?} */\n    var currView = view;\n    while (currView) {\n        if (currView.def.flags & 2 /* OnPush */) {\n            currView.state |= 8 /* ChecksEnabled */;\n        }\n        currView = currView.viewContainerParent || currView.parent;\n    }\n}\n/**\n * @param {?} view\n * @param {?} endView\n * @return {?}\n */\nexport function markParentViewsForCheckProjectedViews(view, endView) {\n    /** @type {?} */\n    var currView = view;\n    while (currView && currView !== endView) {\n        currView.state |= 64 /* CheckProjectedViews */;\n        currView = currView.viewContainerParent || currView.parent;\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @param {?} eventName\n * @param {?} event\n * @return {?}\n */\nexport function dispatchEvent(view, nodeIndex, eventName, event) {\n    try {\n        /** @type {?} */\n        var nodeDef = view.def.nodes[nodeIndex];\n        /** @type {?} */\n        var startView = nodeDef.flags & 33554432 /* ComponentView */ ?\n            asElementData(view, nodeIndex).componentView :\n            view;\n        markParentViewsForCheck(startView);\n        return Services.handleEvent(view, nodeIndex, eventName, event);\n    }\n    catch (e) {\n        // Attention: Don't rethrow, as it would cancel Observable subscriptions!\n        view.root.errorHandler.handleError(e);\n    }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function declaredViewContainer(view) {\n    if (view.parent) {\n        /** @type {?} */\n        var parentView = view.parent;\n        return asElementData(parentView, /** @type {?} */ ((view.parentNodeDef)).nodeIndex);\n    }\n    return null;\n}\n/**\n * for component views, this is the host element.\n * for embedded views, this is the index of the parent node\n * that contains the view container.\n * @param {?} view\n * @return {?}\n */\nexport function viewParentEl(view) {\n    /** @type {?} */\n    var parentView = view.parent;\n    if (parentView) {\n        return /** @type {?} */ ((view.parentNodeDef)).parent;\n    }\n    else {\n        return null;\n    }\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nexport function renderNode(view, def) {\n    switch (def.flags & 201347067 /* Types */) {\n        case 1 /* TypeElement */:\n            return asElementData(view, def.nodeIndex).renderElement;\n        case 2 /* TypeText */:\n            return asTextData(view, def.nodeIndex).renderText;\n    }\n}\n/**\n * @param {?} target\n * @param {?} name\n * @return {?}\n */\nexport function elementEventFullName(target, name) {\n    return target ? target + \":\" + name : name;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function isComponentView(view) {\n    return !!view.parent && !!(/** @type {?} */ ((view.parentNodeDef)).flags & 32768 /* Component */);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function isEmbeddedView(view) {\n    return !!view.parent && !(/** @type {?} */ ((view.parentNodeDef)).flags & 32768 /* Component */);\n}\n/**\n * @param {?} queryId\n * @return {?}\n */\nexport function filterQueryId(queryId) {\n    return 1 << (queryId % 32);\n}\n/**\n * @param {?} matchedQueriesDsl\n * @return {?}\n */\nexport function splitMatchedQueriesDsl(matchedQueriesDsl) {\n    /** @type {?} */\n    var matchedQueries = {};\n    /** @type {?} */\n    var matchedQueryIds = 0;\n    /** @type {?} */\n    var references = {};\n    if (matchedQueriesDsl) {\n        matchedQueriesDsl.forEach(function (_a) {\n            var queryId = _a[0], valueType = _a[1];\n            if (typeof queryId === 'number') {\n                matchedQueries[queryId] = valueType;\n                matchedQueryIds |= filterQueryId(queryId);\n            }\n            else {\n                references[queryId] = valueType;\n            }\n        });\n    }\n    return { matchedQueries: matchedQueries, references: references, matchedQueryIds: matchedQueryIds };\n}\n/**\n * @param {?} deps\n * @param {?=} sourceName\n * @return {?}\n */\nexport function splitDepsDsl(deps, sourceName) {\n    return deps.map(function (value) {\n        /** @type {?} */\n        var token;\n        /** @type {?} */\n        var flags;\n        if (Array.isArray(value)) {\n            flags = value[0], token = value[1];\n        }\n        else {\n            flags = 0 /* None */;\n            token = value;\n        }\n        if (token && (typeof token === 'function' || typeof token === 'object') && sourceName) {\n            Object.defineProperty(token, SOURCE, { value: sourceName, configurable: true });\n        }\n        return { flags: flags, token: token, tokenKey: tokenKey(token) };\n    });\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nexport function getParentRenderElement(view, renderHost, def) {\n    /** @type {?} */\n    var renderParent = def.renderParent;\n    if (renderParent) {\n        if ((renderParent.flags & 1 /* TypeElement */) === 0 ||\n            (renderParent.flags & 33554432 /* ComponentView */) === 0 ||\n            (/** @type {?} */ ((renderParent.element)).componentRendererType && /** @type {?} */ ((/** @type {?} */ ((renderParent.element)).componentRendererType)).encapsulation === ViewEncapsulation.Native)) {\n            // only children of non components, or children of components with native encapsulation should\n            // be attached.\n            return asElementData(view, /** @type {?} */ ((def.renderParent)).nodeIndex).renderElement;\n        }\n    }\n    else {\n        return renderHost;\n    }\n}\n/** @type {?} */\nvar DEFINITION_CACHE = new WeakMap();\n/**\n * @template D\n * @param {?} factory\n * @return {?}\n */\nexport function resolveDefinition(factory) {\n    /** @type {?} */\n    var value = /** @type {?} */ (((DEFINITION_CACHE.get(factory))));\n    if (!value) {\n        value = factory(function () { return NOOP; });\n        value.factory = factory;\n        DEFINITION_CACHE.set(factory, value);\n    }\n    return value;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function rootRenderNodes(view) {\n    /** @type {?} */\n    var renderNodes = [];\n    visitRootRenderNodes(view, 0 /* Collect */, undefined, undefined, renderNodes);\n    return renderNodes;\n}\n/** @enum {number} */\nvar RenderNodeAction = {\n    Collect: 0, AppendChild: 1, InsertBefore: 2, RemoveChild: 3,\n};\nexport { RenderNodeAction };\n/**\n * @param {?} view\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nexport function visitRootRenderNodes(view, action, parentNode, nextSibling, target) {\n    // We need to re-compute the parent node in case the nodes have been moved around manually\n    if (action === 3 /* RemoveChild */) {\n        parentNode = view.renderer.parentNode(renderNode(view, /** @type {?} */ ((view.def.lastRenderRootNode))));\n    }\n    visitSiblingRenderNodes(view, action, 0, view.def.nodes.length - 1, parentNode, nextSibling, target);\n}\n/**\n * @param {?} view\n * @param {?} action\n * @param {?} startIndex\n * @param {?} endIndex\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nexport function visitSiblingRenderNodes(view, action, startIndex, endIndex, parentNode, nextSibling, target) {\n    for (var i = startIndex; i <= endIndex; i++) {\n        /** @type {?} */\n        var nodeDef = view.def.nodes[i];\n        if (nodeDef.flags & (1 /* TypeElement */ | 2 /* TypeText */ | 8 /* TypeNgContent */)) {\n            visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target);\n        }\n        // jump to next sibling\n        i += nodeDef.childCount;\n    }\n}\n/**\n * @param {?} view\n * @param {?} ngContentIndex\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nexport function visitProjectedRenderNodes(view, ngContentIndex, action, parentNode, nextSibling, target) {\n    /** @type {?} */\n    var compView = view;\n    while (compView && !isComponentView(compView)) {\n        compView = compView.parent;\n    }\n    /** @type {?} */\n    var hostView = /** @type {?} */ ((compView)).parent;\n    /** @type {?} */\n    var hostElDef = viewParentEl(/** @type {?} */ ((compView)));\n    /** @type {?} */\n    var startIndex = /** @type {?} */ ((hostElDef)).nodeIndex + 1;\n    /** @type {?} */\n    var endIndex = /** @type {?} */ ((hostElDef)).nodeIndex + /** @type {?} */ ((hostElDef)).childCount;\n    for (var i = startIndex; i <= endIndex; i++) {\n        /** @type {?} */\n        var nodeDef = /** @type {?} */ ((hostView)).def.nodes[i];\n        if (nodeDef.ngContentIndex === ngContentIndex) {\n            visitRenderNode(/** @type {?} */ ((hostView)), nodeDef, action, parentNode, nextSibling, target);\n        }\n        // jump to next sibling\n        i += nodeDef.childCount;\n    }\n    if (!/** @type {?} */ ((hostView)).parent) {\n        /** @type {?} */\n        var projectedNodes = view.root.projectableNodes[ngContentIndex];\n        if (projectedNodes) {\n            for (var i = 0; i < projectedNodes.length; i++) {\n                execRenderNodeAction(view, projectedNodes[i], action, parentNode, nextSibling, target);\n            }\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nfunction visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target) {\n    if (nodeDef.flags & 8 /* TypeNgContent */) {\n        visitProjectedRenderNodes(view, /** @type {?} */ ((nodeDef.ngContent)).index, action, parentNode, nextSibling, target);\n    }\n    else {\n        /** @type {?} */\n        var rn = renderNode(view, nodeDef);\n        if (action === 3 /* RemoveChild */ && (nodeDef.flags & 33554432 /* ComponentView */) &&\n            (nodeDef.bindingFlags & 48 /* CatSyntheticProperty */)) {\n            // Note: we might need to do both actions.\n            if (nodeDef.bindingFlags & (16 /* SyntheticProperty */)) {\n                execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);\n            }\n            if (nodeDef.bindingFlags & (32 /* SyntheticHostProperty */)) {\n                /** @type {?} */\n                var compView = asElementData(view, nodeDef.nodeIndex).componentView;\n                execRenderNodeAction(compView, rn, action, parentNode, nextSibling, target);\n            }\n        }\n        else {\n            execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);\n        }\n        if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n            /** @type {?} */\n            var embeddedViews = /** @type {?} */ ((asElementData(view, nodeDef.nodeIndex).viewContainer))._embeddedViews;\n            for (var k = 0; k < embeddedViews.length; k++) {\n                visitRootRenderNodes(embeddedViews[k], action, parentNode, nextSibling, target);\n            }\n        }\n        if (nodeDef.flags & 1 /* TypeElement */ && !/** @type {?} */ ((nodeDef.element)).name) {\n            visitSiblingRenderNodes(view, action, nodeDef.nodeIndex + 1, nodeDef.nodeIndex + nodeDef.childCount, parentNode, nextSibling, target);\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} renderNode\n * @param {?} action\n * @param {?} parentNode\n * @param {?} nextSibling\n * @param {?=} target\n * @return {?}\n */\nfunction execRenderNodeAction(view, renderNode, action, parentNode, nextSibling, target) {\n    /** @type {?} */\n    var renderer = view.renderer;\n    switch (action) {\n        case 1 /* AppendChild */:\n            renderer.appendChild(parentNode, renderNode);\n            break;\n        case 2 /* InsertBefore */:\n            renderer.insertBefore(parentNode, renderNode, nextSibling);\n            break;\n        case 3 /* RemoveChild */:\n            renderer.removeChild(parentNode, renderNode);\n            break;\n        case 0 /* Collect */:\n            /** @type {?} */ ((target)).push(renderNode);\n            break;\n    }\n}\n/** @type {?} */\nvar NS_PREFIX_RE = /^:([^:]+):(.+)$/;\n/**\n * @param {?} name\n * @return {?}\n */\nexport function splitNamespace(name) {\n    if (name[0] === ':') {\n        /** @type {?} */\n        var match = /** @type {?} */ ((name.match(NS_PREFIX_RE)));\n        return [match[1], match[2]];\n    }\n    return ['', name];\n}\n/**\n * @param {?} bindings\n * @return {?}\n */\nexport function calcBindingFlags(bindings) {\n    /** @type {?} */\n    var flags = 0;\n    for (var i = 0; i < bindings.length; i++) {\n        flags |= bindings[i].flags;\n    }\n    return flags;\n}\n/**\n * @param {?} valueCount\n * @param {?} constAndInterp\n * @return {?}\n */\nexport function interpolate(valueCount, constAndInterp) {\n    /** @type {?} */\n    var result = '';\n    for (var i = 0; i < valueCount * 2; i = i + 2) {\n        result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);\n    }\n    return result + constAndInterp[valueCount * 2];\n}\n/**\n * @param {?} valueCount\n * @param {?} c0\n * @param {?} a1\n * @param {?} c1\n * @param {?=} a2\n * @param {?=} c2\n * @param {?=} a3\n * @param {?=} c3\n * @param {?=} a4\n * @param {?=} c4\n * @param {?=} a5\n * @param {?=} c5\n * @param {?=} a6\n * @param {?=} c6\n * @param {?=} a7\n * @param {?=} c7\n * @param {?=} a8\n * @param {?=} c8\n * @param {?=} a9\n * @param {?=} c9\n * @return {?}\n */\nexport function inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {\n    switch (valueCount) {\n        case 1:\n            return c0 + _toStringWithNull(a1) + c1;\n        case 2:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;\n        case 3:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3;\n        case 4:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4;\n        case 5:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;\n        case 6:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;\n        case 7:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                c6 + _toStringWithNull(a7) + c7;\n        case 8:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;\n        case 9:\n            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;\n        default:\n            throw new Error(\"Does not support more than 9 expressions\");\n    }\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction _toStringWithNull(v) {\n    return v != null ? v.toString() : '';\n}\n/** @type {?} */\nexport var EMPTY_ARRAY = [];\n/** @type {?} */\nexport var EMPTY_MAP = {};\n//# sourceMappingURL=util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ViewEncapsulation } from '../metadata/view';\nimport { SecurityContext } from '../sanitization/security';\nimport { asElementData } from './types';\nimport { NOOP, calcBindingFlags, checkAndUpdateBinding, dispatchEvent, elementEventFullName, getParentRenderElement, resolveDefinition, resolveRendererType2, splitMatchedQueriesDsl, splitNamespace } from './util';\n/**\n * @param {?} flags\n * @param {?} matchedQueriesDsl\n * @param {?} ngContentIndex\n * @param {?} childCount\n * @param {?=} handleEvent\n * @param {?=} templateFactory\n * @return {?}\n */\nexport function anchorDef(flags, matchedQueriesDsl, ngContentIndex, childCount, handleEvent, templateFactory) {\n    flags |= 1 /* TypeElement */;\n    var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;\n    /** @type {?} */\n    var template = templateFactory ? resolveDefinition(templateFactory) : null;\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        flags: flags,\n        checkIndex: -1,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount,\n        bindings: [],\n        bindingFlags: 0,\n        outputs: [],\n        element: {\n            ns: null,\n            name: null,\n            attrs: null, template: template,\n            componentProvider: null,\n            componentView: null,\n            componentRendererType: null,\n            publicProviders: null,\n            allProviders: null,\n            handleEvent: handleEvent || NOOP\n        },\n        provider: null,\n        text: null,\n        query: null,\n        ngContent: null\n    };\n}\n/**\n * @param {?} checkIndex\n * @param {?} flags\n * @param {?} matchedQueriesDsl\n * @param {?} ngContentIndex\n * @param {?} childCount\n * @param {?} namespaceAndName\n * @param {?=} fixedAttrs\n * @param {?=} bindings\n * @param {?=} outputs\n * @param {?=} handleEvent\n * @param {?=} componentView\n * @param {?=} componentRendererType\n * @return {?}\n */\nexport function elementDef(checkIndex, flags, matchedQueriesDsl, ngContentIndex, childCount, namespaceAndName, fixedAttrs, bindings, outputs, handleEvent, componentView, componentRendererType) {\n    if (fixedAttrs === void 0) { fixedAttrs = []; }\n    var _a;\n    if (!handleEvent) {\n        handleEvent = NOOP;\n    }\n    var _b = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _b.matchedQueries, references = _b.references, matchedQueryIds = _b.matchedQueryIds;\n    /** @type {?} */\n    var ns = /** @type {?} */ ((null));\n    /** @type {?} */\n    var name = /** @type {?} */ ((null));\n    if (namespaceAndName) {\n        _a = splitNamespace(namespaceAndName), ns = _a[0], name = _a[1];\n    }\n    bindings = bindings || [];\n    /** @type {?} */\n    var bindingDefs = new Array(bindings.length);\n    for (var i = 0; i < bindings.length; i++) {\n        var _c = bindings[i], bindingFlags = _c[0], namespaceAndName_1 = _c[1], suffixOrSecurityContext = _c[2];\n        var _d = splitNamespace(namespaceAndName_1), ns_1 = _d[0], name_1 = _d[1];\n        /** @type {?} */\n        var securityContext = /** @type {?} */ ((undefined));\n        /** @type {?} */\n        var suffix = /** @type {?} */ ((undefined));\n        switch (bindingFlags & 15 /* Types */) {\n            case 4 /* TypeElementStyle */:\n                suffix = /** @type {?} */ (suffixOrSecurityContext);\n                break;\n            case 1 /* TypeElementAttribute */:\n            case 8 /* TypeProperty */:\n                securityContext = /** @type {?} */ (suffixOrSecurityContext);\n                break;\n        }\n        bindingDefs[i] =\n            { flags: bindingFlags, ns: ns_1, name: name_1, nonMinifiedName: name_1, securityContext: securityContext, suffix: suffix };\n    }\n    outputs = outputs || [];\n    /** @type {?} */\n    var outputDefs = new Array(outputs.length);\n    for (var i = 0; i < outputs.length; i++) {\n        var _e = outputs[i], target = _e[0], eventName = _e[1];\n        outputDefs[i] = {\n            type: 0 /* ElementOutput */,\n            target: /** @type {?} */ (target), eventName: eventName,\n            propName: null\n        };\n    }\n    fixedAttrs = fixedAttrs || [];\n    /** @type {?} */\n    var attrs = /** @type {?} */ (fixedAttrs.map(function (_a) {\n        var namespaceAndName = _a[0], value = _a[1];\n        var _b = splitNamespace(namespaceAndName), ns = _b[0], name = _b[1];\n        return [ns, name, value];\n    }));\n    componentRendererType = resolveRendererType2(componentRendererType);\n    if (componentView) {\n        flags |= 33554432 /* ComponentView */;\n    }\n    flags |= 1 /* TypeElement */;\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex: checkIndex,\n        flags: flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount,\n        bindings: bindingDefs,\n        bindingFlags: calcBindingFlags(bindingDefs),\n        outputs: outputDefs,\n        element: {\n            ns: ns,\n            name: name,\n            attrs: attrs,\n            template: null,\n            // will bet set by the view definition\n            componentProvider: null,\n            componentView: componentView || null,\n            componentRendererType: componentRendererType,\n            publicProviders: null,\n            allProviders: null,\n            handleEvent: handleEvent || NOOP,\n        },\n        provider: null,\n        text: null,\n        query: null,\n        ngContent: null\n    };\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nexport function createElement(view, renderHost, def) {\n    /** @type {?} */\n    var elDef = /** @type {?} */ ((def.element));\n    /** @type {?} */\n    var rootSelectorOrNode = view.root.selectorOrNode;\n    /** @type {?} */\n    var renderer = view.renderer;\n    /** @type {?} */\n    var el;\n    if (view.parent || !rootSelectorOrNode) {\n        if (elDef.name) {\n            el = renderer.createElement(elDef.name, elDef.ns);\n        }\n        else {\n            el = renderer.createComment('');\n        }\n        /** @type {?} */\n        var parentEl = getParentRenderElement(view, renderHost, def);\n        if (parentEl) {\n            renderer.appendChild(parentEl, el);\n        }\n    }\n    else {\n        /** @type {?} */\n        var preserveContent = (!!elDef.componentRendererType &&\n            elDef.componentRendererType.encapsulation === ViewEncapsulation.ShadowDom);\n        el = renderer.selectRootElement(rootSelectorOrNode, preserveContent);\n    }\n    if (elDef.attrs) {\n        for (var i = 0; i < elDef.attrs.length; i++) {\n            var _a = elDef.attrs[i], ns = _a[0], name_2 = _a[1], value = _a[2];\n            renderer.setAttribute(el, name_2, value, ns);\n        }\n    }\n    return el;\n}\n/**\n * @param {?} view\n * @param {?} compView\n * @param {?} def\n * @param {?} el\n * @return {?}\n */\nexport function listenToElementOutputs(view, compView, def, el) {\n    for (var i = 0; i < def.outputs.length; i++) {\n        /** @type {?} */\n        var output = def.outputs[i];\n        /** @type {?} */\n        var handleEventClosure = renderEventHandlerClosure(view, def.nodeIndex, elementEventFullName(output.target, output.eventName));\n        /** @type {?} */\n        var listenTarget = output.target;\n        /** @type {?} */\n        var listenerView = view;\n        if (output.target === 'component') {\n            listenTarget = null;\n            listenerView = compView;\n        }\n        /** @type {?} */\n        var disposable = /** @type {?} */ (listenerView.renderer.listen(listenTarget || el, output.eventName, handleEventClosure)); /** @type {?} */\n        ((view.disposables))[def.outputIndex + i] = disposable;\n    }\n}\n/**\n * @param {?} view\n * @param {?} index\n * @param {?} eventName\n * @return {?}\n */\nfunction renderEventHandlerClosure(view, index, eventName) {\n    return function (event) { return dispatchEvent(view, index, eventName, event); };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nexport function checkAndUpdateElementInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    var bindLen = def.bindings.length;\n    /** @type {?} */\n    var changed = false;\n    if (bindLen > 0 && checkAndUpdateElementValue(view, def, 0, v0))\n        changed = true;\n    if (bindLen > 1 && checkAndUpdateElementValue(view, def, 1, v1))\n        changed = true;\n    if (bindLen > 2 && checkAndUpdateElementValue(view, def, 2, v2))\n        changed = true;\n    if (bindLen > 3 && checkAndUpdateElementValue(view, def, 3, v3))\n        changed = true;\n    if (bindLen > 4 && checkAndUpdateElementValue(view, def, 4, v4))\n        changed = true;\n    if (bindLen > 5 && checkAndUpdateElementValue(view, def, 5, v5))\n        changed = true;\n    if (bindLen > 6 && checkAndUpdateElementValue(view, def, 6, v6))\n        changed = true;\n    if (bindLen > 7 && checkAndUpdateElementValue(view, def, 7, v7))\n        changed = true;\n    if (bindLen > 8 && checkAndUpdateElementValue(view, def, 8, v8))\n        changed = true;\n    if (bindLen > 9 && checkAndUpdateElementValue(view, def, 9, v9))\n        changed = true;\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nexport function checkAndUpdateElementDynamic(view, def, values) {\n    /** @type {?} */\n    var changed = false;\n    for (var i = 0; i < values.length; i++) {\n        if (checkAndUpdateElementValue(view, def, i, values[i]))\n            changed = true;\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @return {?}\n */\nfunction checkAndUpdateElementValue(view, def, bindingIdx, value) {\n    if (!checkAndUpdateBinding(view, def, bindingIdx, value)) {\n        return false;\n    }\n    /** @type {?} */\n    var binding = def.bindings[bindingIdx];\n    /** @type {?} */\n    var elData = asElementData(view, def.nodeIndex);\n    /** @type {?} */\n    var renderNode = elData.renderElement;\n    /** @type {?} */\n    var name = /** @type {?} */ ((binding.name));\n    switch (binding.flags & 15 /* Types */) {\n        case 1 /* TypeElementAttribute */:\n            setElementAttribute(view, binding, renderNode, binding.ns, name, value);\n            break;\n        case 2 /* TypeElementClass */:\n            setElementClass(view, renderNode, name, value);\n            break;\n        case 4 /* TypeElementStyle */:\n            setElementStyle(view, binding, renderNode, name, value);\n            break;\n        case 8 /* TypeProperty */:\n            /** @type {?} */\n            var bindView = (def.flags & 33554432 /* ComponentView */ &&\n                binding.flags & 32 /* SyntheticHostProperty */) ?\n                elData.componentView :\n                view;\n            setElementProperty(bindView, binding, renderNode, name, value);\n            break;\n    }\n    return true;\n}\n/**\n * @param {?} view\n * @param {?} binding\n * @param {?} renderNode\n * @param {?} ns\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nfunction setElementAttribute(view, binding, renderNode, ns, name, value) {\n    /** @type {?} */\n    var securityContext = binding.securityContext;\n    /** @type {?} */\n    var renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;\n    renderValue = renderValue != null ? renderValue.toString() : null;\n    /** @type {?} */\n    var renderer = view.renderer;\n    if (value != null) {\n        renderer.setAttribute(renderNode, name, renderValue, ns);\n    }\n    else {\n        renderer.removeAttribute(renderNode, name, ns);\n    }\n}\n/**\n * @param {?} view\n * @param {?} renderNode\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nfunction setElementClass(view, renderNode, name, value) {\n    /** @type {?} */\n    var renderer = view.renderer;\n    if (value) {\n        renderer.addClass(renderNode, name);\n    }\n    else {\n        renderer.removeClass(renderNode, name);\n    }\n}\n/**\n * @param {?} view\n * @param {?} binding\n * @param {?} renderNode\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nfunction setElementStyle(view, binding, renderNode, name, value) {\n    /** @type {?} */\n    var renderValue = view.root.sanitizer.sanitize(SecurityContext.STYLE, /** @type {?} */ (value));\n    if (renderValue != null) {\n        renderValue = renderValue.toString();\n        /** @type {?} */\n        var unit = binding.suffix;\n        if (unit != null) {\n            renderValue = renderValue + unit;\n        }\n    }\n    else {\n        renderValue = null;\n    }\n    /** @type {?} */\n    var renderer = view.renderer;\n    if (renderValue != null) {\n        renderer.setStyle(renderNode, name, renderValue);\n    }\n    else {\n        renderer.removeStyle(renderNode, name);\n    }\n}\n/**\n * @param {?} view\n * @param {?} binding\n * @param {?} renderNode\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nfunction setElementProperty(view, binding, renderNode, name, value) {\n    /** @type {?} */\n    var securityContext = binding.securityContext;\n    /** @type {?} */\n    var renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;\n    view.renderer.setProperty(renderNode, name, renderValue);\n}\n//# sourceMappingURL=element.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getInjectableDef } from '../di/defs';\nimport { resolveForwardRef } from '../di/forward_ref';\nimport { INJECTOR, Injector } from '../di/injector';\nimport { setCurrentInjector } from '../di/injector_compatibility';\nimport { APP_ROOT } from '../di/scope';\nimport { NgModuleRef } from '../linker/ng_module_factory';\nimport { stringify } from '../util';\nimport { splitDepsDsl, tokenKey } from './util';\n/** @type {?} */\nvar UNDEFINED_VALUE = new Object();\n/** @type {?} */\nvar InjectorRefTokenKey = tokenKey(Injector);\n/** @type {?} */\nvar INJECTORRefTokenKey = tokenKey(INJECTOR);\n/** @type {?} */\nvar NgModuleRefTokenKey = tokenKey(NgModuleRef);\n/**\n * @param {?} flags\n * @param {?} token\n * @param {?} value\n * @param {?} deps\n * @return {?}\n */\nexport function moduleProvideDef(flags, token, value, deps) {\n    // Need to resolve forwardRefs as e.g. for `useValue` we\n    // lowered the expression and then stopped evaluating it,\n    // i.e. also didn't unwrap it.\n    value = resolveForwardRef(value);\n    /** @type {?} */\n    var depDefs = splitDepsDsl(deps, stringify(token));\n    return {\n        // will bet set by the module definition\n        index: -1,\n        deps: depDefs, flags: flags, token: token, value: value\n    };\n}\n/**\n * @param {?} providers\n * @return {?}\n */\nexport function moduleDef(providers) {\n    /** @type {?} */\n    var providersByKey = {};\n    /** @type {?} */\n    var modules = [];\n    /** @type {?} */\n    var isRoot = false;\n    for (var i = 0; i < providers.length; i++) {\n        /** @type {?} */\n        var provider = providers[i];\n        if (provider.token === APP_ROOT && provider.value === true) {\n            isRoot = true;\n        }\n        if (provider.flags & 1073741824 /* TypeNgModule */) {\n            modules.push(provider.token);\n        }\n        provider.index = i;\n        providersByKey[tokenKey(provider.token)] = provider;\n    }\n    return {\n        // Will be filled later...\n        factory: null,\n        providersByKey: providersByKey,\n        providers: providers,\n        modules: modules,\n        isRoot: isRoot,\n    };\n}\n/**\n * @param {?} data\n * @return {?}\n */\nexport function initNgModule(data) {\n    /** @type {?} */\n    var def = data._def;\n    /** @type {?} */\n    var providers = data._providers = new Array(def.providers.length);\n    for (var i = 0; i < def.providers.length; i++) {\n        /** @type {?} */\n        var provDef = def.providers[i];\n        if (!(provDef.flags & 4096 /* LazyProvider */)) {\n            // Make sure the provider has not been already initialized outside this loop.\n            if (providers[i] === undefined) {\n                providers[i] = _createProviderInstance(data, provDef);\n            }\n        }\n    }\n}\n/**\n * @param {?} data\n * @param {?} depDef\n * @param {?=} notFoundValue\n * @return {?}\n */\nexport function resolveNgModuleDep(data, depDef, notFoundValue) {\n    if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n    /** @type {?} */\n    var former = setCurrentInjector(data);\n    try {\n        if (depDef.flags & 8 /* Value */) {\n            return depDef.token;\n        }\n        if (depDef.flags & 2 /* Optional */) {\n            notFoundValue = null;\n        }\n        if (depDef.flags & 1 /* SkipSelf */) {\n            return data._parent.get(depDef.token, notFoundValue);\n        }\n        /** @type {?} */\n        var tokenKey_1 = depDef.tokenKey;\n        switch (tokenKey_1) {\n            case InjectorRefTokenKey:\n            case INJECTORRefTokenKey:\n            case NgModuleRefTokenKey:\n                return data;\n        }\n        /** @type {?} */\n        var providerDef = data._def.providersByKey[tokenKey_1];\n        /** @type {?} */\n        var injectableDef = void 0;\n        if (providerDef) {\n            /** @type {?} */\n            var providerInstance = data._providers[providerDef.index];\n            if (providerInstance === undefined) {\n                providerInstance = data._providers[providerDef.index] =\n                    _createProviderInstance(data, providerDef);\n            }\n            return providerInstance === UNDEFINED_VALUE ? undefined : providerInstance;\n        }\n        else if ((injectableDef = getInjectableDef(depDef.token)) && targetsModule(data, injectableDef)) {\n            /** @type {?} */\n            var index = data._providers.length;\n            data._def.providersByKey[depDef.tokenKey] = {\n                flags: 1024 /* TypeFactoryProvider */ | 4096 /* LazyProvider */,\n                value: injectableDef.factory,\n                deps: [], index: index,\n                token: depDef.token,\n            };\n            data._providers[index] = UNDEFINED_VALUE;\n            return (data._providers[index] =\n                _createProviderInstance(data, data._def.providersByKey[depDef.tokenKey]));\n        }\n        else if (depDef.flags & 4 /* Self */) {\n            return notFoundValue;\n        }\n        return data._parent.get(depDef.token, notFoundValue);\n    }\n    finally {\n        setCurrentInjector(former);\n    }\n}\n/**\n * @param {?} ngModule\n * @param {?} scope\n * @return {?}\n */\nfunction moduleTransitivelyPresent(ngModule, scope) {\n    return ngModule._def.modules.indexOf(scope) > -1;\n}\n/**\n * @param {?} ngModule\n * @param {?} def\n * @return {?}\n */\nfunction targetsModule(ngModule, def) {\n    return def.providedIn != null && (moduleTransitivelyPresent(ngModule, def.providedIn) ||\n        def.providedIn === 'root' && ngModule._def.isRoot);\n}\n/**\n * @param {?} ngModule\n * @param {?} providerDef\n * @return {?}\n */\nfunction _createProviderInstance(ngModule, providerDef) {\n    /** @type {?} */\n    var injectable;\n    switch (providerDef.flags & 201347067 /* Types */) {\n        case 512 /* TypeClassProvider */:\n            injectable = _createClass(ngModule, providerDef.value, providerDef.deps);\n            break;\n        case 1024 /* TypeFactoryProvider */:\n            injectable = _callFactory(ngModule, providerDef.value, providerDef.deps);\n            break;\n        case 2048 /* TypeUseExistingProvider */:\n            injectable = resolveNgModuleDep(ngModule, providerDef.deps[0]);\n            break;\n        case 256 /* TypeValueProvider */:\n            injectable = providerDef.value;\n            break;\n    }\n    // The read of `ngOnDestroy` here is slightly expensive as it's megamorphic, so it should be\n    // avoided if possible. The sequence of checks here determines whether ngOnDestroy needs to be\n    // checked. It might not if the `injectable` isn't an object or if NodeFlags.OnDestroy is already\n    // set (ngOnDestroy was detected statically).\n    if (injectable !== UNDEFINED_VALUE && injectable != null && typeof injectable === 'object' &&\n        !(providerDef.flags & 131072 /* OnDestroy */) && typeof injectable.ngOnDestroy === 'function') {\n        providerDef.flags |= 131072 /* OnDestroy */;\n    }\n    return injectable === undefined ? UNDEFINED_VALUE : injectable;\n}\n/**\n * @param {?} ngModule\n * @param {?} ctor\n * @param {?} deps\n * @return {?}\n */\nfunction _createClass(ngModule, ctor, deps) {\n    /** @type {?} */\n    var len = deps.length;\n    switch (len) {\n        case 0:\n            return new ctor();\n        case 1:\n            return new ctor(resolveNgModuleDep(ngModule, deps[0]));\n        case 2:\n            return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));\n        case 3:\n            return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));\n        default:\n            /** @type {?} */\n            var depValues = new Array(len);\n            for (var i = 0; i < len; i++) {\n                depValues[i] = resolveNgModuleDep(ngModule, deps[i]);\n            }\n            return new (ctor.bind.apply(ctor, [void 0].concat(depValues)))();\n    }\n}\n/**\n * @param {?} ngModule\n * @param {?} factory\n * @param {?} deps\n * @return {?}\n */\nfunction _callFactory(ngModule, factory, deps) {\n    /** @type {?} */\n    var len = deps.length;\n    switch (len) {\n        case 0:\n            return factory();\n        case 1:\n            return factory(resolveNgModuleDep(ngModule, deps[0]));\n        case 2:\n            return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));\n        case 3:\n            return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));\n        default:\n            /** @type {?} */\n            var depValues = Array(len);\n            for (var i = 0; i < len; i++) {\n                depValues[i] = resolveNgModuleDep(ngModule, deps[i]);\n            }\n            return factory.apply(void 0, depValues);\n    }\n}\n/**\n * @param {?} ngModule\n * @param {?} lifecycles\n * @return {?}\n */\nexport function callNgModuleLifecycle(ngModule, lifecycles) {\n    /** @type {?} */\n    var def = ngModule._def;\n    /** @type {?} */\n    var destroyed = new Set();\n    for (var i = 0; i < def.providers.length; i++) {\n        /** @type {?} */\n        var provDef = def.providers[i];\n        if (provDef.flags & 131072 /* OnDestroy */) {\n            /** @type {?} */\n            var instance = ngModule._providers[i];\n            if (instance && instance !== UNDEFINED_VALUE) {\n                /** @type {?} */\n                var onDestroy = instance.ngOnDestroy;\n                if (typeof onDestroy === 'function' && !destroyed.has(instance)) {\n                    onDestroy.apply(instance);\n                    destroyed.add(instance);\n                }\n            }\n        }\n    }\n}\n//# sourceMappingURL=ng_module.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Services } from './types';\nimport { declaredViewContainer, renderNode, visitRootRenderNodes } from './util';\n/**\n * @param {?} parentView\n * @param {?} elementData\n * @param {?} viewIndex\n * @param {?} view\n * @return {?}\n */\nexport function attachEmbeddedView(parentView, elementData, viewIndex, view) {\n    /** @type {?} */\n    var embeddedViews = /** @type {?} */ ((elementData.viewContainer))._embeddedViews;\n    if (viewIndex === null || viewIndex === undefined) {\n        viewIndex = embeddedViews.length;\n    }\n    view.viewContainerParent = parentView;\n    addToArray(embeddedViews, /** @type {?} */ ((viewIndex)), view);\n    attachProjectedView(elementData, view);\n    Services.dirtyParentQueries(view);\n    /** @type {?} */\n    var prevView = /** @type {?} */ ((viewIndex)) > 0 ? embeddedViews[/** @type {?} */ ((viewIndex)) - 1] : null;\n    renderAttachEmbeddedView(elementData, prevView, view);\n}\n/**\n * @param {?} vcElementData\n * @param {?} view\n * @return {?}\n */\nfunction attachProjectedView(vcElementData, view) {\n    /** @type {?} */\n    var dvcElementData = declaredViewContainer(view);\n    if (!dvcElementData || dvcElementData === vcElementData ||\n        view.state & 16 /* IsProjectedView */) {\n        return;\n    }\n    // Note: For performance reasons, we\n    // - add a view to template._projectedViews only 1x throughout its lifetime,\n    //   and remove it not until the view is destroyed.\n    //   (hard, as when a parent view is attached/detached we would need to attach/detach all\n    //    nested projected views as well, even across component boundaries).\n    // - don't track the insertion order of views in the projected views array\n    //   (hard, as when the views of the same template are inserted different view containers)\n    view.state |= 16 /* IsProjectedView */;\n    /** @type {?} */\n    var projectedViews = dvcElementData.template._projectedViews;\n    if (!projectedViews) {\n        projectedViews = dvcElementData.template._projectedViews = [];\n    }\n    projectedViews.push(view);\n    // Note: we are changing the NodeDef here as we cannot calculate\n    // the fact whether a template is used for projection during compilation.\n    markNodeAsProjectedTemplate(/** @type {?} */ ((view.parent)).def, /** @type {?} */ ((view.parentNodeDef)));\n}\n/**\n * @param {?} viewDef\n * @param {?} nodeDef\n * @return {?}\n */\nfunction markNodeAsProjectedTemplate(viewDef, nodeDef) {\n    if (nodeDef.flags & 4 /* ProjectedTemplate */) {\n        return;\n    }\n    viewDef.nodeFlags |= 4 /* ProjectedTemplate */;\n    nodeDef.flags |= 4 /* ProjectedTemplate */;\n    /** @type {?} */\n    var parentNodeDef = nodeDef.parent;\n    while (parentNodeDef) {\n        parentNodeDef.childFlags |= 4 /* ProjectedTemplate */;\n        parentNodeDef = parentNodeDef.parent;\n    }\n}\n/**\n * @param {?} elementData\n * @param {?=} viewIndex\n * @return {?}\n */\nexport function detachEmbeddedView(elementData, viewIndex) {\n    /** @type {?} */\n    var embeddedViews = /** @type {?} */ ((elementData.viewContainer))._embeddedViews;\n    if (viewIndex == null || viewIndex >= embeddedViews.length) {\n        viewIndex = embeddedViews.length - 1;\n    }\n    if (viewIndex < 0) {\n        return null;\n    }\n    /** @type {?} */\n    var view = embeddedViews[viewIndex];\n    view.viewContainerParent = null;\n    removeFromArray(embeddedViews, viewIndex);\n    // See attachProjectedView for why we don't update projectedViews here.\n    Services.dirtyParentQueries(view);\n    renderDetachView(view);\n    return view;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function detachProjectedView(view) {\n    if (!(view.state & 16 /* IsProjectedView */)) {\n        return;\n    }\n    /** @type {?} */\n    var dvcElementData = declaredViewContainer(view);\n    if (dvcElementData) {\n        /** @type {?} */\n        var projectedViews = dvcElementData.template._projectedViews;\n        if (projectedViews) {\n            removeFromArray(projectedViews, projectedViews.indexOf(view));\n            Services.dirtyParentQueries(view);\n        }\n    }\n}\n/**\n * @param {?} elementData\n * @param {?} oldViewIndex\n * @param {?} newViewIndex\n * @return {?}\n */\nexport function moveEmbeddedView(elementData, oldViewIndex, newViewIndex) {\n    /** @type {?} */\n    var embeddedViews = /** @type {?} */ ((elementData.viewContainer))._embeddedViews;\n    /** @type {?} */\n    var view = embeddedViews[oldViewIndex];\n    removeFromArray(embeddedViews, oldViewIndex);\n    if (newViewIndex == null) {\n        newViewIndex = embeddedViews.length;\n    }\n    addToArray(embeddedViews, newViewIndex, view);\n    // Note: Don't need to change projectedViews as the order in there\n    // as always invalid...\n    Services.dirtyParentQueries(view);\n    renderDetachView(view);\n    /** @type {?} */\n    var prevView = newViewIndex > 0 ? embeddedViews[newViewIndex - 1] : null;\n    renderAttachEmbeddedView(elementData, prevView, view);\n    return view;\n}\n/**\n * @param {?} elementData\n * @param {?} prevView\n * @param {?} view\n * @return {?}\n */\nfunction renderAttachEmbeddedView(elementData, prevView, view) {\n    /** @type {?} */\n    var prevRenderNode = prevView ? renderNode(prevView, /** @type {?} */ ((prevView.def.lastRenderRootNode))) :\n        elementData.renderElement;\n    /** @type {?} */\n    var parentNode = view.renderer.parentNode(prevRenderNode);\n    /** @type {?} */\n    var nextSibling = view.renderer.nextSibling(prevRenderNode);\n    // Note: We can't check if `nextSibling` is present, as on WebWorkers it will always be!\n    // However, browsers automatically do `appendChild` when there is no `nextSibling`.\n    visitRootRenderNodes(view, 2 /* InsertBefore */, parentNode, nextSibling, undefined);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function renderDetachView(view) {\n    visitRootRenderNodes(view, 3 /* RemoveChild */, null, null, undefined);\n}\n/**\n * @param {?} arr\n * @param {?} index\n * @param {?} value\n * @return {?}\n */\nfunction addToArray(arr, index, value) {\n    // perf: array.push is faster than array.splice!\n    if (index >= arr.length) {\n        arr.push(value);\n    }\n    else {\n        arr.splice(index, 0, value);\n    }\n}\n/**\n * @param {?} arr\n * @param {?} index\n * @return {?}\n */\nfunction removeFromArray(arr, index) {\n    // perf: array.pop is faster than array.splice!\n    if (index >= arr.length - 1) {\n        arr.pop();\n    }\n    else {\n        arr.splice(index, 1);\n    }\n}\n//# sourceMappingURL=view_attach.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Injector } from '../di/injector';\nimport { InjectFlags } from '../di/injector_compatibility';\nimport { ComponentFactory, ComponentRef } from '../linker/component_factory';\nimport { ComponentFactoryBoundToModule, ComponentFactoryResolver } from '../linker/component_factory_resolver';\nimport { ElementRef } from '../linker/element_ref';\nimport { NgModuleRef } from '../linker/ng_module_factory';\nimport { TemplateRef } from '../linker/template_ref';\nimport { stringify } from '../util';\nimport { VERSION } from '../version';\nimport { callNgModuleLifecycle, initNgModule, resolveNgModuleDep } from './ng_module';\nimport { Services, asElementData, asProviderData, asTextData } from './types';\nimport { markParentViewsForCheck, resolveDefinition, rootRenderNodes, splitNamespace, tokenKey, viewParentEl } from './util';\nimport { attachEmbeddedView, detachEmbeddedView, moveEmbeddedView, renderDetachView } from './view_attach';\n/** @type {?} */\nvar EMPTY_CONTEXT = new Object();\n/**\n * @param {?} selector\n * @param {?} componentType\n * @param {?} viewDefFactory\n * @param {?} inputs\n * @param {?} outputs\n * @param {?} ngContentSelectors\n * @return {?}\n */\nexport function createComponentFactory(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors) {\n    return new ComponentFactory_(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors);\n}\n/**\n * @param {?} componentFactory\n * @return {?}\n */\nexport function getComponentViewDefinitionFactory(componentFactory) {\n    return (/** @type {?} */ (componentFactory)).viewDefFactory;\n}\nvar ComponentFactory_ = /** @class */ (function (_super) {\n    tslib_1.__extends(ComponentFactory_, _super);\n    function ComponentFactory_(selector, componentType, viewDefFactory, _inputs, _outputs, ngContentSelectors) {\n        var _this = \n        // Attention: this ctor is called as top level function.\n        // Putting any logic in here will destroy closure tree shaking!\n        _super.call(this) || this;\n        _this.selector = selector;\n        _this.componentType = componentType;\n        _this._inputs = _inputs;\n        _this._outputs = _outputs;\n        _this.ngContentSelectors = ngContentSelectors;\n        _this.viewDefFactory = viewDefFactory;\n        return _this;\n    }\n    Object.defineProperty(ComponentFactory_.prototype, \"inputs\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var inputsArr = [];\n            /** @type {?} */\n            var inputs = /** @type {?} */ ((this._inputs));\n            for (var propName in inputs) {\n                /** @type {?} */\n                var templateName = inputs[propName];\n                inputsArr.push({ propName: propName, templateName: templateName });\n            }\n            return inputsArr;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComponentFactory_.prototype, \"outputs\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var outputsArr = [];\n            for (var propName in this._outputs) {\n                /** @type {?} */\n                var templateName = this._outputs[propName];\n                outputsArr.push({ propName: propName, templateName: templateName });\n            }\n            return outputsArr;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Creates a new component.\n     */\n    /**\n     * Creates a new component.\n     * @param {?} injector\n     * @param {?=} projectableNodes\n     * @param {?=} rootSelectorOrNode\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    ComponentFactory_.prototype.create = /**\n     * Creates a new component.\n     * @param {?} injector\n     * @param {?=} projectableNodes\n     * @param {?=} rootSelectorOrNode\n     * @param {?=} ngModule\n     * @return {?}\n     */\n    function (injector, projectableNodes, rootSelectorOrNode, ngModule) {\n        if (!ngModule) {\n            throw new Error('ngModule should be provided');\n        }\n        /** @type {?} */\n        var viewDef = resolveDefinition(this.viewDefFactory);\n        /** @type {?} */\n        var componentNodeIndex = /** @type {?} */ ((/** @type {?} */ ((viewDef.nodes[0].element)).componentProvider)).nodeIndex;\n        /** @type {?} */\n        var view = Services.createRootView(injector, projectableNodes || [], rootSelectorOrNode, viewDef, ngModule, EMPTY_CONTEXT);\n        /** @type {?} */\n        var component = asProviderData(view, componentNodeIndex).instance;\n        if (rootSelectorOrNode) {\n            view.renderer.setAttribute(asElementData(view, 0).renderElement, 'ng-version', VERSION.full);\n        }\n        return new ComponentRef_(view, new ViewRef_(view), component);\n    };\n    return ComponentFactory_;\n}(ComponentFactory));\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ComponentFactory_.prototype.viewDefFactory;\n    /** @type {?} */\n    ComponentFactory_.prototype.selector;\n    /** @type {?} */\n    ComponentFactory_.prototype.componentType;\n    /** @type {?} */\n    ComponentFactory_.prototype._inputs;\n    /** @type {?} */\n    ComponentFactory_.prototype._outputs;\n    /** @type {?} */\n    ComponentFactory_.prototype.ngContentSelectors;\n}\nvar ComponentRef_ = /** @class */ (function (_super) {\n    tslib_1.__extends(ComponentRef_, _super);\n    function ComponentRef_(_view, _viewRef, _component) {\n        var _this = _super.call(this) || this;\n        _this._view = _view;\n        _this._viewRef = _viewRef;\n        _this._component = _component;\n        _this._elDef = _this._view.def.nodes[0];\n        _this.hostView = _viewRef;\n        _this.changeDetectorRef = _viewRef;\n        _this.instance = _component;\n        return _this;\n    }\n    Object.defineProperty(ComponentRef_.prototype, \"location\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return new ElementRef(asElementData(this._view, this._elDef.nodeIndex).renderElement);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComponentRef_.prototype, \"injector\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return new Injector_(this._view, this._elDef); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ComponentRef_.prototype, \"componentType\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return /** @type {?} */ (this._component.constructor); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    ComponentRef_.prototype.destroy = /**\n     * @return {?}\n     */\n    function () { this._viewRef.destroy(); };\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    ComponentRef_.prototype.onDestroy = /**\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) { this._viewRef.onDestroy(callback); };\n    return ComponentRef_;\n}(ComponentRef));\nif (false) {\n    /** @type {?} */\n    ComponentRef_.prototype.hostView;\n    /** @type {?} */\n    ComponentRef_.prototype.instance;\n    /** @type {?} */\n    ComponentRef_.prototype.changeDetectorRef;\n    /** @type {?} */\n    ComponentRef_.prototype._elDef;\n    /** @type {?} */\n    ComponentRef_.prototype._view;\n    /** @type {?} */\n    ComponentRef_.prototype._viewRef;\n    /** @type {?} */\n    ComponentRef_.prototype._component;\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} elData\n * @return {?}\n */\nexport function createViewContainerData(view, elDef, elData) {\n    return new ViewContainerRef_(view, elDef, elData);\n}\nvar ViewContainerRef_ = /** @class */ (function () {\n    function ViewContainerRef_(_view, _elDef, _data) {\n        this._view = _view;\n        this._elDef = _elDef;\n        this._data = _data;\n        /**\n         * \\@internal\n         */\n        this._embeddedViews = [];\n    }\n    Object.defineProperty(ViewContainerRef_.prototype, \"element\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return new ElementRef(this._data.renderElement); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewContainerRef_.prototype, \"injector\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return new Injector_(this._view, this._elDef); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewContainerRef_.prototype, \"parentInjector\", {\n        /** @deprecated No replacement */\n        get: /**\n         * @deprecated No replacement\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var view = this._view;\n            /** @type {?} */\n            var elDef = this._elDef.parent;\n            while (!elDef && view) {\n                elDef = viewParentEl(view);\n                view = /** @type {?} */ ((view.parent));\n            }\n            return view ? new Injector_(view, elDef) : new Injector_(this._view, null);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.clear = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var len = this._embeddedViews.length;\n        for (var i = len - 1; i >= 0; i--) {\n            /** @type {?} */\n            var view = /** @type {?} */ ((detachEmbeddedView(this._data, i)));\n            Services.destroyView(view);\n        }\n    };\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.get = /**\n     * @param {?} index\n     * @return {?}\n     */\n    function (index) {\n        /** @type {?} */\n        var view = this._embeddedViews[index];\n        if (view) {\n            /** @type {?} */\n            var ref = new ViewRef_(view);\n            ref.attachToViewContainerRef(this);\n            return ref;\n        }\n        return null;\n    };\n    Object.defineProperty(ViewContainerRef_.prototype, \"length\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._embeddedViews.length; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @template C\n     * @param {?} templateRef\n     * @param {?=} context\n     * @param {?=} index\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.createEmbeddedView = /**\n     * @template C\n     * @param {?} templateRef\n     * @param {?=} context\n     * @param {?=} index\n     * @return {?}\n     */\n    function (templateRef, context, index) {\n        /** @type {?} */\n        var viewRef = templateRef.createEmbeddedView(context || /** @type {?} */ ({}));\n        this.insert(viewRef, index);\n        return viewRef;\n    };\n    /**\n     * @template C\n     * @param {?} componentFactory\n     * @param {?=} index\n     * @param {?=} injector\n     * @param {?=} projectableNodes\n     * @param {?=} ngModuleRef\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.createComponent = /**\n     * @template C\n     * @param {?} componentFactory\n     * @param {?=} index\n     * @param {?=} injector\n     * @param {?=} projectableNodes\n     * @param {?=} ngModuleRef\n     * @return {?}\n     */\n    function (componentFactory, index, injector, projectableNodes, ngModuleRef) {\n        /** @type {?} */\n        var contextInjector = injector || this.parentInjector;\n        if (!ngModuleRef && !(componentFactory instanceof ComponentFactoryBoundToModule)) {\n            ngModuleRef = contextInjector.get(NgModuleRef);\n        }\n        /** @type {?} */\n        var componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);\n        this.insert(componentRef.hostView, index);\n        return componentRef;\n    };\n    /**\n     * @param {?} viewRef\n     * @param {?=} index\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.insert = /**\n     * @param {?} viewRef\n     * @param {?=} index\n     * @return {?}\n     */\n    function (viewRef, index) {\n        if (viewRef.destroyed) {\n            throw new Error('Cannot insert a destroyed View in a ViewContainer!');\n        }\n        /** @type {?} */\n        var viewRef_ = /** @type {?} */ (viewRef);\n        /** @type {?} */\n        var viewData = viewRef_._view;\n        attachEmbeddedView(this._view, this._data, index, viewData);\n        viewRef_.attachToViewContainerRef(this);\n        return viewRef;\n    };\n    /**\n     * @param {?} viewRef\n     * @param {?} currentIndex\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.move = /**\n     * @param {?} viewRef\n     * @param {?} currentIndex\n     * @return {?}\n     */\n    function (viewRef, currentIndex) {\n        if (viewRef.destroyed) {\n            throw new Error('Cannot move a destroyed View in a ViewContainer!');\n        }\n        /** @type {?} */\n        var previousIndex = this._embeddedViews.indexOf(viewRef._view);\n        moveEmbeddedView(this._data, previousIndex, currentIndex);\n        return viewRef;\n    };\n    /**\n     * @param {?} viewRef\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.indexOf = /**\n     * @param {?} viewRef\n     * @return {?}\n     */\n    function (viewRef) {\n        return this._embeddedViews.indexOf((/** @type {?} */ (viewRef))._view);\n    };\n    /**\n     * @param {?=} index\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.remove = /**\n     * @param {?=} index\n     * @return {?}\n     */\n    function (index) {\n        /** @type {?} */\n        var viewData = detachEmbeddedView(this._data, index);\n        if (viewData) {\n            Services.destroyView(viewData);\n        }\n    };\n    /**\n     * @param {?=} index\n     * @return {?}\n     */\n    ViewContainerRef_.prototype.detach = /**\n     * @param {?=} index\n     * @return {?}\n     */\n    function (index) {\n        /** @type {?} */\n        var view = detachEmbeddedView(this._data, index);\n        return view ? new ViewRef_(view) : null;\n    };\n    return ViewContainerRef_;\n}());\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ViewContainerRef_.prototype._embeddedViews;\n    /** @type {?} */\n    ViewContainerRef_.prototype._view;\n    /** @type {?} */\n    ViewContainerRef_.prototype._elDef;\n    /** @type {?} */\n    ViewContainerRef_.prototype._data;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function createChangeDetectorRef(view) {\n    return new ViewRef_(view);\n}\nvar ViewRef_ = /** @class */ (function () {\n    function ViewRef_(_view) {\n        this._view = _view;\n        this._viewContainerRef = null;\n        this._appRef = null;\n    }\n    Object.defineProperty(ViewRef_.prototype, \"rootNodes\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return rootRenderNodes(this._view); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewRef_.prototype, \"context\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._view.context; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ViewRef_.prototype, \"destroyed\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return (this._view.state & 128 /* Destroyed */) !== 0; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    ViewRef_.prototype.markForCheck = /**\n     * @return {?}\n     */\n    function () { markParentViewsForCheck(this._view); };\n    /**\n     * @return {?}\n     */\n    ViewRef_.prototype.detach = /**\n     * @return {?}\n     */\n    function () { this._view.state &= ~4 /* Attached */; };\n    /**\n     * @return {?}\n     */\n    ViewRef_.prototype.detectChanges = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var fs = this._view.root.rendererFactory;\n        if (fs.begin) {\n            fs.begin();\n        }\n        try {\n            Services.checkAndUpdateView(this._view);\n        }\n        finally {\n            if (fs.end) {\n                fs.end();\n            }\n        }\n    };\n    /**\n     * @return {?}\n     */\n    ViewRef_.prototype.checkNoChanges = /**\n     * @return {?}\n     */\n    function () { Services.checkNoChangesView(this._view); };\n    /**\n     * @return {?}\n     */\n    ViewRef_.prototype.reattach = /**\n     * @return {?}\n     */\n    function () { this._view.state |= 4 /* Attached */; };\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    ViewRef_.prototype.onDestroy = /**\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) {\n        if (!this._view.disposables) {\n            this._view.disposables = [];\n        }\n        this._view.disposables.push(/** @type {?} */ (callback));\n    };\n    /**\n     * @return {?}\n     */\n    ViewRef_.prototype.destroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this._appRef) {\n            this._appRef.detachView(this);\n        }\n        else if (this._viewContainerRef) {\n            this._viewContainerRef.detach(this._viewContainerRef.indexOf(this));\n        }\n        Services.destroyView(this._view);\n    };\n    /**\n     * @return {?}\n     */\n    ViewRef_.prototype.detachFromAppRef = /**\n     * @return {?}\n     */\n    function () {\n        this._appRef = null;\n        renderDetachView(this._view);\n        Services.dirtyParentQueries(this._view);\n    };\n    /**\n     * @param {?} appRef\n     * @return {?}\n     */\n    ViewRef_.prototype.attachToAppRef = /**\n     * @param {?} appRef\n     * @return {?}\n     */\n    function (appRef) {\n        if (this._viewContainerRef) {\n            throw new Error('This view is already attached to a ViewContainer!');\n        }\n        this._appRef = appRef;\n    };\n    /**\n     * @param {?} vcRef\n     * @return {?}\n     */\n    ViewRef_.prototype.attachToViewContainerRef = /**\n     * @param {?} vcRef\n     * @return {?}\n     */\n    function (vcRef) {\n        if (this._appRef) {\n            throw new Error('This view is already attached directly to the ApplicationRef!');\n        }\n        this._viewContainerRef = vcRef;\n    };\n    return ViewRef_;\n}());\nexport { ViewRef_ };\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ViewRef_.prototype._view;\n    /** @type {?} */\n    ViewRef_.prototype._viewContainerRef;\n    /** @type {?} */\n    ViewRef_.prototype._appRef;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nexport function createTemplateData(view, def) {\n    return new TemplateRef_(view, def);\n}\nvar TemplateRef_ = /** @class */ (function (_super) {\n    tslib_1.__extends(TemplateRef_, _super);\n    function TemplateRef_(_parentView, _def) {\n        var _this = _super.call(this) || this;\n        _this._parentView = _parentView;\n        _this._def = _def;\n        return _this;\n    }\n    /**\n     * @param {?} context\n     * @return {?}\n     */\n    TemplateRef_.prototype.createEmbeddedView = /**\n     * @param {?} context\n     * @return {?}\n     */\n    function (context) {\n        return new ViewRef_(Services.createEmbeddedView(this._parentView, this._def, /** @type {?} */ ((/** @type {?} */ ((this._def.element)).template)), context));\n    };\n    Object.defineProperty(TemplateRef_.prototype, \"elementRef\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return new ElementRef(asElementData(this._parentView, this._def.nodeIndex).renderElement);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return TemplateRef_;\n}(TemplateRef));\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    TemplateRef_.prototype._projectedViews;\n    /** @type {?} */\n    TemplateRef_.prototype._parentView;\n    /** @type {?} */\n    TemplateRef_.prototype._def;\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @return {?}\n */\nexport function createInjector(view, elDef) {\n    return new Injector_(view, elDef);\n}\nvar Injector_ = /** @class */ (function () {\n    function Injector_(view, elDef) {\n        this.view = view;\n        this.elDef = elDef;\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    Injector_.prototype.get = /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    function (token, notFoundValue) {\n        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n        /** @type {?} */\n        var allowPrivateServices = this.elDef ? (this.elDef.flags & 33554432 /* ComponentView */) !== 0 : false;\n        return Services.resolveDep(this.view, this.elDef, allowPrivateServices, { flags: 0 /* None */, token: token, tokenKey: tokenKey(token) }, notFoundValue);\n    };\n    return Injector_;\n}());\nif (false) {\n    /** @type {?} */\n    Injector_.prototype.view;\n    /** @type {?} */\n    Injector_.prototype.elDef;\n}\n/**\n * @param {?} view\n * @param {?} index\n * @return {?}\n */\nexport function nodeValue(view, index) {\n    /** @type {?} */\n    var def = view.def.nodes[index];\n    if (def.flags & 1 /* TypeElement */) {\n        /** @type {?} */\n        var elData = asElementData(view, def.nodeIndex);\n        return /** @type {?} */ ((def.element)).template ? elData.template : elData.renderElement;\n    }\n    else if (def.flags & 2 /* TypeText */) {\n        return asTextData(view, def.nodeIndex).renderText;\n    }\n    else if (def.flags & (20224 /* CatProvider */ | 16 /* TypePipe */)) {\n        return asProviderData(view, def.nodeIndex).instance;\n    }\n    throw new Error(\"Illegal state: read nodeValue for node index \" + index);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function createRendererV1(view) {\n    return new RendererAdapter(view.renderer);\n}\nvar RendererAdapter = /** @class */ (function () {\n    function RendererAdapter(delegate) {\n        this.delegate = delegate;\n    }\n    /**\n     * @param {?} selectorOrNode\n     * @return {?}\n     */\n    RendererAdapter.prototype.selectRootElement = /**\n     * @param {?} selectorOrNode\n     * @return {?}\n     */\n    function (selectorOrNode) {\n        return this.delegate.selectRootElement(selectorOrNode);\n    };\n    /**\n     * @param {?} parent\n     * @param {?} namespaceAndName\n     * @return {?}\n     */\n    RendererAdapter.prototype.createElement = /**\n     * @param {?} parent\n     * @param {?} namespaceAndName\n     * @return {?}\n     */\n    function (parent, namespaceAndName) {\n        var _a = splitNamespace(namespaceAndName), ns = _a[0], name = _a[1];\n        /** @type {?} */\n        var el = this.delegate.createElement(name, ns);\n        if (parent) {\n            this.delegate.appendChild(parent, el);\n        }\n        return el;\n    };\n    /**\n     * @param {?} hostElement\n     * @return {?}\n     */\n    RendererAdapter.prototype.createViewRoot = /**\n     * @param {?} hostElement\n     * @return {?}\n     */\n    function (hostElement) { return hostElement; };\n    /**\n     * @param {?} parentElement\n     * @return {?}\n     */\n    RendererAdapter.prototype.createTemplateAnchor = /**\n     * @param {?} parentElement\n     * @return {?}\n     */\n    function (parentElement) {\n        /** @type {?} */\n        var comment = this.delegate.createComment('');\n        if (parentElement) {\n            this.delegate.appendChild(parentElement, comment);\n        }\n        return comment;\n    };\n    /**\n     * @param {?} parentElement\n     * @param {?} value\n     * @return {?}\n     */\n    RendererAdapter.prototype.createText = /**\n     * @param {?} parentElement\n     * @param {?} value\n     * @return {?}\n     */\n    function (parentElement, value) {\n        /** @type {?} */\n        var node = this.delegate.createText(value);\n        if (parentElement) {\n            this.delegate.appendChild(parentElement, node);\n        }\n        return node;\n    };\n    /**\n     * @param {?} parentElement\n     * @param {?} nodes\n     * @return {?}\n     */\n    RendererAdapter.prototype.projectNodes = /**\n     * @param {?} parentElement\n     * @param {?} nodes\n     * @return {?}\n     */\n    function (parentElement, nodes) {\n        for (var i = 0; i < nodes.length; i++) {\n            this.delegate.appendChild(parentElement, nodes[i]);\n        }\n    };\n    /**\n     * @param {?} node\n     * @param {?} viewRootNodes\n     * @return {?}\n     */\n    RendererAdapter.prototype.attachViewAfter = /**\n     * @param {?} node\n     * @param {?} viewRootNodes\n     * @return {?}\n     */\n    function (node, viewRootNodes) {\n        /** @type {?} */\n        var parentElement = this.delegate.parentNode(node);\n        /** @type {?} */\n        var nextSibling = this.delegate.nextSibling(node);\n        for (var i = 0; i < viewRootNodes.length; i++) {\n            this.delegate.insertBefore(parentElement, viewRootNodes[i], nextSibling);\n        }\n    };\n    /**\n     * @param {?} viewRootNodes\n     * @return {?}\n     */\n    RendererAdapter.prototype.detachView = /**\n     * @param {?} viewRootNodes\n     * @return {?}\n     */\n    function (viewRootNodes) {\n        for (var i = 0; i < viewRootNodes.length; i++) {\n            /** @type {?} */\n            var node = viewRootNodes[i];\n            /** @type {?} */\n            var parentElement = this.delegate.parentNode(node);\n            this.delegate.removeChild(parentElement, node);\n        }\n    };\n    /**\n     * @param {?} hostElement\n     * @param {?} viewAllNodes\n     * @return {?}\n     */\n    RendererAdapter.prototype.destroyView = /**\n     * @param {?} hostElement\n     * @param {?} viewAllNodes\n     * @return {?}\n     */\n    function (hostElement, viewAllNodes) {\n        for (var i = 0; i < viewAllNodes.length; i++) {\n            /** @type {?} */ ((this.delegate.destroyNode))(viewAllNodes[i]);\n        }\n    };\n    /**\n     * @param {?} renderElement\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    RendererAdapter.prototype.listen = /**\n     * @param {?} renderElement\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    function (renderElement, name, callback) {\n        return this.delegate.listen(renderElement, name, /** @type {?} */ (callback));\n    };\n    /**\n     * @param {?} target\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    RendererAdapter.prototype.listenGlobal = /**\n     * @param {?} target\n     * @param {?} name\n     * @param {?} callback\n     * @return {?}\n     */\n    function (target, name, callback) {\n        return this.delegate.listen(target, name, /** @type {?} */ (callback));\n    };\n    /**\n     * @param {?} renderElement\n     * @param {?} propertyName\n     * @param {?} propertyValue\n     * @return {?}\n     */\n    RendererAdapter.prototype.setElementProperty = /**\n     * @param {?} renderElement\n     * @param {?} propertyName\n     * @param {?} propertyValue\n     * @return {?}\n     */\n    function (renderElement, propertyName, propertyValue) {\n        this.delegate.setProperty(renderElement, propertyName, propertyValue);\n    };\n    /**\n     * @param {?} renderElement\n     * @param {?} namespaceAndName\n     * @param {?=} attributeValue\n     * @return {?}\n     */\n    RendererAdapter.prototype.setElementAttribute = /**\n     * @param {?} renderElement\n     * @param {?} namespaceAndName\n     * @param {?=} attributeValue\n     * @return {?}\n     */\n    function (renderElement, namespaceAndName, attributeValue) {\n        var _a = splitNamespace(namespaceAndName), ns = _a[0], name = _a[1];\n        if (attributeValue != null) {\n            this.delegate.setAttribute(renderElement, name, attributeValue, ns);\n        }\n        else {\n            this.delegate.removeAttribute(renderElement, name, ns);\n        }\n    };\n    /**\n     * @param {?} renderElement\n     * @param {?} propertyName\n     * @param {?} propertyValue\n     * @return {?}\n     */\n    RendererAdapter.prototype.setBindingDebugInfo = /**\n     * @param {?} renderElement\n     * @param {?} propertyName\n     * @param {?} propertyValue\n     * @return {?}\n     */\n    function (renderElement, propertyName, propertyValue) { };\n    /**\n     * @param {?} renderElement\n     * @param {?} className\n     * @param {?} isAdd\n     * @return {?}\n     */\n    RendererAdapter.prototype.setElementClass = /**\n     * @param {?} renderElement\n     * @param {?} className\n     * @param {?} isAdd\n     * @return {?}\n     */\n    function (renderElement, className, isAdd) {\n        if (isAdd) {\n            this.delegate.addClass(renderElement, className);\n        }\n        else {\n            this.delegate.removeClass(renderElement, className);\n        }\n    };\n    /**\n     * @param {?} renderElement\n     * @param {?} styleName\n     * @param {?=} styleValue\n     * @return {?}\n     */\n    RendererAdapter.prototype.setElementStyle = /**\n     * @param {?} renderElement\n     * @param {?} styleName\n     * @param {?=} styleValue\n     * @return {?}\n     */\n    function (renderElement, styleName, styleValue) {\n        if (styleValue != null) {\n            this.delegate.setStyle(renderElement, styleName, styleValue);\n        }\n        else {\n            this.delegate.removeStyle(renderElement, styleName);\n        }\n    };\n    /**\n     * @param {?} renderElement\n     * @param {?} methodName\n     * @param {?} args\n     * @return {?}\n     */\n    RendererAdapter.prototype.invokeElementMethod = /**\n     * @param {?} renderElement\n     * @param {?} methodName\n     * @param {?} args\n     * @return {?}\n     */\n    function (renderElement, methodName, args) {\n        (/** @type {?} */ (renderElement))[methodName].apply(renderElement, args);\n    };\n    /**\n     * @param {?} renderNode\n     * @param {?} text\n     * @return {?}\n     */\n    RendererAdapter.prototype.setText = /**\n     * @param {?} renderNode\n     * @param {?} text\n     * @return {?}\n     */\n    function (renderNode, text) { this.delegate.setValue(renderNode, text); };\n    /**\n     * @return {?}\n     */\n    RendererAdapter.prototype.animate = /**\n     * @return {?}\n     */\n    function () { throw new Error('Renderer.animate is no longer supported!'); };\n    return RendererAdapter;\n}());\nif (false) {\n    /** @type {?} */\n    RendererAdapter.prototype.delegate;\n}\n/**\n * @param {?} moduleType\n * @param {?} parent\n * @param {?} bootstrapComponents\n * @param {?} def\n * @return {?}\n */\nexport function createNgModuleRef(moduleType, parent, bootstrapComponents, def) {\n    return new NgModuleRef_(moduleType, parent, bootstrapComponents, def);\n}\nvar NgModuleRef_ = /** @class */ (function () {\n    function NgModuleRef_(_moduleType, _parent, _bootstrapComponents, _def) {\n        this._moduleType = _moduleType;\n        this._parent = _parent;\n        this._bootstrapComponents = _bootstrapComponents;\n        this._def = _def;\n        this._destroyListeners = [];\n        this._destroyed = false;\n        this.injector = this;\n        initNgModule(this);\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} injectFlags\n     * @return {?}\n     */\n    NgModuleRef_.prototype.get = /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @param {?=} injectFlags\n     * @return {?}\n     */\n    function (token, notFoundValue, injectFlags) {\n        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n        if (injectFlags === void 0) { injectFlags = InjectFlags.Default; }\n        /** @type {?} */\n        var flags = 0 /* None */;\n        if (injectFlags & InjectFlags.SkipSelf) {\n            flags |= 1 /* SkipSelf */;\n        }\n        else if (injectFlags & InjectFlags.Self) {\n            flags |= 4 /* Self */;\n        }\n        return resolveNgModuleDep(this, { token: token, tokenKey: tokenKey(token), flags: flags }, notFoundValue);\n    };\n    Object.defineProperty(NgModuleRef_.prototype, \"instance\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.get(this._moduleType); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgModuleRef_.prototype, \"componentFactoryResolver\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.get(ComponentFactoryResolver); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    NgModuleRef_.prototype.destroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this._destroyed) {\n            throw new Error(\"The ng module \" + stringify(this.instance.constructor) + \" has already been destroyed.\");\n        }\n        this._destroyed = true;\n        callNgModuleLifecycle(this, 131072 /* OnDestroy */);\n        this._destroyListeners.forEach(function (listener) { return listener(); });\n    };\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    NgModuleRef_.prototype.onDestroy = /**\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) { this._destroyListeners.push(callback); };\n    return NgModuleRef_;\n}());\nif (false) {\n    /** @type {?} */\n    NgModuleRef_.prototype._destroyListeners;\n    /** @type {?} */\n    NgModuleRef_.prototype._destroyed;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    NgModuleRef_.prototype._providers;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    NgModuleRef_.prototype._modules;\n    /** @type {?} */\n    NgModuleRef_.prototype.injector;\n    /** @type {?} */\n    NgModuleRef_.prototype._moduleType;\n    /** @type {?} */\n    NgModuleRef_.prototype._parent;\n    /** @type {?} */\n    NgModuleRef_.prototype._bootstrapComponents;\n    /** @type {?} */\n    NgModuleRef_.prototype._def;\n}\n//# sourceMappingURL=refs.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectorRef, SimpleChange, WrappedValue } from '../change_detection/change_detection';\nimport { INJECTOR, Injector, resolveForwardRef } from '../di';\nimport { ElementRef } from '../linker/element_ref';\nimport { TemplateRef } from '../linker/template_ref';\nimport { ViewContainerRef } from '../linker/view_container_ref';\nimport { Renderer as RendererV1, Renderer2 } from '../render/api';\nimport { stringify } from '../util';\nimport { isObservable } from '../util/lang';\nimport { createChangeDetectorRef, createInjector, createRendererV1 } from './refs';\nimport { Services, asElementData, asProviderData, shouldCallLifecycleInitHook } from './types';\nimport { calcBindingFlags, checkBinding, dispatchEvent, isComponentView, splitDepsDsl, splitMatchedQueriesDsl, tokenKey, viewParentEl } from './util';\n/** @type {?} */\nvar RendererV1TokenKey = tokenKey(RendererV1);\n/** @type {?} */\nvar Renderer2TokenKey = tokenKey(Renderer2);\n/** @type {?} */\nvar ElementRefTokenKey = tokenKey(ElementRef);\n/** @type {?} */\nvar ViewContainerRefTokenKey = tokenKey(ViewContainerRef);\n/** @type {?} */\nvar TemplateRefTokenKey = tokenKey(TemplateRef);\n/** @type {?} */\nvar ChangeDetectorRefTokenKey = tokenKey(ChangeDetectorRef);\n/** @type {?} */\nvar InjectorRefTokenKey = tokenKey(Injector);\n/** @type {?} */\nvar INJECTORRefTokenKey = tokenKey(INJECTOR);\n/**\n * @param {?} checkIndex\n * @param {?} flags\n * @param {?} matchedQueries\n * @param {?} childCount\n * @param {?} ctor\n * @param {?} deps\n * @param {?=} props\n * @param {?=} outputs\n * @return {?}\n */\nexport function directiveDef(checkIndex, flags, matchedQueries, childCount, ctor, deps, props, outputs) {\n    /** @type {?} */\n    var bindings = [];\n    if (props) {\n        for (var prop in props) {\n            var _a = props[prop], bindingIndex = _a[0], nonMinifiedName = _a[1];\n            bindings[bindingIndex] = {\n                flags: 8 /* TypeProperty */,\n                name: prop, nonMinifiedName: nonMinifiedName,\n                ns: null,\n                securityContext: null,\n                suffix: null\n            };\n        }\n    }\n    /** @type {?} */\n    var outputDefs = [];\n    if (outputs) {\n        for (var propName in outputs) {\n            outputDefs.push({ type: 1 /* DirectiveOutput */, propName: propName, target: null, eventName: outputs[propName] });\n        }\n    }\n    flags |= 16384 /* TypeDirective */;\n    return _def(checkIndex, flags, matchedQueries, childCount, ctor, ctor, deps, bindings, outputDefs);\n}\n/**\n * @param {?} flags\n * @param {?} ctor\n * @param {?} deps\n * @return {?}\n */\nexport function pipeDef(flags, ctor, deps) {\n    flags |= 16 /* TypePipe */;\n    return _def(-1, flags, null, 0, ctor, ctor, deps);\n}\n/**\n * @param {?} flags\n * @param {?} matchedQueries\n * @param {?} token\n * @param {?} value\n * @param {?} deps\n * @return {?}\n */\nexport function providerDef(flags, matchedQueries, token, value, deps) {\n    return _def(-1, flags, matchedQueries, 0, token, value, deps);\n}\n/**\n * @param {?} checkIndex\n * @param {?} flags\n * @param {?} matchedQueriesDsl\n * @param {?} childCount\n * @param {?} token\n * @param {?} value\n * @param {?} deps\n * @param {?=} bindings\n * @param {?=} outputs\n * @return {?}\n */\nexport function _def(checkIndex, flags, matchedQueriesDsl, childCount, token, value, deps, bindings, outputs) {\n    var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;\n    if (!outputs) {\n        outputs = [];\n    }\n    if (!bindings) {\n        bindings = [];\n    }\n    // Need to resolve forwardRefs as e.g. for `useValue` we\n    // lowered the expression and then stopped evaluating it,\n    // i.e. also didn't unwrap it.\n    value = resolveForwardRef(value);\n    /** @type {?} */\n    var depDefs = splitDepsDsl(deps, stringify(token));\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex: checkIndex,\n        flags: flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references,\n        ngContentIndex: -1, childCount: childCount, bindings: bindings,\n        bindingFlags: calcBindingFlags(bindings), outputs: outputs,\n        element: null,\n        provider: { token: token, value: value, deps: depDefs },\n        text: null,\n        query: null,\n        ngContent: null\n    };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nexport function createProviderInstance(view, def) {\n    return _createProviderInstance(view, def);\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nexport function createPipeInstance(view, def) {\n    /** @type {?} */\n    var compView = view;\n    while (compView.parent && !isComponentView(compView)) {\n        compView = compView.parent;\n    }\n    /** @type {?} */\n    var allowPrivateServices = true;\n    // pipes are always eager and classes!\n    return createClass(/** @type {?} */ ((compView.parent)), /** @type {?} */ ((viewParentEl(compView))), allowPrivateServices, /** @type {?} */ ((def.provider)).value, /** @type {?} */ ((def.provider)).deps);\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nexport function createDirectiveInstance(view, def) {\n    /** @type {?} */\n    var allowPrivateServices = (def.flags & 32768 /* Component */) > 0;\n    /** @type {?} */\n    var instance = createClass(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((def.provider)).value, /** @type {?} */ ((def.provider)).deps);\n    if (def.outputs.length) {\n        for (var i = 0; i < def.outputs.length; i++) {\n            /** @type {?} */\n            var output = def.outputs[i];\n            /** @type {?} */\n            var outputObservable = instance[/** @type {?} */ ((output.propName))];\n            if (isObservable(outputObservable)) {\n                /** @type {?} */\n                var subscription = outputObservable.subscribe(eventHandlerClosure(view, /** @type {?} */ ((def.parent)).nodeIndex, output.eventName)); /** @type {?} */\n                ((view.disposables))[def.outputIndex + i] = subscription.unsubscribe.bind(subscription);\n            }\n            else {\n                throw new Error(\"@Output \" + output.propName + \" not initialized in '\" + instance.constructor.name + \"'.\");\n            }\n        }\n    }\n    return instance;\n}\n/**\n * @param {?} view\n * @param {?} index\n * @param {?} eventName\n * @return {?}\n */\nfunction eventHandlerClosure(view, index, eventName) {\n    return function (event) { return dispatchEvent(view, index, eventName, event); };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nexport function checkAndUpdateDirectiveInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    var providerData = asProviderData(view, def.nodeIndex);\n    /** @type {?} */\n    var directive = providerData.instance;\n    /** @type {?} */\n    var changed = false;\n    /** @type {?} */\n    var changes = /** @type {?} */ ((undefined));\n    /** @type {?} */\n    var bindLen = def.bindings.length;\n    if (bindLen > 0 && checkBinding(view, def, 0, v0)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 0, v0, changes);\n    }\n    if (bindLen > 1 && checkBinding(view, def, 1, v1)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 1, v1, changes);\n    }\n    if (bindLen > 2 && checkBinding(view, def, 2, v2)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 2, v2, changes);\n    }\n    if (bindLen > 3 && checkBinding(view, def, 3, v3)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 3, v3, changes);\n    }\n    if (bindLen > 4 && checkBinding(view, def, 4, v4)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 4, v4, changes);\n    }\n    if (bindLen > 5 && checkBinding(view, def, 5, v5)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 5, v5, changes);\n    }\n    if (bindLen > 6 && checkBinding(view, def, 6, v6)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 6, v6, changes);\n    }\n    if (bindLen > 7 && checkBinding(view, def, 7, v7)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 7, v7, changes);\n    }\n    if (bindLen > 8 && checkBinding(view, def, 8, v8)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 8, v8, changes);\n    }\n    if (bindLen > 9 && checkBinding(view, def, 9, v9)) {\n        changed = true;\n        changes = updateProp(view, providerData, def, 9, v9, changes);\n    }\n    if (changes) {\n        directive.ngOnChanges(changes);\n    }\n    if ((def.flags & 65536 /* OnInit */) &&\n        shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {\n        directive.ngOnInit();\n    }\n    if (def.flags & 262144 /* DoCheck */) {\n        directive.ngDoCheck();\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nexport function checkAndUpdateDirectiveDynamic(view, def, values) {\n    /** @type {?} */\n    var providerData = asProviderData(view, def.nodeIndex);\n    /** @type {?} */\n    var directive = providerData.instance;\n    /** @type {?} */\n    var changed = false;\n    /** @type {?} */\n    var changes = /** @type {?} */ ((undefined));\n    for (var i = 0; i < values.length; i++) {\n        if (checkBinding(view, def, i, values[i])) {\n            changed = true;\n            changes = updateProp(view, providerData, def, i, values[i], changes);\n        }\n    }\n    if (changes) {\n        directive.ngOnChanges(changes);\n    }\n    if ((def.flags & 65536 /* OnInit */) &&\n        shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {\n        directive.ngOnInit();\n    }\n    if (def.flags & 262144 /* DoCheck */) {\n        directive.ngDoCheck();\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nfunction _createProviderInstance(view, def) {\n    /** @type {?} */\n    var allowPrivateServices = (def.flags & 8192 /* PrivateProvider */) > 0;\n    /** @type {?} */\n    var providerDef = def.provider;\n    switch (def.flags & 201347067 /* Types */) {\n        case 512 /* TypeClassProvider */:\n            return createClass(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((providerDef)).value, /** @type {?} */ ((providerDef)).deps);\n        case 1024 /* TypeFactoryProvider */:\n            return callFactory(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((providerDef)).value, /** @type {?} */ ((providerDef)).deps);\n        case 2048 /* TypeUseExistingProvider */:\n            return resolveDep(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((providerDef)).deps[0]);\n        case 256 /* TypeValueProvider */:\n            return /** @type {?} */ ((providerDef)).value;\n    }\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @param {?} ctor\n * @param {?} deps\n * @return {?}\n */\nfunction createClass(view, elDef, allowPrivateServices, ctor, deps) {\n    /** @type {?} */\n    var len = deps.length;\n    switch (len) {\n        case 0:\n            return new ctor();\n        case 1:\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]));\n        case 2:\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));\n        case 3:\n            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));\n        default:\n            /** @type {?} */\n            var depValues = new Array(len);\n            for (var i = 0; i < len; i++) {\n                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);\n            }\n            return new (ctor.bind.apply(ctor, [void 0].concat(depValues)))();\n    }\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @param {?} factory\n * @param {?} deps\n * @return {?}\n */\nfunction callFactory(view, elDef, allowPrivateServices, factory, deps) {\n    /** @type {?} */\n    var len = deps.length;\n    switch (len) {\n        case 0:\n            return factory();\n        case 1:\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]));\n        case 2:\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));\n        case 3:\n            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));\n        default:\n            /** @type {?} */\n            var depValues = Array(len);\n            for (var i = 0; i < len; i++) {\n                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);\n            }\n            return factory.apply(void 0, depValues);\n    }\n}\n/** @type {?} */\nexport var NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @param {?} depDef\n * @param {?=} notFoundValue\n * @return {?}\n */\nexport function resolveDep(view, elDef, allowPrivateServices, depDef, notFoundValue) {\n    if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }\n    if (depDef.flags & 8 /* Value */) {\n        return depDef.token;\n    }\n    /** @type {?} */\n    var startView = view;\n    if (depDef.flags & 2 /* Optional */) {\n        notFoundValue = null;\n    }\n    /** @type {?} */\n    var tokenKey = depDef.tokenKey;\n    if (tokenKey === ChangeDetectorRefTokenKey) {\n        // directives on the same element as a component should be able to control the change detector\n        // of that component as well.\n        allowPrivateServices = !!(elDef && /** @type {?} */ ((elDef.element)).componentView);\n    }\n    if (elDef && (depDef.flags & 1 /* SkipSelf */)) {\n        allowPrivateServices = false;\n        elDef = /** @type {?} */ ((elDef.parent));\n    }\n    /** @type {?} */\n    var searchView = view;\n    while (searchView) {\n        if (elDef) {\n            switch (tokenKey) {\n                case RendererV1TokenKey: {\n                    /** @type {?} */\n                    var compView = findCompView(searchView, elDef, allowPrivateServices);\n                    return createRendererV1(compView);\n                }\n                case Renderer2TokenKey: {\n                    /** @type {?} */\n                    var compView = findCompView(searchView, elDef, allowPrivateServices);\n                    return compView.renderer;\n                }\n                case ElementRefTokenKey:\n                    return new ElementRef(asElementData(searchView, elDef.nodeIndex).renderElement);\n                case ViewContainerRefTokenKey:\n                    return asElementData(searchView, elDef.nodeIndex).viewContainer;\n                case TemplateRefTokenKey: {\n                    if (/** @type {?} */ ((elDef.element)).template) {\n                        return asElementData(searchView, elDef.nodeIndex).template;\n                    }\n                    break;\n                }\n                case ChangeDetectorRefTokenKey: {\n                    /** @type {?} */\n                    var cdView = findCompView(searchView, elDef, allowPrivateServices);\n                    return createChangeDetectorRef(cdView);\n                }\n                case InjectorRefTokenKey:\n                case INJECTORRefTokenKey:\n                    return createInjector(searchView, elDef);\n                default:\n                    /** @type {?} */\n                    var providerDef_1 = /** @type {?} */ (((allowPrivateServices ? /** @type {?} */ ((elDef.element)).allProviders : /** @type {?} */ ((elDef.element)).publicProviders)))[tokenKey];\n                    if (providerDef_1) {\n                        /** @type {?} */\n                        var providerData = asProviderData(searchView, providerDef_1.nodeIndex);\n                        if (!providerData) {\n                            providerData = { instance: _createProviderInstance(searchView, providerDef_1) };\n                            searchView.nodes[providerDef_1.nodeIndex] = /** @type {?} */ (providerData);\n                        }\n                        return providerData.instance;\n                    }\n            }\n        }\n        allowPrivateServices = isComponentView(searchView);\n        elDef = /** @type {?} */ ((viewParentEl(searchView)));\n        searchView = /** @type {?} */ ((searchView.parent));\n        if (depDef.flags & 4 /* Self */) {\n            searchView = null;\n        }\n    }\n    /** @type {?} */\n    var value = startView.root.injector.get(depDef.token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR);\n    if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||\n        notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n        // Return the value from the root element injector when\n        // - it provides it\n        //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n        // - the module injector should not be checked\n        //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n        return value;\n    }\n    return startView.root.ngModule.injector.get(depDef.token, notFoundValue);\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} allowPrivateServices\n * @return {?}\n */\nfunction findCompView(view, elDef, allowPrivateServices) {\n    /** @type {?} */\n    var compView;\n    if (allowPrivateServices) {\n        compView = asElementData(view, elDef.nodeIndex).componentView;\n    }\n    else {\n        compView = view;\n        while (compView.parent && !isComponentView(compView)) {\n            compView = compView.parent;\n        }\n    }\n    return compView;\n}\n/**\n * @param {?} view\n * @param {?} providerData\n * @param {?} def\n * @param {?} bindingIdx\n * @param {?} value\n * @param {?} changes\n * @return {?}\n */\nfunction updateProp(view, providerData, def, bindingIdx, value, changes) {\n    if (def.flags & 32768 /* Component */) {\n        /** @type {?} */\n        var compView = asElementData(view, /** @type {?} */ ((def.parent)).nodeIndex).componentView;\n        if (compView.def.flags & 2 /* OnPush */) {\n            compView.state |= 8 /* ChecksEnabled */;\n        }\n    }\n    /** @type {?} */\n    var binding = def.bindings[bindingIdx];\n    /** @type {?} */\n    var propName = /** @type {?} */ ((binding.name));\n    // Note: This is still safe with Closure Compiler as\n    // the user passed in the property name as an object has to `providerDef`,\n    // so Closure Compiler will have renamed the property correctly already.\n    providerData.instance[propName] = value;\n    if (def.flags & 524288 /* OnChanges */) {\n        changes = changes || {};\n        /** @type {?} */\n        var oldValue = WrappedValue.unwrap(view.oldValues[def.bindingIndex + bindingIdx]);\n        /** @type {?} */\n        var binding_1 = def.bindings[bindingIdx];\n        changes[/** @type {?} */ ((binding_1.nonMinifiedName))] =\n            new SimpleChange(oldValue, value, (view.state & 2 /* FirstCheck */) !== 0);\n    }\n    view.oldValues[def.bindingIndex + bindingIdx] = value;\n    return changes;\n}\n/**\n * @param {?} view\n * @param {?} lifecycles\n * @return {?}\n */\nexport function callLifecycleHooksChildrenFirst(view, lifecycles) {\n    if (!(view.def.nodeFlags & lifecycles)) {\n        return;\n    }\n    /** @type {?} */\n    var nodes = view.def.nodes;\n    /** @type {?} */\n    var initIndex = 0;\n    for (var i = 0; i < nodes.length; i++) {\n        /** @type {?} */\n        var nodeDef = nodes[i];\n        /** @type {?} */\n        var parent_1 = nodeDef.parent;\n        if (!parent_1 && nodeDef.flags & lifecycles) {\n            // matching root node (e.g. a pipe)\n            callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);\n        }\n        if ((nodeDef.childFlags & lifecycles) === 0) {\n            // no child matches one of the lifecycles\n            i += nodeDef.childCount;\n        }\n        while (parent_1 && (parent_1.flags & 1 /* TypeElement */) &&\n            i === parent_1.nodeIndex + parent_1.childCount) {\n            // last child of an element\n            if (parent_1.directChildFlags & lifecycles) {\n                initIndex = callElementProvidersLifecycles(view, parent_1, lifecycles, initIndex);\n            }\n            parent_1 = parent_1.parent;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} elDef\n * @param {?} lifecycles\n * @param {?} initIndex\n * @return {?}\n */\nfunction callElementProvidersLifecycles(view, elDef, lifecycles, initIndex) {\n    for (var i = elDef.nodeIndex + 1; i <= elDef.nodeIndex + elDef.childCount; i++) {\n        /** @type {?} */\n        var nodeDef = view.def.nodes[i];\n        if (nodeDef.flags & lifecycles) {\n            callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);\n        }\n        // only visit direct children\n        i += nodeDef.childCount;\n    }\n    return initIndex;\n}\n/**\n * @param {?} view\n * @param {?} index\n * @param {?} lifecycles\n * @param {?} initIndex\n * @return {?}\n */\nfunction callProviderLifecycles(view, index, lifecycles, initIndex) {\n    /** @type {?} */\n    var providerData = asProviderData(view, index);\n    if (!providerData) {\n        return;\n    }\n    /** @type {?} */\n    var provider = providerData.instance;\n    if (!provider) {\n        return;\n    }\n    Services.setCurrentNode(view, index);\n    if (lifecycles & 1048576 /* AfterContentInit */ &&\n        shouldCallLifecycleInitHook(view, 512 /* InitState_CallingAfterContentInit */, initIndex)) {\n        provider.ngAfterContentInit();\n    }\n    if (lifecycles & 2097152 /* AfterContentChecked */) {\n        provider.ngAfterContentChecked();\n    }\n    if (lifecycles & 4194304 /* AfterViewInit */ &&\n        shouldCallLifecycleInitHook(view, 768 /* InitState_CallingAfterViewInit */, initIndex)) {\n        provider.ngAfterViewInit();\n    }\n    if (lifecycles & 8388608 /* AfterViewChecked */) {\n        provider.ngAfterViewChecked();\n    }\n    if (lifecycles & 131072 /* OnDestroy */) {\n        provider.ngOnDestroy();\n    }\n}\n//# sourceMappingURL=provider.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef } from '../linker/element_ref';\nimport { QueryList } from '../linker/query_list';\nimport { asElementData, asProviderData, asQueryList } from './types';\nimport { declaredViewContainer, filterQueryId, isEmbeddedView } from './util';\n/**\n * @param {?} flags\n * @param {?} id\n * @param {?} bindings\n * @return {?}\n */\nexport function queryDef(flags, id, bindings) {\n    /** @type {?} */\n    var bindingDefs = [];\n    for (var propName in bindings) {\n        /** @type {?} */\n        var bindingType = bindings[propName];\n        bindingDefs.push({ propName: propName, bindingType: bindingType });\n    }\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        // TODO(vicb): check\n        checkIndex: -1, flags: flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0,\n        ngContentIndex: -1,\n        matchedQueries: {},\n        matchedQueryIds: 0,\n        references: {},\n        childCount: 0,\n        bindings: [],\n        bindingFlags: 0,\n        outputs: [],\n        element: null,\n        provider: null,\n        text: null,\n        query: { id: id, filterId: filterQueryId(id), bindings: bindingDefs },\n        ngContent: null\n    };\n}\n/**\n * @return {?}\n */\nexport function createQuery() {\n    return new QueryList();\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function dirtyParentQueries(view) {\n    /** @type {?} */\n    var queryIds = view.def.nodeMatchedQueries;\n    while (view.parent && isEmbeddedView(view)) {\n        /** @type {?} */\n        var tplDef = /** @type {?} */ ((view.parentNodeDef));\n        view = view.parent;\n        /** @type {?} */\n        var end = tplDef.nodeIndex + tplDef.childCount;\n        for (var i = 0; i <= end; i++) {\n            /** @type {?} */\n            var nodeDef = view.def.nodes[i];\n            if ((nodeDef.flags & 67108864 /* TypeContentQuery */) &&\n                (nodeDef.flags & 536870912 /* DynamicQuery */) &&\n                (/** @type {?} */ ((nodeDef.query)).filterId & queryIds) === /** @type {?} */ ((nodeDef.query)).filterId) {\n                asQueryList(view, i).setDirty();\n            }\n            if ((nodeDef.flags & 1 /* TypeElement */ && i + nodeDef.childCount < tplDef.nodeIndex) ||\n                !(nodeDef.childFlags & 67108864 /* TypeContentQuery */) ||\n                !(nodeDef.childFlags & 536870912 /* DynamicQuery */)) {\n                // skip elements that don't contain the template element or no query.\n                i += nodeDef.childCount;\n            }\n        }\n    }\n    // view queries\n    if (view.def.nodeFlags & 134217728 /* TypeViewQuery */) {\n        for (var i = 0; i < view.def.nodes.length; i++) {\n            /** @type {?} */\n            var nodeDef = view.def.nodes[i];\n            if ((nodeDef.flags & 134217728 /* TypeViewQuery */) && (nodeDef.flags & 536870912 /* DynamicQuery */)) {\n                asQueryList(view, i).setDirty();\n            }\n            // only visit the root nodes\n            i += nodeDef.childCount;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @return {?}\n */\nexport function checkAndUpdateQuery(view, nodeDef) {\n    /** @type {?} */\n    var queryList = asQueryList(view, nodeDef.nodeIndex);\n    if (!queryList.dirty) {\n        return;\n    }\n    /** @type {?} */\n    var directiveInstance;\n    /** @type {?} */\n    var newValues = /** @type {?} */ ((undefined));\n    if (nodeDef.flags & 67108864 /* TypeContentQuery */) {\n        /** @type {?} */\n        var elementDef = /** @type {?} */ ((/** @type {?} */ ((nodeDef.parent)).parent));\n        newValues = calcQueryValues(view, elementDef.nodeIndex, elementDef.nodeIndex + elementDef.childCount, /** @type {?} */ ((nodeDef.query)), []);\n        directiveInstance = asProviderData(view, /** @type {?} */ ((nodeDef.parent)).nodeIndex).instance;\n    }\n    else if (nodeDef.flags & 134217728 /* TypeViewQuery */) {\n        newValues = calcQueryValues(view, 0, view.def.nodes.length - 1, /** @type {?} */ ((nodeDef.query)), []);\n        directiveInstance = view.component;\n    }\n    queryList.reset(newValues);\n    /** @type {?} */\n    var bindings = /** @type {?} */ ((nodeDef.query)).bindings;\n    /** @type {?} */\n    var notify = false;\n    for (var i = 0; i < bindings.length; i++) {\n        /** @type {?} */\n        var binding = bindings[i];\n        /** @type {?} */\n        var boundValue = void 0;\n        switch (binding.bindingType) {\n            case 0 /* First */:\n                boundValue = queryList.first;\n                break;\n            case 1 /* All */:\n                boundValue = queryList;\n                notify = true;\n                break;\n        }\n        directiveInstance[binding.propName] = boundValue;\n    }\n    if (notify) {\n        queryList.notifyOnChanges();\n    }\n}\n/**\n * @param {?} view\n * @param {?} startIndex\n * @param {?} endIndex\n * @param {?} queryDef\n * @param {?} values\n * @return {?}\n */\nfunction calcQueryValues(view, startIndex, endIndex, queryDef, values) {\n    for (var i = startIndex; i <= endIndex; i++) {\n        /** @type {?} */\n        var nodeDef = view.def.nodes[i];\n        /** @type {?} */\n        var valueType = nodeDef.matchedQueries[queryDef.id];\n        if (valueType != null) {\n            values.push(getQueryValue(view, nodeDef, valueType));\n        }\n        if (nodeDef.flags & 1 /* TypeElement */ && /** @type {?} */ ((nodeDef.element)).template &&\n            (/** @type {?} */ ((/** @type {?} */ ((nodeDef.element)).template)).nodeMatchedQueries & queryDef.filterId) ===\n                queryDef.filterId) {\n            /** @type {?} */\n            var elementData = asElementData(view, i);\n            // check embedded views that were attached at the place of their template,\n            // but process child nodes first if some match the query (see issue #16568)\n            if ((nodeDef.childMatchedQueries & queryDef.filterId) === queryDef.filterId) {\n                calcQueryValues(view, i + 1, i + nodeDef.childCount, queryDef, values);\n                i += nodeDef.childCount;\n            }\n            if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n                /** @type {?} */\n                var embeddedViews = /** @type {?} */ ((elementData.viewContainer))._embeddedViews;\n                for (var k = 0; k < embeddedViews.length; k++) {\n                    /** @type {?} */\n                    var embeddedView = embeddedViews[k];\n                    /** @type {?} */\n                    var dvc = declaredViewContainer(embeddedView);\n                    if (dvc && dvc === elementData) {\n                        calcQueryValues(embeddedView, 0, embeddedView.def.nodes.length - 1, queryDef, values);\n                    }\n                }\n            }\n            /** @type {?} */\n            var projectedViews = elementData.template._projectedViews;\n            if (projectedViews) {\n                for (var k = 0; k < projectedViews.length; k++) {\n                    /** @type {?} */\n                    var projectedView = projectedViews[k];\n                    calcQueryValues(projectedView, 0, projectedView.def.nodes.length - 1, queryDef, values);\n                }\n            }\n        }\n        if ((nodeDef.childMatchedQueries & queryDef.filterId) !== queryDef.filterId) {\n            // if no child matches the query, skip the children.\n            i += nodeDef.childCount;\n        }\n    }\n    return values;\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} queryValueType\n * @return {?}\n */\nexport function getQueryValue(view, nodeDef, queryValueType) {\n    if (queryValueType != null) {\n        // a match\n        switch (queryValueType) {\n            case 1 /* RenderElement */:\n                return asElementData(view, nodeDef.nodeIndex).renderElement;\n            case 0 /* ElementRef */:\n                return new ElementRef(asElementData(view, nodeDef.nodeIndex).renderElement);\n            case 2 /* TemplateRef */:\n                return asElementData(view, nodeDef.nodeIndex).template;\n            case 3 /* ViewContainerRef */:\n                return asElementData(view, nodeDef.nodeIndex).viewContainer;\n            case 4 /* Provider */:\n                return asProviderData(view, nodeDef.nodeIndex).instance;\n        }\n    }\n}\n//# sourceMappingURL=query.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getParentRenderElement, visitProjectedRenderNodes } from './util';\n/**\n * @param {?} ngContentIndex\n * @param {?} index\n * @return {?}\n */\nexport function ngContentDef(ngContentIndex, index) {\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex: -1,\n        flags: 8 /* TypeNgContent */,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0,\n        matchedQueries: {},\n        matchedQueryIds: 0,\n        references: {}, ngContentIndex: ngContentIndex,\n        childCount: 0,\n        bindings: [],\n        bindingFlags: 0,\n        outputs: [],\n        element: null,\n        provider: null,\n        text: null,\n        query: null,\n        ngContent: { index: index }\n    };\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nexport function appendNgContent(view, renderHost, def) {\n    /** @type {?} */\n    var parentEl = getParentRenderElement(view, renderHost, def);\n    if (!parentEl) {\n        // Nothing to do if there is no parent element.\n        return;\n    }\n    /** @type {?} */\n    var ngContentIndex = /** @type {?} */ ((def.ngContent)).index;\n    visitProjectedRenderNodes(view, ngContentIndex, 1 /* AppendChild */, parentEl, null, undefined);\n}\n//# sourceMappingURL=ng_content.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { asPureExpressionData } from './types';\nimport { calcBindingFlags, checkAndUpdateBinding } from './util';\n/**\n * @param {?} checkIndex\n * @param {?} argCount\n * @return {?}\n */\nexport function purePipeDef(checkIndex, argCount) {\n    // argCount + 1 to include the pipe as first arg\n    return _pureExpressionDef(128 /* TypePurePipe */, checkIndex, new Array(argCount + 1));\n}\n/**\n * @param {?} checkIndex\n * @param {?} argCount\n * @return {?}\n */\nexport function pureArrayDef(checkIndex, argCount) {\n    return _pureExpressionDef(32 /* TypePureArray */, checkIndex, new Array(argCount));\n}\n/**\n * @param {?} checkIndex\n * @param {?} propToIndex\n * @return {?}\n */\nexport function pureObjectDef(checkIndex, propToIndex) {\n    /** @type {?} */\n    var keys = Object.keys(propToIndex);\n    /** @type {?} */\n    var nbKeys = keys.length;\n    /** @type {?} */\n    var propertyNames = new Array(nbKeys);\n    for (var i = 0; i < nbKeys; i++) {\n        /** @type {?} */\n        var key = keys[i];\n        /** @type {?} */\n        var index = propToIndex[key];\n        propertyNames[index] = key;\n    }\n    return _pureExpressionDef(64 /* TypePureObject */, checkIndex, propertyNames);\n}\n/**\n * @param {?} flags\n * @param {?} checkIndex\n * @param {?} propertyNames\n * @return {?}\n */\nfunction _pureExpressionDef(flags, checkIndex, propertyNames) {\n    /** @type {?} */\n    var bindings = new Array(propertyNames.length);\n    for (var i = 0; i < propertyNames.length; i++) {\n        /** @type {?} */\n        var prop = propertyNames[i];\n        bindings[i] = {\n            flags: 8 /* TypeProperty */,\n            name: prop,\n            ns: null,\n            nonMinifiedName: prop,\n            securityContext: null,\n            suffix: null\n        };\n    }\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex: checkIndex,\n        flags: flags,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0,\n        matchedQueries: {},\n        matchedQueryIds: 0,\n        references: {},\n        ngContentIndex: -1,\n        childCount: 0, bindings: bindings,\n        bindingFlags: calcBindingFlags(bindings),\n        outputs: [],\n        element: null,\n        provider: null,\n        text: null,\n        query: null,\n        ngContent: null\n    };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @return {?}\n */\nexport function createPureExpression(view, def) {\n    return { value: undefined };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nexport function checkAndUpdatePureExpressionInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    var bindings = def.bindings;\n    /** @type {?} */\n    var changed = false;\n    /** @type {?} */\n    var bindLen = bindings.length;\n    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))\n        changed = true;\n    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))\n        changed = true;\n    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))\n        changed = true;\n    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))\n        changed = true;\n    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))\n        changed = true;\n    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))\n        changed = true;\n    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))\n        changed = true;\n    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))\n        changed = true;\n    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))\n        changed = true;\n    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))\n        changed = true;\n    if (changed) {\n        /** @type {?} */\n        var data = asPureExpressionData(view, def.nodeIndex);\n        /** @type {?} */\n        var value = void 0;\n        switch (def.flags & 201347067 /* Types */) {\n            case 32 /* TypePureArray */:\n                value = new Array(bindings.length);\n                if (bindLen > 0)\n                    value[0] = v0;\n                if (bindLen > 1)\n                    value[1] = v1;\n                if (bindLen > 2)\n                    value[2] = v2;\n                if (bindLen > 3)\n                    value[3] = v3;\n                if (bindLen > 4)\n                    value[4] = v4;\n                if (bindLen > 5)\n                    value[5] = v5;\n                if (bindLen > 6)\n                    value[6] = v6;\n                if (bindLen > 7)\n                    value[7] = v7;\n                if (bindLen > 8)\n                    value[8] = v8;\n                if (bindLen > 9)\n                    value[9] = v9;\n                break;\n            case 64 /* TypePureObject */:\n                value = {};\n                if (bindLen > 0)\n                    value[/** @type {?} */ ((bindings[0].name))] = v0;\n                if (bindLen > 1)\n                    value[/** @type {?} */ ((bindings[1].name))] = v1;\n                if (bindLen > 2)\n                    value[/** @type {?} */ ((bindings[2].name))] = v2;\n                if (bindLen > 3)\n                    value[/** @type {?} */ ((bindings[3].name))] = v3;\n                if (bindLen > 4)\n                    value[/** @type {?} */ ((bindings[4].name))] = v4;\n                if (bindLen > 5)\n                    value[/** @type {?} */ ((bindings[5].name))] = v5;\n                if (bindLen > 6)\n                    value[/** @type {?} */ ((bindings[6].name))] = v6;\n                if (bindLen > 7)\n                    value[/** @type {?} */ ((bindings[7].name))] = v7;\n                if (bindLen > 8)\n                    value[/** @type {?} */ ((bindings[8].name))] = v8;\n                if (bindLen > 9)\n                    value[/** @type {?} */ ((bindings[9].name))] = v9;\n                break;\n            case 128 /* TypePurePipe */:\n                /** @type {?} */\n                var pipe = v0;\n                switch (bindLen) {\n                    case 1:\n                        value = pipe.transform(v0);\n                        break;\n                    case 2:\n                        value = pipe.transform(v1);\n                        break;\n                    case 3:\n                        value = pipe.transform(v1, v2);\n                        break;\n                    case 4:\n                        value = pipe.transform(v1, v2, v3);\n                        break;\n                    case 5:\n                        value = pipe.transform(v1, v2, v3, v4);\n                        break;\n                    case 6:\n                        value = pipe.transform(v1, v2, v3, v4, v5);\n                        break;\n                    case 7:\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6);\n                        break;\n                    case 8:\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7);\n                        break;\n                    case 9:\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8);\n                        break;\n                    case 10:\n                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8, v9);\n                        break;\n                }\n                break;\n        }\n        data.value = value;\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nexport function checkAndUpdatePureExpressionDynamic(view, def, values) {\n    /** @type {?} */\n    var bindings = def.bindings;\n    /** @type {?} */\n    var changed = false;\n    for (var i = 0; i < values.length; i++) {\n        // Note: We need to loop over all values, so that\n        // the old values are updates as well!\n        if (checkAndUpdateBinding(view, def, i, values[i])) {\n            changed = true;\n        }\n    }\n    if (changed) {\n        /** @type {?} */\n        var data = asPureExpressionData(view, def.nodeIndex);\n        /** @type {?} */\n        var value = void 0;\n        switch (def.flags & 201347067 /* Types */) {\n            case 32 /* TypePureArray */:\n                value = values;\n                break;\n            case 64 /* TypePureObject */:\n                value = {};\n                for (var i = 0; i < values.length; i++) {\n                    value[/** @type {?} */ ((bindings[i].name))] = values[i];\n                }\n                break;\n            case 128 /* TypePurePipe */:\n                /** @type {?} */\n                var pipe = values[0];\n                /** @type {?} */\n                var params = values.slice(1);\n                value = pipe.transform.apply(pipe, params);\n                break;\n        }\n        data.value = value;\n    }\n    return changed;\n}\n//# sourceMappingURL=pure_expression.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { asTextData } from './types';\nimport { checkAndUpdateBinding, getParentRenderElement } from './util';\n/**\n * @param {?} checkIndex\n * @param {?} ngContentIndex\n * @param {?} staticText\n * @return {?}\n */\nexport function textDef(checkIndex, ngContentIndex, staticText) {\n    /** @type {?} */\n    var bindings = new Array(staticText.length - 1);\n    for (var i = 1; i < staticText.length; i++) {\n        bindings[i - 1] = {\n            flags: 8 /* TypeProperty */,\n            name: null,\n            ns: null,\n            nonMinifiedName: null,\n            securityContext: null,\n            suffix: staticText[i],\n        };\n    }\n    return {\n        // will bet set by the view definition\n        nodeIndex: -1,\n        parent: null,\n        renderParent: null,\n        bindingIndex: -1,\n        outputIndex: -1,\n        // regular values\n        checkIndex: checkIndex,\n        flags: 2 /* TypeText */,\n        childFlags: 0,\n        directChildFlags: 0,\n        childMatchedQueries: 0,\n        matchedQueries: {},\n        matchedQueryIds: 0,\n        references: {}, ngContentIndex: ngContentIndex,\n        childCount: 0, bindings: bindings,\n        bindingFlags: 8 /* TypeProperty */,\n        outputs: [],\n        element: null,\n        provider: null,\n        text: { prefix: staticText[0] },\n        query: null,\n        ngContent: null,\n    };\n}\n/**\n * @param {?} view\n * @param {?} renderHost\n * @param {?} def\n * @return {?}\n */\nexport function createText(view, renderHost, def) {\n    /** @type {?} */\n    var renderNode;\n    /** @type {?} */\n    var renderer = view.renderer;\n    renderNode = renderer.createText(/** @type {?} */ ((def.text)).prefix);\n    /** @type {?} */\n    var parentEl = getParentRenderElement(view, renderHost, def);\n    if (parentEl) {\n        renderer.appendChild(parentEl, renderNode);\n    }\n    return { renderText: renderNode };\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nexport function checkAndUpdateTextInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    var changed = false;\n    /** @type {?} */\n    var bindings = def.bindings;\n    /** @type {?} */\n    var bindLen = bindings.length;\n    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))\n        changed = true;\n    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))\n        changed = true;\n    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))\n        changed = true;\n    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))\n        changed = true;\n    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))\n        changed = true;\n    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))\n        changed = true;\n    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))\n        changed = true;\n    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))\n        changed = true;\n    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))\n        changed = true;\n    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))\n        changed = true;\n    if (changed) {\n        /** @type {?} */\n        var value = /** @type {?} */ ((def.text)).prefix;\n        if (bindLen > 0)\n            value += _addInterpolationPart(v0, bindings[0]);\n        if (bindLen > 1)\n            value += _addInterpolationPart(v1, bindings[1]);\n        if (bindLen > 2)\n            value += _addInterpolationPart(v2, bindings[2]);\n        if (bindLen > 3)\n            value += _addInterpolationPart(v3, bindings[3]);\n        if (bindLen > 4)\n            value += _addInterpolationPart(v4, bindings[4]);\n        if (bindLen > 5)\n            value += _addInterpolationPart(v5, bindings[5]);\n        if (bindLen > 6)\n            value += _addInterpolationPart(v6, bindings[6]);\n        if (bindLen > 7)\n            value += _addInterpolationPart(v7, bindings[7]);\n        if (bindLen > 8)\n            value += _addInterpolationPart(v8, bindings[8]);\n        if (bindLen > 9)\n            value += _addInterpolationPart(v9, bindings[9]);\n        /** @type {?} */\n        var renderNode = asTextData(view, def.nodeIndex).renderText;\n        view.renderer.setValue(renderNode, value);\n    }\n    return changed;\n}\n/**\n * @param {?} view\n * @param {?} def\n * @param {?} values\n * @return {?}\n */\nexport function checkAndUpdateTextDynamic(view, def, values) {\n    /** @type {?} */\n    var bindings = def.bindings;\n    /** @type {?} */\n    var changed = false;\n    for (var i = 0; i < values.length; i++) {\n        // Note: We need to loop over all values, so that\n        // the old values are updates as well!\n        if (checkAndUpdateBinding(view, def, i, values[i])) {\n            changed = true;\n        }\n    }\n    if (changed) {\n        /** @type {?} */\n        var value = '';\n        for (var i = 0; i < values.length; i++) {\n            value = value + _addInterpolationPart(values[i], bindings[i]);\n        }\n        value = /** @type {?} */ ((def.text)).prefix + value;\n        /** @type {?} */\n        var renderNode = asTextData(view, def.nodeIndex).renderText;\n        view.renderer.setValue(renderNode, value);\n    }\n    return changed;\n}\n/**\n * @param {?} value\n * @param {?} binding\n * @return {?}\n */\nfunction _addInterpolationPart(value, binding) {\n    /** @type {?} */\n    var valueStr = value != null ? value.toString() : '';\n    return valueStr + binding.suffix;\n}\n//# sourceMappingURL=text.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { checkAndUpdateElementDynamic, checkAndUpdateElementInline, createElement, listenToElementOutputs } from './element';\nimport { expressionChangedAfterItHasBeenCheckedError } from './errors';\nimport { appendNgContent } from './ng_content';\nimport { callLifecycleHooksChildrenFirst, checkAndUpdateDirectiveDynamic, checkAndUpdateDirectiveInline, createDirectiveInstance, createPipeInstance, createProviderInstance } from './provider';\nimport { checkAndUpdatePureExpressionDynamic, checkAndUpdatePureExpressionInline, createPureExpression } from './pure_expression';\nimport { checkAndUpdateQuery, createQuery } from './query';\nimport { createTemplateData, createViewContainerData } from './refs';\nimport { checkAndUpdateTextDynamic, checkAndUpdateTextInline, createText } from './text';\nimport { Services, asElementData, asQueryList, asTextData, shiftInitState } from './types';\nimport { NOOP, checkBindingNoChanges, isComponentView, markParentViewsForCheckProjectedViews, resolveDefinition, tokenKey } from './util';\nimport { detachProjectedView } from './view_attach';\n/**\n * @param {?} flags\n * @param {?} nodes\n * @param {?=} updateDirectives\n * @param {?=} updateRenderer\n * @return {?}\n */\nexport function viewDef(flags, nodes, updateDirectives, updateRenderer) {\n    /** @type {?} */\n    var viewBindingCount = 0;\n    /** @type {?} */\n    var viewDisposableCount = 0;\n    /** @type {?} */\n    var viewNodeFlags = 0;\n    /** @type {?} */\n    var viewRootNodeFlags = 0;\n    /** @type {?} */\n    var viewMatchedQueries = 0;\n    /** @type {?} */\n    var currentParent = null;\n    /** @type {?} */\n    var currentRenderParent = null;\n    /** @type {?} */\n    var currentElementHasPublicProviders = false;\n    /** @type {?} */\n    var currentElementHasPrivateProviders = false;\n    /** @type {?} */\n    var lastRenderRootNode = null;\n    for (var i = 0; i < nodes.length; i++) {\n        /** @type {?} */\n        var node = nodes[i];\n        node.nodeIndex = i;\n        node.parent = currentParent;\n        node.bindingIndex = viewBindingCount;\n        node.outputIndex = viewDisposableCount;\n        node.renderParent = currentRenderParent;\n        viewNodeFlags |= node.flags;\n        viewMatchedQueries |= node.matchedQueryIds;\n        if (node.element) {\n            /** @type {?} */\n            var elDef = node.element;\n            elDef.publicProviders =\n                currentParent ? /** @type {?} */ ((currentParent.element)).publicProviders : Object.create(null);\n            elDef.allProviders = elDef.publicProviders;\n            // Note: We assume that all providers of an element are before any child element!\n            currentElementHasPublicProviders = false;\n            currentElementHasPrivateProviders = false;\n            if (node.element.template) {\n                viewMatchedQueries |= node.element.template.nodeMatchedQueries;\n            }\n        }\n        validateNode(currentParent, node, nodes.length);\n        viewBindingCount += node.bindings.length;\n        viewDisposableCount += node.outputs.length;\n        if (!currentRenderParent && (node.flags & 3 /* CatRenderNode */)) {\n            lastRenderRootNode = node;\n        }\n        if (node.flags & 20224 /* CatProvider */) {\n            if (!currentElementHasPublicProviders) {\n                currentElementHasPublicProviders = true; /** @type {?} */\n                ((/** @type {?} */ ((currentParent)).element)).publicProviders = Object.create(/** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).publicProviders); /** @type {?} */\n                ((/** @type {?} */ ((currentParent)).element)).allProviders = /** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).publicProviders;\n            }\n            /** @type {?} */\n            var isPrivateService = (node.flags & 8192 /* PrivateProvider */) !== 0;\n            /** @type {?} */\n            var isComponent = (node.flags & 32768 /* Component */) !== 0;\n            if (!isPrivateService || isComponent) {\n                /** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).publicProviders))[tokenKey(/** @type {?} */ ((node.provider)).token)] = node;\n            }\n            else {\n                if (!currentElementHasPrivateProviders) {\n                    currentElementHasPrivateProviders = true; /** @type {?} */\n                    ((/** @type {?} */ ((currentParent)).element)).allProviders = Object.create(/** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).publicProviders);\n                } /** @type {?} */\n                ((/** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).allProviders))[tokenKey(/** @type {?} */ ((node.provider)).token)] = node;\n            }\n            if (isComponent) {\n                /** @type {?} */ ((/** @type {?} */ ((currentParent)).element)).componentProvider = node;\n            }\n        }\n        if (currentParent) {\n            currentParent.childFlags |= node.flags;\n            currentParent.directChildFlags |= node.flags;\n            currentParent.childMatchedQueries |= node.matchedQueryIds;\n            if (node.element && node.element.template) {\n                currentParent.childMatchedQueries |= node.element.template.nodeMatchedQueries;\n            }\n        }\n        else {\n            viewRootNodeFlags |= node.flags;\n        }\n        if (node.childCount > 0) {\n            currentParent = node;\n            if (!isNgContainer(node)) {\n                currentRenderParent = node;\n            }\n        }\n        else {\n            // When the current node has no children, check if it is the last children of its parent.\n            // When it is, propagate the flags up.\n            // The loop is required because an element could be the last transitive children of several\n            // elements. We loop to either the root or the highest opened element (= with remaining\n            // children)\n            while (currentParent && i === currentParent.nodeIndex + currentParent.childCount) {\n                /** @type {?} */\n                var newParent = currentParent.parent;\n                if (newParent) {\n                    newParent.childFlags |= currentParent.childFlags;\n                    newParent.childMatchedQueries |= currentParent.childMatchedQueries;\n                }\n                currentParent = newParent;\n                // We also need to update the render parent & account for ng-container\n                if (currentParent && isNgContainer(currentParent)) {\n                    currentRenderParent = currentParent.renderParent;\n                }\n                else {\n                    currentRenderParent = currentParent;\n                }\n            }\n        }\n    }\n    /** @type {?} */\n    var handleEvent = function (view, nodeIndex, eventName, event) { return ((/** @type {?} */ ((nodes[nodeIndex].element)).handleEvent))(view, eventName, event); };\n    return {\n        // Will be filled later...\n        factory: null,\n        nodeFlags: viewNodeFlags,\n        rootNodeFlags: viewRootNodeFlags,\n        nodeMatchedQueries: viewMatchedQueries, flags: flags,\n        nodes: nodes,\n        updateDirectives: updateDirectives || NOOP,\n        updateRenderer: updateRenderer || NOOP, handleEvent: handleEvent,\n        bindingCount: viewBindingCount,\n        outputCount: viewDisposableCount, lastRenderRootNode: lastRenderRootNode\n    };\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction isNgContainer(node) {\n    return (node.flags & 1 /* TypeElement */) !== 0 && /** @type {?} */ ((node.element)).name === null;\n}\n/**\n * @param {?} parent\n * @param {?} node\n * @param {?} nodeCount\n * @return {?}\n */\nfunction validateNode(parent, node, nodeCount) {\n    /** @type {?} */\n    var template = node.element && node.element.template;\n    if (template) {\n        if (!template.lastRenderRootNode) {\n            throw new Error(\"Illegal State: Embedded templates without nodes are not allowed!\");\n        }\n        if (template.lastRenderRootNode &&\n            template.lastRenderRootNode.flags & 16777216 /* EmbeddedViews */) {\n            throw new Error(\"Illegal State: Last root node of a template can't have embedded views, at index \" + node.nodeIndex + \"!\");\n        }\n    }\n    if (node.flags & 20224 /* CatProvider */) {\n        /** @type {?} */\n        var parentFlags = parent ? parent.flags : 0;\n        if ((parentFlags & 1 /* TypeElement */) === 0) {\n            throw new Error(\"Illegal State: StaticProvider/Directive nodes need to be children of elements or anchors, at index \" + node.nodeIndex + \"!\");\n        }\n    }\n    if (node.query) {\n        if (node.flags & 67108864 /* TypeContentQuery */ &&\n            (!parent || (parent.flags & 16384 /* TypeDirective */) === 0)) {\n            throw new Error(\"Illegal State: Content Query nodes need to be children of directives, at index \" + node.nodeIndex + \"!\");\n        }\n        if (node.flags & 134217728 /* TypeViewQuery */ && parent) {\n            throw new Error(\"Illegal State: View Query nodes have to be top level nodes, at index \" + node.nodeIndex + \"!\");\n        }\n    }\n    if (node.childCount) {\n        /** @type {?} */\n        var parentEnd = parent ? parent.nodeIndex + parent.childCount : nodeCount - 1;\n        if (node.nodeIndex <= parentEnd && node.nodeIndex + node.childCount > parentEnd) {\n            throw new Error(\"Illegal State: childCount of node leads outside of parent, at index \" + node.nodeIndex + \"!\");\n        }\n    }\n}\n/**\n * @param {?} parent\n * @param {?} anchorDef\n * @param {?} viewDef\n * @param {?=} context\n * @return {?}\n */\nexport function createEmbeddedView(parent, anchorDef, viewDef, context) {\n    /** @type {?} */\n    var view = createView(parent.root, parent.renderer, parent, anchorDef, viewDef);\n    initView(view, parent.component, context);\n    createViewNodes(view);\n    return view;\n}\n/**\n * @param {?} root\n * @param {?} def\n * @param {?=} context\n * @return {?}\n */\nexport function createRootView(root, def, context) {\n    /** @type {?} */\n    var view = createView(root, root.renderer, null, null, def);\n    initView(view, context, context);\n    createViewNodes(view);\n    return view;\n}\n/**\n * @param {?} parentView\n * @param {?} nodeDef\n * @param {?} viewDef\n * @param {?} hostElement\n * @return {?}\n */\nexport function createComponentView(parentView, nodeDef, viewDef, hostElement) {\n    /** @type {?} */\n    var rendererType = /** @type {?} */ ((nodeDef.element)).componentRendererType;\n    /** @type {?} */\n    var compRenderer;\n    if (!rendererType) {\n        compRenderer = parentView.root.renderer;\n    }\n    else {\n        compRenderer = parentView.root.rendererFactory.createRenderer(hostElement, rendererType);\n    }\n    return createView(parentView.root, compRenderer, parentView, /** @type {?} */ ((nodeDef.element)).componentProvider, viewDef);\n}\n/**\n * @param {?} root\n * @param {?} renderer\n * @param {?} parent\n * @param {?} parentNodeDef\n * @param {?} def\n * @return {?}\n */\nfunction createView(root, renderer, parent, parentNodeDef, def) {\n    /** @type {?} */\n    var nodes = new Array(def.nodes.length);\n    /** @type {?} */\n    var disposables = def.outputCount ? new Array(def.outputCount) : null;\n    /** @type {?} */\n    var view = {\n        def: def,\n        parent: parent,\n        viewContainerParent: null, parentNodeDef: parentNodeDef,\n        context: null,\n        component: null, nodes: nodes,\n        state: 13 /* CatInit */, root: root, renderer: renderer,\n        oldValues: new Array(def.bindingCount), disposables: disposables,\n        initIndex: -1\n    };\n    return view;\n}\n/**\n * @param {?} view\n * @param {?} component\n * @param {?} context\n * @return {?}\n */\nfunction initView(view, component, context) {\n    view.component = component;\n    view.context = context;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction createViewNodes(view) {\n    /** @type {?} */\n    var renderHost;\n    if (isComponentView(view)) {\n        /** @type {?} */\n        var hostDef = view.parentNodeDef;\n        renderHost = asElementData(/** @type {?} */ ((view.parent)), /** @type {?} */ ((/** @type {?} */ ((hostDef)).parent)).nodeIndex).renderElement;\n    }\n    /** @type {?} */\n    var def = view.def;\n    /** @type {?} */\n    var nodes = view.nodes;\n    for (var i = 0; i < def.nodes.length; i++) {\n        /** @type {?} */\n        var nodeDef = def.nodes[i];\n        Services.setCurrentNode(view, i);\n        /** @type {?} */\n        var nodeData = void 0;\n        switch (nodeDef.flags & 201347067 /* Types */) {\n            case 1 /* TypeElement */:\n                /** @type {?} */\n                var el = /** @type {?} */ (createElement(view, renderHost, nodeDef));\n                /** @type {?} */\n                var componentView = /** @type {?} */ ((undefined));\n                if (nodeDef.flags & 33554432 /* ComponentView */) {\n                    /** @type {?} */\n                    var compViewDef = resolveDefinition(/** @type {?} */ ((/** @type {?} */ ((nodeDef.element)).componentView)));\n                    componentView = Services.createComponentView(view, nodeDef, compViewDef, el);\n                }\n                listenToElementOutputs(view, componentView, nodeDef, el);\n                nodeData = /** @type {?} */ ({\n                    renderElement: el,\n                    componentView: componentView,\n                    viewContainer: null,\n                    template: /** @type {?} */ ((nodeDef.element)).template ? createTemplateData(view, nodeDef) : undefined\n                });\n                if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n                    nodeData.viewContainer = createViewContainerData(view, nodeDef, nodeData);\n                }\n                break;\n            case 2 /* TypeText */:\n                nodeData = /** @type {?} */ (createText(view, renderHost, nodeDef));\n                break;\n            case 512 /* TypeClassProvider */:\n            case 1024 /* TypeFactoryProvider */:\n            case 2048 /* TypeUseExistingProvider */:\n            case 256 /* TypeValueProvider */: {\n                nodeData = nodes[i];\n                if (!nodeData && !(nodeDef.flags & 4096 /* LazyProvider */)) {\n                    /** @type {?} */\n                    var instance = createProviderInstance(view, nodeDef);\n                    nodeData = /** @type {?} */ ({ instance: instance });\n                }\n                break;\n            }\n            case 16 /* TypePipe */: {\n                /** @type {?} */\n                var instance = createPipeInstance(view, nodeDef);\n                nodeData = /** @type {?} */ ({ instance: instance });\n                break;\n            }\n            case 16384 /* TypeDirective */: {\n                nodeData = nodes[i];\n                if (!nodeData) {\n                    /** @type {?} */\n                    var instance = createDirectiveInstance(view, nodeDef);\n                    nodeData = /** @type {?} */ ({ instance: instance });\n                }\n                if (nodeDef.flags & 32768 /* Component */) {\n                    /** @type {?} */\n                    var compView = asElementData(view, /** @type {?} */ ((nodeDef.parent)).nodeIndex).componentView;\n                    initView(compView, nodeData.instance, nodeData.instance);\n                }\n                break;\n            }\n            case 32 /* TypePureArray */:\n            case 64 /* TypePureObject */:\n            case 128 /* TypePurePipe */:\n                nodeData = /** @type {?} */ (createPureExpression(view, nodeDef));\n                break;\n            case 67108864 /* TypeContentQuery */:\n            case 134217728 /* TypeViewQuery */:\n                nodeData = /** @type {?} */ (createQuery());\n                break;\n            case 8 /* TypeNgContent */:\n                appendNgContent(view, renderHost, nodeDef);\n                // no runtime data needed for NgContent...\n                nodeData = undefined;\n                break;\n        }\n        nodes[i] = nodeData;\n    }\n    // Create the ViewData.nodes of component views after we created everything else,\n    // so that e.g. ng-content works\n    execComponentViewsAction(view, ViewAction.CreateViewNodes);\n    // fill static content and view queries\n    execQueriesAction(view, 67108864 /* TypeContentQuery */ | 134217728 /* TypeViewQuery */, 268435456 /* StaticQuery */, 0 /* CheckAndUpdate */);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function checkNoChangesView(view) {\n    markProjectedViewsForCheck(view);\n    Services.updateDirectives(view, 1 /* CheckNoChanges */);\n    execEmbeddedViewsAction(view, ViewAction.CheckNoChanges);\n    Services.updateRenderer(view, 1 /* CheckNoChanges */);\n    execComponentViewsAction(view, ViewAction.CheckNoChanges);\n    // Note: We don't check queries for changes as we didn't do this in v2.x.\n    // TODO(tbosch): investigate if we can enable the check again in v5.x with a nicer error message.\n    view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function checkAndUpdateView(view) {\n    if (view.state & 1 /* BeforeFirstCheck */) {\n        view.state &= ~1 /* BeforeFirstCheck */;\n        view.state |= 2 /* FirstCheck */;\n    }\n    else {\n        view.state &= ~2 /* FirstCheck */;\n    }\n    shiftInitState(view, 0 /* InitState_BeforeInit */, 256 /* InitState_CallingOnInit */);\n    markProjectedViewsForCheck(view);\n    Services.updateDirectives(view, 0 /* CheckAndUpdate */);\n    execEmbeddedViewsAction(view, ViewAction.CheckAndUpdate);\n    execQueriesAction(view, 67108864 /* TypeContentQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);\n    /** @type {?} */\n    var callInit = shiftInitState(view, 256 /* InitState_CallingOnInit */, 512 /* InitState_CallingAfterContentInit */);\n    callLifecycleHooksChildrenFirst(view, 2097152 /* AfterContentChecked */ | (callInit ? 1048576 /* AfterContentInit */ : 0));\n    Services.updateRenderer(view, 0 /* CheckAndUpdate */);\n    execComponentViewsAction(view, ViewAction.CheckAndUpdate);\n    execQueriesAction(view, 134217728 /* TypeViewQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);\n    callInit = shiftInitState(view, 512 /* InitState_CallingAfterContentInit */, 768 /* InitState_CallingAfterViewInit */);\n    callLifecycleHooksChildrenFirst(view, 8388608 /* AfterViewChecked */ | (callInit ? 4194304 /* AfterViewInit */ : 0));\n    if (view.def.flags & 2 /* OnPush */) {\n        view.state &= ~8 /* ChecksEnabled */;\n    }\n    view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);\n    shiftInitState(view, 768 /* InitState_CallingAfterViewInit */, 1024 /* InitState_AfterInit */);\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} argStyle\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nexport function checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    if (argStyle === 0 /* Inline */) {\n        return checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    }\n    else {\n        return checkAndUpdateNodeDynamic(view, nodeDef, v0);\n    }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction markProjectedViewsForCheck(view) {\n    /** @type {?} */\n    var def = view.def;\n    if (!(def.nodeFlags & 4 /* ProjectedTemplate */)) {\n        return;\n    }\n    for (var i = 0; i < def.nodes.length; i++) {\n        /** @type {?} */\n        var nodeDef = def.nodes[i];\n        if (nodeDef.flags & 4 /* ProjectedTemplate */) {\n            /** @type {?} */\n            var projectedViews = asElementData(view, i).template._projectedViews;\n            if (projectedViews) {\n                for (var i_1 = 0; i_1 < projectedViews.length; i_1++) {\n                    /** @type {?} */\n                    var projectedView = projectedViews[i_1];\n                    projectedView.state |= 32 /* CheckProjectedView */;\n                    markParentViewsForCheckProjectedViews(projectedView, view);\n                }\n            }\n        }\n        else if ((nodeDef.childFlags & 4 /* ProjectedTemplate */) === 0) {\n            // a parent with leafs\n            // no child is a component,\n            // then skip the children\n            i += nodeDef.childCount;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nfunction checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    switch (nodeDef.flags & 201347067 /* Types */) {\n        case 1 /* TypeElement */:\n            return checkAndUpdateElementInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        case 2 /* TypeText */:\n            return checkAndUpdateTextInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        case 16384 /* TypeDirective */:\n            return checkAndUpdateDirectiveInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        case 32 /* TypePureArray */:\n        case 64 /* TypePureObject */:\n        case 128 /* TypePurePipe */:\n            return checkAndUpdatePureExpressionInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n        default:\n            throw 'unreachable';\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} values\n * @return {?}\n */\nfunction checkAndUpdateNodeDynamic(view, nodeDef, values) {\n    switch (nodeDef.flags & 201347067 /* Types */) {\n        case 1 /* TypeElement */:\n            return checkAndUpdateElementDynamic(view, nodeDef, values);\n        case 2 /* TypeText */:\n            return checkAndUpdateTextDynamic(view, nodeDef, values);\n        case 16384 /* TypeDirective */:\n            return checkAndUpdateDirectiveDynamic(view, nodeDef, values);\n        case 32 /* TypePureArray */:\n        case 64 /* TypePureObject */:\n        case 128 /* TypePurePipe */:\n            return checkAndUpdatePureExpressionDynamic(view, nodeDef, values);\n        default:\n            throw 'unreachable';\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} argStyle\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nexport function checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    if (argStyle === 0 /* Inline */) {\n        checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    }\n    else {\n        checkNoChangesNodeDynamic(view, nodeDef, v0);\n    }\n    // Returning false is ok here as we would have thrown in case of a change.\n    return false;\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} v0\n * @param {?} v1\n * @param {?} v2\n * @param {?} v3\n * @param {?} v4\n * @param {?} v5\n * @param {?} v6\n * @param {?} v7\n * @param {?} v8\n * @param {?} v9\n * @return {?}\n */\nfunction checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    var bindLen = nodeDef.bindings.length;\n    if (bindLen > 0)\n        checkBindingNoChanges(view, nodeDef, 0, v0);\n    if (bindLen > 1)\n        checkBindingNoChanges(view, nodeDef, 1, v1);\n    if (bindLen > 2)\n        checkBindingNoChanges(view, nodeDef, 2, v2);\n    if (bindLen > 3)\n        checkBindingNoChanges(view, nodeDef, 3, v3);\n    if (bindLen > 4)\n        checkBindingNoChanges(view, nodeDef, 4, v4);\n    if (bindLen > 5)\n        checkBindingNoChanges(view, nodeDef, 5, v5);\n    if (bindLen > 6)\n        checkBindingNoChanges(view, nodeDef, 6, v6);\n    if (bindLen > 7)\n        checkBindingNoChanges(view, nodeDef, 7, v7);\n    if (bindLen > 8)\n        checkBindingNoChanges(view, nodeDef, 8, v8);\n    if (bindLen > 9)\n        checkBindingNoChanges(view, nodeDef, 9, v9);\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} values\n * @return {?}\n */\nfunction checkNoChangesNodeDynamic(view, nodeDef, values) {\n    for (var i = 0; i < values.length; i++) {\n        checkBindingNoChanges(view, nodeDef, i, values[i]);\n    }\n}\n/**\n * Workaround https://github.com/angular/tsickle/issues/497\n * @suppress {misplacedTypeAnnotation}\n * @param {?} view\n * @param {?} nodeDef\n * @return {?}\n */\nfunction checkNoChangesQuery(view, nodeDef) {\n    /** @type {?} */\n    var queryList = asQueryList(view, nodeDef.nodeIndex);\n    if (queryList.dirty) {\n        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, nodeDef.nodeIndex), \"Query \" + (/** @type {?} */ ((nodeDef.query))).id + \" not dirty\", \"Query \" + (/** @type {?} */ ((nodeDef.query))).id + \" dirty\", (view.state & 1 /* BeforeFirstCheck */) !== 0);\n    }\n}\n/**\n * @param {?} view\n * @return {?}\n */\nexport function destroyView(view) {\n    if (view.state & 128 /* Destroyed */) {\n        return;\n    }\n    execEmbeddedViewsAction(view, ViewAction.Destroy);\n    execComponentViewsAction(view, ViewAction.Destroy);\n    callLifecycleHooksChildrenFirst(view, 131072 /* OnDestroy */);\n    if (view.disposables) {\n        for (var i = 0; i < view.disposables.length; i++) {\n            view.disposables[i]();\n        }\n    }\n    detachProjectedView(view);\n    if (view.renderer.destroyNode) {\n        destroyViewNodes(view);\n    }\n    if (isComponentView(view)) {\n        view.renderer.destroy();\n    }\n    view.state |= 128 /* Destroyed */;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction destroyViewNodes(view) {\n    /** @type {?} */\n    var len = view.def.nodes.length;\n    for (var i = 0; i < len; i++) {\n        /** @type {?} */\n        var def = view.def.nodes[i];\n        if (def.flags & 1 /* TypeElement */) {\n            /** @type {?} */ ((view.renderer.destroyNode))(asElementData(view, i).renderElement);\n        }\n        else if (def.flags & 2 /* TypeText */) {\n            /** @type {?} */ ((view.renderer.destroyNode))(asTextData(view, i).renderText);\n        }\n        else if (def.flags & 67108864 /* TypeContentQuery */ || def.flags & 134217728 /* TypeViewQuery */) {\n            asQueryList(view, i).destroy();\n        }\n    }\n}\n/** @enum {number} */\nvar ViewAction = {\n    CreateViewNodes: 0,\n    CheckNoChanges: 1,\n    CheckNoChangesProjectedViews: 2,\n    CheckAndUpdate: 3,\n    CheckAndUpdateProjectedViews: 4,\n    Destroy: 5,\n};\nViewAction[ViewAction.CreateViewNodes] = 'CreateViewNodes';\nViewAction[ViewAction.CheckNoChanges] = 'CheckNoChanges';\nViewAction[ViewAction.CheckNoChangesProjectedViews] = 'CheckNoChangesProjectedViews';\nViewAction[ViewAction.CheckAndUpdate] = 'CheckAndUpdate';\nViewAction[ViewAction.CheckAndUpdateProjectedViews] = 'CheckAndUpdateProjectedViews';\nViewAction[ViewAction.Destroy] = 'Destroy';\n/**\n * @param {?} view\n * @param {?} action\n * @return {?}\n */\nfunction execComponentViewsAction(view, action) {\n    /** @type {?} */\n    var def = view.def;\n    if (!(def.nodeFlags & 33554432 /* ComponentView */)) {\n        return;\n    }\n    for (var i = 0; i < def.nodes.length; i++) {\n        /** @type {?} */\n        var nodeDef = def.nodes[i];\n        if (nodeDef.flags & 33554432 /* ComponentView */) {\n            // a leaf\n            callViewAction(asElementData(view, i).componentView, action);\n        }\n        else if ((nodeDef.childFlags & 33554432 /* ComponentView */) === 0) {\n            // a parent with leafs\n            // no child is a component,\n            // then skip the children\n            i += nodeDef.childCount;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} action\n * @return {?}\n */\nfunction execEmbeddedViewsAction(view, action) {\n    /** @type {?} */\n    var def = view.def;\n    if (!(def.nodeFlags & 16777216 /* EmbeddedViews */)) {\n        return;\n    }\n    for (var i = 0; i < def.nodes.length; i++) {\n        /** @type {?} */\n        var nodeDef = def.nodes[i];\n        if (nodeDef.flags & 16777216 /* EmbeddedViews */) {\n            /** @type {?} */\n            var embeddedViews = /** @type {?} */ ((asElementData(view, i).viewContainer))._embeddedViews;\n            for (var k = 0; k < embeddedViews.length; k++) {\n                callViewAction(embeddedViews[k], action);\n            }\n        }\n        else if ((nodeDef.childFlags & 16777216 /* EmbeddedViews */) === 0) {\n            // a parent with leafs\n            // no child is a component,\n            // then skip the children\n            i += nodeDef.childCount;\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} action\n * @return {?}\n */\nfunction callViewAction(view, action) {\n    /** @type {?} */\n    var viewState = view.state;\n    switch (action) {\n        case ViewAction.CheckNoChanges:\n            if ((viewState & 128 /* Destroyed */) === 0) {\n                if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {\n                    checkNoChangesView(view);\n                }\n                else if (viewState & 64 /* CheckProjectedViews */) {\n                    execProjectedViewsAction(view, ViewAction.CheckNoChangesProjectedViews);\n                }\n            }\n            break;\n        case ViewAction.CheckNoChangesProjectedViews:\n            if ((viewState & 128 /* Destroyed */) === 0) {\n                if (viewState & 32 /* CheckProjectedView */) {\n                    checkNoChangesView(view);\n                }\n                else if (viewState & 64 /* CheckProjectedViews */) {\n                    execProjectedViewsAction(view, action);\n                }\n            }\n            break;\n        case ViewAction.CheckAndUpdate:\n            if ((viewState & 128 /* Destroyed */) === 0) {\n                if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {\n                    checkAndUpdateView(view);\n                }\n                else if (viewState & 64 /* CheckProjectedViews */) {\n                    execProjectedViewsAction(view, ViewAction.CheckAndUpdateProjectedViews);\n                }\n            }\n            break;\n        case ViewAction.CheckAndUpdateProjectedViews:\n            if ((viewState & 128 /* Destroyed */) === 0) {\n                if (viewState & 32 /* CheckProjectedView */) {\n                    checkAndUpdateView(view);\n                }\n                else if (viewState & 64 /* CheckProjectedViews */) {\n                    execProjectedViewsAction(view, action);\n                }\n            }\n            break;\n        case ViewAction.Destroy:\n            // Note: destroyView recurses over all views,\n            // so we don't need to special case projected views here.\n            destroyView(view);\n            break;\n        case ViewAction.CreateViewNodes:\n            createViewNodes(view);\n            break;\n    }\n}\n/**\n * @param {?} view\n * @param {?} action\n * @return {?}\n */\nfunction execProjectedViewsAction(view, action) {\n    execEmbeddedViewsAction(view, action);\n    execComponentViewsAction(view, action);\n}\n/**\n * @param {?} view\n * @param {?} queryFlags\n * @param {?} staticDynamicQueryFlag\n * @param {?} checkType\n * @return {?}\n */\nfunction execQueriesAction(view, queryFlags, staticDynamicQueryFlag, checkType) {\n    if (!(view.def.nodeFlags & queryFlags) || !(view.def.nodeFlags & staticDynamicQueryFlag)) {\n        return;\n    }\n    /** @type {?} */\n    var nodeCount = view.def.nodes.length;\n    for (var i = 0; i < nodeCount; i++) {\n        /** @type {?} */\n        var nodeDef = view.def.nodes[i];\n        if ((nodeDef.flags & queryFlags) && (nodeDef.flags & staticDynamicQueryFlag)) {\n            Services.setCurrentNode(view, nodeDef.nodeIndex);\n            switch (checkType) {\n                case 0 /* CheckAndUpdate */:\n                    checkAndUpdateQuery(view, nodeDef);\n                    break;\n                case 1 /* CheckNoChanges */:\n                    checkNoChangesQuery(view, nodeDef);\n                    break;\n            }\n        }\n        if (!(nodeDef.childFlags & queryFlags) || !(nodeDef.childFlags & staticDynamicQueryFlag)) {\n            // no child has a matching query\n            // then skip the children\n            i += nodeDef.childCount;\n        }\n    }\n}\n//# sourceMappingURL=view.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DebugElement__PRE_R3__, DebugNode__PRE_R3__, EventListener, getDebugNode, indexDebugNode, removeDebugNodeFromIndex } from '../debug/debug_node';\nimport { getInjectableDef } from '../di/defs';\nimport { ErrorHandler } from '../error_handler';\nimport { isDevMode } from '../is_dev_mode';\nimport { RendererFactory2 } from '../render/api';\nimport { Sanitizer } from '../sanitization/security';\nimport { normalizeDebugBindingName, normalizeDebugBindingValue } from '../util/ng_reflect';\nimport { isViewDebugError, viewDestroyedError, viewWrappedDebugError } from './errors';\nimport { resolveDep } from './provider';\nimport { dirtyParentQueries, getQueryValue } from './query';\nimport { createInjector, createNgModuleRef, getComponentViewDefinitionFactory } from './refs';\nimport { Services, asElementData, asPureExpressionData } from './types';\nimport { NOOP, isComponentView, renderNode, resolveDefinition, splitDepsDsl, tokenKey, viewParentEl } from './util';\nimport { checkAndUpdateNode, checkAndUpdateView, checkNoChangesNode, checkNoChangesView, createComponentView, createEmbeddedView, createRootView, destroyView } from './view';\n/** @type {?} */\nvar initialized = false;\n/**\n * @return {?}\n */\nexport function initServicesIfNeeded() {\n    if (initialized) {\n        return;\n    }\n    initialized = true;\n    /** @type {?} */\n    var services = isDevMode() ? createDebugServices() : createProdServices();\n    Services.setCurrentNode = services.setCurrentNode;\n    Services.createRootView = services.createRootView;\n    Services.createEmbeddedView = services.createEmbeddedView;\n    Services.createComponentView = services.createComponentView;\n    Services.createNgModuleRef = services.createNgModuleRef;\n    Services.overrideProvider = services.overrideProvider;\n    Services.overrideComponentView = services.overrideComponentView;\n    Services.clearOverrides = services.clearOverrides;\n    Services.checkAndUpdateView = services.checkAndUpdateView;\n    Services.checkNoChangesView = services.checkNoChangesView;\n    Services.destroyView = services.destroyView;\n    Services.resolveDep = resolveDep;\n    Services.createDebugContext = services.createDebugContext;\n    Services.handleEvent = services.handleEvent;\n    Services.updateDirectives = services.updateDirectives;\n    Services.updateRenderer = services.updateRenderer;\n    Services.dirtyParentQueries = dirtyParentQueries;\n}\n/**\n * @return {?}\n */\nfunction createProdServices() {\n    return {\n        setCurrentNode: function () { },\n        createRootView: createProdRootView,\n        createEmbeddedView: createEmbeddedView,\n        createComponentView: createComponentView,\n        createNgModuleRef: createNgModuleRef,\n        overrideProvider: NOOP,\n        overrideComponentView: NOOP,\n        clearOverrides: NOOP,\n        checkAndUpdateView: checkAndUpdateView,\n        checkNoChangesView: checkNoChangesView,\n        destroyView: destroyView,\n        createDebugContext: function (view, nodeIndex) { return new DebugContext_(view, nodeIndex); },\n        handleEvent: function (view, nodeIndex, eventName, event) {\n            return view.def.handleEvent(view, nodeIndex, eventName, event);\n        },\n        updateDirectives: function (view, checkType) { return view.def.updateDirectives(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :\n            prodCheckNoChangesNode, view); },\n        updateRenderer: function (view, checkType) { return view.def.updateRenderer(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :\n            prodCheckNoChangesNode, view); },\n    };\n}\n/**\n * @return {?}\n */\nfunction createDebugServices() {\n    return {\n        setCurrentNode: debugSetCurrentNode,\n        createRootView: debugCreateRootView,\n        createEmbeddedView: debugCreateEmbeddedView,\n        createComponentView: debugCreateComponentView,\n        createNgModuleRef: debugCreateNgModuleRef,\n        overrideProvider: debugOverrideProvider,\n        overrideComponentView: debugOverrideComponentView,\n        clearOverrides: debugClearOverrides,\n        checkAndUpdateView: debugCheckAndUpdateView,\n        checkNoChangesView: debugCheckNoChangesView,\n        destroyView: debugDestroyView,\n        createDebugContext: function (view, nodeIndex) { return new DebugContext_(view, nodeIndex); },\n        handleEvent: debugHandleEvent,\n        updateDirectives: debugUpdateDirectives,\n        updateRenderer: debugUpdateRenderer,\n    };\n}\n/**\n * @param {?} elInjector\n * @param {?} projectableNodes\n * @param {?} rootSelectorOrNode\n * @param {?} def\n * @param {?} ngModule\n * @param {?=} context\n * @return {?}\n */\nfunction createProdRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {\n    /** @type {?} */\n    var rendererFactory = ngModule.injector.get(RendererFactory2);\n    return createRootView(createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode), def, context);\n}\n/**\n * @param {?} elInjector\n * @param {?} projectableNodes\n * @param {?} rootSelectorOrNode\n * @param {?} def\n * @param {?} ngModule\n * @param {?=} context\n * @return {?}\n */\nfunction debugCreateRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {\n    /** @type {?} */\n    var rendererFactory = ngModule.injector.get(RendererFactory2);\n    /** @type {?} */\n    var root = createRootData(elInjector, ngModule, new DebugRendererFactory2(rendererFactory), projectableNodes, rootSelectorOrNode);\n    /** @type {?} */\n    var defWithOverride = applyProviderOverridesToView(def);\n    return callWithDebugContext(DebugAction.create, createRootView, null, [root, defWithOverride, context]);\n}\n/**\n * @param {?} elInjector\n * @param {?} ngModule\n * @param {?} rendererFactory\n * @param {?} projectableNodes\n * @param {?} rootSelectorOrNode\n * @return {?}\n */\nfunction createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode) {\n    /** @type {?} */\n    var sanitizer = ngModule.injector.get(Sanitizer);\n    /** @type {?} */\n    var errorHandler = ngModule.injector.get(ErrorHandler);\n    /** @type {?} */\n    var renderer = rendererFactory.createRenderer(null, null);\n    return {\n        ngModule: ngModule,\n        injector: elInjector, projectableNodes: projectableNodes,\n        selectorOrNode: rootSelectorOrNode, sanitizer: sanitizer, rendererFactory: rendererFactory, renderer: renderer, errorHandler: errorHandler\n    };\n}\n/**\n * @param {?} parentView\n * @param {?} anchorDef\n * @param {?} viewDef\n * @param {?=} context\n * @return {?}\n */\nfunction debugCreateEmbeddedView(parentView, anchorDef, viewDef, context) {\n    /** @type {?} */\n    var defWithOverride = applyProviderOverridesToView(viewDef);\n    return callWithDebugContext(DebugAction.create, createEmbeddedView, null, [parentView, anchorDef, defWithOverride, context]);\n}\n/**\n * @param {?} parentView\n * @param {?} nodeDef\n * @param {?} viewDef\n * @param {?} hostElement\n * @return {?}\n */\nfunction debugCreateComponentView(parentView, nodeDef, viewDef, hostElement) {\n    /** @type {?} */\n    var overrideComponentView = viewDefOverrides.get(/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ ((nodeDef.element)).componentProvider)).provider)).token);\n    if (overrideComponentView) {\n        viewDef = overrideComponentView;\n    }\n    else {\n        viewDef = applyProviderOverridesToView(viewDef);\n    }\n    return callWithDebugContext(DebugAction.create, createComponentView, null, [parentView, nodeDef, viewDef, hostElement]);\n}\n/**\n * @param {?} moduleType\n * @param {?} parentInjector\n * @param {?} bootstrapComponents\n * @param {?} def\n * @return {?}\n */\nfunction debugCreateNgModuleRef(moduleType, parentInjector, bootstrapComponents, def) {\n    /** @type {?} */\n    var defWithOverride = applyProviderOverridesToNgModule(def);\n    return createNgModuleRef(moduleType, parentInjector, bootstrapComponents, defWithOverride);\n}\n/** @type {?} */\nvar providerOverrides = new Map();\n/** @type {?} */\nvar providerOverridesWithScope = new Map();\n/** @type {?} */\nvar viewDefOverrides = new Map();\n/**\n * @param {?} override\n * @return {?}\n */\nfunction debugOverrideProvider(override) {\n    providerOverrides.set(override.token, override);\n    /** @type {?} */\n    var injectableDef;\n    if (typeof override.token === 'function' && (injectableDef = getInjectableDef(override.token)) &&\n        typeof injectableDef.providedIn === 'function') {\n        providerOverridesWithScope.set(/** @type {?} */ (override.token), override);\n    }\n}\n/**\n * @param {?} comp\n * @param {?} compFactory\n * @return {?}\n */\nfunction debugOverrideComponentView(comp, compFactory) {\n    /** @type {?} */\n    var hostViewDef = resolveDefinition(getComponentViewDefinitionFactory(compFactory));\n    /** @type {?} */\n    var compViewDef = resolveDefinition(/** @type {?} */ ((/** @type {?} */ ((hostViewDef.nodes[0].element)).componentView)));\n    viewDefOverrides.set(comp, compViewDef);\n}\n/**\n * @return {?}\n */\nfunction debugClearOverrides() {\n    providerOverrides.clear();\n    providerOverridesWithScope.clear();\n    viewDefOverrides.clear();\n}\n/**\n * @param {?} def\n * @return {?}\n */\nfunction applyProviderOverridesToView(def) {\n    if (providerOverrides.size === 0) {\n        return def;\n    }\n    /** @type {?} */\n    var elementIndicesWithOverwrittenProviders = findElementIndicesWithOverwrittenProviders(def);\n    if (elementIndicesWithOverwrittenProviders.length === 0) {\n        return def;\n    }\n    // clone the whole view definition,\n    // as it maintains references between the nodes that are hard to update.\n    def = /** @type {?} */ ((def.factory))(function () { return NOOP; });\n    for (var i = 0; i < elementIndicesWithOverwrittenProviders.length; i++) {\n        applyProviderOverridesToElement(def, elementIndicesWithOverwrittenProviders[i]);\n    }\n    return def;\n    /**\n     * @param {?} def\n     * @return {?}\n     */\n    function findElementIndicesWithOverwrittenProviders(def) {\n        /** @type {?} */\n        var elIndicesWithOverwrittenProviders = [];\n        /** @type {?} */\n        var lastElementDef = null;\n        for (var i = 0; i < def.nodes.length; i++) {\n            /** @type {?} */\n            var nodeDef = def.nodes[i];\n            if (nodeDef.flags & 1 /* TypeElement */) {\n                lastElementDef = nodeDef;\n            }\n            if (lastElementDef && nodeDef.flags & 3840 /* CatProviderNoDirective */ &&\n                providerOverrides.has(/** @type {?} */ ((nodeDef.provider)).token)) {\n                elIndicesWithOverwrittenProviders.push(/** @type {?} */ ((lastElementDef)).nodeIndex);\n                lastElementDef = null;\n            }\n        }\n        return elIndicesWithOverwrittenProviders;\n    }\n    /**\n     * @param {?} viewDef\n     * @param {?} elIndex\n     * @return {?}\n     */\n    function applyProviderOverridesToElement(viewDef, elIndex) {\n        for (var i = elIndex + 1; i < viewDef.nodes.length; i++) {\n            /** @type {?} */\n            var nodeDef = viewDef.nodes[i];\n            if (nodeDef.flags & 1 /* TypeElement */) {\n                // stop at the next element\n                return;\n            }\n            if (nodeDef.flags & 3840 /* CatProviderNoDirective */) {\n                /** @type {?} */\n                var provider = /** @type {?} */ ((nodeDef.provider));\n                /** @type {?} */\n                var override = providerOverrides.get(provider.token);\n                if (override) {\n                    nodeDef.flags = (nodeDef.flags & ~3840 /* CatProviderNoDirective */) | override.flags;\n                    provider.deps = splitDepsDsl(override.deps);\n                    provider.value = override.value;\n                }\n            }\n        }\n    }\n}\n/**\n * @param {?} def\n * @return {?}\n */\nfunction applyProviderOverridesToNgModule(def) {\n    var _a = calcHasOverrides(def), hasOverrides = _a.hasOverrides, hasDeprecatedOverrides = _a.hasDeprecatedOverrides;\n    if (!hasOverrides) {\n        return def;\n    }\n    // clone the whole view definition,\n    // as it maintains references between the nodes that are hard to update.\n    def = /** @type {?} */ ((def.factory))(function () { return NOOP; });\n    applyProviderOverrides(def);\n    return def;\n    /**\n     * @param {?} def\n     * @return {?}\n     */\n    function calcHasOverrides(def) {\n        /** @type {?} */\n        var hasOverrides = false;\n        /** @type {?} */\n        var hasDeprecatedOverrides = false;\n        if (providerOverrides.size === 0) {\n            return { hasOverrides: hasOverrides, hasDeprecatedOverrides: hasDeprecatedOverrides };\n        }\n        def.providers.forEach(function (node) {\n            /** @type {?} */\n            var override = providerOverrides.get(node.token);\n            if ((node.flags & 3840 /* CatProviderNoDirective */) && override) {\n                hasOverrides = true;\n                hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;\n            }\n        });\n        def.modules.forEach(function (module) {\n            providerOverridesWithScope.forEach(function (override, token) {\n                if (/** @type {?} */ ((getInjectableDef(token))).providedIn === module) {\n                    hasOverrides = true;\n                    hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;\n                }\n            });\n        });\n        return { hasOverrides: hasOverrides, hasDeprecatedOverrides: hasDeprecatedOverrides };\n    }\n    /**\n     * @param {?} def\n     * @return {?}\n     */\n    function applyProviderOverrides(def) {\n        for (var i = 0; i < def.providers.length; i++) {\n            /** @type {?} */\n            var provider = def.providers[i];\n            if (hasDeprecatedOverrides) {\n                // We had a bug where me made\n                // all providers lazy. Keep this logic behind a flag\n                // for migrating existing users.\n                provider.flags |= 4096 /* LazyProvider */;\n            }\n            /** @type {?} */\n            var override = providerOverrides.get(provider.token);\n            if (override) {\n                provider.flags = (provider.flags & ~3840 /* CatProviderNoDirective */) | override.flags;\n                provider.deps = splitDepsDsl(override.deps);\n                provider.value = override.value;\n            }\n        }\n        if (providerOverridesWithScope.size > 0) {\n            /** @type {?} */\n            var moduleSet_1 = new Set(def.modules);\n            providerOverridesWithScope.forEach(function (override, token) {\n                if (moduleSet_1.has(/** @type {?} */ ((getInjectableDef(token))).providedIn)) {\n                    /** @type {?} */\n                    var provider = {\n                        token: token,\n                        flags: override.flags | (hasDeprecatedOverrides ? 4096 /* LazyProvider */ : 0 /* None */),\n                        deps: splitDepsDsl(override.deps),\n                        value: override.value,\n                        index: def.providers.length,\n                    };\n                    def.providers.push(provider);\n                    def.providersByKey[tokenKey(token)] = provider;\n                }\n            });\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} checkIndex\n * @param {?} argStyle\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nfunction prodCheckAndUpdateNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    var nodeDef = view.def.nodes[checkIndex];\n    checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    return (nodeDef.flags & 224 /* CatPureExpression */) ?\n        asPureExpressionData(view, checkIndex).value :\n        undefined;\n}\n/**\n * @param {?} view\n * @param {?} checkIndex\n * @param {?} argStyle\n * @param {?=} v0\n * @param {?=} v1\n * @param {?=} v2\n * @param {?=} v3\n * @param {?=} v4\n * @param {?=} v5\n * @param {?=} v6\n * @param {?=} v7\n * @param {?=} v8\n * @param {?=} v9\n * @return {?}\n */\nfunction prodCheckNoChangesNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {\n    /** @type {?} */\n    var nodeDef = view.def.nodes[checkIndex];\n    checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);\n    return (nodeDef.flags & 224 /* CatPureExpression */) ?\n        asPureExpressionData(view, checkIndex).value :\n        undefined;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction debugCheckAndUpdateView(view) {\n    return callWithDebugContext(DebugAction.detectChanges, checkAndUpdateView, null, [view]);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction debugCheckNoChangesView(view) {\n    return callWithDebugContext(DebugAction.checkNoChanges, checkNoChangesView, null, [view]);\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction debugDestroyView(view) {\n    return callWithDebugContext(DebugAction.destroy, destroyView, null, [view]);\n}\n/** @enum {number} */\nvar DebugAction = {\n    create: 0,\n    detectChanges: 1,\n    checkNoChanges: 2,\n    destroy: 3,\n    handleEvent: 4,\n};\nDebugAction[DebugAction.create] = 'create';\nDebugAction[DebugAction.detectChanges] = 'detectChanges';\nDebugAction[DebugAction.checkNoChanges] = 'checkNoChanges';\nDebugAction[DebugAction.destroy] = 'destroy';\nDebugAction[DebugAction.handleEvent] = 'handleEvent';\n/** @type {?} */\nvar _currentAction;\n/** @type {?} */\nvar _currentView;\n/** @type {?} */\nvar _currentNodeIndex;\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction debugSetCurrentNode(view, nodeIndex) {\n    _currentView = view;\n    _currentNodeIndex = nodeIndex;\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @param {?} eventName\n * @param {?} event\n * @return {?}\n */\nfunction debugHandleEvent(view, nodeIndex, eventName, event) {\n    debugSetCurrentNode(view, nodeIndex);\n    return callWithDebugContext(DebugAction.handleEvent, view.def.handleEvent, null, [view, nodeIndex, eventName, event]);\n}\n/**\n * @param {?} view\n * @param {?} checkType\n * @return {?}\n */\nfunction debugUpdateDirectives(view, checkType) {\n    if (view.state & 128 /* Destroyed */) {\n        throw viewDestroyedError(DebugAction[_currentAction]);\n    }\n    debugSetCurrentNode(view, nextDirectiveWithBinding(view, 0));\n    return view.def.updateDirectives(debugCheckDirectivesFn, view);\n    /**\n     * @param {?} view\n     * @param {?} nodeIndex\n     * @param {?} argStyle\n     * @param {...?} values\n     * @return {?}\n     */\n    function debugCheckDirectivesFn(view, nodeIndex, argStyle) {\n        var values = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            values[_i - 3] = arguments[_i];\n        }\n        /** @type {?} */\n        var nodeDef = view.def.nodes[nodeIndex];\n        if (checkType === 0 /* CheckAndUpdate */) {\n            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);\n        }\n        else {\n            debugCheckNoChangesNode(view, nodeDef, argStyle, values);\n        }\n        if (nodeDef.flags & 16384 /* TypeDirective */) {\n            debugSetCurrentNode(view, nextDirectiveWithBinding(view, nodeIndex));\n        }\n        return (nodeDef.flags & 224 /* CatPureExpression */) ?\n            asPureExpressionData(view, nodeDef.nodeIndex).value :\n            undefined;\n    }\n}\n/**\n * @param {?} view\n * @param {?} checkType\n * @return {?}\n */\nfunction debugUpdateRenderer(view, checkType) {\n    if (view.state & 128 /* Destroyed */) {\n        throw viewDestroyedError(DebugAction[_currentAction]);\n    }\n    debugSetCurrentNode(view, nextRenderNodeWithBinding(view, 0));\n    return view.def.updateRenderer(debugCheckRenderNodeFn, view);\n    /**\n     * @param {?} view\n     * @param {?} nodeIndex\n     * @param {?} argStyle\n     * @param {...?} values\n     * @return {?}\n     */\n    function debugCheckRenderNodeFn(view, nodeIndex, argStyle) {\n        var values = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            values[_i - 3] = arguments[_i];\n        }\n        /** @type {?} */\n        var nodeDef = view.def.nodes[nodeIndex];\n        if (checkType === 0 /* CheckAndUpdate */) {\n            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);\n        }\n        else {\n            debugCheckNoChangesNode(view, nodeDef, argStyle, values);\n        }\n        if (nodeDef.flags & 3 /* CatRenderNode */) {\n            debugSetCurrentNode(view, nextRenderNodeWithBinding(view, nodeIndex));\n        }\n        return (nodeDef.flags & 224 /* CatPureExpression */) ?\n            asPureExpressionData(view, nodeDef.nodeIndex).value :\n            undefined;\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} argStyle\n * @param {?} givenValues\n * @return {?}\n */\nfunction debugCheckAndUpdateNode(view, nodeDef, argStyle, givenValues) {\n    /** @type {?} */\n    var changed = (/** @type {?} */ (checkAndUpdateNode)).apply(void 0, [view, nodeDef, argStyle].concat(givenValues));\n    if (changed) {\n        /** @type {?} */\n        var values = argStyle === 1 /* Dynamic */ ? givenValues[0] : givenValues;\n        if (nodeDef.flags & 16384 /* TypeDirective */) {\n            /** @type {?} */\n            var bindingValues = {};\n            for (var i = 0; i < nodeDef.bindings.length; i++) {\n                /** @type {?} */\n                var binding = nodeDef.bindings[i];\n                /** @type {?} */\n                var value = values[i];\n                if (binding.flags & 8 /* TypeProperty */) {\n                    bindingValues[normalizeDebugBindingName(/** @type {?} */ ((binding.nonMinifiedName)))] =\n                        normalizeDebugBindingValue(value);\n                }\n            }\n            /** @type {?} */\n            var elDef = /** @type {?} */ ((nodeDef.parent));\n            /** @type {?} */\n            var el = asElementData(view, elDef.nodeIndex).renderElement;\n            if (!/** @type {?} */ ((elDef.element)).name) {\n                // a comment.\n                view.renderer.setValue(el, \"bindings=\" + JSON.stringify(bindingValues, null, 2));\n            }\n            else {\n                // a regular element.\n                for (var attr in bindingValues) {\n                    /** @type {?} */\n                    var value = bindingValues[attr];\n                    if (value != null) {\n                        view.renderer.setAttribute(el, attr, value);\n                    }\n                    else {\n                        view.renderer.removeAttribute(el, attr);\n                    }\n                }\n            }\n        }\n    }\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} argStyle\n * @param {?} values\n * @return {?}\n */\nfunction debugCheckNoChangesNode(view, nodeDef, argStyle, values) {\n    (/** @type {?} */ (checkNoChangesNode)).apply(void 0, [view, nodeDef, argStyle].concat(values));\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction nextDirectiveWithBinding(view, nodeIndex) {\n    for (var i = nodeIndex; i < view.def.nodes.length; i++) {\n        /** @type {?} */\n        var nodeDef = view.def.nodes[i];\n        if (nodeDef.flags & 16384 /* TypeDirective */ && nodeDef.bindings && nodeDef.bindings.length) {\n            return i;\n        }\n    }\n    return null;\n}\n/**\n * @param {?} view\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction nextRenderNodeWithBinding(view, nodeIndex) {\n    for (var i = nodeIndex; i < view.def.nodes.length; i++) {\n        /** @type {?} */\n        var nodeDef = view.def.nodes[i];\n        if ((nodeDef.flags & 3 /* CatRenderNode */) && nodeDef.bindings && nodeDef.bindings.length) {\n            return i;\n        }\n    }\n    return null;\n}\nvar DebugContext_ = /** @class */ (function () {\n    function DebugContext_(view, nodeIndex) {\n        this.view = view;\n        this.nodeIndex = nodeIndex;\n        if (nodeIndex == null) {\n            this.nodeIndex = nodeIndex = 0;\n        }\n        this.nodeDef = view.def.nodes[nodeIndex];\n        /** @type {?} */\n        var elDef = this.nodeDef;\n        /** @type {?} */\n        var elView = view;\n        while (elDef && (elDef.flags & 1 /* TypeElement */) === 0) {\n            elDef = /** @type {?} */ ((elDef.parent));\n        }\n        if (!elDef) {\n            while (!elDef && elView) {\n                elDef = /** @type {?} */ ((viewParentEl(elView)));\n                elView = /** @type {?} */ ((elView.parent));\n            }\n        }\n        this.elDef = elDef;\n        this.elView = elView;\n    }\n    Object.defineProperty(DebugContext_.prototype, \"elOrCompView\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            // Has to be done lazily as we use the DebugContext also during creation of elements...\n            return asElementData(this.elView, this.elDef.nodeIndex).componentView || this.view;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"injector\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return createInjector(this.elView, this.elDef); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"component\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.elOrCompView.component; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"context\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.elOrCompView.context; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"providerTokens\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var tokens = [];\n            if (this.elDef) {\n                for (var i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {\n                    /** @type {?} */\n                    var childDef = this.elView.def.nodes[i];\n                    if (childDef.flags & 20224 /* CatProvider */) {\n                        tokens.push(/** @type {?} */ ((childDef.provider)).token);\n                    }\n                    i += childDef.childCount;\n                }\n            }\n            return tokens;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"references\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var references = {};\n            if (this.elDef) {\n                collectReferences(this.elView, this.elDef, references);\n                for (var i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {\n                    /** @type {?} */\n                    var childDef = this.elView.def.nodes[i];\n                    if (childDef.flags & 20224 /* CatProvider */) {\n                        collectReferences(this.elView, childDef, references);\n                    }\n                    i += childDef.childCount;\n                }\n            }\n            return references;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"componentRenderElement\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var elData = findHostElement(this.elOrCompView);\n            return elData ? elData.renderElement : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DebugContext_.prototype, \"renderNode\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this.nodeDef.flags & 2 /* TypeText */ ? renderNode(this.view, this.nodeDef) :\n                renderNode(this.elView, this.elDef);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} console\n     * @param {...?} values\n     * @return {?}\n     */\n    DebugContext_.prototype.logError = /**\n     * @param {?} console\n     * @param {...?} values\n     * @return {?}\n     */\n    function (console) {\n        var values = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            values[_i - 1] = arguments[_i];\n        }\n        /** @type {?} */\n        var logViewDef;\n        /** @type {?} */\n        var logNodeIndex;\n        if (this.nodeDef.flags & 2 /* TypeText */) {\n            logViewDef = this.view.def;\n            logNodeIndex = this.nodeDef.nodeIndex;\n        }\n        else {\n            logViewDef = this.elView.def;\n            logNodeIndex = this.elDef.nodeIndex;\n        }\n        /** @type {?} */\n        var renderNodeIndex = getRenderNodeIndex(logViewDef, logNodeIndex);\n        /** @type {?} */\n        var currRenderNodeIndex = -1;\n        /** @type {?} */\n        var nodeLogger = function () {\n            var _a;\n            currRenderNodeIndex++;\n            if (currRenderNodeIndex === renderNodeIndex) {\n                return (_a = console.error).bind.apply(_a, [console].concat(values));\n            }\n            else {\n                return NOOP;\n            }\n        }; /** @type {?} */\n        ((logViewDef.factory))(nodeLogger);\n        if (currRenderNodeIndex < renderNodeIndex) {\n            console.error('Illegal state: the ViewDefinitionFactory did not call the logger!');\n            console.error.apply(console, values);\n        }\n    };\n    return DebugContext_;\n}());\nif (false) {\n    /** @type {?} */\n    DebugContext_.prototype.nodeDef;\n    /** @type {?} */\n    DebugContext_.prototype.elView;\n    /** @type {?} */\n    DebugContext_.prototype.elDef;\n    /** @type {?} */\n    DebugContext_.prototype.view;\n    /** @type {?} */\n    DebugContext_.prototype.nodeIndex;\n}\n/**\n * @param {?} viewDef\n * @param {?} nodeIndex\n * @return {?}\n */\nfunction getRenderNodeIndex(viewDef, nodeIndex) {\n    /** @type {?} */\n    var renderNodeIndex = -1;\n    for (var i = 0; i <= nodeIndex; i++) {\n        /** @type {?} */\n        var nodeDef = viewDef.nodes[i];\n        if (nodeDef.flags & 3 /* CatRenderNode */) {\n            renderNodeIndex++;\n        }\n    }\n    return renderNodeIndex;\n}\n/**\n * @param {?} view\n * @return {?}\n */\nfunction findHostElement(view) {\n    while (view && !isComponentView(view)) {\n        view = /** @type {?} */ ((view.parent));\n    }\n    if (view.parent) {\n        return asElementData(view.parent, /** @type {?} */ ((viewParentEl(view))).nodeIndex);\n    }\n    return null;\n}\n/**\n * @param {?} view\n * @param {?} nodeDef\n * @param {?} references\n * @return {?}\n */\nfunction collectReferences(view, nodeDef, references) {\n    for (var refName in nodeDef.references) {\n        references[refName] = getQueryValue(view, nodeDef, nodeDef.references[refName]);\n    }\n}\n/**\n * @param {?} action\n * @param {?} fn\n * @param {?} self\n * @param {?} args\n * @return {?}\n */\nfunction callWithDebugContext(action, fn, self, args) {\n    /** @type {?} */\n    var oldAction = _currentAction;\n    /** @type {?} */\n    var oldView = _currentView;\n    /** @type {?} */\n    var oldNodeIndex = _currentNodeIndex;\n    try {\n        _currentAction = action;\n        /** @type {?} */\n        var result = fn.apply(self, args);\n        _currentView = oldView;\n        _currentNodeIndex = oldNodeIndex;\n        _currentAction = oldAction;\n        return result;\n    }\n    catch (e) {\n        if (isViewDebugError(e) || !_currentView) {\n            throw e;\n        }\n        throw viewWrappedDebugError(e, /** @type {?} */ ((getCurrentDebugContext())));\n    }\n}\n/**\n * @return {?}\n */\nexport function getCurrentDebugContext() {\n    return _currentView ? new DebugContext_(_currentView, _currentNodeIndex) : null;\n}\nvar DebugRendererFactory2 = /** @class */ (function () {\n    function DebugRendererFactory2(delegate) {\n        this.delegate = delegate;\n    }\n    /**\n     * @param {?} element\n     * @param {?} renderData\n     * @return {?}\n     */\n    DebugRendererFactory2.prototype.createRenderer = /**\n     * @param {?} element\n     * @param {?} renderData\n     * @return {?}\n     */\n    function (element, renderData) {\n        return new DebugRenderer2(this.delegate.createRenderer(element, renderData));\n    };\n    /**\n     * @return {?}\n     */\n    DebugRendererFactory2.prototype.begin = /**\n     * @return {?}\n     */\n    function () {\n        if (this.delegate.begin) {\n            this.delegate.begin();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DebugRendererFactory2.prototype.end = /**\n     * @return {?}\n     */\n    function () {\n        if (this.delegate.end) {\n            this.delegate.end();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DebugRendererFactory2.prototype.whenRenderingDone = /**\n     * @return {?}\n     */\n    function () {\n        if (this.delegate.whenRenderingDone) {\n            return this.delegate.whenRenderingDone();\n        }\n        return Promise.resolve(null);\n    };\n    return DebugRendererFactory2;\n}());\nexport { DebugRendererFactory2 };\nif (false) {\n    /** @type {?} */\n    DebugRendererFactory2.prototype.delegate;\n}\nvar DebugRenderer2 = /** @class */ (function () {\n    function DebugRenderer2(delegate) {\n        this.delegate = delegate;\n        /**\n         * Factory function used to create a `DebugContext` when a node is created.\n         *\n         * The `DebugContext` allows to retrieve information about the nodes that are useful in tests.\n         *\n         * The factory is configurable so that the `DebugRenderer2` could instantiate either a View Engine\n         * or a Render context.\n         */\n        this.debugContextFactory = getCurrentDebugContext;\n        this.data = this.delegate.data;\n    }\n    /**\n     * @param {?} nativeElement\n     * @return {?}\n     */\n    DebugRenderer2.prototype.createDebugContext = /**\n     * @param {?} nativeElement\n     * @return {?}\n     */\n    function (nativeElement) { return this.debugContextFactory(nativeElement); };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    DebugRenderer2.prototype.destroyNode = /**\n     * @param {?} node\n     * @return {?}\n     */\n    function (node) {\n        removeDebugNodeFromIndex(/** @type {?} */ ((getDebugNode(node))));\n        if (this.delegate.destroyNode) {\n            this.delegate.destroyNode(node);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DebugRenderer2.prototype.destroy = /**\n     * @return {?}\n     */\n    function () { this.delegate.destroy(); };\n    /**\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    DebugRenderer2.prototype.createElement = /**\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    function (name, namespace) {\n        /** @type {?} */\n        var el = this.delegate.createElement(name, namespace);\n        /** @type {?} */\n        var debugCtx = this.createDebugContext(el);\n        if (debugCtx) {\n            /** @type {?} */\n            var debugEl = new DebugElement__PRE_R3__(el, null, debugCtx);\n            (/** @type {?} */ (debugEl)).name = name;\n            indexDebugNode(debugEl);\n        }\n        return el;\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    DebugRenderer2.prototype.createComment = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        /** @type {?} */\n        var comment = this.delegate.createComment(value);\n        /** @type {?} */\n        var debugCtx = this.createDebugContext(comment);\n        if (debugCtx) {\n            indexDebugNode(new DebugNode__PRE_R3__(comment, null, debugCtx));\n        }\n        return comment;\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    DebugRenderer2.prototype.createText = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        /** @type {?} */\n        var text = this.delegate.createText(value);\n        /** @type {?} */\n        var debugCtx = this.createDebugContext(text);\n        if (debugCtx) {\n            indexDebugNode(new DebugNode__PRE_R3__(text, null, debugCtx));\n        }\n        return text;\n    };\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @return {?}\n     */\n    DebugRenderer2.prototype.appendChild = /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @return {?}\n     */\n    function (parent, newChild) {\n        /** @type {?} */\n        var debugEl = getDebugNode(parent);\n        /** @type {?} */\n        var debugChildEl = getDebugNode(newChild);\n        if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.addChild(debugChildEl);\n        }\n        this.delegate.appendChild(parent, newChild);\n    };\n    /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @param {?} refChild\n     * @return {?}\n     */\n    DebugRenderer2.prototype.insertBefore = /**\n     * @param {?} parent\n     * @param {?} newChild\n     * @param {?} refChild\n     * @return {?}\n     */\n    function (parent, newChild, refChild) {\n        /** @type {?} */\n        var debugEl = getDebugNode(parent);\n        /** @type {?} */\n        var debugChildEl = getDebugNode(newChild);\n        /** @type {?} */\n        var debugRefEl = /** @type {?} */ ((getDebugNode(refChild)));\n        if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.insertBefore(debugRefEl, debugChildEl);\n        }\n        this.delegate.insertBefore(parent, newChild, refChild);\n    };\n    /**\n     * @param {?} parent\n     * @param {?} oldChild\n     * @return {?}\n     */\n    DebugRenderer2.prototype.removeChild = /**\n     * @param {?} parent\n     * @param {?} oldChild\n     * @return {?}\n     */\n    function (parent, oldChild) {\n        /** @type {?} */\n        var debugEl = getDebugNode(parent);\n        /** @type {?} */\n        var debugChildEl = getDebugNode(oldChild);\n        if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.removeChild(debugChildEl);\n        }\n        this.delegate.removeChild(parent, oldChild);\n    };\n    /**\n     * @param {?} selectorOrNode\n     * @param {?=} preserveContent\n     * @return {?}\n     */\n    DebugRenderer2.prototype.selectRootElement = /**\n     * @param {?} selectorOrNode\n     * @param {?=} preserveContent\n     * @return {?}\n     */\n    function (selectorOrNode, preserveContent) {\n        /** @type {?} */\n        var el = this.delegate.selectRootElement(selectorOrNode, preserveContent);\n        /** @type {?} */\n        var debugCtx = getCurrentDebugContext();\n        if (debugCtx) {\n            indexDebugNode(new DebugElement__PRE_R3__(el, null, debugCtx));\n        }\n        return el;\n    };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @param {?=} namespace\n     * @return {?}\n     */\n    DebugRenderer2.prototype.setAttribute = /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @param {?=} namespace\n     * @return {?}\n     */\n    function (el, name, value, namespace) {\n        /** @type {?} */\n        var debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            /** @type {?} */\n            var fullName = namespace ? namespace + ':' + name : name;\n            debugEl.attributes[fullName] = value;\n        }\n        this.delegate.setAttribute(el, name, value, namespace);\n    };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    DebugRenderer2.prototype.removeAttribute = /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?=} namespace\n     * @return {?}\n     */\n    function (el, name, namespace) {\n        /** @type {?} */\n        var debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            /** @type {?} */\n            var fullName = namespace ? namespace + ':' + name : name;\n            debugEl.attributes[fullName] = null;\n        }\n        this.delegate.removeAttribute(el, name, namespace);\n    };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    DebugRenderer2.prototype.addClass = /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    function (el, name) {\n        /** @type {?} */\n        var debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.classes[name] = true;\n        }\n        this.delegate.addClass(el, name);\n    };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    DebugRenderer2.prototype.removeClass = /**\n     * @param {?} el\n     * @param {?} name\n     * @return {?}\n     */\n    function (el, name) {\n        /** @type {?} */\n        var debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.classes[name] = false;\n        }\n        this.delegate.removeClass(el, name);\n    };\n    /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} value\n     * @param {?} flags\n     * @return {?}\n     */\n    DebugRenderer2.prototype.setStyle = /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} value\n     * @param {?} flags\n     * @return {?}\n     */\n    function (el, style, value, flags) {\n        /** @type {?} */\n        var debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.styles[style] = value;\n        }\n        this.delegate.setStyle(el, style, value, flags);\n    };\n    /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} flags\n     * @return {?}\n     */\n    DebugRenderer2.prototype.removeStyle = /**\n     * @param {?} el\n     * @param {?} style\n     * @param {?} flags\n     * @return {?}\n     */\n    function (el, style, flags) {\n        /** @type {?} */\n        var debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.styles[style] = null;\n        }\n        this.delegate.removeStyle(el, style, flags);\n    };\n    /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    DebugRenderer2.prototype.setProperty = /**\n     * @param {?} el\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    function (el, name, value) {\n        /** @type {?} */\n        var debugEl = getDebugNode(el);\n        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {\n            debugEl.properties[name] = value;\n        }\n        this.delegate.setProperty(el, name, value);\n    };\n    /**\n     * @param {?} target\n     * @param {?} eventName\n     * @param {?} callback\n     * @return {?}\n     */\n    DebugRenderer2.prototype.listen = /**\n     * @param {?} target\n     * @param {?} eventName\n     * @param {?} callback\n     * @return {?}\n     */\n    function (target, eventName, callback) {\n        if (typeof target !== 'string') {\n            /** @type {?} */\n            var debugEl = getDebugNode(target);\n            if (debugEl) {\n                debugEl.listeners.push(new EventListener(eventName, callback));\n            }\n        }\n        return this.delegate.listen(target, eventName, callback);\n    };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    DebugRenderer2.prototype.parentNode = /**\n     * @param {?} node\n     * @return {?}\n     */\n    function (node) { return this.delegate.parentNode(node); };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    DebugRenderer2.prototype.nextSibling = /**\n     * @param {?} node\n     * @return {?}\n     */\n    function (node) { return this.delegate.nextSibling(node); };\n    /**\n     * @param {?} node\n     * @param {?} value\n     * @return {?}\n     */\n    DebugRenderer2.prototype.setValue = /**\n     * @param {?} node\n     * @param {?} value\n     * @return {?}\n     */\n    function (node, value) { return this.delegate.setValue(node, value); };\n    return DebugRenderer2;\n}());\nexport { DebugRenderer2 };\nif (false) {\n    /** @type {?} */\n    DebugRenderer2.prototype.data;\n    /**\n     * Factory function used to create a `DebugContext` when a node is created.\n     *\n     * The `DebugContext` allows to retrieve information about the nodes that are useful in tests.\n     *\n     * The factory is configurable so that the `DebugRenderer2` could instantiate either a View Engine\n     * or a Render context.\n     * @type {?}\n     */\n    DebugRenderer2.prototype.debugContextFactory;\n    /** @type {?} */\n    DebugRenderer2.prototype.delegate;\n}\n//# sourceMappingURL=services.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Injector } from '../di/injector';\nimport { NgModuleFactory } from '../linker/ng_module_factory';\nimport { initServicesIfNeeded } from './services';\nimport { Services } from './types';\nimport { resolveDefinition } from './util';\n/**\n * @param {?} override\n * @return {?}\n */\nexport function overrideProvider(override) {\n    initServicesIfNeeded();\n    return Services.overrideProvider(override);\n}\n/**\n * @param {?} comp\n * @param {?} componentFactory\n * @return {?}\n */\nexport function overrideComponentView(comp, componentFactory) {\n    initServicesIfNeeded();\n    return Services.overrideComponentView(comp, componentFactory);\n}\n/**\n * @return {?}\n */\nexport function clearOverrides() {\n    initServicesIfNeeded();\n    return Services.clearOverrides();\n}\n/**\n * @param {?} ngModuleType\n * @param {?} bootstrapComponents\n * @param {?} defFactory\n * @return {?}\n */\nexport function createNgModuleFactory(ngModuleType, bootstrapComponents, defFactory) {\n    return new NgModuleFactory_(ngModuleType, bootstrapComponents, defFactory);\n}\n/**\n * @param {?} def\n * @return {?}\n */\nfunction cloneNgModuleDefinition(def) {\n    /** @type {?} */\n    var providers = Array.from(def.providers);\n    /** @type {?} */\n    var modules = Array.from(def.modules);\n    /** @type {?} */\n    var providersByKey = {};\n    for (var key in def.providersByKey) {\n        providersByKey[key] = def.providersByKey[key];\n    }\n    return {\n        factory: def.factory,\n        isRoot: def.isRoot, providers: providers, modules: modules, providersByKey: providersByKey,\n    };\n}\nvar NgModuleFactory_ = /** @class */ (function (_super) {\n    tslib_1.__extends(NgModuleFactory_, _super);\n    function NgModuleFactory_(moduleType, _bootstrapComponents, _ngModuleDefFactory) {\n        var _this = \n        // Attention: this ctor is called as top level function.\n        // Putting any logic in here will destroy closure tree shaking!\n        _super.call(this) || this;\n        _this.moduleType = moduleType;\n        _this._bootstrapComponents = _bootstrapComponents;\n        _this._ngModuleDefFactory = _ngModuleDefFactory;\n        return _this;\n    }\n    /**\n     * @param {?} parentInjector\n     * @return {?}\n     */\n    NgModuleFactory_.prototype.create = /**\n     * @param {?} parentInjector\n     * @return {?}\n     */\n    function (parentInjector) {\n        initServicesIfNeeded();\n        /** @type {?} */\n        var def = cloneNgModuleDefinition(resolveDefinition(this._ngModuleDefFactory));\n        return Services.createNgModuleRef(this.moduleType, parentInjector || Injector.NULL, this._bootstrapComponents, def);\n    };\n    return NgModuleFactory_;\n}(NgModuleFactory));\nif (false) {\n    /** @type {?} */\n    NgModuleFactory_.prototype.moduleType;\n    /** @type {?} */\n    NgModuleFactory_.prototype._bootstrapComponents;\n    /** @type {?} */\n    NgModuleFactory_.prototype._ngModuleDefFactory;\n}\n//# sourceMappingURL=entrypoint.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\n/**\n * @record\n */\nfunction TypeWithMetadata() { }\n/** @type {?|undefined} */\nTypeWithMetadata.prototype.decorators;\n/** @type {?|undefined} */\nTypeWithMetadata.prototype.ctorParameters;\n/** @type {?|undefined} */\nTypeWithMetadata.prototype.propDecorators;\n/**\n * Adds decorator, constructor, and property metadata to a given type via static metadata fields\n * on the type.\n *\n * These metadata fields can later be read with Angular's `ReflectionCapabilities` API.\n *\n * Calls to `setClassMetadata` can be marked as pure, resulting in the metadata assignments being\n * tree-shaken away during production builds.\n * @param {?} type\n * @param {?} decorators\n * @param {?} ctorParameters\n * @param {?} propDecorators\n * @return {?}\n */\nexport function setClassMetadata(type, decorators, ctorParameters, propDecorators) {\n    var _a;\n    /** @type {?} */\n    var clazz = /** @type {?} */ (type);\n    if (decorators !== null) {\n        if (clazz.decorators !== undefined) {\n            (_a = clazz.decorators).push.apply(_a, decorators);\n        }\n        else {\n            clazz.decorators = decorators;\n        }\n    }\n    if (ctorParameters !== null) {\n        // Rather than merging, clobber the existing parameters. If other projects exist which use\n        // tsickle-style annotations and reflect over them in the same way, this could cause issues,\n        // but that is vanishingly unlikely.\n        clazz.ctorParameters = ctorParameters;\n    }\n    if (propDecorators !== null) {\n        // The property decorator objects are merged as it is possible different fields have different\n        // decorator types. Decorators on individual fields are not merged, as it's also incredibly\n        // unlikely that a field will be decorated both with an Angular decorator and a non-Angular\n        // decorator that's also been downleveled.\n        if (clazz.propDecorators !== undefined) {\n            clazz.propDecorators = tslib_1.__assign({}, clazz.propDecorators, propDecorators);\n        }\n        else {\n            clazz.propDecorators = propDecorators;\n        }\n    }\n}\n//# sourceMappingURL=metadata.js.map"]}